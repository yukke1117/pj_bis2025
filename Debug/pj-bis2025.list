
pj-bis2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a300  08000234  08000234  00001234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00017120  0800a534  0800a534  0000b534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08021654  08021654  0002307c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08021654  08021654  00022654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802165c  0802165c  0002307c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802165c  0802165c  0002265c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08021660  08021660  00022660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08021664  00023000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e8  2000007c  080216e0  0002307c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000564  080216e0  00023564  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0002307c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025bcd  00000000  00000000  000230b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004251  00000000  00000000  00048c7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c10  00000000  00000000  0004ced0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00033033  00000000  00000000  0004eae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000220bc  00000000  00000000  00081b13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00141646  00000000  00000000  000a3bcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  001e5215  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00001585  00000000  00000000  001e5258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008368  00000000  00000000  001e67e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  001eeb48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000234 <__do_global_dtors_aux>:
 8000234:	b510      	push	{r4, lr}
 8000236:	4c05      	ldr	r4, [pc, #20]	@ (800024c <__do_global_dtors_aux+0x18>)
 8000238:	7823      	ldrb	r3, [r4, #0]
 800023a:	b933      	cbnz	r3, 800024a <__do_global_dtors_aux+0x16>
 800023c:	4b04      	ldr	r3, [pc, #16]	@ (8000250 <__do_global_dtors_aux+0x1c>)
 800023e:	b113      	cbz	r3, 8000246 <__do_global_dtors_aux+0x12>
 8000240:	4804      	ldr	r0, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x20>)
 8000242:	f3af 8000 	nop.w
 8000246:	2301      	movs	r3, #1
 8000248:	7023      	strb	r3, [r4, #0]
 800024a:	bd10      	pop	{r4, pc}
 800024c:	2000007c 	.word	0x2000007c
 8000250:	00000000 	.word	0x00000000
 8000254:	0800a51c 	.word	0x0800a51c

08000258 <frame_dummy>:
 8000258:	b508      	push	{r3, lr}
 800025a:	4b03      	ldr	r3, [pc, #12]	@ (8000268 <frame_dummy+0x10>)
 800025c:	b11b      	cbz	r3, 8000266 <frame_dummy+0xe>
 800025e:	4903      	ldr	r1, [pc, #12]	@ (800026c <frame_dummy+0x14>)
 8000260:	4803      	ldr	r0, [pc, #12]	@ (8000270 <frame_dummy+0x18>)
 8000262:	f3af 8000 	nop.w
 8000266:	bd08      	pop	{r3, pc}
 8000268:	00000000 	.word	0x00000000
 800026c:	20000080 	.word	0x20000080
 8000270:	0800a51c 	.word	0x0800a51c

08000274 <strlen>:
 8000274:	4603      	mov	r3, r0
 8000276:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027a:	2a00      	cmp	r2, #0
 800027c:	d1fb      	bne.n	8000276 <strlen+0x2>
 800027e:	1a18      	subs	r0, r3, r0
 8000280:	3801      	subs	r0, #1
 8000282:	4770      	bx	lr

08000284 <__aeabi_drsub>:
 8000284:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000288:	e002      	b.n	8000290 <__adddf3>
 800028a:	bf00      	nop

0800028c <__aeabi_dsub>:
 800028c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000290 <__adddf3>:
 8000290:	b530      	push	{r4, r5, lr}
 8000292:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000296:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800029a:	ea94 0f05 	teq	r4, r5
 800029e:	bf08      	it	eq
 80002a0:	ea90 0f02 	teqeq	r0, r2
 80002a4:	bf1f      	itttt	ne
 80002a6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002aa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002b2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b6:	f000 80e2 	beq.w	800047e <__adddf3+0x1ee>
 80002ba:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002be:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002c2:	bfb8      	it	lt
 80002c4:	426d      	neglt	r5, r5
 80002c6:	dd0c      	ble.n	80002e2 <__adddf3+0x52>
 80002c8:	442c      	add	r4, r5
 80002ca:	ea80 0202 	eor.w	r2, r0, r2
 80002ce:	ea81 0303 	eor.w	r3, r1, r3
 80002d2:	ea82 0000 	eor.w	r0, r2, r0
 80002d6:	ea83 0101 	eor.w	r1, r3, r1
 80002da:	ea80 0202 	eor.w	r2, r0, r2
 80002de:	ea81 0303 	eor.w	r3, r1, r3
 80002e2:	2d36      	cmp	r5, #54	@ 0x36
 80002e4:	bf88      	it	hi
 80002e6:	bd30      	pophi	{r4, r5, pc}
 80002e8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002f0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x70>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000304:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000308:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800030c:	d002      	beq.n	8000314 <__adddf3+0x84>
 800030e:	4252      	negs	r2, r2
 8000310:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000314:	ea94 0f05 	teq	r4, r5
 8000318:	f000 80a7 	beq.w	800046a <__adddf3+0x1da>
 800031c:	f1a4 0401 	sub.w	r4, r4, #1
 8000320:	f1d5 0e20 	rsbs	lr, r5, #32
 8000324:	db0d      	blt.n	8000342 <__adddf3+0xb2>
 8000326:	fa02 fc0e 	lsl.w	ip, r2, lr
 800032a:	fa22 f205 	lsr.w	r2, r2, r5
 800032e:	1880      	adds	r0, r0, r2
 8000330:	f141 0100 	adc.w	r1, r1, #0
 8000334:	fa03 f20e 	lsl.w	r2, r3, lr
 8000338:	1880      	adds	r0, r0, r2
 800033a:	fa43 f305 	asr.w	r3, r3, r5
 800033e:	4159      	adcs	r1, r3
 8000340:	e00e      	b.n	8000360 <__adddf3+0xd0>
 8000342:	f1a5 0520 	sub.w	r5, r5, #32
 8000346:	f10e 0e20 	add.w	lr, lr, #32
 800034a:	2a01      	cmp	r2, #1
 800034c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000350:	bf28      	it	cs
 8000352:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	18c0      	adds	r0, r0, r3
 800035c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000360:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000364:	d507      	bpl.n	8000376 <__adddf3+0xe6>
 8000366:	f04f 0e00 	mov.w	lr, #0
 800036a:	f1dc 0c00 	rsbs	ip, ip, #0
 800036e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000372:	eb6e 0101 	sbc.w	r1, lr, r1
 8000376:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800037a:	d31b      	bcc.n	80003b4 <__adddf3+0x124>
 800037c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000380:	d30c      	bcc.n	800039c <__adddf3+0x10c>
 8000382:	0849      	lsrs	r1, r1, #1
 8000384:	ea5f 0030 	movs.w	r0, r0, rrx
 8000388:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800038c:	f104 0401 	add.w	r4, r4, #1
 8000390:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000394:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000398:	f080 809a 	bcs.w	80004d0 <__adddf3+0x240>
 800039c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003a0:	bf08      	it	eq
 80003a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a6:	f150 0000 	adcs.w	r0, r0, #0
 80003aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ae:	ea41 0105 	orr.w	r1, r1, r5
 80003b2:	bd30      	pop	{r4, r5, pc}
 80003b4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b8:	4140      	adcs	r0, r0
 80003ba:	eb41 0101 	adc.w	r1, r1, r1
 80003be:	3c01      	subs	r4, #1
 80003c0:	bf28      	it	cs
 80003c2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c6:	d2e9      	bcs.n	800039c <__adddf3+0x10c>
 80003c8:	f091 0f00 	teq	r1, #0
 80003cc:	bf04      	itt	eq
 80003ce:	4601      	moveq	r1, r0
 80003d0:	2000      	moveq	r0, #0
 80003d2:	fab1 f381 	clz	r3, r1
 80003d6:	bf08      	it	eq
 80003d8:	3320      	addeq	r3, #32
 80003da:	f1a3 030b 	sub.w	r3, r3, #11
 80003de:	f1b3 0220 	subs.w	r2, r3, #32
 80003e2:	da0c      	bge.n	80003fe <__adddf3+0x16e>
 80003e4:	320c      	adds	r2, #12
 80003e6:	dd08      	ble.n	80003fa <__adddf3+0x16a>
 80003e8:	f102 0c14 	add.w	ip, r2, #20
 80003ec:	f1c2 020c 	rsb	r2, r2, #12
 80003f0:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f4:	fa21 f102 	lsr.w	r1, r1, r2
 80003f8:	e00c      	b.n	8000414 <__adddf3+0x184>
 80003fa:	f102 0214 	add.w	r2, r2, #20
 80003fe:	bfd8      	it	le
 8000400:	f1c2 0c20 	rsble	ip, r2, #32
 8000404:	fa01 f102 	lsl.w	r1, r1, r2
 8000408:	fa20 fc0c 	lsr.w	ip, r0, ip
 800040c:	bfdc      	itt	le
 800040e:	ea41 010c 	orrle.w	r1, r1, ip
 8000412:	4090      	lslle	r0, r2
 8000414:	1ae4      	subs	r4, r4, r3
 8000416:	bfa2      	ittt	ge
 8000418:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800041c:	4329      	orrge	r1, r5
 800041e:	bd30      	popge	{r4, r5, pc}
 8000420:	ea6f 0404 	mvn.w	r4, r4
 8000424:	3c1f      	subs	r4, #31
 8000426:	da1c      	bge.n	8000462 <__adddf3+0x1d2>
 8000428:	340c      	adds	r4, #12
 800042a:	dc0e      	bgt.n	800044a <__adddf3+0x1ba>
 800042c:	f104 0414 	add.w	r4, r4, #20
 8000430:	f1c4 0220 	rsb	r2, r4, #32
 8000434:	fa20 f004 	lsr.w	r0, r0, r4
 8000438:	fa01 f302 	lsl.w	r3, r1, r2
 800043c:	ea40 0003 	orr.w	r0, r0, r3
 8000440:	fa21 f304 	lsr.w	r3, r1, r4
 8000444:	ea45 0103 	orr.w	r1, r5, r3
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	f1c4 040c 	rsb	r4, r4, #12
 800044e:	f1c4 0220 	rsb	r2, r4, #32
 8000452:	fa20 f002 	lsr.w	r0, r0, r2
 8000456:	fa01 f304 	lsl.w	r3, r1, r4
 800045a:	ea40 0003 	orr.w	r0, r0, r3
 800045e:	4629      	mov	r1, r5
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	fa21 f004 	lsr.w	r0, r1, r4
 8000466:	4629      	mov	r1, r5
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	f094 0f00 	teq	r4, #0
 800046e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000472:	bf06      	itte	eq
 8000474:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000478:	3401      	addeq	r4, #1
 800047a:	3d01      	subne	r5, #1
 800047c:	e74e      	b.n	800031c <__adddf3+0x8c>
 800047e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000482:	bf18      	it	ne
 8000484:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000488:	d029      	beq.n	80004de <__adddf3+0x24e>
 800048a:	ea94 0f05 	teq	r4, r5
 800048e:	bf08      	it	eq
 8000490:	ea90 0f02 	teqeq	r0, r2
 8000494:	d005      	beq.n	80004a2 <__adddf3+0x212>
 8000496:	ea54 0c00 	orrs.w	ip, r4, r0
 800049a:	bf04      	itt	eq
 800049c:	4619      	moveq	r1, r3
 800049e:	4610      	moveq	r0, r2
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	ea91 0f03 	teq	r1, r3
 80004a6:	bf1e      	ittt	ne
 80004a8:	2100      	movne	r1, #0
 80004aa:	2000      	movne	r0, #0
 80004ac:	bd30      	popne	{r4, r5, pc}
 80004ae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004b2:	d105      	bne.n	80004c0 <__adddf3+0x230>
 80004b4:	0040      	lsls	r0, r0, #1
 80004b6:	4149      	adcs	r1, r1
 80004b8:	bf28      	it	cs
 80004ba:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c4:	bf3c      	itt	cc
 80004c6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004ca:	bd30      	popcc	{r4, r5, pc}
 80004cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d8:	f04f 0000 	mov.w	r0, #0
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e2:	bf1a      	itte	ne
 80004e4:	4619      	movne	r1, r3
 80004e6:	4610      	movne	r0, r2
 80004e8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004ec:	bf1c      	itt	ne
 80004ee:	460b      	movne	r3, r1
 80004f0:	4602      	movne	r2, r0
 80004f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f6:	bf06      	itte	eq
 80004f8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004fc:	ea91 0f03 	teqeq	r1, r3
 8000500:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000504:	bd30      	pop	{r4, r5, pc}
 8000506:	bf00      	nop

08000508 <__aeabi_ui2d>:
 8000508:	f090 0f00 	teq	r0, #0
 800050c:	bf04      	itt	eq
 800050e:	2100      	moveq	r1, #0
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000518:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800051c:	f04f 0500 	mov.w	r5, #0
 8000520:	f04f 0100 	mov.w	r1, #0
 8000524:	e750      	b.n	80003c8 <__adddf3+0x138>
 8000526:	bf00      	nop

08000528 <__aeabi_i2d>:
 8000528:	f090 0f00 	teq	r0, #0
 800052c:	bf04      	itt	eq
 800052e:	2100      	moveq	r1, #0
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000538:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800053c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000540:	bf48      	it	mi
 8000542:	4240      	negmi	r0, r0
 8000544:	f04f 0100 	mov.w	r1, #0
 8000548:	e73e      	b.n	80003c8 <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_f2d>:
 800054c:	0042      	lsls	r2, r0, #1
 800054e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000552:	ea4f 0131 	mov.w	r1, r1, rrx
 8000556:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800055a:	bf1f      	itttt	ne
 800055c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000560:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000564:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000568:	4770      	bxne	lr
 800056a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056e:	bf08      	it	eq
 8000570:	4770      	bxeq	lr
 8000572:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000576:	bf04      	itt	eq
 8000578:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000584:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000588:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800058c:	e71c      	b.n	80003c8 <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_ul2d>:
 8000590:	ea50 0201 	orrs.w	r2, r0, r1
 8000594:	bf08      	it	eq
 8000596:	4770      	bxeq	lr
 8000598:	b530      	push	{r4, r5, lr}
 800059a:	f04f 0500 	mov.w	r5, #0
 800059e:	e00a      	b.n	80005b6 <__aeabi_l2d+0x16>

080005a0 <__aeabi_l2d>:
 80005a0:	ea50 0201 	orrs.w	r2, r0, r1
 80005a4:	bf08      	it	eq
 80005a6:	4770      	bxeq	lr
 80005a8:	b530      	push	{r4, r5, lr}
 80005aa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ae:	d502      	bpl.n	80005b6 <__aeabi_l2d+0x16>
 80005b0:	4240      	negs	r0, r0
 80005b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005ba:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005be:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c2:	f43f aed8 	beq.w	8000376 <__adddf3+0xe6>
 80005c6:	f04f 0203 	mov.w	r2, #3
 80005ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ce:	bf18      	it	ne
 80005d0:	3203      	addne	r2, #3
 80005d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d6:	bf18      	it	ne
 80005d8:	3203      	addne	r2, #3
 80005da:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005de:	f1c2 0320 	rsb	r3, r2, #32
 80005e2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e6:	fa20 f002 	lsr.w	r0, r0, r2
 80005ea:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ee:	ea40 000e 	orr.w	r0, r0, lr
 80005f2:	fa21 f102 	lsr.w	r1, r1, r2
 80005f6:	4414      	add	r4, r2
 80005f8:	e6bd      	b.n	8000376 <__adddf3+0xe6>
 80005fa:	bf00      	nop

080005fc <__aeabi_uldivmod>:
 80005fc:	b953      	cbnz	r3, 8000614 <__aeabi_uldivmod+0x18>
 80005fe:	b94a      	cbnz	r2, 8000614 <__aeabi_uldivmod+0x18>
 8000600:	2900      	cmp	r1, #0
 8000602:	bf08      	it	eq
 8000604:	2800      	cmpeq	r0, #0
 8000606:	bf1c      	itt	ne
 8000608:	f04f 31ff 	movne.w	r1, #4294967295
 800060c:	f04f 30ff 	movne.w	r0, #4294967295
 8000610:	f000 b9b0 	b.w	8000974 <__aeabi_idiv0>
 8000614:	f1ad 0c08 	sub.w	ip, sp, #8
 8000618:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800061c:	f000 f806 	bl	800062c <__udivmoddi4>
 8000620:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000624:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000628:	b004      	add	sp, #16
 800062a:	4770      	bx	lr

0800062c <__udivmoddi4>:
 800062c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000630:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000632:	4688      	mov	r8, r1
 8000634:	4604      	mov	r4, r0
 8000636:	468e      	mov	lr, r1
 8000638:	2b00      	cmp	r3, #0
 800063a:	d14a      	bne.n	80006d2 <__udivmoddi4+0xa6>
 800063c:	428a      	cmp	r2, r1
 800063e:	4617      	mov	r7, r2
 8000640:	d95f      	bls.n	8000702 <__udivmoddi4+0xd6>
 8000642:	fab2 f682 	clz	r6, r2
 8000646:	b14e      	cbz	r6, 800065c <__udivmoddi4+0x30>
 8000648:	f1c6 0320 	rsb	r3, r6, #32
 800064c:	fa01 fe06 	lsl.w	lr, r1, r6
 8000650:	40b7      	lsls	r7, r6
 8000652:	40b4      	lsls	r4, r6
 8000654:	fa20 f303 	lsr.w	r3, r0, r3
 8000658:	ea43 0e0e 	orr.w	lr, r3, lr
 800065c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000660:	fa1f fc87 	uxth.w	ip, r7
 8000664:	0c23      	lsrs	r3, r4, #16
 8000666:	fbbe f1f8 	udiv	r1, lr, r8
 800066a:	fb08 ee11 	mls	lr, r8, r1, lr
 800066e:	fb01 f20c 	mul.w	r2, r1, ip
 8000672:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000676:	429a      	cmp	r2, r3
 8000678:	d907      	bls.n	800068a <__udivmoddi4+0x5e>
 800067a:	18fb      	adds	r3, r7, r3
 800067c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000680:	d202      	bcs.n	8000688 <__udivmoddi4+0x5c>
 8000682:	429a      	cmp	r2, r3
 8000684:	f200 8154 	bhi.w	8000930 <__udivmoddi4+0x304>
 8000688:	4601      	mov	r1, r0
 800068a:	1a9b      	subs	r3, r3, r2
 800068c:	b2a2      	uxth	r2, r4
 800068e:	fbb3 f0f8 	udiv	r0, r3, r8
 8000692:	fb08 3310 	mls	r3, r8, r0, r3
 8000696:	fb00 fc0c 	mul.w	ip, r0, ip
 800069a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800069e:	4594      	cmp	ip, r2
 80006a0:	d90b      	bls.n	80006ba <__udivmoddi4+0x8e>
 80006a2:	18ba      	adds	r2, r7, r2
 80006a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80006a8:	bf2c      	ite	cs
 80006aa:	2401      	movcs	r4, #1
 80006ac:	2400      	movcc	r4, #0
 80006ae:	4594      	cmp	ip, r2
 80006b0:	d902      	bls.n	80006b8 <__udivmoddi4+0x8c>
 80006b2:	2c00      	cmp	r4, #0
 80006b4:	f000 813f 	beq.w	8000936 <__udivmoddi4+0x30a>
 80006b8:	4618      	mov	r0, r3
 80006ba:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80006be:	eba2 020c 	sub.w	r2, r2, ip
 80006c2:	2100      	movs	r1, #0
 80006c4:	b11d      	cbz	r5, 80006ce <__udivmoddi4+0xa2>
 80006c6:	40f2      	lsrs	r2, r6
 80006c8:	2300      	movs	r3, #0
 80006ca:	e9c5 2300 	strd	r2, r3, [r5]
 80006ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80006d2:	428b      	cmp	r3, r1
 80006d4:	d905      	bls.n	80006e2 <__udivmoddi4+0xb6>
 80006d6:	b10d      	cbz	r5, 80006dc <__udivmoddi4+0xb0>
 80006d8:	e9c5 0100 	strd	r0, r1, [r5]
 80006dc:	2100      	movs	r1, #0
 80006de:	4608      	mov	r0, r1
 80006e0:	e7f5      	b.n	80006ce <__udivmoddi4+0xa2>
 80006e2:	fab3 f183 	clz	r1, r3
 80006e6:	2900      	cmp	r1, #0
 80006e8:	d14e      	bne.n	8000788 <__udivmoddi4+0x15c>
 80006ea:	4543      	cmp	r3, r8
 80006ec:	f0c0 8112 	bcc.w	8000914 <__udivmoddi4+0x2e8>
 80006f0:	4282      	cmp	r2, r0
 80006f2:	f240 810f 	bls.w	8000914 <__udivmoddi4+0x2e8>
 80006f6:	4608      	mov	r0, r1
 80006f8:	2d00      	cmp	r5, #0
 80006fa:	d0e8      	beq.n	80006ce <__udivmoddi4+0xa2>
 80006fc:	e9c5 4e00 	strd	r4, lr, [r5]
 8000700:	e7e5      	b.n	80006ce <__udivmoddi4+0xa2>
 8000702:	2a00      	cmp	r2, #0
 8000704:	f000 80ac 	beq.w	8000860 <__udivmoddi4+0x234>
 8000708:	fab2 f682 	clz	r6, r2
 800070c:	2e00      	cmp	r6, #0
 800070e:	f040 80bb 	bne.w	8000888 <__udivmoddi4+0x25c>
 8000712:	1a8b      	subs	r3, r1, r2
 8000714:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000718:	b2bc      	uxth	r4, r7
 800071a:	2101      	movs	r1, #1
 800071c:	0c02      	lsrs	r2, r0, #16
 800071e:	b280      	uxth	r0, r0
 8000720:	fbb3 fcfe 	udiv	ip, r3, lr
 8000724:	fb0e 331c 	mls	r3, lr, ip, r3
 8000728:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 800072c:	fb04 f20c 	mul.w	r2, r4, ip
 8000730:	429a      	cmp	r2, r3
 8000732:	d90e      	bls.n	8000752 <__udivmoddi4+0x126>
 8000734:	18fb      	adds	r3, r7, r3
 8000736:	f10c 38ff 	add.w	r8, ip, #4294967295
 800073a:	bf2c      	ite	cs
 800073c:	f04f 0901 	movcs.w	r9, #1
 8000740:	f04f 0900 	movcc.w	r9, #0
 8000744:	429a      	cmp	r2, r3
 8000746:	d903      	bls.n	8000750 <__udivmoddi4+0x124>
 8000748:	f1b9 0f00 	cmp.w	r9, #0
 800074c:	f000 80ec 	beq.w	8000928 <__udivmoddi4+0x2fc>
 8000750:	46c4      	mov	ip, r8
 8000752:	1a9b      	subs	r3, r3, r2
 8000754:	fbb3 f8fe 	udiv	r8, r3, lr
 8000758:	fb0e 3318 	mls	r3, lr, r8, r3
 800075c:	fb04 f408 	mul.w	r4, r4, r8
 8000760:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 8000764:	4294      	cmp	r4, r2
 8000766:	d90b      	bls.n	8000780 <__udivmoddi4+0x154>
 8000768:	18ba      	adds	r2, r7, r2
 800076a:	f108 33ff 	add.w	r3, r8, #4294967295
 800076e:	bf2c      	ite	cs
 8000770:	2001      	movcs	r0, #1
 8000772:	2000      	movcc	r0, #0
 8000774:	4294      	cmp	r4, r2
 8000776:	d902      	bls.n	800077e <__udivmoddi4+0x152>
 8000778:	2800      	cmp	r0, #0
 800077a:	f000 80d1 	beq.w	8000920 <__udivmoddi4+0x2f4>
 800077e:	4698      	mov	r8, r3
 8000780:	1b12      	subs	r2, r2, r4
 8000782:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 8000786:	e79d      	b.n	80006c4 <__udivmoddi4+0x98>
 8000788:	f1c1 0620 	rsb	r6, r1, #32
 800078c:	408b      	lsls	r3, r1
 800078e:	fa08 f401 	lsl.w	r4, r8, r1
 8000792:	fa00 f901 	lsl.w	r9, r0, r1
 8000796:	fa22 f706 	lsr.w	r7, r2, r6
 800079a:	fa28 f806 	lsr.w	r8, r8, r6
 800079e:	408a      	lsls	r2, r1
 80007a0:	431f      	orrs	r7, r3
 80007a2:	fa20 f306 	lsr.w	r3, r0, r6
 80007a6:	0c38      	lsrs	r0, r7, #16
 80007a8:	4323      	orrs	r3, r4
 80007aa:	fa1f fc87 	uxth.w	ip, r7
 80007ae:	0c1c      	lsrs	r4, r3, #16
 80007b0:	fbb8 fef0 	udiv	lr, r8, r0
 80007b4:	fb00 881e 	mls	r8, r0, lr, r8
 80007b8:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 80007bc:	fb0e f80c 	mul.w	r8, lr, ip
 80007c0:	45a0      	cmp	r8, r4
 80007c2:	d90e      	bls.n	80007e2 <__udivmoddi4+0x1b6>
 80007c4:	193c      	adds	r4, r7, r4
 80007c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80007ca:	bf2c      	ite	cs
 80007cc:	f04f 0b01 	movcs.w	fp, #1
 80007d0:	f04f 0b00 	movcc.w	fp, #0
 80007d4:	45a0      	cmp	r8, r4
 80007d6:	d903      	bls.n	80007e0 <__udivmoddi4+0x1b4>
 80007d8:	f1bb 0f00 	cmp.w	fp, #0
 80007dc:	f000 80b8 	beq.w	8000950 <__udivmoddi4+0x324>
 80007e0:	46d6      	mov	lr, sl
 80007e2:	eba4 0408 	sub.w	r4, r4, r8
 80007e6:	fa1f f883 	uxth.w	r8, r3
 80007ea:	fbb4 f3f0 	udiv	r3, r4, r0
 80007ee:	fb00 4413 	mls	r4, r0, r3, r4
 80007f2:	fb03 fc0c 	mul.w	ip, r3, ip
 80007f6:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 80007fa:	45a4      	cmp	ip, r4
 80007fc:	d90e      	bls.n	800081c <__udivmoddi4+0x1f0>
 80007fe:	193c      	adds	r4, r7, r4
 8000800:	f103 30ff 	add.w	r0, r3, #4294967295
 8000804:	bf2c      	ite	cs
 8000806:	f04f 0801 	movcs.w	r8, #1
 800080a:	f04f 0800 	movcc.w	r8, #0
 800080e:	45a4      	cmp	ip, r4
 8000810:	d903      	bls.n	800081a <__udivmoddi4+0x1ee>
 8000812:	f1b8 0f00 	cmp.w	r8, #0
 8000816:	f000 809f 	beq.w	8000958 <__udivmoddi4+0x32c>
 800081a:	4603      	mov	r3, r0
 800081c:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000820:	eba4 040c 	sub.w	r4, r4, ip
 8000824:	fba0 ec02 	umull	lr, ip, r0, r2
 8000828:	4564      	cmp	r4, ip
 800082a:	4673      	mov	r3, lr
 800082c:	46e0      	mov	r8, ip
 800082e:	d302      	bcc.n	8000836 <__udivmoddi4+0x20a>
 8000830:	d107      	bne.n	8000842 <__udivmoddi4+0x216>
 8000832:	45f1      	cmp	r9, lr
 8000834:	d205      	bcs.n	8000842 <__udivmoddi4+0x216>
 8000836:	ebbe 0302 	subs.w	r3, lr, r2
 800083a:	eb6c 0c07 	sbc.w	ip, ip, r7
 800083e:	3801      	subs	r0, #1
 8000840:	46e0      	mov	r8, ip
 8000842:	b15d      	cbz	r5, 800085c <__udivmoddi4+0x230>
 8000844:	ebb9 0203 	subs.w	r2, r9, r3
 8000848:	eb64 0408 	sbc.w	r4, r4, r8
 800084c:	fa04 f606 	lsl.w	r6, r4, r6
 8000850:	fa22 f301 	lsr.w	r3, r2, r1
 8000854:	40cc      	lsrs	r4, r1
 8000856:	431e      	orrs	r6, r3
 8000858:	e9c5 6400 	strd	r6, r4, [r5]
 800085c:	2100      	movs	r1, #0
 800085e:	e736      	b.n	80006ce <__udivmoddi4+0xa2>
 8000860:	fbb1 fcf2 	udiv	ip, r1, r2
 8000864:	0c01      	lsrs	r1, r0, #16
 8000866:	4614      	mov	r4, r2
 8000868:	b280      	uxth	r0, r0
 800086a:	4696      	mov	lr, r2
 800086c:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000870:	2620      	movs	r6, #32
 8000872:	4690      	mov	r8, r2
 8000874:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8000878:	4610      	mov	r0, r2
 800087a:	fbb1 f1f2 	udiv	r1, r1, r2
 800087e:	eba3 0308 	sub.w	r3, r3, r8
 8000882:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000886:	e74b      	b.n	8000720 <__udivmoddi4+0xf4>
 8000888:	40b7      	lsls	r7, r6
 800088a:	f1c6 0320 	rsb	r3, r6, #32
 800088e:	fa01 f206 	lsl.w	r2, r1, r6
 8000892:	fa21 f803 	lsr.w	r8, r1, r3
 8000896:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800089a:	fa20 f303 	lsr.w	r3, r0, r3
 800089e:	b2bc      	uxth	r4, r7
 80008a0:	40b0      	lsls	r0, r6
 80008a2:	4313      	orrs	r3, r2
 80008a4:	0c02      	lsrs	r2, r0, #16
 80008a6:	0c19      	lsrs	r1, r3, #16
 80008a8:	b280      	uxth	r0, r0
 80008aa:	fbb8 f9fe 	udiv	r9, r8, lr
 80008ae:	fb0e 8819 	mls	r8, lr, r9, r8
 80008b2:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80008b6:	fb09 f804 	mul.w	r8, r9, r4
 80008ba:	4588      	cmp	r8, r1
 80008bc:	d951      	bls.n	8000962 <__udivmoddi4+0x336>
 80008be:	1879      	adds	r1, r7, r1
 80008c0:	f109 3cff 	add.w	ip, r9, #4294967295
 80008c4:	bf2c      	ite	cs
 80008c6:	f04f 0a01 	movcs.w	sl, #1
 80008ca:	f04f 0a00 	movcc.w	sl, #0
 80008ce:	4588      	cmp	r8, r1
 80008d0:	d902      	bls.n	80008d8 <__udivmoddi4+0x2ac>
 80008d2:	f1ba 0f00 	cmp.w	sl, #0
 80008d6:	d031      	beq.n	800093c <__udivmoddi4+0x310>
 80008d8:	eba1 0108 	sub.w	r1, r1, r8
 80008dc:	fbb1 f9fe 	udiv	r9, r1, lr
 80008e0:	fb09 f804 	mul.w	r8, r9, r4
 80008e4:	fb0e 1119 	mls	r1, lr, r9, r1
 80008e8:	b29b      	uxth	r3, r3
 80008ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008ee:	4543      	cmp	r3, r8
 80008f0:	d235      	bcs.n	800095e <__udivmoddi4+0x332>
 80008f2:	18fb      	adds	r3, r7, r3
 80008f4:	f109 31ff 	add.w	r1, r9, #4294967295
 80008f8:	bf2c      	ite	cs
 80008fa:	f04f 0a01 	movcs.w	sl, #1
 80008fe:	f04f 0a00 	movcc.w	sl, #0
 8000902:	4543      	cmp	r3, r8
 8000904:	d2bb      	bcs.n	800087e <__udivmoddi4+0x252>
 8000906:	f1ba 0f00 	cmp.w	sl, #0
 800090a:	d1b8      	bne.n	800087e <__udivmoddi4+0x252>
 800090c:	f1a9 0102 	sub.w	r1, r9, #2
 8000910:	443b      	add	r3, r7
 8000912:	e7b4      	b.n	800087e <__udivmoddi4+0x252>
 8000914:	1a84      	subs	r4, r0, r2
 8000916:	eb68 0203 	sbc.w	r2, r8, r3
 800091a:	2001      	movs	r0, #1
 800091c:	4696      	mov	lr, r2
 800091e:	e6eb      	b.n	80006f8 <__udivmoddi4+0xcc>
 8000920:	443a      	add	r2, r7
 8000922:	f1a8 0802 	sub.w	r8, r8, #2
 8000926:	e72b      	b.n	8000780 <__udivmoddi4+0x154>
 8000928:	f1ac 0c02 	sub.w	ip, ip, #2
 800092c:	443b      	add	r3, r7
 800092e:	e710      	b.n	8000752 <__udivmoddi4+0x126>
 8000930:	3902      	subs	r1, #2
 8000932:	443b      	add	r3, r7
 8000934:	e6a9      	b.n	800068a <__udivmoddi4+0x5e>
 8000936:	443a      	add	r2, r7
 8000938:	3802      	subs	r0, #2
 800093a:	e6be      	b.n	80006ba <__udivmoddi4+0x8e>
 800093c:	eba7 0808 	sub.w	r8, r7, r8
 8000940:	f1a9 0c02 	sub.w	ip, r9, #2
 8000944:	4441      	add	r1, r8
 8000946:	fbb1 f9fe 	udiv	r9, r1, lr
 800094a:	fb09 f804 	mul.w	r8, r9, r4
 800094e:	e7c9      	b.n	80008e4 <__udivmoddi4+0x2b8>
 8000950:	f1ae 0e02 	sub.w	lr, lr, #2
 8000954:	443c      	add	r4, r7
 8000956:	e744      	b.n	80007e2 <__udivmoddi4+0x1b6>
 8000958:	3b02      	subs	r3, #2
 800095a:	443c      	add	r4, r7
 800095c:	e75e      	b.n	800081c <__udivmoddi4+0x1f0>
 800095e:	4649      	mov	r1, r9
 8000960:	e78d      	b.n	800087e <__udivmoddi4+0x252>
 8000962:	eba1 0108 	sub.w	r1, r1, r8
 8000966:	46cc      	mov	ip, r9
 8000968:	fbb1 f9fe 	udiv	r9, r1, lr
 800096c:	fb09 f804 	mul.w	r8, r9, r4
 8000970:	e7b8      	b.n	80008e4 <__udivmoddi4+0x2b8>
 8000972:	bf00      	nop

08000974 <__aeabi_idiv0>:
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <LCD_SELECT>:
#define LCD_DISP_GPIO_Port GPIOC
#define LCD_DISP_Pin       GPIO_PIN_10
#define HDR4BIT   0x24

/* 内部ヘルパ */
static inline void LCD_SELECT  (void){ HAL_GPIO_WritePin(LCD_CS_GPIO_Port,  LCD_CS_Pin, GPIO_PIN_SET); }
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
 800097c:	2201      	movs	r2, #1
 800097e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000982:	4802      	ldr	r0, [pc, #8]	@ (800098c <LCD_SELECT+0x14>)
 8000984:	f003 ff02 	bl	800478c <HAL_GPIO_WritePin>
 8000988:	bf00      	nop
 800098a:	bd80      	pop	{r7, pc}
 800098c:	42020800 	.word	0x42020800

08000990 <LCD_UNSELECT>:
static inline void LCD_UNSELECT(void){ HAL_GPIO_WritePin(LCD_CS_GPIO_Port,  LCD_CS_Pin, GPIO_PIN_RESET);   }
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
 8000994:	2200      	movs	r2, #0
 8000996:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800099a:	4802      	ldr	r0, [pc, #8]	@ (80009a4 <LCD_UNSELECT+0x14>)
 800099c:	f003 fef6 	bl	800478c <HAL_GPIO_WritePin>
 80009a0:	bf00      	nop
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	42020800 	.word	0x42020800

080009a8 <lcd_tx>:
static inline void lcd_tx(const uint8_t *p, size_t len){
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
 80009b0:	6039      	str	r1, [r7, #0]
    HAL_SPI_Transmit(&hspi1, (uint8_t*)p, len, HAL_MAX_DELAY);
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	b29a      	uxth	r2, r3
 80009b6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ba:	6879      	ldr	r1, [r7, #4]
 80009bc:	4803      	ldr	r0, [pc, #12]	@ (80009cc <lcd_tx+0x24>)
 80009be:	f005 fe67 	bl	8006690 <HAL_SPI_Transmit>
}
 80009c2:	bf00      	nop
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	2000015c 	.word	0x2000015c

080009d0 <LCD_Init>:

/* --- Public API ------------------------------------------------- */
void LCD_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
    /* ハードリセット相当 */
    HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_RESET);
 80009d4:	2200      	movs	r2, #0
 80009d6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009da:	4809      	ldr	r0, [pc, #36]	@ (8000a00 <LCD_Init+0x30>)
 80009dc:	f003 fed6 	bl	800478c <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80009e0:	2001      	movs	r0, #1
 80009e2:	f001 fe59 	bl	8002698 <HAL_Delay>
    HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80009e6:	2201      	movs	r2, #1
 80009e8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009ec:	4804      	ldr	r0, [pc, #16]	@ (8000a00 <LCD_Init+0x30>)
 80009ee:	f003 fecd 	bl	800478c <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80009f2:	200a      	movs	r0, #10
 80009f4:	f001 fe50 	bl	8002698 <HAL_Delay>

    LCD_AllClear();                      /* メモリ全消去 (CMD 0x20) */
 80009f8:	f000 f804 	bl	8000a04 <LCD_AllClear>
}
 80009fc:	bf00      	nop
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	42020800 	.word	0x42020800

08000a04 <LCD_AllClear>:

void LCD_AllClear(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
    const uint8_t cmd = 0x20;            /* ALL CLEAR */
 8000a0a:	2320      	movs	r3, #32
 8000a0c:	71fb      	strb	r3, [r7, #7]
    LCD_SELECT();
 8000a0e:	f7ff ffb3 	bl	8000978 <LCD_SELECT>
    lcd_tx(&cmd, 1);
 8000a12:	1dfb      	adds	r3, r7, #7
 8000a14:	2101      	movs	r1, #1
 8000a16:	4618      	mov	r0, r3
 8000a18:	f7ff ffc6 	bl	80009a8 <lcd_tx>
    LCD_UNSELECT();
 8000a1c:	f7ff ffb8 	bl	8000990 <LCD_UNSELECT>
}
 8000a20:	bf00      	nop
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <LCD_SendLine4bit>:

void LCD_SendLine4bit(uint16_t y, const uint8_t *buf)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b09a      	sub	sp, #104	@ 0x68
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	6039      	str	r1, [r7, #0]
 8000a32:	80fb      	strh	r3, [r7, #6]
    uint16_t hdr = (HDR4BIT << 10) | (y & 0x03FF);   /* 16‑bit ヘッダ */
 8000a34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000a3c:	b21a      	sxth	r2, r3
 8000a3e:	4b16      	ldr	r3, [pc, #88]	@ (8000a98 <LCD_SendLine4bit+0x70>)
 8000a40:	4313      	orrs	r3, r2
 8000a42:	b21b      	sxth	r3, r3
 8000a44:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
    uint8_t  tx[2 + 88 + 2];                         /* hdr + data + 2B dummy */

    tx[0] = hdr >> 8;         /* MSB first */
 8000a48:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8000a4c:	0a1b      	lsrs	r3, r3, #8
 8000a4e:	b29b      	uxth	r3, r3
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	723b      	strb	r3, [r7, #8]
    tx[1] = hdr & 0xFF;
 8000a54:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	727b      	strb	r3, [r7, #9]
    memcpy(&tx[2], buf, 88);
 8000a5c:	f107 0308 	add.w	r3, r7, #8
 8000a60:	3302      	adds	r3, #2
 8000a62:	2258      	movs	r2, #88	@ 0x58
 8000a64:	6839      	ldr	r1, [r7, #0]
 8000a66:	4618      	mov	r0, r3
 8000a68:	f008 fe8b 	bl	8009782 <memcpy>
    tx[90] = tx[91] = 0x00;   /* 16clk transfer period */
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
 8000a72:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8000a76:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62

    LCD_SELECT();             /* ★ CS = High (SCS=H がアクティブ) */
 8000a7a:	f7ff ff7d 	bl	8000978 <LCD_SELECT>
    lcd_tx(tx, sizeof tx);    /* SPI 8‑bit, ≒20 MHz, MSB first */
 8000a7e:	f107 0308 	add.w	r3, r7, #8
 8000a82:	215c      	movs	r1, #92	@ 0x5c
 8000a84:	4618      	mov	r0, r3
 8000a86:	f7ff ff8f 	bl	80009a8 <lcd_tx>
    LCD_UNSELECT();           /* CS = Low */
 8000a8a:	f7ff ff81 	bl	8000990 <LCD_UNSELECT>
}
 8000a8e:	bf00      	nop
 8000a90:	3768      	adds	r7, #104	@ 0x68
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	ffff9000 	.word	0xffff9000

08000a9c <LCD_DrawString4bit>:
#define PIX_ON   0b1110   /* RGB=111, D=0 → 白 */
#define PIX_OFF  0b0000   /* 黒 */

/* 文字列を y0 行から 8 行ぶん描画（4‑bit data mode） */
void LCD_DrawString4bit(uint16_t y0, const char *str)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b09c      	sub	sp, #112	@ 0x70
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	6039      	str	r1, [r7, #0]
 8000aa6:	80fb      	strh	r3, [r7, #6]
    const uint16_t len   = strlen(str);
 8000aa8:	6838      	ldr	r0, [r7, #0]
 8000aaa:	f7ff fbe3 	bl	8000274 <strlen>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
    const uint16_t xmax  = len * 8;          /* 文字幅(ピクセル) */
 8000ab4:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8000ab8:	00db      	lsls	r3, r3, #3
 8000aba:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
    uint8_t rowbuf[88];                      /* 176px ÷2 = 88B */

    for (uint8_t font_row = 0; font_row < 8; ++font_row) {
 8000abe:	2300      	movs	r3, #0
 8000ac0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8000ac4:	e07f      	b.n	8000bc6 <LCD_DrawString4bit+0x12a>
        /* 1 行分ゼロクリア */
        memset(rowbuf, 0, sizeof rowbuf);
 8000ac6:	f107 0308 	add.w	r3, r7, #8
 8000aca:	2258      	movs	r2, #88	@ 0x58
 8000acc:	2100      	movs	r1, #0
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f008 fddc 	bl	800968c <memset>

        /* 文字→ピクセル→4‑bit パック */
        for (uint16_t x = 0; x < xmax; ++x) {
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8000ada:	e05d      	b.n	8000b98 <LCD_DrawString4bit+0xfc>
            uint8_t ch   = str[x / 8] - 32;      /* ASCII32=space 基点 */
 8000adc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8000ae0:	08db      	lsrs	r3, r3, #3
 8000ae2:	b29b      	uxth	r3, r3
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	4413      	add	r3, r2
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	3b20      	subs	r3, #32
 8000aee:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
            uint8_t bit  = (font8x8_basic[ch][font_row] >> (x % 8)) & 1;
 8000af2:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8000af6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000afa:	4938      	ldr	r1, [pc, #224]	@ (8000bdc <LCD_DrawString4bit+0x140>)
 8000afc:	00d2      	lsls	r2, r2, #3
 8000afe:	440a      	add	r2, r1
 8000b00:	4413      	add	r3, r2
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	461a      	mov	r2, r3
 8000b06:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8000b0a:	f003 0307 	and.w	r3, r3, #7
 8000b0e:	fa42 f303 	asr.w	r3, r2, r3
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	f003 0301 	and.w	r3, r3, #1
 8000b18:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
            uint8_t pix4 = bit ? PIX_ON : PIX_OFF;
 8000b1c:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <LCD_DrawString4bit+0x8c>
 8000b24:	230e      	movs	r3, #14
 8000b26:	e000      	b.n	8000b2a <LCD_DrawString4bit+0x8e>
 8000b28:	2300      	movs	r3, #0
 8000b2a:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

            /* 2 ピクセルで 1 byte：偶数 x を上位 4bit、奇数 x を下位 4bit に */
            uint16_t byte_idx = x / 2;
 8000b2e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8000b32:	085b      	lsrs	r3, r3, #1
 8000b34:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
            if (x & 1)
 8000b38:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8000b3c:	f003 0301 	and.w	r3, r3, #1
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d010      	beq.n	8000b66 <LCD_DrawString4bit+0xca>
                rowbuf[byte_idx]  |= pix4;           /* 下位 nibble */
 8000b44:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8000b48:	3370      	adds	r3, #112	@ 0x70
 8000b4a:	443b      	add	r3, r7
 8000b4c:	f813 1c68 	ldrb.w	r1, [r3, #-104]
 8000b50:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8000b54:	f897 2065 	ldrb.w	r2, [r7, #101]	@ 0x65
 8000b58:	430a      	orrs	r2, r1
 8000b5a:	b2d2      	uxtb	r2, r2
 8000b5c:	3370      	adds	r3, #112	@ 0x70
 8000b5e:	443b      	add	r3, r7
 8000b60:	f803 2c68 	strb.w	r2, [r3, #-104]
 8000b64:	e013      	b.n	8000b8e <LCD_DrawString4bit+0xf2>
            else
                rowbuf[byte_idx]  |= pix4 << 4;      /* 上位 nibble */
 8000b66:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8000b6a:	3370      	adds	r3, #112	@ 0x70
 8000b6c:	443b      	add	r3, r7
 8000b6e:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000b72:	b25a      	sxtb	r2, r3
 8000b74:	f997 3065 	ldrsb.w	r3, [r7, #101]	@ 0x65
 8000b78:	011b      	lsls	r3, r3, #4
 8000b7a:	b25b      	sxtb	r3, r3
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	b25a      	sxtb	r2, r3
 8000b80:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8000b84:	b2d2      	uxtb	r2, r2
 8000b86:	3370      	adds	r3, #112	@ 0x70
 8000b88:	443b      	add	r3, r7
 8000b8a:	f803 2c68 	strb.w	r2, [r3, #-104]
        for (uint16_t x = 0; x < xmax; ++x) {
 8000b8e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8000b92:	3301      	adds	r3, #1
 8000b94:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8000b98:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8000b9c:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	d39b      	bcc.n	8000adc <LCD_DrawString4bit+0x40>
        }
        /* 画面に送る（4‑bit data mode ヘッダ + dummy 16clk は関数側で付加）*/
        LCD_SendLine4bit(y0 + font_row, rowbuf);
 8000ba4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000ba8:	b29a      	uxth	r2, r3
 8000baa:	88fb      	ldrh	r3, [r7, #6]
 8000bac:	4413      	add	r3, r2
 8000bae:	b29b      	uxth	r3, r3
 8000bb0:	f107 0208 	add.w	r2, r7, #8
 8000bb4:	4611      	mov	r1, r2
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff ff36 	bl	8000a28 <LCD_SendLine4bit>
    for (uint8_t font_row = 0; font_row < 8; ++font_row) {
 8000bbc:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8000bc6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000bca:	2b07      	cmp	r3, #7
 8000bcc:	f67f af7b 	bls.w	8000ac6 <LCD_DrawString4bit+0x2a>
    }
}
 8000bd0:	bf00      	nop
 8000bd2:	bf00      	nop
 8000bd4:	3770      	adds	r7, #112	@ 0x70
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	08021290 	.word	0x08021290

08000be0 <LCD_DrawImage>:
        }
    }
}

void LCD_DrawImage(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b09c      	sub	sp, #112	@ 0x70
 8000be4:	af00      	add	r7, sp, #0
    uint8_t rowbuf[88]; // 176px / 2 pixels_per_byte = 88 bytes

    // The image data is 24bpp (3 bytes per pixel)
    const uint8_t bytes_per_pixel = 3; 
 8000be6:	2303      	movs	r3, #3
 8000be8:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
    const uint16_t bytes_per_row = Image.width * bytes_per_pixel;
 8000bec:	4b4e      	ldr	r3, [pc, #312]	@ (8000d28 <LCD_DrawImage+0x148>)
 8000bee:	889a      	ldrh	r2, [r3, #4]
 8000bf0:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 8000bf4:	b29b      	uxth	r3, r3
 8000bf6:	fb12 f303 	smulbb	r3, r2, r3
 8000bfa:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68

    for (uint16_t y = 0; y < Image.height; y++) {
 8000bfe:	2300      	movs	r3, #0
 8000c00:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8000c04:	e084      	b.n	8000d10 <LCD_DrawImage+0x130>
        // Clear the line buffer for the new line
        memset(rowbuf, 0, sizeof(rowbuf));
 8000c06:	463b      	mov	r3, r7
 8000c08:	2258      	movs	r2, #88	@ 0x58
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f008 fd3d 	bl	800968c <memset>

        // Get a pointer to the start of the current row in the source image
        const uint8_t *p_src_row = &Image.data[y * bytes_per_row];
 8000c12:	4b45      	ldr	r3, [pc, #276]	@ (8000d28 <LCD_DrawImage+0x148>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8000c1a:	f8b7 1068 	ldrh.w	r1, [r7, #104]	@ 0x68
 8000c1e:	fb01 f202 	mul.w	r2, r1, r2
 8000c22:	4413      	add	r3, r2
 8000c24:	667b      	str	r3, [r7, #100]	@ 0x64

        // Process each pixel in the row
        for (uint16_t x = 0; x < Image.width; x++) {
 8000c26:	2300      	movs	r3, #0
 8000c28:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8000c2c:	e05e      	b.n	8000cec <LCD_DrawImage+0x10c>
            // Get the R, G, B values for the current pixel
            const uint8_t *p_pixel = &p_src_row[x * bytes_per_pixel];
 8000c2e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8000c32:	f897 206a 	ldrb.w	r2, [r7, #106]	@ 0x6a
 8000c36:	fb02 f303 	mul.w	r3, r2, r3
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000c3e:	4413      	add	r3, r2
 8000c40:	663b      	str	r3, [r7, #96]	@ 0x60
            uint8_t r = p_pixel[0];
 8000c42:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
            uint8_t g = p_pixel[1];
 8000c4a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
            uint8_t b = p_pixel[2];
 8000c54:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000c56:	3302      	adds	r3, #2
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d

            // Convert 24bpp pixel to monochrome 4bpp pixel
            // Using a simple luminance threshold.
            // (R+G+B)/3 > 127
            uint8_t pix4;
            if ((r + g + b) > 382) { // 127 * 3 = 381
 8000c5e:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 8000c62:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8000c66:	441a      	add	r2, r3
 8000c68:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 8000c6c:	4413      	add	r3, r2
 8000c6e:	f5b3 7fbf 	cmp.w	r3, #382	@ 0x17e
 8000c72:	dd03      	ble.n	8000c7c <LCD_DrawImage+0x9c>
                pix4 = PIX_ON; // White
 8000c74:	230e      	movs	r3, #14
 8000c76:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
 8000c7a:	e002      	b.n	8000c82 <LCD_DrawImage+0xa2>
            } else {
                pix4 = PIX_OFF; // Black
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
            }

            // Pack the 4bpp pixel into the row buffer
            // 2 pixels per byte: even x in high nibble, odd x in low nibble
            uint16_t byte_idx = x / 2;
 8000c82:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8000c86:	085b      	lsrs	r3, r3, #1
 8000c88:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
            if (x & 1) { // odd pixel
 8000c8c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8000c90:	f003 0301 	and.w	r3, r3, #1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d010      	beq.n	8000cba <LCD_DrawImage+0xda>
                rowbuf[byte_idx] |= pix4; // low nibble
 8000c98:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8000c9c:	3370      	adds	r3, #112	@ 0x70
 8000c9e:	443b      	add	r3, r7
 8000ca0:	f813 1c70 	ldrb.w	r1, [r3, #-112]
 8000ca4:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8000ca8:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 8000cac:	430a      	orrs	r2, r1
 8000cae:	b2d2      	uxtb	r2, r2
 8000cb0:	3370      	adds	r3, #112	@ 0x70
 8000cb2:	443b      	add	r3, r7
 8000cb4:	f803 2c70 	strb.w	r2, [r3, #-112]
 8000cb8:	e013      	b.n	8000ce2 <LCD_DrawImage+0x102>
            } else { // even pixel
                rowbuf[byte_idx] |= pix4 << 4; // high nibble
 8000cba:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8000cbe:	3370      	adds	r3, #112	@ 0x70
 8000cc0:	443b      	add	r3, r7
 8000cc2:	f813 3c70 	ldrb.w	r3, [r3, #-112]
 8000cc6:	b25a      	sxtb	r2, r3
 8000cc8:	f997 306b 	ldrsb.w	r3, [r7, #107]	@ 0x6b
 8000ccc:	011b      	lsls	r3, r3, #4
 8000cce:	b25b      	sxtb	r3, r3
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	b25a      	sxtb	r2, r3
 8000cd4:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8000cd8:	b2d2      	uxtb	r2, r2
 8000cda:	3370      	adds	r3, #112	@ 0x70
 8000cdc:	443b      	add	r3, r7
 8000cde:	f803 2c70 	strb.w	r2, [r3, #-112]
        for (uint16_t x = 0; x < Image.width; x++) {
 8000ce2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8000cec:	4b0e      	ldr	r3, [pc, #56]	@ (8000d28 <LCD_DrawImage+0x148>)
 8000cee:	889b      	ldrh	r3, [r3, #4]
 8000cf0:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	d39a      	bcc.n	8000c2e <LCD_DrawImage+0x4e>
            }
        }

        // Send the packed line to the LCD
        LCD_SendLine4bit(y, rowbuf);
 8000cf8:	463a      	mov	r2, r7
 8000cfa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8000cfe:	4611      	mov	r1, r2
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff fe91 	bl	8000a28 <LCD_SendLine4bit>
    for (uint16_t y = 0; y < Image.height; y++) {
 8000d06:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8000d10:	4b05      	ldr	r3, [pc, #20]	@ (8000d28 <LCD_DrawImage+0x148>)
 8000d12:	88db      	ldrh	r3, [r3, #6]
 8000d14:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	f4ff af74 	bcc.w	8000c06 <LCD_DrawImage+0x26>
    }
 8000d1e:	bf00      	nop
 8000d20:	bf00      	nop
 8000d22:	3770      	adds	r7, #112	@ 0x70
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	08021284 	.word	0x08021284

08000d2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d2e:	b0a5      	sub	sp, #148	@ 0x94
 8000d30:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d32:	f001 fbf3 	bl	800251c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d36:	f000 fa17 	bl	8001168 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d3a:	f000 fceb 	bl	8001714 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000d3e:	f000 fb43 	bl	80013c8 <MX_SPI1_Init>
  MX_UART5_Init();
 8000d42:	f000 fc9b 	bl	800167c <MX_UART5_Init>
  MX_TIM3_Init();
 8000d46:	f000 fc1f 	bl	8001588 <MX_TIM3_Init>
  MX_SPI2_Init();
 8000d4a:	f000 fbad 	bl	80014a8 <MX_SPI2_Init>
  MX_DAC1_Init();
 8000d4e:	f000 fad3 	bl	80012f8 <MX_DAC1_Init>
  MX_OPAMP1_Init();
 8000d52:	f000 fb19 	bl	8001388 <MX_OPAMP1_Init>
  MX_ADC1_Init();
 8000d56:	f000 fa73 	bl	8001240 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  printf("Starting DAC/ADC/LCD Test System...\r\n");
 8000d5a:	48ae      	ldr	r0, [pc, #696]	@ (8001014 <main+0x2e8>)
 8000d5c:	f008 fb80 	bl	8009460 <puts>
  
  // LCD初期化
  LCD_Init();
 8000d60:	f7ff fe36 	bl	80009d0 <LCD_Init>
  printf("LCD Initialized\r\n");
 8000d64:	48ac      	ldr	r0, [pc, #688]	@ (8001018 <main+0x2ec>)
 8000d66:	f008 fb7b 	bl	8009460 <puts>

  // 画像を表示
  LCD_DrawImage();
 8000d6a:	f7ff ff39 	bl	8000be0 <LCD_DrawImage>
  HAL_Delay(3000);
 8000d6e:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000d72:	f001 fc91 	bl	8002698 <HAL_Delay>
  LCD_AllClear();
 8000d76:	f7ff fe45 	bl	8000a04 <LCD_AllClear>

  // LCD初期表示
  LCD_DrawString4bit(10, "DAC/ADC Test");
 8000d7a:	49a8      	ldr	r1, [pc, #672]	@ (800101c <main+0x2f0>)
 8000d7c:	200a      	movs	r0, #10
 8000d7e:	f7ff fe8d 	bl	8000a9c <LCD_DrawString4bit>
  LCD_DrawString4bit(30, "System Ready");
 8000d82:	49a7      	ldr	r1, [pc, #668]	@ (8001020 <main+0x2f4>)
 8000d84:	201e      	movs	r0, #30
 8000d86:	f7ff fe89 	bl	8000a9c <LCD_DrawString4bit>
  
  // Start DAC
  if (HAL_DAC_Start(&hdac1, DAC_CHANNEL_1) != HAL_OK) {
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	48a5      	ldr	r0, [pc, #660]	@ (8001024 <main+0x2f8>)
 8000d8e:	f003 f873 	bl	8003e78 <HAL_DAC_Start>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d008      	beq.n	8000daa <main+0x7e>
      printf("DAC Start Error!\r\n");
 8000d98:	48a3      	ldr	r0, [pc, #652]	@ (8001028 <main+0x2fc>)
 8000d9a:	f008 fb61 	bl	8009460 <puts>
      LCD_DrawString4bit(50, "DAC Error");
 8000d9e:	49a3      	ldr	r1, [pc, #652]	@ (800102c <main+0x300>)
 8000da0:	2032      	movs	r0, #50	@ 0x32
 8000da2:	f7ff fe7b 	bl	8000a9c <LCD_DrawString4bit>
      Error_Handler();
 8000da6:	f000 fdd3 	bl	8001950 <Error_Handler>
  }
  printf("DAC Channel 1 Started\r\n");
 8000daa:	48a1      	ldr	r0, [pc, #644]	@ (8001030 <main+0x304>)
 8000dac:	f008 fb58 	bl	8009460 <puts>
  
  // Start OPAMP
  if (HAL_OPAMP_Start(&hopamp1) != HAL_OK) {
 8000db0:	48a0      	ldr	r0, [pc, #640]	@ (8001034 <main+0x308>)
 8000db2:	f003 fde7 	bl	8004984 <HAL_OPAMP_Start>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d008      	beq.n	8000dce <main+0xa2>
      printf("OPAMP Start Error!\r\n");
 8000dbc:	489e      	ldr	r0, [pc, #632]	@ (8001038 <main+0x30c>)
 8000dbe:	f008 fb4f 	bl	8009460 <puts>
      LCD_DrawString4bit(70, "OPAMP Error");
 8000dc2:	499e      	ldr	r1, [pc, #632]	@ (800103c <main+0x310>)
 8000dc4:	2046      	movs	r0, #70	@ 0x46
 8000dc6:	f7ff fe69 	bl	8000a9c <LCD_DrawString4bit>
      Error_Handler();
 8000dca:	f000 fdc1 	bl	8001950 <Error_Handler>
  }
  printf("OPAMP Started\r\n");
 8000dce:	489c      	ldr	r0, [pc, #624]	@ (8001040 <main+0x314>)
 8000dd0:	f008 fb46 	bl	8009460 <puts>
  
  // Calibrate ADC
  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK) {
 8000dd4:	217f      	movs	r1, #127	@ 0x7f
 8000dd6:	489b      	ldr	r0, [pc, #620]	@ (8001044 <main+0x318>)
 8000dd8:	f002 fe70 	bl	8003abc <HAL_ADCEx_Calibration_Start>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d008      	beq.n	8000df4 <main+0xc8>
      printf("ADC Calibration Error!\r\n");
 8000de2:	4899      	ldr	r0, [pc, #612]	@ (8001048 <main+0x31c>)
 8000de4:	f008 fb3c 	bl	8009460 <puts>
      LCD_DrawString4bit(90, "ADC Error");
 8000de8:	4998      	ldr	r1, [pc, #608]	@ (800104c <main+0x320>)
 8000dea:	205a      	movs	r0, #90	@ 0x5a
 8000dec:	f7ff fe56 	bl	8000a9c <LCD_DrawString4bit>
      Error_Handler();
 8000df0:	f000 fdae 	bl	8001950 <Error_Handler>
  }
  printf("ADC Calibrated and Ready\r\n");
 8000df4:	4896      	ldr	r0, [pc, #600]	@ (8001050 <main+0x324>)
 8000df6:	f008 fb33 	bl	8009460 <puts>

  // Set initial DAC value
  dac_value = 2048; // Middle value (1.65V for 3.3V reference)
 8000dfa:	4b96      	ldr	r3, [pc, #600]	@ (8001054 <main+0x328>)
 8000dfc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000e00:	601a      	str	r2, [r3, #0]
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_value);
 8000e02:	4b94      	ldr	r3, [pc, #592]	@ (8001054 <main+0x328>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	2200      	movs	r2, #0
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4886      	ldr	r0, [pc, #536]	@ (8001024 <main+0x2f8>)
 8000e0c:	f003 f8a0 	bl	8003f50 <HAL_DAC_SetValue>
  printf("Initial DAC value set to: %lu (should be ~1.65V)\r\n", dac_value);
 8000e10:	4b90      	ldr	r3, [pc, #576]	@ (8001054 <main+0x328>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4619      	mov	r1, r3
 8000e16:	4890      	ldr	r0, [pc, #576]	@ (8001058 <main+0x32c>)
 8000e18:	f008 faba 	bl	8009390 <iprintf>

  printf("Starting ID Register Read Test...\r\n");
 8000e1c:	488f      	ldr	r0, [pc, #572]	@ (800105c <main+0x330>)
 8000e1e:	f008 fb1f 	bl	8009460 <puts>

  // 一度リセット
  HAL_GPIO_WritePin(ADS_RESET_PORT, ADS_RESET_PIN, GPIO_PIN_SET);
 8000e22:	2201      	movs	r2, #1
 8000e24:	2140      	movs	r1, #64	@ 0x40
 8000e26:	488e      	ldr	r0, [pc, #568]	@ (8001060 <main+0x334>)
 8000e28:	f003 fcb0 	bl	800478c <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8000e2c:	200a      	movs	r0, #10
 8000e2e:	f001 fc33 	bl	8002698 <HAL_Delay>
  HAL_GPIO_WritePin(ADS_RESET_PORT, ADS_RESET_PIN, GPIO_PIN_RESET);
 8000e32:	2200      	movs	r2, #0
 8000e34:	2140      	movs	r1, #64	@ 0x40
 8000e36:	488a      	ldr	r0, [pc, #552]	@ (8001060 <main+0x334>)
 8000e38:	f003 fca8 	bl	800478c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	f001 fc2b 	bl	8002698 <HAL_Delay>
  HAL_GPIO_WritePin(ADS_RESET_PORT, ADS_RESET_PIN, GPIO_PIN_SET);
 8000e42:	2201      	movs	r2, #1
 8000e44:	2140      	movs	r1, #64	@ 0x40
 8000e46:	4886      	ldr	r0, [pc, #536]	@ (8001060 <main+0x334>)
 8000e48:	f003 fca0 	bl	800478c <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8000e4c:	200a      	movs	r0, #10
 8000e4e:	f001 fc23 	bl	8002698 <HAL_Delay>

  /* USER CODE END 2 */

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000e52:	2101      	movs	r1, #1
 8000e54:	2000      	movs	r0, #0
 8000e56:	f001 f9f3 	bl	8002240 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000e5a:	4b82      	ldr	r3, [pc, #520]	@ (8001064 <main+0x338>)
 8000e5c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e60:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000e62:	4b80      	ldr	r3, [pc, #512]	@ (8001064 <main+0x338>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000e68:	4b7e      	ldr	r3, [pc, #504]	@ (8001064 <main+0x338>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000e6e:	4b7d      	ldr	r3, [pc, #500]	@ (8001064 <main+0x338>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000e74:	4b7b      	ldr	r3, [pc, #492]	@ (8001064 <main+0x338>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000e7a:	497a      	ldr	r1, [pc, #488]	@ (8001064 <main+0x338>)
 8000e7c:	2000      	movs	r0, #0
 8000e7e:	f001 fa6d 	bl	800235c <BSP_COM_Init>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <main+0x160>
  {
    Error_Handler();
 8000e88:	f000 fd62 	bl	8001950 <Error_Handler>
  }

  /* USER CODE BEGIN BSP */

  /* -- Sample board code to send message over COM1 port ---- */
  printf("Welcome to STM32 world !\n\r");
 8000e8c:	4876      	ldr	r0, [pc, #472]	@ (8001068 <main+0x33c>)
 8000e8e:	f008 fa7f 	bl	8009390 <iprintf>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    // DAC/ADC Test Loop with LCD Display
    // Generate a slowly changing DAC output (triangle wave)
    if (dac_direction == 1) {
 8000e92:	4b76      	ldr	r3, [pc, #472]	@ (800106c <main+0x340>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d10e      	bne.n	8000eb8 <main+0x18c>
        dac_value += 50; // Increase DAC value
 8000e9a:	4b6e      	ldr	r3, [pc, #440]	@ (8001054 <main+0x328>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	3332      	adds	r3, #50	@ 0x32
 8000ea0:	4a6c      	ldr	r2, [pc, #432]	@ (8001054 <main+0x328>)
 8000ea2:	6013      	str	r3, [r2, #0]
        if (dac_value >= 4095) {
 8000ea4:	4b6b      	ldr	r3, [pc, #428]	@ (8001054 <main+0x328>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d90f      	bls.n	8000ed0 <main+0x1a4>
            dac_direction = 0; // Change direction at max
 8000eb0:	4b6e      	ldr	r3, [pc, #440]	@ (800106c <main+0x340>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	701a      	strb	r2, [r3, #0]
 8000eb6:	e00b      	b.n	8000ed0 <main+0x1a4>
        }
    } else {
        dac_value -= 50; // Decrease DAC value
 8000eb8:	4b66      	ldr	r3, [pc, #408]	@ (8001054 <main+0x328>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	3b32      	subs	r3, #50	@ 0x32
 8000ebe:	4a65      	ldr	r2, [pc, #404]	@ (8001054 <main+0x328>)
 8000ec0:	6013      	str	r3, [r2, #0]
        if (dac_value <= 0) {
 8000ec2:	4b64      	ldr	r3, [pc, #400]	@ (8001054 <main+0x328>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d102      	bne.n	8000ed0 <main+0x1a4>
            dac_direction = 1; // Change direction at min
 8000eca:	4b68      	ldr	r3, [pc, #416]	@ (800106c <main+0x340>)
 8000ecc:	2201      	movs	r2, #1
 8000ece:	701a      	strb	r2, [r3, #0]
        }
    }
    
    // Set new DAC value
    HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_value);
 8000ed0:	4b60      	ldr	r3, [pc, #384]	@ (8001054 <main+0x328>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	4852      	ldr	r0, [pc, #328]	@ (8001024 <main+0x2f8>)
 8000eda:	f003 f839 	bl	8003f50 <HAL_DAC_SetValue>
    
    // Read ADC value from the DAC output (via OPAMP follower)
    if (HAL_ADC_Start(&hadc1) != HAL_OK) {
 8000ede:	4859      	ldr	r0, [pc, #356]	@ (8001044 <main+0x318>)
 8000ee0:	f002 f8a4 	bl	800302c <HAL_ADC_Start>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d002      	beq.n	8000ef0 <main+0x1c4>
        printf("ADC Start Error!\r\n");
 8000eea:	4861      	ldr	r0, [pc, #388]	@ (8001070 <main+0x344>)
 8000eec:	f008 fab8 	bl	8009460 <puts>
    }
    
    // Wait for ADC conversion to complete
    if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 8000ef0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ef4:	4853      	ldr	r0, [pc, #332]	@ (8001044 <main+0x318>)
 8000ef6:	f002 f987 	bl	8003208 <HAL_ADC_PollForConversion>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	f040 80d3 	bne.w	80010a8 <main+0x37c>
        adc_value = HAL_ADC_GetValue(&hadc1);
 8000f02:	4850      	ldr	r0, [pc, #320]	@ (8001044 <main+0x318>)
 8000f04:	f002 fa58 	bl	80033b8 <HAL_ADC_GetValue>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	4a5a      	ldr	r2, [pc, #360]	@ (8001074 <main+0x348>)
 8000f0c:	6013      	str	r3, [r2, #0]
        
        // Calculate voltage values for display
        float dac_voltage = (float)dac_value * 3.3f / 4095.0f;
 8000f0e:	4b51      	ldr	r3, [pc, #324]	@ (8001054 <main+0x328>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	ee07 3a90 	vmov	s15, r3
 8000f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f1a:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8001078 <main+0x34c>
 8000f1e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f22:	eddf 6a56 	vldr	s13, [pc, #344]	@ 800107c <main+0x350>
 8000f26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f2a:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
        float adc_voltage = (float)adc_value * 3.3f / 4095.0f;
 8000f2e:	4b51      	ldr	r3, [pc, #324]	@ (8001074 <main+0x348>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	ee07 3a90 	vmov	s15, r3
 8000f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f3a:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8001078 <main+0x34c>
 8000f3e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f42:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800107c <main+0x350>
 8000f46:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f4a:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
        
        // Output DAC and ADC values via UART
        printf("DAC: %lu (%.3fV) -> ADC: %lu (%.3fV)\r\n", 
 8000f4e:	4b41      	ldr	r3, [pc, #260]	@ (8001054 <main+0x328>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	607b      	str	r3, [r7, #4]
 8000f54:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8000f56:	f7ff faf9 	bl	800054c <__aeabi_f2d>
 8000f5a:	4604      	mov	r4, r0
 8000f5c:	460d      	mov	r5, r1
 8000f5e:	4b45      	ldr	r3, [pc, #276]	@ (8001074 <main+0x348>)
 8000f60:	681e      	ldr	r6, [r3, #0]
 8000f62:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8000f64:	f7ff faf2 	bl	800054c <__aeabi_f2d>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	460b      	mov	r3, r1
 8000f6c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000f70:	9600      	str	r6, [sp, #0]
 8000f72:	4622      	mov	r2, r4
 8000f74:	462b      	mov	r3, r5
 8000f76:	6879      	ldr	r1, [r7, #4]
 8000f78:	4841      	ldr	r0, [pc, #260]	@ (8001080 <main+0x354>)
 8000f7a:	f008 fa09 	bl	8009390 <iprintf>
               dac_value, dac_voltage, adc_value, adc_voltage);
        
        // Update LCD display every few iterations to avoid flicker
        static uint32_t lcd_update_counter = 0;
        lcd_update_counter++;
 8000f7e:	4b41      	ldr	r3, [pc, #260]	@ (8001084 <main+0x358>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	3301      	adds	r3, #1
 8000f84:	4a3f      	ldr	r2, [pc, #252]	@ (8001084 <main+0x358>)
 8000f86:	6013      	str	r3, [r2, #0]
        
        if (lcd_update_counter % 5 == 0) { // Update LCD every 5 iterations
 8000f88:	4b3e      	ldr	r3, [pc, #248]	@ (8001084 <main+0x358>)
 8000f8a:	6819      	ldr	r1, [r3, #0]
 8000f8c:	4b3e      	ldr	r3, [pc, #248]	@ (8001088 <main+0x35c>)
 8000f8e:	fba3 2301 	umull	r2, r3, r3, r1
 8000f92:	089a      	lsrs	r2, r3, #2
 8000f94:	4613      	mov	r3, r2
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	4413      	add	r3, r2
 8000f9a:	1aca      	subs	r2, r1, r3
 8000f9c:	2a00      	cmp	r2, #0
 8000f9e:	f040 8083 	bne.w	80010a8 <main+0x37c>
            LCD_AllClear(); // Clear the screen
 8000fa2:	f7ff fd2f 	bl	8000a04 <LCD_AllClear>
            
            // Display title
            LCD_DrawString4bit(10, "DAC/ADC Monitor");
 8000fa6:	4939      	ldr	r1, [pc, #228]	@ (800108c <main+0x360>)
 8000fa8:	200a      	movs	r0, #10
 8000faa:	f7ff fd77 	bl	8000a9c <LCD_DrawString4bit>
            
            // Display DAC value and voltage
            char dac_str[22];
            snprintf(dac_str, sizeof(dac_str), "DAC: %04lu %.3fV", dac_value, dac_voltage);
 8000fae:	4b29      	ldr	r3, [pc, #164]	@ (8001054 <main+0x328>)
 8000fb0:	681c      	ldr	r4, [r3, #0]
 8000fb2:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8000fb4:	f7ff faca 	bl	800054c <__aeabi_f2d>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	460b      	mov	r3, r1
 8000fbc:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8000fc0:	e9cd 2300 	strd	r2, r3, [sp]
 8000fc4:	4623      	mov	r3, r4
 8000fc6:	4a32      	ldr	r2, [pc, #200]	@ (8001090 <main+0x364>)
 8000fc8:	2116      	movs	r1, #22
 8000fca:	f008 fa51 	bl	8009470 <sniprintf>
            LCD_DrawString4bit(30, dac_str);
 8000fce:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	201e      	movs	r0, #30
 8000fd6:	f7ff fd61 	bl	8000a9c <LCD_DrawString4bit>
            
            // Display ADC value and voltage
            char adc_str[22];
            snprintf(adc_str, sizeof(adc_str), "ADC: %04lu %.3fV", adc_value, adc_voltage);
 8000fda:	4b26      	ldr	r3, [pc, #152]	@ (8001074 <main+0x348>)
 8000fdc:	681c      	ldr	r4, [r3, #0]
 8000fde:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8000fe0:	f7ff fab4 	bl	800054c <__aeabi_f2d>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	460b      	mov	r3, r1
 8000fe8:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 8000fec:	e9cd 2300 	strd	r2, r3, [sp]
 8000ff0:	4623      	mov	r3, r4
 8000ff2:	4a28      	ldr	r2, [pc, #160]	@ (8001094 <main+0x368>)
 8000ff4:	2116      	movs	r1, #22
 8000ff6:	f008 fa3b 	bl	8009470 <sniprintf>
            LCD_DrawString4bit(50, adc_str);
 8000ffa:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000ffe:	4619      	mov	r1, r3
 8001000:	2032      	movs	r0, #50	@ 0x32
 8001002:	f7ff fd4b 	bl	8000a9c <LCD_DrawString4bit>
            
            // Display direction indicator
            const char* direction_str = dac_direction == 1 ? "Direction: UP  " : "Direction: DOWN";
 8001006:	4b19      	ldr	r3, [pc, #100]	@ (800106c <main+0x340>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	2b01      	cmp	r3, #1
 800100c:	d146      	bne.n	800109c <main+0x370>
 800100e:	4b22      	ldr	r3, [pc, #136]	@ (8001098 <main+0x36c>)
 8001010:	e045      	b.n	800109e <main+0x372>
 8001012:	bf00      	nop
 8001014:	0800a534 	.word	0x0800a534
 8001018:	0800a55c 	.word	0x0800a55c
 800101c:	0800a570 	.word	0x0800a570
 8001020:	0800a580 	.word	0x0800a580
 8001024:	20000114 	.word	0x20000114
 8001028:	0800a590 	.word	0x0800a590
 800102c:	0800a5a4 	.word	0x0800a5a4
 8001030:	0800a5b0 	.word	0x0800a5b0
 8001034:	20000128 	.word	0x20000128
 8001038:	0800a5c8 	.word	0x0800a5c8
 800103c:	0800a5dc 	.word	0x0800a5dc
 8001040:	0800a5e8 	.word	0x0800a5e8
 8001044:	200000ac 	.word	0x200000ac
 8001048:	0800a5f8 	.word	0x0800a5f8
 800104c:	0800a610 	.word	0x0800a610
 8001050:	0800a61c 	.word	0x0800a61c
 8001054:	2000035c 	.word	0x2000035c
 8001058:	0800a638 	.word	0x0800a638
 800105c:	0800a66c 	.word	0x0800a66c
 8001060:	42020800 	.word	0x42020800
 8001064:	20000098 	.word	0x20000098
 8001068:	0800a690 	.word	0x0800a690
 800106c:	20000000 	.word	0x20000000
 8001070:	0800a6ac 	.word	0x0800a6ac
 8001074:	20000360 	.word	0x20000360
 8001078:	40533333 	.word	0x40533333
 800107c:	457ff000 	.word	0x457ff000
 8001080:	0800a6c0 	.word	0x0800a6c0
 8001084:	20000364 	.word	0x20000364
 8001088:	cccccccd 	.word	0xcccccccd
 800108c:	0800a6e8 	.word	0x0800a6e8
 8001090:	0800a6f8 	.word	0x0800a6f8
 8001094:	0800a70c 	.word	0x0800a70c
 8001098:	0800a720 	.word	0x0800a720
 800109c:	4b29      	ldr	r3, [pc, #164]	@ (8001144 <main+0x418>)
 800109e:	677b      	str	r3, [r7, #116]	@ 0x74
            LCD_DrawString4bit(70, direction_str);
 80010a0:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 80010a2:	2046      	movs	r0, #70	@ 0x46
 80010a4:	f7ff fcfa 	bl	8000a9c <LCD_DrawString4bit>
        }
    }
    
    HAL_ADC_Stop(&hadc1);
 80010a8:	4827      	ldr	r0, [pc, #156]	@ (8001148 <main+0x41c>)
 80010aa:	f002 f879 	bl	80031a0 <HAL_ADC_Stop>

    // Keep existing ADS1299 functionality (reduced frequency)
    static uint32_t ads_counter = 0;
    ads_counter++;
 80010ae:	4b27      	ldr	r3, [pc, #156]	@ (800114c <main+0x420>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	3301      	adds	r3, #1
 80010b4:	4a25      	ldr	r2, [pc, #148]	@ (800114c <main+0x420>)
 80010b6:	6013      	str	r3, [r2, #0]
    
    if (ads_counter % 50 == 0) { // Every 50th iteration (less frequent for better LCD performance)
 80010b8:	4b24      	ldr	r3, [pc, #144]	@ (800114c <main+0x420>)
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	4b24      	ldr	r3, [pc, #144]	@ (8001150 <main+0x424>)
 80010be:	fba3 1302 	umull	r1, r3, r3, r2
 80010c2:	091b      	lsrs	r3, r3, #4
 80010c4:	2132      	movs	r1, #50	@ 0x32
 80010c6:	fb01 f303 	mul.w	r3, r1, r3
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d135      	bne.n	800113c <main+0x410>
        uint8_t device_id = ads_read_reg(REG_ID);
 80010d0:	2000      	movs	r0, #0
 80010d2:	f000 fba5 	bl	8001820 <ads_read_reg>
 80010d6:	4603      	mov	r3, r0
 80010d8:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
        printf("ADS1299 ID: 0x%02X\r\n", device_id);
 80010dc:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80010e0:	4619      	mov	r1, r3
 80010e2:	481c      	ldr	r0, [pc, #112]	@ (8001154 <main+0x428>)
 80010e4:	f008 f954 	bl	8009390 <iprintf>
        
        // Display ADS1299 info on LCD
        char ads_str[22];
        snprintf(ads_str, sizeof(ads_str), "ADS ID: 0x%02X", device_id);
 80010e8:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80010ec:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80010f0:	4a19      	ldr	r2, [pc, #100]	@ (8001158 <main+0x42c>)
 80010f2:	2116      	movs	r1, #22
 80010f4:	f008 f9bc 	bl	8009470 <sniprintf>
        LCD_DrawString4bit(90, ads_str);
 80010f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010fc:	4619      	mov	r1, r3
 80010fe:	205a      	movs	r0, #90	@ 0x5a
 8001100:	f7ff fccc 	bl	8000a9c <LCD_DrawString4bit>
        
        // Check DRDY pin and read data if available
        if (HAL_GPIO_ReadPin(ADS_DRDY_PORT, ADS_DRDY_PIN) == GPIO_PIN_RESET) {
 8001104:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001108:	4814      	ldr	r0, [pc, #80]	@ (800115c <main+0x430>)
 800110a:	f003 fb27 	bl	800475c <HAL_GPIO_ReadPin>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d113      	bne.n	800113c <main+0x410>
            int32_t ch1_val = ads_read_ch1_data();
 8001114:	f000 fbbe 	bl	8001894 <ads_read_ch1_data>
 8001118:	66f8      	str	r0, [r7, #108]	@ 0x6c
            printf("ADS CH1: %ld\r\n", ch1_val);
 800111a:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800111c:	4810      	ldr	r0, [pc, #64]	@ (8001160 <main+0x434>)
 800111e:	f008 f937 	bl	8009390 <iprintf>
            
            // Display ADS1299 CH1 data on LCD
            char ch1_str[22];
            snprintf(ch1_str, sizeof(ch1_str), "CH1: %ld", ch1_val);
 8001122:	f107 000c 	add.w	r0, r7, #12
 8001126:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001128:	4a0e      	ldr	r2, [pc, #56]	@ (8001164 <main+0x438>)
 800112a:	2116      	movs	r1, #22
 800112c:	f008 f9a0 	bl	8009470 <sniprintf>
            LCD_DrawString4bit(110, ch1_str);
 8001130:	f107 030c 	add.w	r3, r7, #12
 8001134:	4619      	mov	r1, r3
 8001136:	206e      	movs	r0, #110	@ 0x6e
 8001138:	f7ff fcb0 	bl	8000a9c <LCD_DrawString4bit>
        }
    }
    
    HAL_Delay(100); // 100ms delay for readable output
 800113c:	2064      	movs	r0, #100	@ 0x64
 800113e:	f001 faab 	bl	8002698 <HAL_Delay>
  {
 8001142:	e6a6      	b.n	8000e92 <main+0x166>
 8001144:	0800a730 	.word	0x0800a730
 8001148:	200000ac 	.word	0x200000ac
 800114c:	20000368 	.word	0x20000368
 8001150:	51eb851f 	.word	0x51eb851f
 8001154:	0800a740 	.word	0x0800a740
 8001158:	0800a758 	.word	0x0800a758
 800115c:	42020400 	.word	0x42020400
 8001160:	0800a768 	.word	0x0800a768
 8001164:	0800a778 	.word	0x0800a778

08001168 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b094      	sub	sp, #80	@ 0x50
 800116c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800116e:	f107 0318 	add.w	r3, r7, #24
 8001172:	2238      	movs	r2, #56	@ 0x38
 8001174:	2100      	movs	r1, #0
 8001176:	4618      	mov	r0, r3
 8001178:	f008 fa88 	bl	800968c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800117c:	463b      	mov	r3, r7
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]
 8001184:	609a      	str	r2, [r3, #8]
 8001186:	60da      	str	r2, [r3, #12]
 8001188:	611a      	str	r2, [r3, #16]
 800118a:	615a      	str	r2, [r3, #20]

  /** Enable Epod Booster
  */
  if (HAL_RCCEx_EpodBoosterClkConfig(RCC_EPODBOOSTER_SOURCE_MSIS, RCC_EPODBOOSTER_DIV1) != HAL_OK)
 800118c:	2100      	movs	r1, #0
 800118e:	2001      	movs	r0, #1
 8001190:	f005 f94a 	bl	8006428 <HAL_RCCEx_EpodBoosterClkConfig>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <SystemClock_Config+0x36>
  {
    Error_Handler();
 800119a:	f000 fbd9 	bl	8001950 <Error_Handler>
  }
  if (HAL_PWREx_EnableEpodBooster() != HAL_OK)
 800119e:	f003 fc71 	bl	8004a84 <HAL_PWREx_EnableEpodBooster>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <SystemClock_Config+0x44>
  {
    Error_Handler();
 80011a8:	f000 fbd2 	bl	8001950 <Error_Handler>
  }

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011ac:	2001      	movs	r0, #1
 80011ae:	f003 fc1b 	bl	80049e8 <HAL_PWREx_ControlVoltageScaling>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <SystemClock_Config+0x54>
  {
    Error_Handler();
 80011b8:	f000 fbca 	bl	8001950 <Error_Handler>
  }

  /** Set Flash latency before increasing MSIS
  */
  __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_2);
 80011bc:	4b1f      	ldr	r3, [pc, #124]	@ (800123c <SystemClock_Config+0xd4>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f023 030f 	bic.w	r3, r3, #15
 80011c4:	4a1d      	ldr	r2, [pc, #116]	@ (800123c <SystemClock_Config+0xd4>)
 80011c6:	f043 0302 	orr.w	r3, r3, #2
 80011ca:	6013      	str	r3, [r2, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSIS;
 80011cc:	2328      	movs	r3, #40	@ 0x28
 80011ce:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80011d0:	2301      	movs	r3, #1
 80011d2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 80011d4:	2300      	movs	r3, #0
 80011d6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSISState = RCC_MSI_ON;
 80011d8:	2301      	movs	r3, #1
 80011da:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSISSource = RCC_MSI_RC0;
 80011dc:	2300      	movs	r3, #0
 80011de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.MSISDiv = RCC_MSI_DIV1;
 80011e0:	2300      	movs	r3, #0
 80011e2:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011e4:	f107 0318 	add.w	r3, r7, #24
 80011e8:	4618      	mov	r0, r3
 80011ea:	f003 fc77 	bl	8004adc <HAL_RCC_OscConfig>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80011f4:	f000 fbac 	bl	8001950 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011f8:	231f      	movs	r3, #31
 80011fa:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSIS;
 80011fc:	2300      	movs	r3, #0
 80011fe:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001200:	2300      	movs	r3, #0
 8001202:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001204:	2300      	movs	r3, #0
 8001206:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001208:	2300      	movs	r3, #0
 800120a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001210:	463b      	mov	r3, r7
 8001212:	2102      	movs	r1, #2
 8001214:	4618      	mov	r0, r3
 8001216:	f003 ffb7 	bl	8005188 <HAL_RCC_ClockConfig>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001220:	f000 fb96 	bl	8001950 <Error_Handler>
  }

  /** MCO1 configuration
  */
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_64);
 8001224:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8001228:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 800122c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001230:	f004 f896 	bl	8005360 <HAL_RCC_MCOConfig>
}
 8001234:	bf00      	nop
 8001236:	3750      	adds	r7, #80	@ 0x50
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40022000 	.word	0x40022000

08001240 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b088      	sub	sp, #32
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001246:	463b      	mov	r3, r7
 8001248:	2220      	movs	r2, #32
 800124a:	2100      	movs	r1, #0
 800124c:	4618      	mov	r0, r3
 800124e:	f008 fa1d 	bl	800968c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001252:	4b27      	ldr	r3, [pc, #156]	@ (80012f0 <MX_ADC1_Init+0xb0>)
 8001254:	4a27      	ldr	r2, [pc, #156]	@ (80012f4 <MX_ADC1_Init+0xb4>)
 8001256:	601a      	str	r2, [r3, #0]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001258:	4b25      	ldr	r3, [pc, #148]	@ (80012f0 <MX_ADC1_Init+0xb0>)
 800125a:	2200      	movs	r2, #0
 800125c:	605a      	str	r2, [r3, #4]
  hadc1.Init.GainCompensation = 0;
 800125e:	4b24      	ldr	r3, [pc, #144]	@ (80012f0 <MX_ADC1_Init+0xb0>)
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001264:	4b22      	ldr	r3, [pc, #136]	@ (80012f0 <MX_ADC1_Init+0xb0>)
 8001266:	2200      	movs	r2, #0
 8001268:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800126a:	4b21      	ldr	r3, [pc, #132]	@ (80012f0 <MX_ADC1_Init+0xb0>)
 800126c:	2204      	movs	r2, #4
 800126e:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001270:	4b1f      	ldr	r3, [pc, #124]	@ (80012f0 <MX_ADC1_Init+0xb0>)
 8001272:	2200      	movs	r2, #0
 8001274:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001276:	4b1e      	ldr	r3, [pc, #120]	@ (80012f0 <MX_ADC1_Init+0xb0>)
 8001278:	2200      	movs	r2, #0
 800127a:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 800127c:	4b1c      	ldr	r3, [pc, #112]	@ (80012f0 <MX_ADC1_Init+0xb0>)
 800127e:	2201      	movs	r2, #1
 8001280:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001282:	4b1b      	ldr	r3, [pc, #108]	@ (80012f0 <MX_ADC1_Init+0xb0>)
 8001284:	2200      	movs	r2, #0
 8001286:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001288:	4b19      	ldr	r3, [pc, #100]	@ (80012f0 <MX_ADC1_Init+0xb0>)
 800128a:	2200      	movs	r2, #0
 800128c:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800128e:	4b18      	ldr	r3, [pc, #96]	@ (80012f0 <MX_ADC1_Init+0xb0>)
 8001290:	2200      	movs	r2, #0
 8001292:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001294:	4b16      	ldr	r3, [pc, #88]	@ (80012f0 <MX_ADC1_Init+0xb0>)
 8001296:	2200      	movs	r2, #0
 8001298:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800129a:	4b15      	ldr	r3, [pc, #84]	@ (80012f0 <MX_ADC1_Init+0xb0>)
 800129c:	2200      	movs	r2, #0
 800129e:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80012a0:	4b13      	ldr	r3, [pc, #76]	@ (80012f0 <MX_ADC1_Init+0xb0>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.OversamplingMode = DISABLE;
 80012a6:	4b12      	ldr	r3, [pc, #72]	@ (80012f0 <MX_ADC1_Init+0xb0>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012ae:	4810      	ldr	r0, [pc, #64]	@ (80012f0 <MX_ADC1_Init+0xb0>)
 80012b0:	f001 fd6e 	bl	8002d90 <HAL_ADC_Init>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 80012ba:	f000 fb49 	bl	8001950 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80012be:	2301      	movs	r3, #1
 80012c0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012c2:	2306      	movs	r3, #6
 80012c4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80012c6:	2300      	movs	r3, #0
 80012c8:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012ca:	2304      	movs	r3, #4
 80012cc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012d2:	463b      	mov	r3, r7
 80012d4:	4619      	mov	r1, r3
 80012d6:	4806      	ldr	r0, [pc, #24]	@ (80012f0 <MX_ADC1_Init+0xb0>)
 80012d8:	f002 f87c 	bl	80033d4 <HAL_ADC_ConfigChannel>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80012e2:	f000 fb35 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012e6:	bf00      	nop
 80012e8:	3720      	adds	r7, #32
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	200000ac 	.word	0x200000ac
 80012f4:	42028000 	.word	0x42028000

080012f8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08e      	sub	sp, #56	@ 0x38
 80012fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80012fe:	f107 0308 	add.w	r3, r7, #8
 8001302:	2230      	movs	r2, #48	@ 0x30
 8001304:	2100      	movs	r1, #0
 8001306:	4618      	mov	r0, r3
 8001308:	f008 f9c0 	bl	800968c <memset>
  DAC_AutonomousModeConfTypeDef sAutonomousMode = {0};
 800130c:	2300      	movs	r3, #0
 800130e:	607b      	str	r3, [r7, #4]

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001310:	4b1b      	ldr	r3, [pc, #108]	@ (8001380 <MX_DAC1_Init+0x88>)
 8001312:	4a1c      	ldr	r2, [pc, #112]	@ (8001384 <MX_DAC1_Init+0x8c>)
 8001314:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001316:	481a      	ldr	r0, [pc, #104]	@ (8001380 <MX_DAC1_Init+0x88>)
 8001318:	f002 fd8c 	bl	8003e34 <HAL_DAC_Init>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_DAC1_Init+0x2e>
  {
    Error_Handler();
 8001322:	f000 fb15 	bl	8001950 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8001326:	2300      	movs	r3, #0
 8001328:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800132a:	2300      	movs	r3, #0
 800132c:	743b      	strb	r3, [r7, #16]
  sConfig.DAC_SignedFormat = DISABLE;
 800132e:	2300      	movs	r3, #0
 8001330:	747b      	strb	r3, [r7, #17]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001332:	2300      	movs	r3, #0
 8001334:	617b      	str	r3, [r7, #20]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001336:	2300      	movs	r3, #0
 8001338:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800133a:	2300      	movs	r3, #0
 800133c:	61fb      	str	r3, [r7, #28]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 800133e:	2301      	movs	r3, #1
 8001340:	623b      	str	r3, [r7, #32]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001342:	2300      	movs	r3, #0
 8001344:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001346:	f107 0308 	add.w	r3, r7, #8
 800134a:	2200      	movs	r2, #0
 800134c:	4619      	mov	r1, r3
 800134e:	480c      	ldr	r0, [pc, #48]	@ (8001380 <MX_DAC1_Init+0x88>)
 8001350:	f002 fe2c 	bl	8003fac <HAL_DAC_ConfigChannel>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_DAC1_Init+0x66>
  {
    Error_Handler();
 800135a:	f000 faf9 	bl	8001950 <Error_Handler>
  }

  /** Configure Autonomous Mode
  */
  sAutonomousMode.AutonomousModeState = DAC_AUTONOMOUS_MODE_DISABLE;
 800135e:	2300      	movs	r3, #0
 8001360:	607b      	str	r3, [r7, #4]
  if (HAL_DACEx_SetConfigAutonomousMode(&hdac1, &sAutonomousMode) != HAL_OK)
 8001362:	1d3b      	adds	r3, r7, #4
 8001364:	4619      	mov	r1, r3
 8001366:	4806      	ldr	r0, [pc, #24]	@ (8001380 <MX_DAC1_Init+0x88>)
 8001368:	f002 ffb2 	bl	80042d0 <HAL_DACEx_SetConfigAutonomousMode>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_DAC1_Init+0x7e>
  {
    Error_Handler();
 8001372:	f000 faed 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001376:	bf00      	nop
 8001378:	3738      	adds	r7, #56	@ 0x38
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	20000114 	.word	0x20000114
 8001384:	42028400 	.word	0x42028400

08001388 <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 800138c:	4b0c      	ldr	r3, [pc, #48]	@ (80013c0 <MX_OPAMP1_Init+0x38>)
 800138e:	4a0d      	ldr	r2, [pc, #52]	@ (80013c4 <MX_OPAMP1_Init+0x3c>)
 8001390:	601a      	str	r2, [r3, #0]
  hopamp1.Init.Mode = OPAMP_FOLLOWER_MODE;
 8001392:	4b0b      	ldr	r3, [pc, #44]	@ (80013c0 <MX_OPAMP1_Init+0x38>)
 8001394:	220c      	movs	r2, #12
 8001396:	60da      	str	r2, [r3, #12]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001398:	4b09      	ldr	r3, [pc, #36]	@ (80013c0 <MX_OPAMP1_Init+0x38>)
 800139a:	2200      	movs	r2, #0
 800139c:	615a      	str	r2, [r3, #20]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALPOWER_NORMALSPEED;
 800139e:	4b08      	ldr	r3, [pc, #32]	@ (80013c0 <MX_OPAMP1_Init+0x38>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	609a      	str	r2, [r3, #8]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80013a4:	4b06      	ldr	r3, [pc, #24]	@ (80013c0 <MX_OPAMP1_Init+0x38>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	61da      	str	r2, [r3, #28]
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 80013aa:	4805      	ldr	r0, [pc, #20]	@ (80013c0 <MX_OPAMP1_Init+0x38>)
 80013ac:	f003 fa06 	bl	80047bc <HAL_OPAMP_Init>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_OPAMP1_Init+0x32>
  {
    Error_Handler();
 80013b6:	f000 facb 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20000128 	.word	0x20000128
 80013c4:	40007000 	.word	0x40007000

080013c8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 80013ce:	1d3b      	adds	r3, r7, #4
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80013d8:	4b31      	ldr	r3, [pc, #196]	@ (80014a0 <MX_SPI1_Init+0xd8>)
 80013da:	4a32      	ldr	r2, [pc, #200]	@ (80014a4 <MX_SPI1_Init+0xdc>)
 80013dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013de:	4b30      	ldr	r3, [pc, #192]	@ (80014a0 <MX_SPI1_Init+0xd8>)
 80013e0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80013e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 80013e6:	4b2e      	ldr	r3, [pc, #184]	@ (80014a0 <MX_SPI1_Init+0xd8>)
 80013e8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80013ec:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013ee:	4b2c      	ldr	r3, [pc, #176]	@ (80014a0 <MX_SPI1_Init+0xd8>)
 80013f0:	2207      	movs	r2, #7
 80013f2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013f4:	4b2a      	ldr	r3, [pc, #168]	@ (80014a0 <MX_SPI1_Init+0xd8>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013fa:	4b29      	ldr	r3, [pc, #164]	@ (80014a0 <MX_SPI1_Init+0xd8>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001400:	4b27      	ldr	r3, [pc, #156]	@ (80014a0 <MX_SPI1_Init+0xd8>)
 8001402:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001406:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001408:	4b25      	ldr	r3, [pc, #148]	@ (80014a0 <MX_SPI1_Init+0xd8>)
 800140a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800140e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001410:	4b23      	ldr	r3, [pc, #140]	@ (80014a0 <MX_SPI1_Init+0xd8>)
 8001412:	2200      	movs	r2, #0
 8001414:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001416:	4b22      	ldr	r3, [pc, #136]	@ (80014a0 <MX_SPI1_Init+0xd8>)
 8001418:	2200      	movs	r2, #0
 800141a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800141c:	4b20      	ldr	r3, [pc, #128]	@ (80014a0 <MX_SPI1_Init+0xd8>)
 800141e:	2200      	movs	r2, #0
 8001420:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8001422:	4b1f      	ldr	r3, [pc, #124]	@ (80014a0 <MX_SPI1_Init+0xd8>)
 8001424:	2207      	movs	r2, #7
 8001426:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001428:	4b1d      	ldr	r3, [pc, #116]	@ (80014a0 <MX_SPI1_Init+0xd8>)
 800142a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800142e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001430:	4b1b      	ldr	r3, [pc, #108]	@ (80014a0 <MX_SPI1_Init+0xd8>)
 8001432:	2200      	movs	r2, #0
 8001434:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001436:	4b1a      	ldr	r3, [pc, #104]	@ (80014a0 <MX_SPI1_Init+0xd8>)
 8001438:	2200      	movs	r2, #0
 800143a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800143c:	4b18      	ldr	r3, [pc, #96]	@ (80014a0 <MX_SPI1_Init+0xd8>)
 800143e:	2200      	movs	r2, #0
 8001440:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001442:	4b17      	ldr	r3, [pc, #92]	@ (80014a0 <MX_SPI1_Init+0xd8>)
 8001444:	2200      	movs	r2, #0
 8001446:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001448:	4b15      	ldr	r3, [pc, #84]	@ (80014a0 <MX_SPI1_Init+0xd8>)
 800144a:	2200      	movs	r2, #0
 800144c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800144e:	4b14      	ldr	r3, [pc, #80]	@ (80014a0 <MX_SPI1_Init+0xd8>)
 8001450:	2200      	movs	r2, #0
 8001452:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001454:	4b12      	ldr	r3, [pc, #72]	@ (80014a0 <MX_SPI1_Init+0xd8>)
 8001456:	2200      	movs	r2, #0
 8001458:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 800145a:	4b11      	ldr	r3, [pc, #68]	@ (80014a0 <MX_SPI1_Init+0xd8>)
 800145c:	2200      	movs	r2, #0
 800145e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8001460:	4b0f      	ldr	r3, [pc, #60]	@ (80014a0 <MX_SPI1_Init+0xd8>)
 8001462:	2200      	movs	r2, #0
 8001464:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001466:	480e      	ldr	r0, [pc, #56]	@ (80014a0 <MX_SPI1_Init+0xd8>)
 8001468:	f005 f822 	bl	80064b0 <HAL_SPI_Init>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_SPI1_Init+0xae>
  {
    Error_Handler();
 8001472:	f000 fa6d 	bl	8001950 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8001476:	2300      	movs	r3, #0
 8001478:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 800147a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800147e:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8001480:	2300      	movs	r3, #0
 8001482:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8001484:	1d3b      	adds	r3, r7, #4
 8001486:	4619      	mov	r1, r3
 8001488:	4805      	ldr	r0, [pc, #20]	@ (80014a0 <MX_SPI1_Init+0xd8>)
 800148a:	f006 f9fa 	bl	8007882 <HAL_SPIEx_SetConfigAutonomousMode>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_SPI1_Init+0xd0>
  {
    Error_Handler();
 8001494:	f000 fa5c 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001498:	bf00      	nop
 800149a:	3710      	adds	r7, #16
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	2000015c 	.word	0x2000015c
 80014a4:	40013000 	.word	0x40013000

080014a8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 80014ae:	1d3b      	adds	r3, r7, #4
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80014b8:	4b31      	ldr	r3, [pc, #196]	@ (8001580 <MX_SPI2_Init+0xd8>)
 80014ba:	4a32      	ldr	r2, [pc, #200]	@ (8001584 <MX_SPI2_Init+0xdc>)
 80014bc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80014be:	4b30      	ldr	r3, [pc, #192]	@ (8001580 <MX_SPI2_Init+0xd8>)
 80014c0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80014c4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80014c6:	4b2e      	ldr	r3, [pc, #184]	@ (8001580 <MX_SPI2_Init+0xd8>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80014cc:	4b2c      	ldr	r3, [pc, #176]	@ (8001580 <MX_SPI2_Init+0xd8>)
 80014ce:	2207      	movs	r2, #7
 80014d0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014d2:	4b2b      	ldr	r3, [pc, #172]	@ (8001580 <MX_SPI2_Init+0xd8>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80014d8:	4b29      	ldr	r3, [pc, #164]	@ (8001580 <MX_SPI2_Init+0xd8>)
 80014da:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80014de:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80014e0:	4b27      	ldr	r3, [pc, #156]	@ (8001580 <MX_SPI2_Init+0xd8>)
 80014e2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80014e6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80014e8:	4b25      	ldr	r3, [pc, #148]	@ (8001580 <MX_SPI2_Init+0xd8>)
 80014ea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014ee:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014f0:	4b23      	ldr	r3, [pc, #140]	@ (8001580 <MX_SPI2_Init+0xd8>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80014f6:	4b22      	ldr	r3, [pc, #136]	@ (8001580 <MX_SPI2_Init+0xd8>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014fc:	4b20      	ldr	r3, [pc, #128]	@ (8001580 <MX_SPI2_Init+0xd8>)
 80014fe:	2200      	movs	r2, #0
 8001500:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x7;
 8001502:	4b1f      	ldr	r3, [pc, #124]	@ (8001580 <MX_SPI2_Init+0xd8>)
 8001504:	2207      	movs	r2, #7
 8001506:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001508:	4b1d      	ldr	r3, [pc, #116]	@ (8001580 <MX_SPI2_Init+0xd8>)
 800150a:	2200      	movs	r2, #0
 800150c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800150e:	4b1c      	ldr	r3, [pc, #112]	@ (8001580 <MX_SPI2_Init+0xd8>)
 8001510:	2200      	movs	r2, #0
 8001512:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001514:	4b1a      	ldr	r3, [pc, #104]	@ (8001580 <MX_SPI2_Init+0xd8>)
 8001516:	2200      	movs	r2, #0
 8001518:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800151a:	4b19      	ldr	r3, [pc, #100]	@ (8001580 <MX_SPI2_Init+0xd8>)
 800151c:	2200      	movs	r2, #0
 800151e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001520:	4b17      	ldr	r3, [pc, #92]	@ (8001580 <MX_SPI2_Init+0xd8>)
 8001522:	2200      	movs	r2, #0
 8001524:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001526:	4b16      	ldr	r3, [pc, #88]	@ (8001580 <MX_SPI2_Init+0xd8>)
 8001528:	2200      	movs	r2, #0
 800152a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800152c:	4b14      	ldr	r3, [pc, #80]	@ (8001580 <MX_SPI2_Init+0xd8>)
 800152e:	2200      	movs	r2, #0
 8001530:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001532:	4b13      	ldr	r3, [pc, #76]	@ (8001580 <MX_SPI2_Init+0xd8>)
 8001534:	2200      	movs	r2, #0
 8001536:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8001538:	4b11      	ldr	r3, [pc, #68]	@ (8001580 <MX_SPI2_Init+0xd8>)
 800153a:	2200      	movs	r2, #0
 800153c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 800153e:	4b10      	ldr	r3, [pc, #64]	@ (8001580 <MX_SPI2_Init+0xd8>)
 8001540:	2200      	movs	r2, #0
 8001542:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001544:	480e      	ldr	r0, [pc, #56]	@ (8001580 <MX_SPI2_Init+0xd8>)
 8001546:	f004 ffb3 	bl	80064b0 <HAL_SPI_Init>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_SPI2_Init+0xac>
  {
    Error_Handler();
 8001550:	f000 f9fe 	bl	8001950 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8001554:	2300      	movs	r3, #0
 8001556:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8001558:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800155c:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 800155e:	2300      	movs	r3, #0
 8001560:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi2, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8001562:	1d3b      	adds	r3, r7, #4
 8001564:	4619      	mov	r1, r3
 8001566:	4806      	ldr	r0, [pc, #24]	@ (8001580 <MX_SPI2_Init+0xd8>)
 8001568:	f006 f98b 	bl	8007882 <HAL_SPIEx_SetConfigAutonomousMode>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_SPI2_Init+0xce>
  {
    Error_Handler();
 8001572:	f000 f9ed 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001576:	bf00      	nop
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	200001ec 	.word	0x200001ec
 8001584:	40003800 	.word	0x40003800

08001588 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b08e      	sub	sp, #56	@ 0x38
 800158c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800158e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	605a      	str	r2, [r3, #4]
 8001598:	609a      	str	r2, [r3, #8]
 800159a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800159c:	f107 031c 	add.w	r3, r7, #28
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015a8:	463b      	mov	r3, r7
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	605a      	str	r2, [r3, #4]
 80015b0:	609a      	str	r2, [r3, #8]
 80015b2:	60da      	str	r2, [r3, #12]
 80015b4:	611a      	str	r2, [r3, #16]
 80015b6:	615a      	str	r2, [r3, #20]
 80015b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015ba:	4b2e      	ldr	r3, [pc, #184]	@ (8001674 <MX_TIM3_Init+0xec>)
 80015bc:	4a2e      	ldr	r2, [pc, #184]	@ (8001678 <MX_TIM3_Init+0xf0>)
 80015be:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 191;
 80015c0:	4b2c      	ldr	r3, [pc, #176]	@ (8001674 <MX_TIM3_Init+0xec>)
 80015c2:	22bf      	movs	r2, #191	@ 0xbf
 80015c4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c6:	4b2b      	ldr	r3, [pc, #172]	@ (8001674 <MX_TIM3_Init+0xec>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 80015cc:	4b29      	ldr	r3, [pc, #164]	@ (8001674 <MX_TIM3_Init+0xec>)
 80015ce:	f242 720f 	movw	r2, #9999	@ 0x270f
 80015d2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80015d4:	4b27      	ldr	r3, [pc, #156]	@ (8001674 <MX_TIM3_Init+0xec>)
 80015d6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015da:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015dc:	4b25      	ldr	r3, [pc, #148]	@ (8001674 <MX_TIM3_Init+0xec>)
 80015de:	2280      	movs	r2, #128	@ 0x80
 80015e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80015e2:	4824      	ldr	r0, [pc, #144]	@ (8001674 <MX_TIM3_Init+0xec>)
 80015e4:	f006 f98e 	bl	8007904 <HAL_TIM_Base_Init>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 80015ee:	f000 f9af 	bl	8001950 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80015f8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015fc:	4619      	mov	r1, r3
 80015fe:	481d      	ldr	r0, [pc, #116]	@ (8001674 <MX_TIM3_Init+0xec>)
 8001600:	f006 fb4c 	bl	8007c9c <HAL_TIM_ConfigClockSource>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800160a:	f000 f9a1 	bl	8001950 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800160e:	4819      	ldr	r0, [pc, #100]	@ (8001674 <MX_TIM3_Init+0xec>)
 8001610:	f006 f9cf 	bl	80079b2 <HAL_TIM_PWM_Init>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800161a:	f000 f999 	bl	8001950 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800161e:	2300      	movs	r3, #0
 8001620:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001622:	2300      	movs	r3, #0
 8001624:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001626:	f107 031c 	add.w	r3, r7, #28
 800162a:	4619      	mov	r1, r3
 800162c:	4811      	ldr	r0, [pc, #68]	@ (8001674 <MX_TIM3_Init+0xec>)
 800162e:	f007 f803 	bl	8008638 <HAL_TIMEx_MasterConfigSynchronization>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001638:	f000 f98a 	bl	8001950 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800163c:	2360      	movs	r3, #96	@ 0x60
 800163e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 5000;
 8001640:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001644:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001646:	2300      	movs	r3, #0
 8001648:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800164a:	2300      	movs	r3, #0
 800164c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800164e:	463b      	mov	r3, r7
 8001650:	2208      	movs	r2, #8
 8001652:	4619      	mov	r1, r3
 8001654:	4807      	ldr	r0, [pc, #28]	@ (8001674 <MX_TIM3_Init+0xec>)
 8001656:	f006 fa0d 	bl	8007a74 <HAL_TIM_PWM_ConfigChannel>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_TIM3_Init+0xdc>
  {
    Error_Handler();
 8001660:	f000 f976 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001664:	4803      	ldr	r0, [pc, #12]	@ (8001674 <MX_TIM3_Init+0xec>)
 8001666:	f000 fba7 	bl	8001db8 <HAL_TIM_MspPostInit>

}
 800166a:	bf00      	nop
 800166c:	3738      	adds	r7, #56	@ 0x38
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	2000027c 	.word	0x2000027c
 8001678:	40000400 	.word	0x40000400

0800167c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001680:	4b22      	ldr	r3, [pc, #136]	@ (800170c <MX_UART5_Init+0x90>)
 8001682:	4a23      	ldr	r2, [pc, #140]	@ (8001710 <MX_UART5_Init+0x94>)
 8001684:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001686:	4b21      	ldr	r3, [pc, #132]	@ (800170c <MX_UART5_Init+0x90>)
 8001688:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800168c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800168e:	4b1f      	ldr	r3, [pc, #124]	@ (800170c <MX_UART5_Init+0x90>)
 8001690:	2200      	movs	r2, #0
 8001692:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001694:	4b1d      	ldr	r3, [pc, #116]	@ (800170c <MX_UART5_Init+0x90>)
 8001696:	2200      	movs	r2, #0
 8001698:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800169a:	4b1c      	ldr	r3, [pc, #112]	@ (800170c <MX_UART5_Init+0x90>)
 800169c:	2200      	movs	r2, #0
 800169e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80016a0:	4b1a      	ldr	r3, [pc, #104]	@ (800170c <MX_UART5_Init+0x90>)
 80016a2:	220c      	movs	r2, #12
 80016a4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016a6:	4b19      	ldr	r3, [pc, #100]	@ (800170c <MX_UART5_Init+0x90>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80016ac:	4b17      	ldr	r3, [pc, #92]	@ (800170c <MX_UART5_Init+0x90>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016b2:	4b16      	ldr	r3, [pc, #88]	@ (800170c <MX_UART5_Init+0x90>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016b8:	4b14      	ldr	r3, [pc, #80]	@ (800170c <MX_UART5_Init+0x90>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016be:	4b13      	ldr	r3, [pc, #76]	@ (800170c <MX_UART5_Init+0x90>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80016c4:	4811      	ldr	r0, [pc, #68]	@ (800170c <MX_UART5_Init+0x90>)
 80016c6:	f007 f82d 	bl	8008724 <HAL_UART_Init>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 80016d0:	f000 f93e 	bl	8001950 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016d4:	2100      	movs	r1, #0
 80016d6:	480d      	ldr	r0, [pc, #52]	@ (800170c <MX_UART5_Init+0x90>)
 80016d8:	f007 fcce 	bl	8009078 <HAL_UARTEx_SetTxFifoThreshold>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 80016e2:	f000 f935 	bl	8001950 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016e6:	2100      	movs	r1, #0
 80016e8:	4808      	ldr	r0, [pc, #32]	@ (800170c <MX_UART5_Init+0x90>)
 80016ea:	f007 fd03 	bl	80090f4 <HAL_UARTEx_SetRxFifoThreshold>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 80016f4:	f000 f92c 	bl	8001950 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 80016f8:	4804      	ldr	r0, [pc, #16]	@ (800170c <MX_UART5_Init+0x90>)
 80016fa:	f007 fc84 	bl	8009006 <HAL_UARTEx_DisableFifoMode>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8001704:	f000 f924 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001708:	bf00      	nop
 800170a:	bd80      	pop	{r7, pc}
 800170c:	200002c8 	.word	0x200002c8
 8001710:	40005000 	.word	0x40005000

08001714 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b08a      	sub	sp, #40	@ 0x28
 8001718:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171a:	f107 0314 	add.w	r3, r7, #20
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	605a      	str	r2, [r3, #4]
 8001724:	609a      	str	r2, [r3, #8]
 8001726:	60da      	str	r2, [r3, #12]
 8001728:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800172a:	4b39      	ldr	r3, [pc, #228]	@ (8001810 <MX_GPIO_Init+0xfc>)
 800172c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001730:	4a37      	ldr	r2, [pc, #220]	@ (8001810 <MX_GPIO_Init+0xfc>)
 8001732:	f043 0304 	orr.w	r3, r3, #4
 8001736:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800173a:	4b35      	ldr	r3, [pc, #212]	@ (8001810 <MX_GPIO_Init+0xfc>)
 800173c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001740:	f003 0304 	and.w	r3, r3, #4
 8001744:	613b      	str	r3, [r7, #16]
 8001746:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001748:	4b31      	ldr	r3, [pc, #196]	@ (8001810 <MX_GPIO_Init+0xfc>)
 800174a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800174e:	4a30      	ldr	r2, [pc, #192]	@ (8001810 <MX_GPIO_Init+0xfc>)
 8001750:	f043 0301 	orr.w	r3, r3, #1
 8001754:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001758:	4b2d      	ldr	r3, [pc, #180]	@ (8001810 <MX_GPIO_Init+0xfc>)
 800175a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001766:	4b2a      	ldr	r3, [pc, #168]	@ (8001810 <MX_GPIO_Init+0xfc>)
 8001768:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800176c:	4a28      	ldr	r2, [pc, #160]	@ (8001810 <MX_GPIO_Init+0xfc>)
 800176e:	f043 0302 	orr.w	r3, r3, #2
 8001772:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001776:	4b26      	ldr	r3, [pc, #152]	@ (8001810 <MX_GPIO_Init+0xfc>)
 8001778:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800177c:	f003 0302 	and.w	r3, r3, #2
 8001780:	60bb      	str	r3, [r7, #8]
 8001782:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001784:	4b22      	ldr	r3, [pc, #136]	@ (8001810 <MX_GPIO_Init+0xfc>)
 8001786:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800178a:	4a21      	ldr	r2, [pc, #132]	@ (8001810 <MX_GPIO_Init+0xfc>)
 800178c:	f043 0308 	orr.w	r3, r3, #8
 8001790:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001794:	4b1e      	ldr	r3, [pc, #120]	@ (8001810 <MX_GPIO_Init+0xfc>)
 8001796:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800179a:	f003 0308 	and.w	r3, r3, #8
 800179e:	607b      	str	r3, [r7, #4]
 80017a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ADC_RESET_Pin|ADC_CS_Pin|LCD_CS_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 80017a2:	2200      	movs	r2, #0
 80017a4:	f44f 61d8 	mov.w	r1, #1728	@ 0x6c0
 80017a8:	481a      	ldr	r0, [pc, #104]	@ (8001814 <MX_GPIO_Init+0x100>)
 80017aa:	f002 ffef 	bl	800478c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ADC_DRDY_Pin */
  GPIO_InitStruct.Pin = ADC_DRDY_Pin;
 80017ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80017b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017b4:	2300      	movs	r3, #0
 80017b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ADC_DRDY_GPIO_Port, &GPIO_InitStruct);
 80017bc:	f107 0314 	add.w	r3, r7, #20
 80017c0:	4619      	mov	r1, r3
 80017c2:	4815      	ldr	r0, [pc, #84]	@ (8001818 <MX_GPIO_Init+0x104>)
 80017c4:	f002 fe40 	bl	8004448 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC_RESET_Pin ADC_CS_Pin LCD_CS_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ADC_RESET_Pin|ADC_CS_Pin|LCD_CS_Pin|LCD_DISP_Pin;
 80017c8:	f44f 63d8 	mov.w	r3, #1728	@ 0x6c0
 80017cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ce:	2301      	movs	r3, #1
 80017d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d6:	2300      	movs	r3, #0
 80017d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017da:	f107 0314 	add.w	r3, r7, #20
 80017de:	4619      	mov	r1, r3
 80017e0:	480c      	ldr	r0, [pc, #48]	@ (8001814 <MX_GPIO_Init+0x100>)
 80017e2:	f002 fe31 	bl	8004448 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80017e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ec:	2302      	movs	r3, #2
 80017ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f0:	2300      	movs	r3, #0
 80017f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017f4:	2302      	movs	r3, #2
 80017f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80017f8:	2300      	movs	r3, #0
 80017fa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017fc:	f107 0314 	add.w	r3, r7, #20
 8001800:	4619      	mov	r1, r3
 8001802:	4806      	ldr	r0, [pc, #24]	@ (800181c <MX_GPIO_Init+0x108>)
 8001804:	f002 fe20 	bl	8004448 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001808:	bf00      	nop
 800180a:	3728      	adds	r7, #40	@ 0x28
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	40030c00 	.word	0x40030c00
 8001814:	42020800 	.word	0x42020800
 8001818:	42020400 	.word	0x42020400
 800181c:	42020000 	.word	0x42020000

08001820 <ads_read_reg>:
/**
  * @brief  ADS1299のレジスタから1バイト読み出す
  * @param  addr レジスタアドレス
  * @retval 読み出したデータ
  */
static uint8_t ads_read_reg(uint8_t addr) {
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af02      	add	r7, sp, #8
 8001826:	4603      	mov	r3, r0
 8001828:	71fb      	strb	r3, [r7, #7]
    uint8_t tx_buf[3];
    uint8_t rx_buf[3] = {0};
 800182a:	f107 0308 	add.w	r3, r7, #8
 800182e:	2100      	movs	r1, #0
 8001830:	460a      	mov	r2, r1
 8001832:	801a      	strh	r2, [r3, #0]
 8001834:	460a      	mov	r2, r1
 8001836:	709a      	strb	r2, [r3, #2]
    
    tx_buf[0] = CMD_RREG | addr; // RREGコマンド + アドレス
 8001838:	79fb      	ldrb	r3, [r7, #7]
 800183a:	f043 0320 	orr.w	r3, r3, #32
 800183e:	b2db      	uxtb	r3, r3
 8001840:	733b      	strb	r3, [r7, #12]
    tx_buf[1] = 0x00;            // 読み出すレジスタ数 - 1 (今回は1つなので0)
 8001842:	2300      	movs	r3, #0
 8001844:	737b      	strb	r3, [r7, #13]
    tx_buf[2] = 0x00;            // ダミーバイト
 8001846:	2300      	movs	r3, #0
 8001848:	73bb      	strb	r3, [r7, #14]

    HAL_GPIO_WritePin(ADS_CS_PORT, ADS_CS_PIN, GPIO_PIN_RESET);
 800184a:	2200      	movs	r2, #0
 800184c:	2180      	movs	r1, #128	@ 0x80
 800184e:	480f      	ldr	r0, [pc, #60]	@ (800188c <ads_read_reg+0x6c>)
 8001850:	f002 ff9c 	bl	800478c <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8001854:	2001      	movs	r0, #1
 8001856:	f000 ff1f 	bl	8002698 <HAL_Delay>
    HAL_SPI_TransmitReceive(ADS_SPI_HANDLE, tx_buf, rx_buf, 3, HAL_MAX_DELAY);
 800185a:	f107 0208 	add.w	r2, r7, #8
 800185e:	f107 010c 	add.w	r1, r7, #12
 8001862:	f04f 33ff 	mov.w	r3, #4294967295
 8001866:	9300      	str	r3, [sp, #0]
 8001868:	2303      	movs	r3, #3
 800186a:	4809      	ldr	r0, [pc, #36]	@ (8001890 <ads_read_reg+0x70>)
 800186c:	f005 fbde 	bl	800702c <HAL_SPI_TransmitReceive>
    HAL_Delay(1);
 8001870:	2001      	movs	r0, #1
 8001872:	f000 ff11 	bl	8002698 <HAL_Delay>
    HAL_GPIO_WritePin(ADS_CS_PORT, ADS_CS_PIN, GPIO_PIN_SET);
 8001876:	2201      	movs	r2, #1
 8001878:	2180      	movs	r1, #128	@ 0x80
 800187a:	4804      	ldr	r0, [pc, #16]	@ (800188c <ads_read_reg+0x6c>)
 800187c:	f002 ff86 	bl	800478c <HAL_GPIO_WritePin>
    
    return rx_buf[2]; // 3バイト目にレジスタの値が入っている
 8001880:	7abb      	ldrb	r3, [r7, #10]
}
 8001882:	4618      	mov	r0, r3
 8001884:	3710      	adds	r7, #16
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	42020800 	.word	0x42020800
 8001890:	200001ec 	.word	0x200001ec

08001894 <ads_read_ch1_data>:

/**
  * @brief  ADS1299のCH1データを読み出す
  * @retval 32ビット符号付き整数に変換されたCH1のデータ
  */
static int32_t ads_read_ch1_data(void) {
 8001894:	b580      	push	{r7, lr}
 8001896:	b08a      	sub	sp, #40	@ 0x28
 8001898:	af02      	add	r7, sp, #8
    uint8_t tx_cmd = CMD_RDATA;
 800189a:	2312      	movs	r3, #18
 800189c:	76fb      	strb	r3, [r7, #27]
    uint8_t rx_buffer[27] = {0};
 800189e:	463b      	mov	r3, r7
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	605a      	str	r2, [r3, #4]
 80018a6:	609a      	str	r2, [r3, #8]
 80018a8:	60da      	str	r2, [r3, #12]
 80018aa:	611a      	str	r2, [r3, #16]
 80018ac:	615a      	str	r2, [r3, #20]
 80018ae:	f8c3 2017 	str.w	r2, [r3, #23]
    int32_t ch1_val = 0;
 80018b2:	2300      	movs	r3, #0
 80018b4:	61fb      	str	r3, [r7, #28]

    HAL_GPIO_WritePin(ADS_CS_PORT, ADS_CS_PIN, GPIO_PIN_RESET);
 80018b6:	2200      	movs	r2, #0
 80018b8:	2180      	movs	r1, #128	@ 0x80
 80018ba:	4819      	ldr	r0, [pc, #100]	@ (8001920 <ads_read_ch1_data+0x8c>)
 80018bc:	f002 ff66 	bl	800478c <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80018c0:	2001      	movs	r0, #1
 80018c2:	f000 fee9 	bl	8002698 <HAL_Delay>

    // RDATAコマンドを送信し、同時にデータフレーム全体(27バイト)を受信する
    HAL_SPI_TransmitReceive(ADS_SPI_HANDLE, &tx_cmd, rx_buffer, 1, HAL_MAX_DELAY);
 80018c6:	463a      	mov	r2, r7
 80018c8:	f107 011b 	add.w	r1, r7, #27
 80018cc:	f04f 33ff 	mov.w	r3, #4294967295
 80018d0:	9300      	str	r3, [sp, #0]
 80018d2:	2301      	movs	r3, #1
 80018d4:	4813      	ldr	r0, [pc, #76]	@ (8001924 <ads_read_ch1_data+0x90>)
 80018d6:	f005 fba9 	bl	800702c <HAL_SPI_TransmitReceive>
    HAL_SPI_Receive(ADS_SPI_HANDLE, &rx_buffer[1], 26, HAL_MAX_DELAY);
 80018da:	463b      	mov	r3, r7
 80018dc:	1c59      	adds	r1, r3, #1
 80018de:	f04f 33ff 	mov.w	r3, #4294967295
 80018e2:	221a      	movs	r2, #26
 80018e4:	480f      	ldr	r0, [pc, #60]	@ (8001924 <ads_read_ch1_data+0x90>)
 80018e6:	f005 f8d5 	bl	8006a94 <HAL_SPI_Receive>

    HAL_GPIO_WritePin(ADS_CS_PORT, ADS_CS_PIN, GPIO_PIN_SET);
 80018ea:	2201      	movs	r2, #1
 80018ec:	2180      	movs	r1, #128	@ 0x80
 80018ee:	480c      	ldr	r0, [pc, #48]	@ (8001920 <ads_read_ch1_data+0x8c>)
 80018f0:	f002 ff4c 	bl	800478c <HAL_GPIO_WritePin>

    // 受信バッファからCH1のデータ(4,5,6バイト目)を取得
    // [cite: 1756, 1895, 1896]
    ch1_val = (int32_t)((rx_buffer[3] << 16) | (rx_buffer[4] << 8) | rx_buffer[5]);
 80018f4:	78fb      	ldrb	r3, [r7, #3]
 80018f6:	041a      	lsls	r2, r3, #16
 80018f8:	793b      	ldrb	r3, [r7, #4]
 80018fa:	021b      	lsls	r3, r3, #8
 80018fc:	4313      	orrs	r3, r2
 80018fe:	797a      	ldrb	r2, [r7, #5]
 8001900:	4313      	orrs	r3, r2
 8001902:	61fb      	str	r3, [r7, #28]

    // 24ビットの2の補数表現を32ビットに符号拡張する
    if (ch1_val & 0x00800000) {
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d003      	beq.n	8001916 <ads_read_ch1_data+0x82>
        ch1_val |= 0xFF000000;
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001914:	61fb      	str	r3, [r7, #28]
    }

    return ch1_val;
 8001916:	69fb      	ldr	r3, [r7, #28]
}
 8001918:	4618      	mov	r0, r3
 800191a:	3720      	adds	r7, #32
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	42020800 	.word	0x42020800
 8001924:	200001ec 	.word	0x200001ec

08001928 <BSP_PB_Callback>:
  * @brief BSP Push Button callback
  * @param Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 8001932:	79fb      	ldrb	r3, [r7, #7]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d102      	bne.n	800193e <BSP_PB_Callback+0x16>
  {
    BspButtonState = BUTTON_PRESSED;
 8001938:	4b04      	ldr	r3, [pc, #16]	@ (800194c <BSP_PB_Callback+0x24>)
 800193a:	2201      	movs	r2, #1
 800193c:	601a      	str	r2, [r3, #0]
  }
}
 800193e:	bf00      	nop
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	200000a8 	.word	0x200000a8

08001950 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001954:	b672      	cpsid	i
}
 8001956:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001958:	bf00      	nop
 800195a:	e7fd      	b.n	8001958 <Error_Handler+0x8>

0800195c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001962:	4b0a      	ldr	r3, [pc, #40]	@ (800198c <HAL_MspInit+0x30>)
 8001964:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001968:	4a08      	ldr	r2, [pc, #32]	@ (800198c <HAL_MspInit+0x30>)
 800196a:	f043 0304 	orr.w	r3, r3, #4
 800196e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001972:	4b06      	ldr	r3, [pc, #24]	@ (800198c <HAL_MspInit+0x30>)
 8001974:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001978:	f003 0304 	and.w	r3, r3, #4
 800197c:	607b      	str	r3, [r7, #4]
 800197e:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 8001980:	f003 f870 	bl	8004a64 <HAL_PWREx_EnableVddA>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001984:	bf00      	nop
 8001986:	3708      	adds	r7, #8
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	40030c00 	.word	0x40030c00

08001990 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b0a8      	sub	sp, #160	@ 0xa0
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001998:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	605a      	str	r2, [r3, #4]
 80019a2:	609a      	str	r2, [r3, #8]
 80019a4:	60da      	str	r2, [r3, #12]
 80019a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019a8:	f107 0314 	add.w	r3, r7, #20
 80019ac:	2278      	movs	r2, #120	@ 0x78
 80019ae:	2100      	movs	r1, #0
 80019b0:	4618      	mov	r0, r3
 80019b2:	f007 fe6b 	bl	800968c <memset>
  if(hadc->Instance==ADC1)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a22      	ldr	r2, [pc, #136]	@ (8001a44 <HAL_ADC_MspInit+0xb4>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d13d      	bne.n	8001a3c <HAL_ADC_MspInit+0xac>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 80019c0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80019c4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HCLK;
 80019c6:	2300      	movs	r3, #0
 80019c8:	66bb      	str	r3, [r7, #104]	@ 0x68
    PeriphClkInit.AdcDacClockDivider = RCC_ADCDACCLK_DIV1;
 80019ca:	2300      	movs	r3, #0
 80019cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019ce:	f107 0314 	add.w	r3, r7, #20
 80019d2:	4618      	mov	r0, r3
 80019d4:	f003 fde0 	bl	8005598 <HAL_RCCEx_PeriphCLKConfig>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 80019de:	f7ff ffb7 	bl	8001950 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80019e2:	4b19      	ldr	r3, [pc, #100]	@ (8001a48 <HAL_ADC_MspInit+0xb8>)
 80019e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80019e8:	4a17      	ldr	r2, [pc, #92]	@ (8001a48 <HAL_ADC_MspInit+0xb8>)
 80019ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019ee:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80019f2:	4b15      	ldr	r3, [pc, #84]	@ (8001a48 <HAL_ADC_MspInit+0xb8>)
 80019f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80019f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019fc:	613b      	str	r3, [r7, #16]
 80019fe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a00:	4b11      	ldr	r3, [pc, #68]	@ (8001a48 <HAL_ADC_MspInit+0xb8>)
 8001a02:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a06:	4a10      	ldr	r2, [pc, #64]	@ (8001a48 <HAL_ADC_MspInit+0xb8>)
 8001a08:	f043 0304 	orr.w	r3, r3, #4
 8001a0c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a10:	4b0d      	ldr	r3, [pc, #52]	@ (8001a48 <HAL_ADC_MspInit+0xb8>)
 8001a12:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a16:	f003 0304 	and.w	r3, r3, #4
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a24:	2303      	movs	r3, #3
 8001a26:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a30:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001a34:	4619      	mov	r1, r3
 8001a36:	4805      	ldr	r0, [pc, #20]	@ (8001a4c <HAL_ADC_MspInit+0xbc>)
 8001a38:	f002 fd06 	bl	8004448 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001a3c:	bf00      	nop
 8001a3e:	37a0      	adds	r7, #160	@ 0xa0
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	42028000 	.word	0x42028000
 8001a48:	40030c00 	.word	0x40030c00
 8001a4c:	42020800 	.word	0x42020800

08001a50 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b0a8      	sub	sp, #160	@ 0xa0
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a58:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]
 8001a66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a68:	f107 0314 	add.w	r3, r7, #20
 8001a6c:	2278      	movs	r2, #120	@ 0x78
 8001a6e:	2100      	movs	r1, #0
 8001a70:	4618      	mov	r0, r3
 8001a72:	f007 fe0b 	bl	800968c <memset>
  if(hdac->Instance==DAC1)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a22      	ldr	r2, [pc, #136]	@ (8001b04 <HAL_DAC_MspInit+0xb4>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d13c      	bne.n	8001afa <HAL_DAC_MspInit+0xaa>

    /* USER CODE END DAC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DAC1SH;
 8001a80:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001a84:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dac1SampleHoldClockSelection = RCC_DAC1SHCLKSOURCE_LSI;
 8001a86:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001a8a:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a8c:	f107 0314 	add.w	r3, r7, #20
 8001a90:	4618      	mov	r0, r3
 8001a92:	f003 fd81 	bl	8005598 <HAL_RCCEx_PeriphCLKConfig>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <HAL_DAC_MspInit+0x50>
    {
      Error_Handler();
 8001a9c:	f7ff ff58 	bl	8001950 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001aa0:	4b19      	ldr	r3, [pc, #100]	@ (8001b08 <HAL_DAC_MspInit+0xb8>)
 8001aa2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001aa6:	4a18      	ldr	r2, [pc, #96]	@ (8001b08 <HAL_DAC_MspInit+0xb8>)
 8001aa8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001aac:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001ab0:	4b15      	ldr	r3, [pc, #84]	@ (8001b08 <HAL_DAC_MspInit+0xb8>)
 8001ab2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ab6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001aba:	613b      	str	r3, [r7, #16]
 8001abc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001abe:	4b12      	ldr	r3, [pc, #72]	@ (8001b08 <HAL_DAC_MspInit+0xb8>)
 8001ac0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ac4:	4a10      	ldr	r2, [pc, #64]	@ (8001b08 <HAL_DAC_MspInit+0xb8>)
 8001ac6:	f043 0301 	orr.w	r3, r3, #1
 8001aca:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001ace:	4b0e      	ldr	r3, [pc, #56]	@ (8001b08 <HAL_DAC_MspInit+0xb8>)
 8001ad0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ad4:	f003 0301 	and.w	r3, r3, #1
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001adc:	2310      	movs	r3, #16
 8001ade:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aee:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001af2:	4619      	mov	r1, r3
 8001af4:	4805      	ldr	r0, [pc, #20]	@ (8001b0c <HAL_DAC_MspInit+0xbc>)
 8001af6:	f002 fca7 	bl	8004448 <HAL_GPIO_Init>

    /* USER CODE END DAC1_MspInit 1 */

  }

}
 8001afa:	bf00      	nop
 8001afc:	37a0      	adds	r7, #160	@ 0xa0
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	42028400 	.word	0x42028400
 8001b08:	40030c00 	.word	0x40030c00
 8001b0c:	42020000 	.word	0x42020000

08001b10 <HAL_OPAMP_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hopamp: OPAMP handle pointer
  * @retval None
  */
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b08a      	sub	sp, #40	@ 0x28
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b18:	f107 0314 	add.w	r3, r7, #20
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	609a      	str	r2, [r3, #8]
 8001b24:	60da      	str	r2, [r3, #12]
 8001b26:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a18      	ldr	r2, [pc, #96]	@ (8001b90 <HAL_OPAMP_MspInit+0x80>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d129      	bne.n	8001b86 <HAL_OPAMP_MspInit+0x76>
  {
    /* USER CODE BEGIN OPAMP1_MspInit 0 */

    /* USER CODE END OPAMP1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_OPAMP_CLK_ENABLE();
 8001b32:	4b18      	ldr	r3, [pc, #96]	@ (8001b94 <HAL_OPAMP_MspInit+0x84>)
 8001b34:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001b38:	4a16      	ldr	r2, [pc, #88]	@ (8001b94 <HAL_OPAMP_MspInit+0x84>)
 8001b3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b3e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001b42:	4b14      	ldr	r3, [pc, #80]	@ (8001b94 <HAL_OPAMP_MspInit+0x84>)
 8001b44:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001b48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b4c:	613b      	str	r3, [r7, #16]
 8001b4e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b50:	4b10      	ldr	r3, [pc, #64]	@ (8001b94 <HAL_OPAMP_MspInit+0x84>)
 8001b52:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b56:	4a0f      	ldr	r2, [pc, #60]	@ (8001b94 <HAL_OPAMP_MspInit+0x84>)
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b60:	4b0c      	ldr	r3, [pc, #48]	@ (8001b94 <HAL_OPAMP_MspInit+0x84>)
 8001b62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
    /**OPAMP1 GPIO Configuration
    PA0     ------> OPAMP1_VINP
    PA3     ------> OPAMP1_VOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8001b6e:	2309      	movs	r3, #9
 8001b70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b72:	2303      	movs	r3, #3
 8001b74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b76:	2300      	movs	r3, #0
 8001b78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b7a:	f107 0314 	add.w	r3, r7, #20
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4805      	ldr	r0, [pc, #20]	@ (8001b98 <HAL_OPAMP_MspInit+0x88>)
 8001b82:	f002 fc61 	bl	8004448 <HAL_GPIO_Init>

    /* USER CODE END OPAMP1_MspInit 1 */

  }

}
 8001b86:	bf00      	nop
 8001b88:	3728      	adds	r7, #40	@ 0x28
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	40007000 	.word	0x40007000
 8001b94:	40030c00 	.word	0x40030c00
 8001b98:	42020000 	.word	0x42020000

08001b9c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b0aa      	sub	sp, #168	@ 0xa8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	605a      	str	r2, [r3, #4]
 8001bae:	609a      	str	r2, [r3, #8]
 8001bb0:	60da      	str	r2, [r3, #12]
 8001bb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bb4:	f107 031c 	add.w	r3, r7, #28
 8001bb8:	2278      	movs	r2, #120	@ 0x78
 8001bba:	2100      	movs	r1, #0
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f007 fd65 	bl	800968c <memset>
  if(hspi->Instance==SPI1)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a65      	ldr	r2, [pc, #404]	@ (8001d5c <HAL_SPI_MspInit+0x1c0>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d142      	bne.n	8001c52 <HAL_SPI_MspInit+0xb6>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001bcc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001bd0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PCLK2;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bd6:	f107 031c 	add.w	r3, r7, #28
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f003 fcdc 	bl	8005598 <HAL_RCCEx_PeriphCLKConfig>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001be6:	f7ff feb3 	bl	8001950 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bea:	4b5d      	ldr	r3, [pc, #372]	@ (8001d60 <HAL_SPI_MspInit+0x1c4>)
 8001bec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001bf0:	4a5b      	ldr	r2, [pc, #364]	@ (8001d60 <HAL_SPI_MspInit+0x1c4>)
 8001bf2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001bf6:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001bfa:	4b59      	ldr	r3, [pc, #356]	@ (8001d60 <HAL_SPI_MspInit+0x1c4>)
 8001bfc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001c00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c04:	61bb      	str	r3, [r7, #24]
 8001c06:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c08:	4b55      	ldr	r3, [pc, #340]	@ (8001d60 <HAL_SPI_MspInit+0x1c4>)
 8001c0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c0e:	4a54      	ldr	r2, [pc, #336]	@ (8001d60 <HAL_SPI_MspInit+0x1c4>)
 8001c10:	f043 0301 	orr.w	r3, r3, #1
 8001c14:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001c18:	4b51      	ldr	r3, [pc, #324]	@ (8001d60 <HAL_SPI_MspInit+0x1c4>)
 8001c1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	617b      	str	r3, [r7, #20]
 8001c24:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001c26:	23a0      	movs	r3, #160	@ 0xa0
 8001c28:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c32:	2300      	movs	r3, #0
 8001c34:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c3e:	2305      	movs	r3, #5
 8001c40:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c44:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4846      	ldr	r0, [pc, #280]	@ (8001d64 <HAL_SPI_MspInit+0x1c8>)
 8001c4c:	f002 fbfc 	bl	8004448 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001c50:	e080      	b.n	8001d54 <HAL_SPI_MspInit+0x1b8>
  else if(hspi->Instance==SPI2)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a44      	ldr	r2, [pc, #272]	@ (8001d68 <HAL_SPI_MspInit+0x1cc>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d17b      	bne.n	8001d54 <HAL_SPI_MspInit+0x1b8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001c5c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c60:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Spi2ClockSelection = RCC_SPI2CLKSOURCE_PCLK1;
 8001c62:	2300      	movs	r3, #0
 8001c64:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c66:	f107 031c 	add.w	r3, r7, #28
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f003 fc94 	bl	8005598 <HAL_RCCEx_PeriphCLKConfig>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <HAL_SPI_MspInit+0xde>
      Error_Handler();
 8001c76:	f7ff fe6b 	bl	8001950 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001c7a:	4b39      	ldr	r3, [pc, #228]	@ (8001d60 <HAL_SPI_MspInit+0x1c4>)
 8001c7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001c80:	4a37      	ldr	r2, [pc, #220]	@ (8001d60 <HAL_SPI_MspInit+0x1c4>)
 8001c82:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c86:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001c8a:	4b35      	ldr	r3, [pc, #212]	@ (8001d60 <HAL_SPI_MspInit+0x1c4>)
 8001c8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001c90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c94:	613b      	str	r3, [r7, #16]
 8001c96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c98:	4b31      	ldr	r3, [pc, #196]	@ (8001d60 <HAL_SPI_MspInit+0x1c4>)
 8001c9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c9e:	4a30      	ldr	r2, [pc, #192]	@ (8001d60 <HAL_SPI_MspInit+0x1c4>)
 8001ca0:	f043 0304 	orr.w	r3, r3, #4
 8001ca4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001ca8:	4b2d      	ldr	r3, [pc, #180]	@ (8001d60 <HAL_SPI_MspInit+0x1c4>)
 8001caa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cae:	f003 0304 	and.w	r3, r3, #4
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cb6:	4b2a      	ldr	r3, [pc, #168]	@ (8001d60 <HAL_SPI_MspInit+0x1c4>)
 8001cb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cbc:	4a28      	ldr	r2, [pc, #160]	@ (8001d60 <HAL_SPI_MspInit+0x1c4>)
 8001cbe:	f043 0302 	orr.w	r3, r3, #2
 8001cc2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001cc6:	4b26      	ldr	r3, [pc, #152]	@ (8001d60 <HAL_SPI_MspInit+0x1c4>)
 8001cc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ccc:	f003 0302 	and.w	r3, r3, #2
 8001cd0:	60bb      	str	r3, [r7, #8]
 8001cd2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cda:	2302      	movs	r3, #2
 8001cdc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 8001cec:	2303      	movs	r3, #3
 8001cee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cf2:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	481c      	ldr	r0, [pc, #112]	@ (8001d6c <HAL_SPI_MspInit+0x1d0>)
 8001cfa:	f002 fba5 	bl	8004448 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001cfe:	2304      	movs	r3, #4
 8001d00:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d04:	2302      	movs	r3, #2
 8001d06:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d10:	2300      	movs	r3, #0
 8001d12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d16:	2305      	movs	r3, #5
 8001d18:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d1c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001d20:	4619      	mov	r1, r3
 8001d22:	4812      	ldr	r0, [pc, #72]	@ (8001d6c <HAL_SPI_MspInit+0x1d0>)
 8001d24:	f002 fb90 	bl	8004448 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d28:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d2c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d30:	2302      	movs	r3, #2
 8001d32:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d36:	2300      	movs	r3, #0
 8001d38:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d42:	2305      	movs	r3, #5
 8001d44:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d48:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4808      	ldr	r0, [pc, #32]	@ (8001d70 <HAL_SPI_MspInit+0x1d4>)
 8001d50:	f002 fb7a 	bl	8004448 <HAL_GPIO_Init>
}
 8001d54:	bf00      	nop
 8001d56:	37a8      	adds	r7, #168	@ 0xa8
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40013000 	.word	0x40013000
 8001d60:	40030c00 	.word	0x40030c00
 8001d64:	42020000 	.word	0x42020000
 8001d68:	40003800 	.word	0x40003800
 8001d6c:	42020800 	.word	0x42020800
 8001d70:	42020400 	.word	0x42020400

08001d74 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b085      	sub	sp, #20
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a0b      	ldr	r2, [pc, #44]	@ (8001db0 <HAL_TIM_Base_MspInit+0x3c>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d10e      	bne.n	8001da4 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d86:	4b0b      	ldr	r3, [pc, #44]	@ (8001db4 <HAL_TIM_Base_MspInit+0x40>)
 8001d88:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001d8c:	4a09      	ldr	r2, [pc, #36]	@ (8001db4 <HAL_TIM_Base_MspInit+0x40>)
 8001d8e:	f043 0302 	orr.w	r3, r3, #2
 8001d92:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001d96:	4b07      	ldr	r3, [pc, #28]	@ (8001db4 <HAL_TIM_Base_MspInit+0x40>)
 8001d98:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	60fb      	str	r3, [r7, #12]
 8001da2:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001da4:	bf00      	nop
 8001da6:	3714      	adds	r7, #20
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	40000400 	.word	0x40000400
 8001db4:	40030c00 	.word	0x40030c00

08001db8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b088      	sub	sp, #32
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc0:	f107 030c 	add.w	r3, r7, #12
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	605a      	str	r2, [r3, #4]
 8001dca:	609a      	str	r2, [r3, #8]
 8001dcc:	60da      	str	r2, [r3, #12]
 8001dce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a13      	ldr	r2, [pc, #76]	@ (8001e24 <HAL_TIM_MspPostInit+0x6c>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d11f      	bne.n	8001e1a <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dda:	4b13      	ldr	r3, [pc, #76]	@ (8001e28 <HAL_TIM_MspPostInit+0x70>)
 8001ddc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001de0:	4a11      	ldr	r2, [pc, #68]	@ (8001e28 <HAL_TIM_MspPostInit+0x70>)
 8001de2:	f043 0304 	orr.w	r3, r3, #4
 8001de6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001dea:	4b0f      	ldr	r3, [pc, #60]	@ (8001e28 <HAL_TIM_MspPostInit+0x70>)
 8001dec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001df0:	f003 0304 	and.w	r3, r3, #4
 8001df4:	60bb      	str	r3, [r7, #8]
 8001df6:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = LCD_EXTCOMIN_Pin;
 8001df8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001dfc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfe:	2302      	movs	r3, #2
 8001e00:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e02:	2300      	movs	r3, #0
 8001e04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e06:	2300      	movs	r3, #0
 8001e08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LCD_EXTCOMIN_GPIO_Port, &GPIO_InitStruct);
 8001e0e:	f107 030c 	add.w	r3, r7, #12
 8001e12:	4619      	mov	r1, r3
 8001e14:	4805      	ldr	r0, [pc, #20]	@ (8001e2c <HAL_TIM_MspPostInit+0x74>)
 8001e16:	f002 fb17 	bl	8004448 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001e1a:	bf00      	nop
 8001e1c:	3720      	adds	r7, #32
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	40000400 	.word	0x40000400
 8001e28:	40030c00 	.word	0x40030c00
 8001e2c:	42020800 	.word	0x42020800

08001e30 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b0a8      	sub	sp, #160	@ 0xa0
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e38:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	605a      	str	r2, [r3, #4]
 8001e42:	609a      	str	r2, [r3, #8]
 8001e44:	60da      	str	r2, [r3, #12]
 8001e46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e48:	f107 0314 	add.w	r3, r7, #20
 8001e4c:	2278      	movs	r2, #120	@ 0x78
 8001e4e:	2100      	movs	r1, #0
 8001e50:	4618      	mov	r0, r3
 8001e52:	f007 fc1b 	bl	800968c <memset>
  if(huart->Instance==UART5)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a36      	ldr	r2, [pc, #216]	@ (8001f34 <HAL_UART_MspInit+0x104>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d165      	bne.n	8001f2c <HAL_UART_MspInit+0xfc>

    /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001e60:	2308      	movs	r3, #8
 8001e62:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001e64:	2300      	movs	r3, #0
 8001e66:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e68:	f107 0314 	add.w	r3, r7, #20
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f003 fb93 	bl	8005598 <HAL_RCCEx_PeriphCLKConfig>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001e78:	f7ff fd6a 	bl	8001950 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001e7c:	4b2e      	ldr	r3, [pc, #184]	@ (8001f38 <HAL_UART_MspInit+0x108>)
 8001e7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001e82:	4a2d      	ldr	r2, [pc, #180]	@ (8001f38 <HAL_UART_MspInit+0x108>)
 8001e84:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001e88:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001e8c:	4b2a      	ldr	r3, [pc, #168]	@ (8001f38 <HAL_UART_MspInit+0x108>)
 8001e8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001e92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e96:	613b      	str	r3, [r7, #16]
 8001e98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e9a:	4b27      	ldr	r3, [pc, #156]	@ (8001f38 <HAL_UART_MspInit+0x108>)
 8001e9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ea0:	4a25      	ldr	r2, [pc, #148]	@ (8001f38 <HAL_UART_MspInit+0x108>)
 8001ea2:	f043 0304 	orr.w	r3, r3, #4
 8001ea6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001eaa:	4b23      	ldr	r3, [pc, #140]	@ (8001f38 <HAL_UART_MspInit+0x108>)
 8001eac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001eb0:	f003 0304 	and.w	r3, r3, #4
 8001eb4:	60fb      	str	r3, [r7, #12]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001eb8:	4b1f      	ldr	r3, [pc, #124]	@ (8001f38 <HAL_UART_MspInit+0x108>)
 8001eba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ebe:	4a1e      	ldr	r2, [pc, #120]	@ (8001f38 <HAL_UART_MspInit+0x108>)
 8001ec0:	f043 0308 	orr.w	r3, r3, #8
 8001ec4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001ec8:	4b1b      	ldr	r3, [pc, #108]	@ (8001f38 <HAL_UART_MspInit+0x108>)
 8001eca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ece:	f003 0308 	and.w	r3, r3, #8
 8001ed2:	60bb      	str	r3, [r7, #8]
 8001ed4:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001ed6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001eda:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ede:	2302      	movs	r3, #2
 8001ee0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eea:	2300      	movs	r3, #0
 8001eec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001ef0:	2308      	movs	r3, #8
 8001ef2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ef6:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001efa:	4619      	mov	r1, r3
 8001efc:	480f      	ldr	r0, [pc, #60]	@ (8001f3c <HAL_UART_MspInit+0x10c>)
 8001efe:	f002 faa3 	bl	8004448 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f02:	2304      	movs	r3, #4
 8001f04:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f08:	2302      	movs	r3, #2
 8001f0a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f14:	2300      	movs	r3, #0
 8001f16:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001f1a:	2308      	movs	r3, #8
 8001f1c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f20:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001f24:	4619      	mov	r1, r3
 8001f26:	4806      	ldr	r0, [pc, #24]	@ (8001f40 <HAL_UART_MspInit+0x110>)
 8001f28:	f002 fa8e 	bl	8004448 <HAL_GPIO_Init>

    /* USER CODE END UART5_MspInit 1 */

  }

}
 8001f2c:	bf00      	nop
 8001f2e:	37a0      	adds	r7, #160	@ 0xa0
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40005000 	.word	0x40005000
 8001f38:	40030c00 	.word	0x40030c00
 8001f3c:	42020800 	.word	0x42020800
 8001f40:	42020c00 	.word	0x42020c00

08001f44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f48:	bf00      	nop
 8001f4a:	e7fd      	b.n	8001f48 <NMI_Handler+0x4>

08001f4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f50:	bf00      	nop
 8001f52:	e7fd      	b.n	8001f50 <HardFault_Handler+0x4>

08001f54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f58:	bf00      	nop
 8001f5a:	e7fd      	b.n	8001f58 <MemManage_Handler+0x4>

08001f5c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f60:	bf00      	nop
 8001f62:	e7fd      	b.n	8001f60 <BusFault_Handler+0x4>

08001f64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f68:	bf00      	nop
 8001f6a:	e7fd      	b.n	8001f68 <UsageFault_Handler+0x4>

08001f6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f70:	bf00      	nop
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr

08001f7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f7e:	bf00      	nop
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f8c:	bf00      	nop
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr

08001f96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f9a:	f000 fb5d 	bl	8002658 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f9e:	bf00      	nop
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8001fa6:	2000      	movs	r0, #0
 8001fa8:	f000 f9c2 	bl	8002330 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8001fac:	bf00      	nop
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	617b      	str	r3, [r7, #20]
 8001fc0:	e00a      	b.n	8001fd8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001fc2:	f3af 8000 	nop.w
 8001fc6:	4601      	mov	r1, r0
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	1c5a      	adds	r2, r3, #1
 8001fcc:	60ba      	str	r2, [r7, #8]
 8001fce:	b2ca      	uxtb	r2, r1
 8001fd0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	617b      	str	r3, [r7, #20]
 8001fd8:	697a      	ldr	r2, [r7, #20]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	dbf0      	blt.n	8001fc2 <_read+0x12>
  }

  return len;
 8001fe0:	687b      	ldr	r3, [r7, #4]
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3718      	adds	r7, #24
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b086      	sub	sp, #24
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	60f8      	str	r0, [r7, #12]
 8001ff2:	60b9      	str	r1, [r7, #8]
 8001ff4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	617b      	str	r3, [r7, #20]
 8001ffa:	e009      	b.n	8002010 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	1c5a      	adds	r2, r3, #1
 8002000:	60ba      	str	r2, [r7, #8]
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	4618      	mov	r0, r3
 8002006:	f000 fa0d 	bl	8002424 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	3301      	adds	r3, #1
 800200e:	617b      	str	r3, [r7, #20]
 8002010:	697a      	ldr	r2, [r7, #20]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	429a      	cmp	r2, r3
 8002016:	dbf1      	blt.n	8001ffc <_write+0x12>
  }
  return len;
 8002018:	687b      	ldr	r3, [r7, #4]
}
 800201a:	4618      	mov	r0, r3
 800201c:	3718      	adds	r7, #24
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <_close>:

int _close(int file)
{
 8002022:	b480      	push	{r7}
 8002024:	b083      	sub	sp, #12
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800202a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800202e:	4618      	mov	r0, r3
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr

0800203a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800203a:	b480      	push	{r7}
 800203c:	b083      	sub	sp, #12
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
 8002042:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800204a:	605a      	str	r2, [r3, #4]
  return 0;
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr

0800205a <_isatty>:

int _isatty(int file)
{
 800205a:	b480      	push	{r7}
 800205c:	b083      	sub	sp, #12
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002062:	2301      	movs	r3, #1
}
 8002064:	4618      	mov	r0, r3
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3714      	adds	r7, #20
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
	...

0800208c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b086      	sub	sp, #24
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002094:	4a14      	ldr	r2, [pc, #80]	@ (80020e8 <_sbrk+0x5c>)
 8002096:	4b15      	ldr	r3, [pc, #84]	@ (80020ec <_sbrk+0x60>)
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020a0:	4b13      	ldr	r3, [pc, #76]	@ (80020f0 <_sbrk+0x64>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d102      	bne.n	80020ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020a8:	4b11      	ldr	r3, [pc, #68]	@ (80020f0 <_sbrk+0x64>)
 80020aa:	4a12      	ldr	r2, [pc, #72]	@ (80020f4 <_sbrk+0x68>)
 80020ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020ae:	4b10      	ldr	r3, [pc, #64]	@ (80020f0 <_sbrk+0x64>)
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4413      	add	r3, r2
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d207      	bcs.n	80020cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020bc:	f007 fb34 	bl	8009728 <__errno>
 80020c0:	4603      	mov	r3, r0
 80020c2:	220c      	movs	r2, #12
 80020c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020c6:	f04f 33ff 	mov.w	r3, #4294967295
 80020ca:	e009      	b.n	80020e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020cc:	4b08      	ldr	r3, [pc, #32]	@ (80020f0 <_sbrk+0x64>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020d2:	4b07      	ldr	r3, [pc, #28]	@ (80020f0 <_sbrk+0x64>)
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4413      	add	r3, r2
 80020da:	4a05      	ldr	r2, [pc, #20]	@ (80020f0 <_sbrk+0x64>)
 80020dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020de:	68fb      	ldr	r3, [r7, #12]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3718      	adds	r7, #24
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	20030000 	.word	0x20030000
 80020ec:	00000400 	.word	0x00000400
 80020f0:	2000036c 	.word	0x2000036c
 80020f4:	20000568 	.word	0x20000568

080020f8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80020fc:	4b06      	ldr	r3, [pc, #24]	@ (8002118 <SystemInit+0x20>)
 80020fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002102:	4a05      	ldr	r2, [pc, #20]	@ (8002118 <SystemInit+0x20>)
 8002104:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002108:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800210c:	bf00      	nop
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	e000ed00 	.word	0xe000ed00

0800211c <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR1 & RCC_CFGR1_SWS)
 8002122:	4b2c      	ldr	r3, [pc, #176]	@ (80021d4 <SystemCoreClockUpdate+0xb8>)
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	f003 030c 	and.w	r3, r3, #12
 800212a:	2b08      	cmp	r3, #8
 800212c:	d034      	beq.n	8002198 <SystemCoreClockUpdate+0x7c>
 800212e:	2b08      	cmp	r3, #8
 8002130:	d836      	bhi.n	80021a0 <SystemCoreClockUpdate+0x84>
 8002132:	2b00      	cmp	r3, #0
 8002134:	d002      	beq.n	800213c <SystemCoreClockUpdate+0x20>
 8002136:	2b04      	cmp	r3, #4
 8002138:	d02a      	beq.n	8002190 <SystemCoreClockUpdate+0x74>
 800213a:	e031      	b.n	80021a0 <SystemCoreClockUpdate+0x84>
  {
  case 0x00:  /* MSIS used as system clock source */
    /* Read RCC ICSR1 register */
    tmp = RCC->ICSCR1;
 800213c:	4b25      	ldr	r3, [pc, #148]	@ (80021d4 <SystemCoreClockUpdate+0xb8>)
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	603b      	str	r3, [r7, #0]
    /* Check which MSIS Range is selected */
    if ((tmp & RCC_ICSCR1_MSIRGSEL) != 0x00u)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d00f      	beq.n	800216c <SystemCoreClockUpdate+0x50>
    {
      /* Check which MSIRCx is selected as MSIS source */
      if ((tmp & RCC_ICSCR1_MSISSEL) != 0x00u)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	2b00      	cmp	r3, #0
 8002150:	da03      	bge.n	800215a <SystemCoreClockUpdate+0x3e>
      {
        /* MSI RC1 is selected */
        SystemCoreClock = MSIRC1_VALUE;
 8002152:	4b21      	ldr	r3, [pc, #132]	@ (80021d8 <SystemCoreClockUpdate+0xbc>)
 8002154:	4a21      	ldr	r2, [pc, #132]	@ (80021dc <SystemCoreClockUpdate+0xc0>)
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	e002      	b.n	8002160 <SystemCoreClockUpdate+0x44>
      }
      else
      {
        /* MSI RC0 is selected */
        SystemCoreClock = MSIRC0_VALUE;
 800215a:	4b1f      	ldr	r3, [pc, #124]	@ (80021d8 <SystemCoreClockUpdate+0xbc>)
 800215c:	4a20      	ldr	r2, [pc, #128]	@ (80021e0 <SystemCoreClockUpdate+0xc4>)
 800215e:	601a      	str	r2, [r3, #0]
      }

      /* Get MSIS range */
      msirange = (tmp & RCC_ICSCR1_MSISDIV) >> RCC_ICSCR1_MSISDIV_Pos;
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	0f5b      	lsrs	r3, r3, #29
 8002164:	f003 0303 	and.w	r3, r3, #3
 8002168:	607b      	str	r3, [r7, #4]
 800216a:	e009      	b.n	8002180 <SystemCoreClockUpdate+0x64>
    }
    else
    {
      /* MSI RC1 is selected */
      SystemCoreClock = MSIRC1_VALUE;
 800216c:	4b1a      	ldr	r3, [pc, #104]	@ (80021d8 <SystemCoreClockUpdate+0xbc>)
 800216e:	4a1b      	ldr	r2, [pc, #108]	@ (80021dc <SystemCoreClockUpdate+0xc0>)
 8002170:	601a      	str	r2, [r3, #0]

      /* Get MSIS range */
      msirange = (RCC->CSR & (RCC_CSR_MSISDIVS_1 | RCC_CSR_MSISDIVS_0)) >> RCC_CSR_MSISDIVS_Pos;
 8002172:	4b18      	ldr	r3, [pc, #96]	@ (80021d4 <SystemCoreClockUpdate+0xb8>)
 8002174:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8002178:	0b1b      	lsrs	r3, r3, #12
 800217a:	f003 0303 	and.w	r3, r3, #3
 800217e:	607b      	str	r3, [r7, #4]
    }

    /*MSIS frequency in HZ*/
    SystemCoreClock >>= msirange;
 8002180:	4b15      	ldr	r3, [pc, #84]	@ (80021d8 <SystemCoreClockUpdate+0xbc>)
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	fa22 f303 	lsr.w	r3, r2, r3
 800218a:	4a13      	ldr	r2, [pc, #76]	@ (80021d8 <SystemCoreClockUpdate+0xbc>)
 800218c:	6013      	str	r3, [r2, #0]
    break;
 800218e:	e00c      	b.n	80021aa <SystemCoreClockUpdate+0x8e>

  case RCC_CFGR1_SWS_0:  /* HSI used as system clock source */
    SystemCoreClock = HSI_VALUE;
 8002190:	4b11      	ldr	r3, [pc, #68]	@ (80021d8 <SystemCoreClockUpdate+0xbc>)
 8002192:	4a14      	ldr	r2, [pc, #80]	@ (80021e4 <SystemCoreClockUpdate+0xc8>)
 8002194:	601a      	str	r2, [r3, #0]
    break;
 8002196:	e008      	b.n	80021aa <SystemCoreClockUpdate+0x8e>

  case RCC_CFGR1_SWS_1:  /* HSE used as system clock source */
    SystemCoreClock = HSE_VALUE;
 8002198:	4b0f      	ldr	r3, [pc, #60]	@ (80021d8 <SystemCoreClockUpdate+0xbc>)
 800219a:	4a12      	ldr	r2, [pc, #72]	@ (80021e4 <SystemCoreClockUpdate+0xc8>)
 800219c:	601a      	str	r2, [r3, #0]
    break;
 800219e:	e004      	b.n	80021aa <SystemCoreClockUpdate+0x8e>

  default:
    SystemCoreClock = 0xFFFFFFFFu;
 80021a0:	4b0d      	ldr	r3, [pc, #52]	@ (80021d8 <SystemCoreClockUpdate+0xbc>)
 80021a2:	f04f 32ff 	mov.w	r2, #4294967295
 80021a6:	601a      	str	r2, [r3, #0]
    break;
 80021a8:	bf00      	nop
  }

  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos)];
 80021aa:	4b0a      	ldr	r3, [pc, #40]	@ (80021d4 <SystemCoreClockUpdate+0xb8>)
 80021ac:	6a1b      	ldr	r3, [r3, #32]
 80021ae:	f003 030f 	and.w	r3, r3, #15
 80021b2:	4a0d      	ldr	r2, [pc, #52]	@ (80021e8 <SystemCoreClockUpdate+0xcc>)
 80021b4:	5cd3      	ldrb	r3, [r2, r3]
 80021b6:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 80021b8:	4b07      	ldr	r3, [pc, #28]	@ (80021d8 <SystemCoreClockUpdate+0xbc>)
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	fa22 f303 	lsr.w	r3, r2, r3
 80021c2:	4a05      	ldr	r2, [pc, #20]	@ (80021d8 <SystemCoreClockUpdate+0xbc>)
 80021c4:	6013      	str	r3, [r2, #0]
}
 80021c6:	bf00      	nop
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	40030c00 	.word	0x40030c00
 80021d8:	20000004 	.word	0x20000004
 80021dc:	016e3600 	.word	0x016e3600
 80021e0:	05b8d800 	.word	0x05b8d800
 80021e4:	00f42400 	.word	0x00f42400
 80021e8:	08021590 	.word	0x08021590

080021ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80021ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002224 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80021f0:	f7ff ff82 	bl	80020f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80021f4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80021f6:	e003      	b.n	8002200 <LoopCopyDataInit>

080021f8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80021f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002228 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80021fa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80021fc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80021fe:	3104      	adds	r1, #4

08002200 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002200:	480a      	ldr	r0, [pc, #40]	@ (800222c <LoopForever+0xa>)
	ldr	r3, =_edata
 8002202:	4b0b      	ldr	r3, [pc, #44]	@ (8002230 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002204:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002206:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002208:	d3f6      	bcc.n	80021f8 <CopyDataInit>
	ldr	r2, =_sbss
 800220a:	4a0a      	ldr	r2, [pc, #40]	@ (8002234 <LoopForever+0x12>)
	b	LoopFillZerobss
 800220c:	e002      	b.n	8002214 <LoopFillZerobss>

0800220e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800220e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002210:	f842 3b04 	str.w	r3, [r2], #4

08002214 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002214:	4b08      	ldr	r3, [pc, #32]	@ (8002238 <LoopForever+0x16>)
	cmp	r2, r3
 8002216:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002218:	d3f9      	bcc.n	800220e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800221a:	f007 fa8b 	bl	8009734 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800221e:	f7fe fd85 	bl	8000d2c <main>

08002222 <LoopForever>:

LoopForever:
    b LoopForever
 8002222:	e7fe      	b.n	8002222 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8002224:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8002228:	08021664 	.word	0x08021664
	ldr	r0, =_sdata
 800222c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002230:	2000007c 	.word	0x2000007c
	ldr	r2, =_sbss
 8002234:	2000007c 	.word	0x2000007c
	ldr	r3, = _ebss
 8002238:	20000564 	.word	0x20000564

0800223c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800223c:	e7fe      	b.n	800223c <ADC1_IRQHandler>
	...

08002240 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b088      	sub	sp, #32
 8002244:	af00      	add	r7, sp, #0
 8002246:	4603      	mov	r3, r0
 8002248:	460a      	mov	r2, r1
 800224a:	71fb      	strb	r3, [r7, #7]
 800224c:	4613      	mov	r3, r2
 800224e:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8002250:	4b31      	ldr	r3, [pc, #196]	@ (8002318 <BSP_PB_Init+0xd8>)
 8002252:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002256:	4a30      	ldr	r2, [pc, #192]	@ (8002318 <BSP_PB_Init+0xd8>)
 8002258:	f043 0304 	orr.w	r3, r3, #4
 800225c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002260:	4b2d      	ldr	r3, [pc, #180]	@ (8002318 <BSP_PB_Init+0xd8>)
 8002262:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002266:	f003 0304 	and.w	r3, r3, #4
 800226a:	60bb      	str	r3, [r7, #8]
 800226c:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 800226e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002272:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8002274:	2302      	movs	r3, #2
 8002276:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002278:	2302      	movs	r3, #2
 800227a:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 800227c:	79bb      	ldrb	r3, [r7, #6]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d10c      	bne.n	800229c <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8002282:	2300      	movs	r3, #0
 8002284:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8002286:	79fb      	ldrb	r3, [r7, #7]
 8002288:	4a24      	ldr	r2, [pc, #144]	@ (800231c <BSP_PB_Init+0xdc>)
 800228a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800228e:	f107 020c 	add.w	r2, r7, #12
 8002292:	4611      	mov	r1, r2
 8002294:	4618      	mov	r0, r3
 8002296:	f002 f8d7 	bl	8004448 <HAL_GPIO_Init>
 800229a:	e037      	b.n	800230c <BSP_PB_Init+0xcc>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 800229c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80022a0:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80022a2:	79fb      	ldrb	r3, [r7, #7]
 80022a4:	4a1d      	ldr	r2, [pc, #116]	@ (800231c <BSP_PB_Init+0xdc>)
 80022a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022aa:	f107 020c 	add.w	r2, r7, #12
 80022ae:	4611      	mov	r1, r2
 80022b0:	4618      	mov	r0, r3
 80022b2:	f002 f8c9 	bl	8004448 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80022b6:	79fa      	ldrb	r2, [r7, #7]
 80022b8:	4613      	mov	r3, r2
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	4413      	add	r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	4a17      	ldr	r2, [pc, #92]	@ (8002320 <BSP_PB_Init+0xe0>)
 80022c2:	441a      	add	r2, r3
 80022c4:	79fb      	ldrb	r3, [r7, #7]
 80022c6:	4917      	ldr	r1, [pc, #92]	@ (8002324 <BSP_PB_Init+0xe4>)
 80022c8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80022cc:	4619      	mov	r1, r3
 80022ce:	4610      	mov	r0, r2
 80022d0:	f002 f862 	bl	8004398 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80022d4:	79fa      	ldrb	r2, [r7, #7]
 80022d6:	4613      	mov	r3, r2
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	4413      	add	r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	4a10      	ldr	r2, [pc, #64]	@ (8002320 <BSP_PB_Init+0xe0>)
 80022e0:	1898      	adds	r0, r3, r2
 80022e2:	79fb      	ldrb	r3, [r7, #7]
 80022e4:	4a10      	ldr	r2, [pc, #64]	@ (8002328 <BSP_PB_Init+0xe8>)
 80022e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ea:	461a      	mov	r2, r3
 80022ec:	2100      	movs	r1, #0
 80022ee:	f002 f827 	bl	8004340 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80022f2:	2018      	movs	r0, #24
 80022f4:	79fb      	ldrb	r3, [r7, #7]
 80022f6:	4a0d      	ldr	r2, [pc, #52]	@ (800232c <BSP_PB_Init+0xec>)
 80022f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022fc:	2200      	movs	r2, #0
 80022fe:	4619      	mov	r1, r3
 8002300:	f001 fcf6 	bl	8003cf0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8002304:	2318      	movs	r3, #24
 8002306:	4618      	mov	r0, r3
 8002308:	f001 fd0c 	bl	8003d24 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3720      	adds	r7, #32
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	40030c00 	.word	0x40030c00
 800231c:	2000000c 	.word	0x2000000c
 8002320:	20000370 	.word	0x20000370
 8002324:	080215a8 	.word	0x080215a8
 8002328:	20000010 	.word	0x20000010
 800232c:	20000014 	.word	0x20000014

08002330 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	4603      	mov	r3, r0
 8002338:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 800233a:	79fa      	ldrb	r2, [r7, #7]
 800233c:	4613      	mov	r3, r2
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	4413      	add	r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	4a04      	ldr	r2, [pc, #16]	@ (8002358 <BSP_PB_IRQHandler+0x28>)
 8002346:	4413      	add	r3, r2
 8002348:	4618      	mov	r0, r3
 800234a:	f002 f839 	bl	80043c0 <HAL_EXTI_IRQHandler>
}
 800234e:	bf00      	nop
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	20000370 	.word	0x20000370

0800235c <BSP_COM_Init>:
  * @param  COM_Init Pointer to a COM_InitTypeDef structure that contains the
  *                configuration information for the specified COM peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	4603      	mov	r3, r0
 8002364:	6039      	str	r1, [r7, #0]
 8002366:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002368:	2300      	movs	r3, #0
 800236a:	60fb      	str	r3, [r7, #12]

  if (COM >= COMn)
 800236c:	79fb      	ldrb	r3, [r7, #7]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d003      	beq.n	800237a <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002372:	f06f 0301 	mvn.w	r3, #1
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	e018      	b.n	80023ac <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 800237a:	79fb      	ldrb	r3, [r7, #7]
 800237c:	2294      	movs	r2, #148	@ 0x94
 800237e:	fb02 f303 	mul.w	r3, r2, r3
 8002382:	4a0d      	ldr	r2, [pc, #52]	@ (80023b8 <BSP_COM_Init+0x5c>)
 8002384:	4413      	add	r3, r2
 8002386:	4618      	mov	r0, r3
 8002388:	f000 f870 	bl	800246c <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 800238c:	79fb      	ldrb	r3, [r7, #7]
 800238e:	2294      	movs	r2, #148	@ 0x94
 8002390:	fb02 f303 	mul.w	r3, r2, r3
 8002394:	4a08      	ldr	r2, [pc, #32]	@ (80023b8 <BSP_COM_Init+0x5c>)
 8002396:	4413      	add	r3, r2
 8002398:	6839      	ldr	r1, [r7, #0]
 800239a:	4618      	mov	r0, r3
 800239c:	f000 f80e 	bl	80023bc <MX_USART1_Init>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d002      	beq.n	80023ac <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80023a6:	f06f 0303 	mvn.w	r3, #3
 80023aa:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80023ac:	68fb      	ldr	r3, [r7, #12]
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	2000037c 	.word	0x2000037c

080023bc <MX_USART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 80023c6:	4b16      	ldr	r3, [pc, #88]	@ (8002420 <MX_USART1_Init+0x64>)
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	220c      	movs	r2, #12
 80023da:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	895b      	ldrh	r3, [r3, #10]
 80023e0:	461a      	mov	r2, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685a      	ldr	r2, [r3, #4]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	891b      	ldrh	r3, [r3, #8]
 80023f2:	461a      	mov	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	899b      	ldrh	r3, [r3, #12]
 80023fc:	461a      	mov	r2, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002408:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f006 f987 	bl	8008724 <HAL_UART_Init>
 8002416:	4603      	mov	r3, r0
}
 8002418:	4618      	mov	r0, r3
 800241a:	3708      	adds	r7, #8
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	20000008 	.word	0x20000008

08002424 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 800242c:	4b09      	ldr	r3, [pc, #36]	@ (8002454 <__io_putchar+0x30>)
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	461a      	mov	r2, r3
 8002432:	2394      	movs	r3, #148	@ 0x94
 8002434:	fb02 f303 	mul.w	r3, r2, r3
 8002438:	4a07      	ldr	r2, [pc, #28]	@ (8002458 <__io_putchar+0x34>)
 800243a:	1898      	adds	r0, r3, r2
 800243c:	1d39      	adds	r1, r7, #4
 800243e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002442:	2201      	movs	r2, #1
 8002444:	f006 f9be 	bl	80087c4 <HAL_UART_Transmit>
  return ch;
 8002448:	687b      	ldr	r3, [r7, #4]
}
 800244a:	4618      	mov	r0, r3
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	20000410 	.word	0x20000410
 8002458:	2000037c 	.word	0x2000037c

0800245c <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8002460:	2000      	movs	r0, #0
 8002462:	f7ff fa61 	bl	8001928 <BSP_PB_Callback>
}
 8002466:	bf00      	nop
 8002468:	bd80      	pop	{r7, pc}
	...

0800246c <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b08a      	sub	sp, #40	@ 0x28
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8002474:	4b27      	ldr	r3, [pc, #156]	@ (8002514 <COM1_MspInit+0xa8>)
 8002476:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800247a:	4a26      	ldr	r2, [pc, #152]	@ (8002514 <COM1_MspInit+0xa8>)
 800247c:	f043 0301 	orr.w	r3, r3, #1
 8002480:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002484:	4b23      	ldr	r3, [pc, #140]	@ (8002514 <COM1_MspInit+0xa8>)
 8002486:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	613b      	str	r3, [r7, #16]
 8002490:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8002492:	4b20      	ldr	r3, [pc, #128]	@ (8002514 <COM1_MspInit+0xa8>)
 8002494:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002498:	4a1e      	ldr	r2, [pc, #120]	@ (8002514 <COM1_MspInit+0xa8>)
 800249a:	f043 0301 	orr.w	r3, r3, #1
 800249e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80024a2:	4b1c      	ldr	r3, [pc, #112]	@ (8002514 <COM1_MspInit+0xa8>)
 80024a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024a8:	f003 0301 	and.w	r3, r3, #1
 80024ac:	60fb      	str	r3, [r7, #12]
 80024ae:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 80024b0:	4b18      	ldr	r3, [pc, #96]	@ (8002514 <COM1_MspInit+0xa8>)
 80024b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80024b6:	4a17      	ldr	r2, [pc, #92]	@ (8002514 <COM1_MspInit+0xa8>)
 80024b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024bc:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80024c0:	4b14      	ldr	r3, [pc, #80]	@ (8002514 <COM1_MspInit+0xa8>)
 80024c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80024c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024ca:	60bb      	str	r3, [r7, #8]
 80024cc:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 80024ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80024d2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80024d4:	2302      	movs	r3, #2
 80024d6:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80024d8:	2302      	movs	r3, #2
 80024da:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80024dc:	2301      	movs	r3, #1
 80024de:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 80024e0:	2307      	movs	r3, #7
 80024e2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 80024e4:	f107 0314 	add.w	r3, r7, #20
 80024e8:	4619      	mov	r1, r3
 80024ea:	480b      	ldr	r0, [pc, #44]	@ (8002518 <COM1_MspInit+0xac>)
 80024ec:	f001 ffac 	bl	8004448 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 80024f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80024f4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80024f6:	2302      	movs	r3, #2
 80024f8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 80024fa:	2307      	movs	r3, #7
 80024fc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 80024fe:	f107 0314 	add.w	r3, r7, #20
 8002502:	4619      	mov	r1, r3
 8002504:	4804      	ldr	r0, [pc, #16]	@ (8002518 <COM1_MspInit+0xac>)
 8002506:	f001 ff9f 	bl	8004448 <HAL_GPIO_Init>
}
 800250a:	bf00      	nop
 800250c:	3728      	adds	r7, #40	@ 0x28
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	40030c00 	.word	0x40030c00
 8002518:	42020000 	.word	0x42020000

0800251c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002520:	4b0d      	ldr	r3, [pc, #52]	@ (8002558 <HAL_Init+0x3c>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a0c      	ldr	r2, [pc, #48]	@ (8002558 <HAL_Init+0x3c>)
 8002526:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800252a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800252c:	2003      	movs	r0, #3
 800252e:	f001 fbd4 	bl	8003cda <HAL_NVIC_SetPriorityGrouping>

  /* Ensure time base clock coherency */
  SystemCoreClockUpdate();
 8002532:	f7ff fdf3 	bl	800211c <SystemCoreClockUpdate>

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002536:	2004      	movs	r0, #4
 8002538:	f001 fc24 	bl	8003d84 <HAL_SYSTICK_CLKSourceConfig>

  /* Initialize 1ms tick time base (default SysTick based on MSI clock after Reset) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800253c:	200f      	movs	r0, #15
 800253e:	f000 f80d 	bl	800255c <HAL_InitTick>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <HAL_Init+0x30>
  {
    return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e002      	b.n	8002552 <HAL_Init+0x36>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800254c:	f7ff fa06 	bl	800195c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	40022000 	.word	0x40022000

0800255c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8002564:	2300      	movs	r3, #0
 8002566:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8002568:	4b36      	ldr	r3, [pc, #216]	@ (8002644 <HAL_InitTick+0xe8>)
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d101      	bne.n	8002574 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e062      	b.n	800263a <HAL_InitTick+0xde>
  }

  /* Check Clock source to calculate the tickNumber */
  if(READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8002574:	4b34      	ldr	r3, [pc, #208]	@ (8002648 <HAL_InitTick+0xec>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0304 	and.w	r3, r3, #4
 800257c:	2b04      	cmp	r3, #4
 800257e:	d10c      	bne.n	800259a <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8002580:	4b32      	ldr	r3, [pc, #200]	@ (800264c <HAL_InitTick+0xf0>)
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	4b2f      	ldr	r3, [pc, #188]	@ (8002644 <HAL_InitTick+0xe8>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	4619      	mov	r1, r3
 800258a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800258e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002592:	fbb2 f3f3 	udiv	r3, r2, r3
 8002596:	60fb      	str	r3, [r7, #12]
 8002598:	e03d      	b.n	8002616 <HAL_InitTick+0xba>
  }
  else
  {
    systicksel = __HAL_RCC_GET_SYSTICK_SOURCE();
 800259a:	4b2d      	ldr	r3, [pc, #180]	@ (8002650 <HAL_InitTick+0xf4>)
 800259c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80025a0:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80025a4:	60bb      	str	r3, [r7, #8]
    switch (systicksel)
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80025ac:	d025      	beq.n	80025fa <HAL_InitTick+0x9e>
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80025b4:	d82e      	bhi.n	8002614 <HAL_InitTick+0xb8>
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d004      	beq.n	80025c6 <HAL_InitTick+0x6a>
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80025c2:	d00d      	beq.n	80025e0 <HAL_InitTick+0x84>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;

      default:
        /* Nothing to do */
        break;
 80025c4:	e026      	b.n	8002614 <HAL_InitTick+0xb8>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80025c6:	4b21      	ldr	r3, [pc, #132]	@ (800264c <HAL_InitTick+0xf0>)
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	4b1e      	ldr	r3, [pc, #120]	@ (8002644 <HAL_InitTick+0xe8>)
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	4619      	mov	r1, r3
 80025d0:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80025d4:	fbb3 f3f1 	udiv	r3, r3, r1
 80025d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025dc:	60fb      	str	r3, [r7, #12]
        break;
 80025de:	e01a      	b.n	8002616 <HAL_InitTick+0xba>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80025e0:	4b18      	ldr	r3, [pc, #96]	@ (8002644 <HAL_InitTick+0xe8>)
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	461a      	mov	r2, r3
 80025e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80025ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80025ee:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80025f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f6:	60fb      	str	r3, [r7, #12]
        break;
 80025f8:	e00d      	b.n	8002616 <HAL_InitTick+0xba>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80025fa:	4b12      	ldr	r3, [pc, #72]	@ (8002644 <HAL_InitTick+0xe8>)
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	461a      	mov	r2, r3
 8002600:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002604:	fbb3 f3f2 	udiv	r3, r3, r2
 8002608:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800260c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002610:	60fb      	str	r3, [r7, #12]
        break;
 8002612:	e000      	b.n	8002616 <HAL_InitTick+0xba>
        break;
 8002614:	bf00      	nop
    }
  }

  /* Configure the SysTick */
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	f001 fb92 	bl	8003d40 <HAL_SYSTICK_Config>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <HAL_InitTick+0xca>
  {
    return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e009      	b.n	800263a <HAL_InitTick+0xde>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002626:	2200      	movs	r2, #0
 8002628:	6879      	ldr	r1, [r7, #4]
 800262a:	f04f 30ff 	mov.w	r0, #4294967295
 800262e:	f001 fb5f 	bl	8003cf0 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8002632:	4a08      	ldr	r2, [pc, #32]	@ (8002654 <HAL_InitTick+0xf8>)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3710      	adds	r7, #16
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	2000001c 	.word	0x2000001c
 8002648:	e000e010 	.word	0xe000e010
 800264c:	20000004 	.word	0x20000004
 8002650:	40030c00 	.word	0x40030c00
 8002654:	20000018 	.word	0x20000018

08002658 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800265c:	4b06      	ldr	r3, [pc, #24]	@ (8002678 <HAL_IncTick+0x20>)
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	461a      	mov	r2, r3
 8002662:	4b06      	ldr	r3, [pc, #24]	@ (800267c <HAL_IncTick+0x24>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4413      	add	r3, r2
 8002668:	4a04      	ldr	r2, [pc, #16]	@ (800267c <HAL_IncTick+0x24>)
 800266a:	6013      	str	r3, [r2, #0]
}
 800266c:	bf00      	nop
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	2000001c 	.word	0x2000001c
 800267c:	20000414 	.word	0x20000414

08002680 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  return uwTick;
 8002684:	4b03      	ldr	r3, [pc, #12]	@ (8002694 <HAL_GetTick+0x14>)
 8002686:	681b      	ldr	r3, [r3, #0]
}
 8002688:	4618      	mov	r0, r3
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	20000414 	.word	0x20000414

08002698 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026a0:	f7ff ffee 	bl	8002680 <HAL_GetTick>
 80026a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b0:	d005      	beq.n	80026be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026b2:	4b0a      	ldr	r3, [pc, #40]	@ (80026dc <HAL_Delay+0x44>)
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	461a      	mov	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	4413      	add	r3, r2
 80026bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026be:	bf00      	nop
 80026c0:	f7ff ffde 	bl	8002680 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	68fa      	ldr	r2, [r7, #12]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d8f7      	bhi.n	80026c0 <HAL_Delay+0x28>
  {
  }
}
 80026d0:	bf00      	nop
 80026d2:	bf00      	nop
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	2000001c 	.word	0x2000001c

080026e0 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	431a      	orrs	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	609a      	str	r2, [r3, #8]
}
 80026fa:	bf00      	nop
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr

08002706 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002706:	b480      	push	{r7}
 8002708:	b083      	sub	sp, #12
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002716:	4618      	mov	r0, r3
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr

08002722 <LL_ADC_SetPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VDDCORE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetPathInternalCh(ADC_TypeDef *ADCx, uint32_t PathInternal)
{
 8002722:	b480      	push	{r7}
 8002724:	b083      	sub	sp, #12
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
 800272a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->OR, ADC_OR_VDDCOREEN, (PathInternal >> ADC_PATH_INTERNAL_POS));
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8002732:	f023 0201 	bic.w	r2, r3, #1
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	0c1b      	lsrs	r3, r3, #16
 800273a:	431a      	orrs	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
}
 8002742:	bf00      	nop
 8002744:	370c      	adds	r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr

0800274e <LL_ADC_GetPathInternalCh>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VDDCORE
  */
__STATIC_INLINE uint32_t LL_ADC_GetPathInternalCh(const ADC_TypeDef *ADCx)
{
 800274e:	b480      	push	{r7}
 8002750:	b083      	sub	sp, #12
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->OR, ADC_OR_VDDCOREEN)) << ADC_PATH_INTERNAL_POS;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800275c:	041b      	lsls	r3, r3, #16
 800275e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
}
 8002762:	4618      	mov	r0, r3
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr

0800276e <LL_ADC_SetOffsetChannel>:
  *
  *         (1) On this STM32 series, parameter available only on ADC instance: ADC2.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel)
{
 800276e:	b480      	push	{r7}
 8002770:	b087      	sub	sp, #28
 8002772:	af00      	add	r7, sp, #0
 8002774:	60f8      	str	r0, [r7, #12]
 8002776:	60b9      	str	r1, [r7, #8]
 8002778:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg_offset_cfg = __ADC_PTR_REG_OFFSET(ADCx->OFCFGR1, Offsety);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	3350      	adds	r3, #80	@ 0x50
 800277e:	461a      	mov	r2, r3
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	4413      	add	r3, r2
 8002786:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg_offset_cfg,
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	06db      	lsls	r3, r3, #27
 8002794:	431a      	orrs	r2, r3
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	601a      	str	r2, [r3, #0]
             ADC_OFCFGR1_OFFSET_CH,
             (Channel & ADC_CHANNEL_NUMBER_MASK) << ADC_OFCFGR1_OFFSET_CH_Pos);
}
 800279a:	bf00      	nop
 800279c:	371c      	adds	r7, #28
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr

080027a6 <LL_ADC_GetOffsetChannel>:
  *         (3) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80027a6:	b480      	push	{r7}
 80027a8:	b085      	sub	sp, #20
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
 80027ae:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFCFGR1, Offsety);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	3350      	adds	r3, #80	@ 0x50
 80027b4:	461a      	mov	r2, r3
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	4413      	add	r3, r2
 80027bc:	60fb      	str	r3, [r7, #12]

  return (uint32_t) __LL_ADC_DECIMAL_NB_TO_CHANNEL(READ_BIT(*preg, ADC_OFCFGR1_OFFSET_CH) >> ADC_OFCFGR1_OFFSET_CH_Pos);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	0edb      	lsrs	r3, r3, #27
 80027c4:	f003 031f 	and.w	r3, r3, #31
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3714      	adds	r7, #20
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <LL_ADC_SetOffsetLevel>:
  *         @arg @ref LL_ADC_OFFSET_4
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x00FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetLevel(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetLevel)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b087      	sub	sp, #28
 80027d8:	af00      	add	r7, sp, #0
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	60b9      	str	r1, [r7, #8]
 80027de:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg_offset_val = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	3360      	adds	r3, #96	@ 0x60
 80027e4:	461a      	mov	r2, r3
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	4413      	add	r3, r2
 80027ec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg_offset_val,
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	0d9b      	lsrs	r3, r3, #22
 80027f4:	059b      	lsls	r3, r3, #22
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	431a      	orrs	r2, r3
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET,
             OffsetLevel);
}
 80027fe:	bf00      	nop
 8002800:	371c      	adds	r7, #28
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr

0800280a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800280a:	b480      	push	{r7}
 800280c:	b087      	sub	sp, #28
 800280e:	af00      	add	r7, sp, #0
 8002810:	60f8      	str	r0, [r7, #12]
 8002812:	60b9      	str	r1, [r7, #8]
 8002814:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFCFGR1, Offsety);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	3350      	adds	r3, #80	@ 0x50
 800281a:	461a      	mov	r2, r3
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	4413      	add	r3, r2
 8002822:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	431a      	orrs	r2, r3
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	601a      	str	r2, [r3, #0]
             ADC_OFCFGR1_POSOFF,
             OffsetSign);
}
 8002834:	bf00      	nop
 8002836:	371c      	adds	r7, #28
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SAT_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 8002840:	b480      	push	{r7}
 8002842:	b087      	sub	sp, #28
 8002844:	af00      	add	r7, sp, #0
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFCFGR1, Offsety);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	3350      	adds	r3, #80	@ 0x50
 8002850:	461a      	mov	r2, r3
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	4413      	add	r3, r2
 8002858:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFCFGR1_SSAT, OffsetSignedSaturation);
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	431a      	orrs	r2, r3
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	601a      	str	r2, [r3, #0]
}
 800286a:	bf00      	nop
 800286c:	371c      	adds	r7, #28
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr

08002876 <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SAT_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
 8002876:	b480      	push	{r7}
 8002878:	b087      	sub	sp, #28
 800287a:	af00      	add	r7, sp, #0
 800287c:	60f8      	str	r0, [r7, #12]
 800287e:	60b9      	str	r1, [r7, #8]
 8002880:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFCFGR1, Offsety);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	3350      	adds	r3, #80	@ 0x50
 8002886:	461a      	mov	r2, r3
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	4413      	add	r3, r2
 800288e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFCFGR1_USAT, OffsetUnsignedSaturation);
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	431a      	orrs	r2, r3
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	601a      	str	r2, [r3, #0]
}
 80028a0:	bf00      	nop
 80028a2:	371c      	adds	r7, #28
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028ba:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80028be:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80028c2:	683a      	ldr	r2, [r7, #0]
 80028c4:	431a      	orrs	r2, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028ce:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80028d2:	683a      	ldr	r2, [r7, #0]
 80028d4:	2a00      	cmp	r2, #0
 80028d6:	d002      	beq.n	80028de <LL_ADC_SetGainCompensation+0x32>
 80028d8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80028dc:	e000      	b.n	80028e0 <LL_ADC_SetGainCompensation+0x34>
 80028de:	2200      	movs	r2, #0
 80028e0:	431a      	orrs	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	671a      	str	r2, [r3, #112]	@ 0x70
}
 80028e6:	bf00      	nop
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr

080028f2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80028f2:	b480      	push	{r7}
 80028f4:	b083      	sub	sp, #12
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002906:	2301      	movs	r3, #1
 8002908:	e000      	b.n	800290c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800290a:	2300      	movs	r3, #0
}
 800290c:	4618      	mov	r0, r3
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <LL_ADC_REG_SetSequencerRanks>:
  *
  *         (1) On this STM32 series, parameter available only on ADC instance: ADC2.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002918:	b480      	push	{r7}
 800291a:	b087      	sub	sp, #28
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	3330      	adds	r3, #48	@ 0x30
 8002928:	461a      	mov	r2, r3
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	0a1b      	lsrs	r3, r3, #8
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	f003 030c 	and.w	r3, r3, #12
 8002934:	4413      	add	r3, r2
 8002936:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	f003 031f 	and.w	r3, r3, #31
 8002942:	211f      	movs	r1, #31
 8002944:	fa01 f303 	lsl.w	r3, r1, r3
 8002948:	43db      	mvns	r3, r3
 800294a:	401a      	ands	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f003 011f 	and.w	r1, r3, #31
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	f003 031f 	and.w	r3, r3, #31
 8002958:	fa01 f303 	lsl.w	r3, r1, r3
 800295c:	431a      	orrs	r2, r3
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002962:	bf00      	nop
 8002964:	371c      	adds	r7, #28
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr

0800296e <LL_ADC_SetChannelPreselection>:
  *
  *         (1) On this STM32 series, parameter available only on ADC instance: ADC2.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800296e:	b480      	push	{r7}
 8002970:	b085      	sub	sp, #20
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
 8002976:	6039      	str	r1, [r7, #0]
  __IO uint32_t channel_preselectione = READ_REG(ADCx->PCSEL);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	69db      	ldr	r3, [r3, #28]
 800297c:	60fb      	str	r3, [r7, #12]
  WRITE_REG(ADCx->PCSEL,
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	f003 031f 	and.w	r3, r3, #31
 8002984:	2201      	movs	r2, #1
 8002986:	409a      	lsls	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	431a      	orrs	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	61da      	str	r2, [r3, #28]
            channel_preselectione | (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)Channel) & 0x1FUL)));
}
 8002990:	bf00      	nop
 8002992:	3714      	adds	r7, #20
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_246CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_1499CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800299c:	b480      	push	{r7}
 800299e:	b087      	sub	sp, #28
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  const uint32_t iChannel = __ADC_CHANNEL_INDEX(Channel);
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	f003 031f 	and.w	r3, r3, #31
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d07f      	beq.n	8002ab2 <LL_ADC_SetChannelSamplingTime+0x116>
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	f003 031f 	and.w	r3, r3, #31
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d078      	beq.n	8002aae <LL_ADC_SetChannelSamplingTime+0x112>
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	f003 031f 	and.w	r3, r3, #31
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d071      	beq.n	8002aaa <LL_ADC_SetChannelSamplingTime+0x10e>
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	f003 031f 	and.w	r3, r3, #31
 80029cc:	2b03      	cmp	r3, #3
 80029ce:	d06a      	beq.n	8002aa6 <LL_ADC_SetChannelSamplingTime+0x10a>
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	f003 031f 	and.w	r3, r3, #31
 80029d6:	2b04      	cmp	r3, #4
 80029d8:	d063      	beq.n	8002aa2 <LL_ADC_SetChannelSamplingTime+0x106>
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	f003 031f 	and.w	r3, r3, #31
 80029e0:	2b05      	cmp	r3, #5
 80029e2:	d05c      	beq.n	8002a9e <LL_ADC_SetChannelSamplingTime+0x102>
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	f003 031f 	and.w	r3, r3, #31
 80029ea:	2b06      	cmp	r3, #6
 80029ec:	d055      	beq.n	8002a9a <LL_ADC_SetChannelSamplingTime+0xfe>
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	f003 031f 	and.w	r3, r3, #31
 80029f4:	2b07      	cmp	r3, #7
 80029f6:	d04e      	beq.n	8002a96 <LL_ADC_SetChannelSamplingTime+0xfa>
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	f003 031f 	and.w	r3, r3, #31
 80029fe:	2b08      	cmp	r3, #8
 8002a00:	d047      	beq.n	8002a92 <LL_ADC_SetChannelSamplingTime+0xf6>
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	f003 031f 	and.w	r3, r3, #31
 8002a08:	2b09      	cmp	r3, #9
 8002a0a:	d040      	beq.n	8002a8e <LL_ADC_SetChannelSamplingTime+0xf2>
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	f003 031f 	and.w	r3, r3, #31
 8002a12:	2b0a      	cmp	r3, #10
 8002a14:	d039      	beq.n	8002a8a <LL_ADC_SetChannelSamplingTime+0xee>
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	f003 031f 	and.w	r3, r3, #31
 8002a1c:	2b0b      	cmp	r3, #11
 8002a1e:	d032      	beq.n	8002a86 <LL_ADC_SetChannelSamplingTime+0xea>
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	f003 031f 	and.w	r3, r3, #31
 8002a26:	2b0c      	cmp	r3, #12
 8002a28:	d02b      	beq.n	8002a82 <LL_ADC_SetChannelSamplingTime+0xe6>
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	f003 031f 	and.w	r3, r3, #31
 8002a30:	2b0d      	cmp	r3, #13
 8002a32:	d024      	beq.n	8002a7e <LL_ADC_SetChannelSamplingTime+0xe2>
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	f003 031f 	and.w	r3, r3, #31
 8002a3a:	2b0e      	cmp	r3, #14
 8002a3c:	d01d      	beq.n	8002a7a <LL_ADC_SetChannelSamplingTime+0xde>
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	f003 031f 	and.w	r3, r3, #31
 8002a44:	2b0f      	cmp	r3, #15
 8002a46:	d016      	beq.n	8002a76 <LL_ADC_SetChannelSamplingTime+0xda>
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	f003 031f 	and.w	r3, r3, #31
 8002a4e:	2b10      	cmp	r3, #16
 8002a50:	d00f      	beq.n	8002a72 <LL_ADC_SetChannelSamplingTime+0xd6>
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	f003 031f 	and.w	r3, r3, #31
 8002a58:	2b11      	cmp	r3, #17
 8002a5a:	d008      	beq.n	8002a6e <LL_ADC_SetChannelSamplingTime+0xd2>
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	f003 031f 	and.w	r3, r3, #31
 8002a62:	2b12      	cmp	r3, #18
 8002a64:	d101      	bne.n	8002a6a <LL_ADC_SetChannelSamplingTime+0xce>
 8002a66:	2312      	movs	r3, #18
 8002a68:	e024      	b.n	8002ab4 <LL_ADC_SetChannelSamplingTime+0x118>
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	e022      	b.n	8002ab4 <LL_ADC_SetChannelSamplingTime+0x118>
 8002a6e:	2311      	movs	r3, #17
 8002a70:	e020      	b.n	8002ab4 <LL_ADC_SetChannelSamplingTime+0x118>
 8002a72:	2310      	movs	r3, #16
 8002a74:	e01e      	b.n	8002ab4 <LL_ADC_SetChannelSamplingTime+0x118>
 8002a76:	230f      	movs	r3, #15
 8002a78:	e01c      	b.n	8002ab4 <LL_ADC_SetChannelSamplingTime+0x118>
 8002a7a:	230e      	movs	r3, #14
 8002a7c:	e01a      	b.n	8002ab4 <LL_ADC_SetChannelSamplingTime+0x118>
 8002a7e:	230d      	movs	r3, #13
 8002a80:	e018      	b.n	8002ab4 <LL_ADC_SetChannelSamplingTime+0x118>
 8002a82:	230c      	movs	r3, #12
 8002a84:	e016      	b.n	8002ab4 <LL_ADC_SetChannelSamplingTime+0x118>
 8002a86:	230b      	movs	r3, #11
 8002a88:	e014      	b.n	8002ab4 <LL_ADC_SetChannelSamplingTime+0x118>
 8002a8a:	230a      	movs	r3, #10
 8002a8c:	e012      	b.n	8002ab4 <LL_ADC_SetChannelSamplingTime+0x118>
 8002a8e:	2309      	movs	r3, #9
 8002a90:	e010      	b.n	8002ab4 <LL_ADC_SetChannelSamplingTime+0x118>
 8002a92:	2308      	movs	r3, #8
 8002a94:	e00e      	b.n	8002ab4 <LL_ADC_SetChannelSamplingTime+0x118>
 8002a96:	2307      	movs	r3, #7
 8002a98:	e00c      	b.n	8002ab4 <LL_ADC_SetChannelSamplingTime+0x118>
 8002a9a:	2306      	movs	r3, #6
 8002a9c:	e00a      	b.n	8002ab4 <LL_ADC_SetChannelSamplingTime+0x118>
 8002a9e:	2305      	movs	r3, #5
 8002aa0:	e008      	b.n	8002ab4 <LL_ADC_SetChannelSamplingTime+0x118>
 8002aa2:	2304      	movs	r3, #4
 8002aa4:	e006      	b.n	8002ab4 <LL_ADC_SetChannelSamplingTime+0x118>
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e004      	b.n	8002ab4 <LL_ADC_SetChannelSamplingTime+0x118>
 8002aaa:	2302      	movs	r3, #2
 8002aac:	e002      	b.n	8002ab4 <LL_ADC_SetChannelSamplingTime+0x118>
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e000      	b.n	8002ab4 <LL_ADC_SetChannelSamplingTime+0x118>
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	617b      	str	r3, [r7, #20]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	3314      	adds	r3, #20
 8002aba:	4619      	mov	r1, r3
 8002abc:	4a15      	ldr	r2, [pc, #84]	@ (8002b14 <LL_ADC_SetChannelSamplingTime+0x178>)
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ac4:	0e5b      	lsrs	r3, r3, #25
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	f003 0304 	and.w	r3, r3, #4
 8002acc:	440b      	add	r3, r1
 8002ace:	613b      	str	r3, [r7, #16]
                                             ((ADC_CHANNEL_LUT[iChannel]
                                               & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
  MODIFY_REG(*preg,
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	490f      	ldr	r1, [pc, #60]	@ (8002b14 <LL_ADC_SetChannelSamplingTime+0x178>)
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002adc:	0d1b      	lsrs	r3, r3, #20
 8002ade:	f003 031f 	and.w	r3, r3, #31
 8002ae2:	2107      	movs	r1, #7
 8002ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae8:	43db      	mvns	r3, r3
 8002aea:	401a      	ands	r2, r3
 8002aec:	4909      	ldr	r1, [pc, #36]	@ (8002b14 <LL_ADC_SetChannelSamplingTime+0x178>)
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002af4:	0d1b      	lsrs	r3, r3, #20
 8002af6:	f003 031f 	and.w	r3, r3, #31
 8002afa:	6879      	ldr	r1, [r7, #4]
 8002afc:	fa01 f303 	lsl.w	r3, r1, r3
 8002b00:	431a      	orrs	r2, r3
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((ADC_CHANNEL_LUT[iChannel] & ADC_CHANNEL_SMPx_BITOFFSET_MASK)
                                >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((ADC_CHANNEL_LUT[iChannel] & ADC_CHANNEL_SMPx_BITOFFSET_MASK)
                                >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002b06:	bf00      	nop
 8002b08:	371c      	adds	r7, #28
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	080215ac 	.word	0x080215ac

08002b18 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f003 031f 	and.w	r3, r3, #31
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <LL_ADC_GetMultiDataFormat>:
  *         @arg @ref LL_ADC_MULTI_REG_DATA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DATA_COMMON_32B
  *         @arg @ref LL_ADC_MULTI_REG_DATA_COMMON_16B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDataFormat(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002b60:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	6093      	str	r3, [r2, #8]
}
 8002b68:	bf00      	nop
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b88:	d101      	bne.n	8002b8e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e000      	b.n	8002b90 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002bac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002bb0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002bb8:	bf00      	nop
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bd4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002bd8:	d101      	bne.n	8002bde <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e000      	b.n	8002be0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002bfc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c00:	f043 0201 	orr.w	r2, r3, #1
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002c08:	bf00      	nop
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002c24:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c28:	f043 0202 	orr.w	r2, r3, #2
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f003 0301 	and.w	r3, r3, #1
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d101      	bne.n	8002c54 <LL_ADC_IsEnabled+0x18>
 8002c50:	2301      	movs	r3, #1
 8002c52:	e000      	b.n	8002c56 <LL_ADC_IsEnabled+0x1a>
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr

08002c62 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002c62:	b480      	push	{r7}
 8002c64:	b083      	sub	sp, #12
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d101      	bne.n	8002c7a <LL_ADC_IsDisableOngoing+0x18>
 8002c76:	2301      	movs	r3, #1
 8002c78:	e000      	b.n	8002c7c <LL_ADC_IsDisableOngoing+0x1a>
 8002c7a:	2300      	movs	r3, #0
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002c98:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c9c:	f043 0204 	orr.w	r2, r3, #4
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002ca4:	bf00      	nop
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002cc0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002cc4:	f043 0210 	orr.w	r2, r3, #16
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002ccc:	bf00      	nop
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f003 0304 	and.w	r3, r3, #4
 8002ce8:	2b04      	cmp	r3, #4
 8002cea:	d101      	bne.n	8002cf0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002cec:	2301      	movs	r3, #1
 8002cee:	e000      	b.n	8002cf2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr

08002cfe <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002cfe:	b480      	push	{r7}
 8002d00:	b083      	sub	sp, #12
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002d0e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d12:	f043 0220 	orr.w	r2, r3, #32
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002d1a:	bf00      	nop
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr

08002d26 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002d26:	b480      	push	{r7}
 8002d28:	b083      	sub	sp, #12
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f003 0308 	and.w	r3, r3, #8
 8002d36:	2b08      	cmp	r3, #8
 8002d38:	d101      	bne.n	8002d3e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e000      	b.n	8002d40 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <LL_ADC_IsActiveFlag_LDORDY>:
  * @rmtoll ISR      LDORDY          LL_ADC_IsActiveFlag_LDORDY
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_LDORDY(const ADC_TypeDef *ADCx)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_LDORDY) == (ADC_ISR_LDORDY)) ? 1UL : 0UL);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d60:	d101      	bne.n	8002d66 <LL_ADC_IsActiveFlag_LDORDY+0x1a>
 8002d62:	2301      	movs	r3, #1
 8002d64:	e000      	b.n	8002d68 <LL_ADC_IsActiveFlag_LDORDY+0x1c>
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <LL_ADC_ClearFlag_LDORDY>:
  * @rmtoll ISR      LDORDY         LL_ADC_ClearFlag_LDORDY
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE void LL_ADC_ClearFlag_LDORDY(ADC_TypeDef *ADCx)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_LDORDY);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002d82:	601a      	str	r2, [r3, #0]
}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <HAL_ADC_Init>:
  *         without disabling the other ADCs sharing the same ADC common instance.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b088      	sub	sp, #32
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d101      	bne.n	8002da6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e139      	b.n	800301a <HAL_ADC_Init+0x28a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d109      	bne.n	8002dc8 <HAL_ADC_Init+0x38>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f7fe fdeb 	bl	8001990 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7ff fed1 	bl	8002b74 <LL_ADC_IsDeepPowerDownEnabled>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d004      	beq.n	8002de2 <HAL_ADC_Init+0x52>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7ff feb7 	bl	8002b50 <LL_ADC_DisableDeepPowerDown>

    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7ff feec 	bl	8002bc4 <LL_ADC_IsInternalRegulatorEnabled>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d132      	bne.n	8002e58 <HAL_ADC_Init+0xc8>
  {
    /* Clear flag ADC internal voltage regulator ready */
    LL_ADC_ClearFlag_LDORDY(hadc->Instance);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7ff ffbc 	bl	8002d74 <LL_ADC_ClearFlag_LDORDY>

    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7ff fecb 	bl	8002b9c <LL_ADC_EnableInternalRegulator>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002e06:	f7ff fc3b 	bl	8002680 <HAL_GetTick>
 8002e0a:	6178      	str	r0, [r7, #20]

    /* Delay for ADC stabilization time */
    while (LL_ADC_IsActiveFlag_LDORDY(hadc->Instance) == 0UL)
 8002e0c:	e01c      	b.n	8002e48 <HAL_ADC_Init+0xb8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_LDO_RDY_TIMEOUT)
 8002e0e:	f7ff fc37 	bl	8002680 <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d915      	bls.n	8002e48 <HAL_ADC_Init+0xb8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsActiveFlag_LDORDY(hadc->Instance) == 0UL)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7ff ff93 	bl	8002d4c <LL_ADC_IsActiveFlag_LDORDY>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d10d      	bne.n	8002e48 <HAL_ADC_Init+0xb8>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e30:	f043 0210 	orr.w	r2, r3, #16
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e3c:	f043 0201 	orr.w	r2, r3, #1
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e0e8      	b.n	800301a <HAL_ADC_Init+0x28a>
    while (LL_ADC_IsActiveFlag_LDORDY(hadc->Instance) == 0UL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7ff ff7d 	bl	8002d4c <LL_ADC_IsActiveFlag_LDORDY>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d0da      	beq.n	8002e0e <HAL_ADC_Init+0x7e>

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7ff ff3b 	bl	8002cd8 <LL_ADC_REG_IsConversionOngoing>
 8002e62:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e68:	f003 0310 	and.w	r3, r3, #16
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	f040 80cb 	bne.w	8003008 <HAL_ADC_Init+0x278>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	f040 80c7 	bne.w	8003008 <HAL_ADC_Init+0x278>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e7e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002e82:	f043 0202 	orr.w	r2, r3, #2
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

    tmpCFGR1 = (ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	7d5b      	ldrb	r3, [r3, #21]
 8002e8e:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR1 = (ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002e94:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
                hadc->Init.Overrun                                                    |
 8002e9a:	431a      	orrs	r2, r3
                ADC_CFGR1_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	7f1b      	ldrb	r3, [r3, #28]
 8002ea0:	041b      	lsls	r3, r3, #16
    tmpCFGR1 = (ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	7f1b      	ldrb	r3, [r3, #28]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d106      	bne.n	8002ebc <HAL_ADC_Init+0x12c>
    {
      tmpCFGR1 |= ADC_CFGR1_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a1b      	ldr	r3, [r3, #32]
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	045b      	lsls	r3, r3, #17
 8002eb6:	69ba      	ldr	r2, [r7, #24]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d009      	beq.n	8002ed8 <HAL_ADC_Init+0x148>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec8:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ed0:	4313      	orrs	r3, r2
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL)
 8002ed2:	69ba      	ldr	r2, [r7, #24]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_FIELDS_1, tmpCFGR1);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68da      	ldr	r2, [r3, #12]
 8002ede:	4b51      	ldr	r3, [pc, #324]	@ (8003024 <HAL_ADC_Init+0x294>)
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	6812      	ldr	r2, [r2, #0]
 8002ee6:	69b9      	ldr	r1, [r7, #24]
 8002ee8:	430b      	orrs	r3, r1
 8002eea:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	691b      	ldr	r3, [r3, #16]
 8002ef2:	f423 4120 	bic.w	r1, r3, #40960	@ 0xa000
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	430a      	orrs	r2, r1
 8002f00:	611a      	str	r2, [r3, #16]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7ff fee6 	bl	8002cd8 <LL_ADC_REG_IsConversionOngoing>
 8002f0c:	60f8      	str	r0, [r7, #12]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7ff ff07 	bl	8002d26 <LL_ADC_INJ_IsConversionOngoing>
 8002f18:	60b8      	str	r0, [r7, #8]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d151      	bne.n	8002fc4 <HAL_ADC_Init+0x234>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d14e      	bne.n	8002fc4 <HAL_ADC_Init+0x234>
       )
    {
      tmpCFGR1 = (
                   ADC_CFGR1_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	7d1b      	ldrb	r3, [r3, #20]
 8002f2a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR1 = (
 8002f30:	4313      	orrs	r3, r2
 8002f32:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_FIELDS_2, tmpCFGR1);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002f3e:	f023 0303 	bic.w	r3, r3, #3
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	6812      	ldr	r2, [r2, #0]
 8002f46:	69b9      	ldr	r1, [r7, #24]
 8002f48:	430b      	orrs	r3, r1
 8002f4a:	60d3      	str	r3, [r2, #12]

      LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	4619      	mov	r1, r3
 8002f56:	4610      	mov	r0, r2
 8002f58:	f7ff fca8 	bl	80028ac <LL_ADC_SetGainCompensation>

      if (hadc->Init.OversamplingMode == ENABLE)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d11b      	bne.n	8002f9e <HAL_ADC_Init+0x20e>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f6a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	691a      	ldr	r2, [r3, #16]
 8002f72:	4b2d      	ldr	r3, [pc, #180]	@ (8003028 <HAL_ADC_Init+0x298>)
 8002f74:	4013      	ands	r3, r2
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002f7a:	3a01      	subs	r2, #1
 8002f7c:	0411      	lsls	r1, r2, #16
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002f82:	4311      	orrs	r1, r2
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002f88:	4311      	orrs	r1, r2
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	431a      	orrs	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f042 0201 	orr.w	r2, r2, #1
 8002f9a:	611a      	str	r2, [r3, #16]
 8002f9c:	e007      	b.n	8002fae <HAL_ADC_Init+0x21e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	691a      	ldr	r2, [r3, #16]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f022 0201 	bic.w	r2, r2, #1
 8002fac:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	691b      	ldr	r3, [r3, #16]
 8002fb4:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d10c      	bne.n	8002fe6 <HAL_ADC_Init+0x256>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fd2:	f023 010f 	bic.w	r1, r3, #15
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	1e5a      	subs	r2, r3, #1
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	430a      	orrs	r2, r1
 8002fe2:	631a      	str	r2, [r3, #48]	@ 0x30
 8002fe4:	e007      	b.n	8002ff6 <HAL_ADC_Init+0x266>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f022 020f 	bic.w	r2, r2, #15
 8002ff4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ffa:	f023 0303 	bic.w	r3, r3, #3
 8002ffe:	f043 0201 	orr.w	r2, r3, #1
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	659a      	str	r2, [r3, #88]	@ 0x58
 8003006:	e007      	b.n	8003018 <HAL_ADC_Init+0x288>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800300c:	f043 0210 	orr.w	r2, r3, #16
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8003018:	7ffb      	ldrb	r3, [r7, #31]
}
 800301a:	4618      	mov	r0, r3
 800301c:	3720      	adds	r7, #32
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	fff0c013 	.word	0xfff0c013
 8003028:	fc00f81e 	.word	0xfc00f81e

0800302c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b086      	sub	sp, #24
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003034:	4857      	ldr	r0, [pc, #348]	@ (8003194 <HAL_ADC_Start+0x168>)
 8003036:	f7ff fd6f 	bl	8002b18 <LL_ADC_GetMultimode>
 800303a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4618      	mov	r0, r3
 8003042:	f7ff fe49 	bl	8002cd8 <LL_ADC_REG_IsConversionOngoing>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	f040 809c 	bne.w	8003186 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003054:	2b01      	cmp	r3, #1
 8003056:	d101      	bne.n	800305c <HAL_ADC_Start+0x30>
 8003058:	2302      	movs	r3, #2
 800305a:	e097      	b.n	800318c <HAL_ADC_Start+0x160>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f000 fc1d 	bl	80038a4 <ADC_Enable>
 800306a:	4603      	mov	r3, r0
 800306c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800306e:	7dfb      	ldrb	r3, [r7, #23]
 8003070:	2b00      	cmp	r3, #0
 8003072:	f040 8083 	bne.w	800317c <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800307a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800307e:	f023 0301 	bic.w	r3, r3, #1
 8003082:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	659a      	str	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a42      	ldr	r2, [pc, #264]	@ (8003198 <HAL_ADC_Start+0x16c>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d002      	beq.n	800309a <HAL_ADC_Start+0x6e>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	e000      	b.n	800309c <HAL_ADC_Start+0x70>
 800309a:	4b40      	ldr	r3, [pc, #256]	@ (800319c <HAL_ADC_Start+0x170>)
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	6812      	ldr	r2, [r2, #0]
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d002      	beq.n	80030aa <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d105      	bne.n	80030b6 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ae:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030c2:	d106      	bne.n	80030d2 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030c8:	f023 0206 	bic.w	r2, r3, #6
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	65da      	str	r2, [r3, #92]	@ 0x5c
 80030d0:	e002      	b.n	80030d8 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	221c      	movs	r2, #28
 80030de:	601a      	str	r2, [r3, #0]

      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a2a      	ldr	r2, [pc, #168]	@ (8003198 <HAL_ADC_Start+0x16c>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d002      	beq.n	80030f8 <HAL_ADC_Start+0xcc>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	e000      	b.n	80030fa <HAL_ADC_Start+0xce>
 80030f8:	4b28      	ldr	r3, [pc, #160]	@ (800319c <HAL_ADC_Start+0x170>)
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	6812      	ldr	r2, [r2, #0]
 80030fe:	4293      	cmp	r3, r2
 8003100:	d008      	beq.n	8003114 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d005      	beq.n	8003114 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	2b05      	cmp	r3, #5
 800310c:	d002      	beq.n	8003114 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	2b09      	cmp	r3, #9
 8003112:	d114      	bne.n	800313e <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_JAUTO) != 0UL)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d007      	beq.n	8003132 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003126:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800312a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4618      	mov	r0, r3
 8003138:	f7ff fda6 	bl	8002c88 <LL_ADC_REG_StartConversion>
 800313c:	e025      	b.n	800318a <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003142:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	659a      	str	r2, [r3, #88]	@ 0x58
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a12      	ldr	r2, [pc, #72]	@ (8003198 <HAL_ADC_Start+0x16c>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d002      	beq.n	800315a <HAL_ADC_Start+0x12e>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	e000      	b.n	800315c <HAL_ADC_Start+0x130>
 800315a:	4b10      	ldr	r3, [pc, #64]	@ (800319c <HAL_ADC_Start+0x170>)
 800315c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR1, ADC_CFGR1_JAUTO) != 0UL)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00f      	beq.n	800318a <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800316e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003172:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	659a      	str	r2, [r3, #88]	@ 0x58
 800317a:	e006      	b.n	800318a <HAL_ADC_Start+0x15e>
      LL_ADC_REG_StartConversion(hadc->Instance);
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      __HAL_UNLOCK(hadc);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8003184:	e001      	b.n	800318a <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003186:	2302      	movs	r3, #2
 8003188:	75fb      	strb	r3, [r7, #23]
  }

  return tmp_hal_status;
 800318a:	7dfb      	ldrb	r3, [r7, #23]
}
 800318c:	4618      	mov	r0, r3
 800318e:	3718      	adds	r7, #24
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}
 8003194:	42028300 	.word	0x42028300
 8003198:	42028100 	.word	0x42028100
 800319c:	42028000 	.word	0x42028000

080031a0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d101      	bne.n	80031b6 <HAL_ADC_Stop+0x16>
 80031b2:	2302      	movs	r3, #2
 80031b4:	e023      	b.n	80031fe <HAL_ADC_Stop+0x5e>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2201      	movs	r2, #1
 80031ba:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80031be:	2103      	movs	r1, #3
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f000 fab3 	bl	800372c <ADC_ConversionStop>
 80031c6:	4603      	mov	r3, r0
 80031c8:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80031ca:	7bfb      	ldrb	r3, [r7, #15]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d111      	bne.n	80031f4 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f000 fbeb 	bl	80039ac <ADC_Disable>
 80031d6:	4603      	mov	r3, r0
 80031d8:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80031da:	7bfb      	ldrb	r3, [r7, #15]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d109      	bne.n	80031f4 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031e4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80031e8:	f023 0301 	bic.w	r3, r3, #1
 80031ec:	f043 0201 	orr.w	r2, r3, #1
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 80031fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
	...

08003208 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b088      	sub	sp, #32
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003212:	4866      	ldr	r0, [pc, #408]	@ (80033ac <HAL_ADC_PollForConversion+0x1a4>)
 8003214:	f7ff fc80 	bl	8002b18 <LL_ADC_GetMultimode>
 8003218:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	2b08      	cmp	r3, #8
 8003220:	d102      	bne.n	8003228 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003222:	2308      	movs	r3, #8
 8003224:	61fb      	str	r3, [r7, #28]
 8003226:	e02a      	b.n	800327e <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d005      	beq.n	800323a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	2b05      	cmp	r3, #5
 8003232:	d002      	beq.n	800323a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	2b09      	cmp	r3, #9
 8003238:	d111      	bne.n	800325e <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMNGT_0) != 0UL)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	f003 0301 	and.w	r3, r3, #1
 8003244:	2b00      	cmp	r3, #0
 8003246:	d007      	beq.n	8003258 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800324c:	f043 0220 	orr.w	r2, r3, #32
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	659a      	str	r2, [r3, #88]	@ 0x58
        return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e0a4      	b.n	80033a2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003258:	2304      	movs	r3, #4
 800325a:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMNGT_0) != 0UL)
 800325c:	e00f      	b.n	800327e <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDataFormat(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DATA_EACH_ADC)
 800325e:	4853      	ldr	r0, [pc, #332]	@ (80033ac <HAL_ADC_PollForConversion+0x1a4>)
 8003260:	f7ff fc68 	bl	8002b34 <LL_ADC_GetMultiDataFormat>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d007      	beq.n	800327a <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800326e:	f043 0220 	orr.w	r2, r3, #32
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	659a      	str	r2, [r3, #88]	@ 0x58
        return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e093      	b.n	80033a2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800327a:	2304      	movs	r3, #4
 800327c:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800327e:	f7ff f9ff 	bl	8002680 <HAL_GetTick>
 8003282:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003284:	e021      	b.n	80032ca <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800328c:	d01d      	beq.n	80032ca <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800328e:	f7ff f9f7 	bl	8002680 <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	683a      	ldr	r2, [r7, #0]
 800329a:	429a      	cmp	r2, r3
 800329c:	d302      	bcc.n	80032a4 <HAL_ADC_PollForConversion+0x9c>
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d112      	bne.n	80032ca <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	4013      	ands	r3, r2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d10b      	bne.n	80032ca <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032b6:	f043 0204 	orr.w	r2, r3, #4
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e06b      	b.n	80033a2 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	4013      	ands	r3, r2
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d0d6      	beq.n	8003286 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032dc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7ff fb02 	bl	80028f2 <LL_ADC_REG_IsTriggerSourceSWStart>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d01c      	beq.n	800332e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	7d5b      	ldrb	r3, [r3, #21]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d118      	bne.n	800332e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0308 	and.w	r3, r3, #8
 8003306:	2b08      	cmp	r3, #8
 8003308:	d111      	bne.n	800332e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800330e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	659a      	str	r2, [r3, #88]	@ 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800331a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d105      	bne.n	800332e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003326:	f043 0201 	orr.w	r2, r3, #1
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a1f      	ldr	r2, [pc, #124]	@ (80033b0 <HAL_ADC_PollForConversion+0x1a8>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d002      	beq.n	800333e <HAL_ADC_PollForConversion+0x136>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	e000      	b.n	8003340 <HAL_ADC_PollForConversion+0x138>
 800333e:	4b1d      	ldr	r3, [pc, #116]	@ (80033b4 <HAL_ADC_PollForConversion+0x1ac>)
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	6812      	ldr	r2, [r2, #0]
 8003344:	4293      	cmp	r3, r2
 8003346:	d008      	beq.n	800335a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d005      	beq.n	800335a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	2b05      	cmp	r3, #5
 8003352:	d002      	beq.n	800335a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	2b09      	cmp	r3, #9
 8003358:	d104      	bne.n	8003364 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve ADC CFGR1 register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	61bb      	str	r3, [r7, #24]
 8003362:	e00c      	b.n	800337e <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a11      	ldr	r2, [pc, #68]	@ (80033b0 <HAL_ADC_PollForConversion+0x1a8>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d002      	beq.n	8003374 <HAL_ADC_PollForConversion+0x16c>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	e000      	b.n	8003376 <HAL_ADC_PollForConversion+0x16e>
 8003374:	4b0f      	ldr	r3, [pc, #60]	@ (80033b4 <HAL_ADC_PollForConversion+0x1ac>)
 8003376:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR1);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	61bb      	str	r3, [r7, #24]
  /* Retrieve ADC CFGR1 register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	2b08      	cmp	r3, #8
 8003382:	d104      	bne.n	800338e <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2208      	movs	r2, #8
 800338a:	601a      	str	r2, [r3, #0]
 800338c:	e008      	b.n	80033a0 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR1_AUTDLY) == 0UL)
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d103      	bne.n	80033a0 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	220c      	movs	r2, #12
 800339e:	601a      	str	r2, [r3, #0]
    }
  }

  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3720      	adds	r7, #32
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	42028300 	.word	0x42028300
 80033b0:	42028100 	.word	0x42028100
 80033b4:	42028000 	.word	0x42028000

080033b8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
	...

080033d4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b08a      	sub	sp, #40	@ 0x28
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033de:	2300      	movs	r3, #0
 80033e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_common_path_internal_channel;
  uint32_t tmp_config_path_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80033e4:	2300      	movs	r3, #0
 80033e6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_OFFSET(pConfig->Offset));

  assert_param(IS_ADC_CHANNEL(hadc, pConfig->Channel));

  /* Process locked */
  __HAL_LOCK(hadc);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d101      	bne.n	80033f6 <HAL_ADC_ConfigChannel+0x22>
 80033f2:	2302      	movs	r3, #2
 80033f4:	e183      	b.n	80036fe <HAL_ADC_ConfigChannel+0x32a>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4618      	mov	r0, r3
 8003404:	f7ff fc68 	bl	8002cd8 <LL_ADC_REG_IsConversionOngoing>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	f040 8162 	bne.w	80036d4 <HAL_ADC_ConfigChannel+0x300>
  {
    /* ADC channels preselection */
    LL_ADC_SetChannelPreselection(hadc->Instance, pConfig->Channel);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4619      	mov	r1, r3
 800341a:	4610      	mov	r0, r2
 800341c:	f7ff faa7 	bl	800296e <LL_ADC_SetChannelPreselection>

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6818      	ldr	r0, [r3, #0]
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	6859      	ldr	r1, [r3, #4]
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	461a      	mov	r2, r3
 800342e:	f7ff fa73 	bl	8002918 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4618      	mov	r0, r3
 8003438:	f7ff fc4e 	bl	8002cd8 <LL_ADC_REG_IsConversionOngoing>
 800343c:	6238      	str	r0, [r7, #32]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4618      	mov	r0, r3
 8003444:	f7ff fc6f 	bl	8002d26 <LL_ADC_INJ_IsConversionOngoing>
 8003448:	61f8      	str	r0, [r7, #28]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800344a:	6a3b      	ldr	r3, [r7, #32]
 800344c:	2b00      	cmp	r3, #0
 800344e:	f040 80aa 	bne.w	80035a6 <HAL_ADC_ConfigChannel+0x1d2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	2b00      	cmp	r3, #0
 8003456:	f040 80a6 	bne.w	80035a6 <HAL_ADC_ConfigChannel+0x1d2>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6818      	ldr	r0, [r3, #0]
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	6819      	ldr	r1, [r3, #0]
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	461a      	mov	r2, r3
 8003468:	f7ff fa98 	bl	800299c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	695a      	ldr	r2, [r3, #20]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	089b      	lsrs	r3, r3, #2
 8003478:	f003 0303 	and.w	r3, r3, #3
 800347c:	005b      	lsls	r3, r3, #1
 800347e:	fa02 f303 	lsl.w	r3, r2, r3
 8003482:	61bb      	str	r3, [r7, #24]

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	691b      	ldr	r3, [r3, #16]
 8003488:	2b04      	cmp	r3, #4
 800348a:	d038      	beq.n	80034fe <HAL_ADC_ConfigChannel+0x12a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffsetChannel(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6818      	ldr	r0, [r3, #0]
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	6919      	ldr	r1, [r3, #16]
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	461a      	mov	r2, r3
 800349a:	f7ff f968 	bl	800276e <LL_ADC_SetOffsetChannel>
        LL_ADC_SetOffsetLevel(hadc->Instance, pConfig->OffsetNumber, tmpOffsetShifted);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6818      	ldr	r0, [r3, #0]
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	69ba      	ldr	r2, [r7, #24]
 80034a8:	4619      	mov	r1, r3
 80034aa:	f7ff f993 	bl	80027d4 <LL_ADC_SetOffsetLevel>
        /* Signed and unsigned saturation cannot be set at the same time */
        assert_param(!((pConfig->OffsetSignedSaturation == ENABLE) && (pConfig->OffsetSaturation == ENABLE)));


        /* Set ADC offset sign */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6818      	ldr	r0, [r3, #0]
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	6919      	ldr	r1, [r3, #16]
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	69db      	ldr	r3, [r3, #28]
 80034ba:	461a      	mov	r2, r3
 80034bc:	f7ff f9a5 	bl	800280a <LL_ADC_SetOffsetSign>
        /* Set ADC offset signed saturation */
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,      \
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6818      	ldr	r0, [r3, #0]
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	6919      	ldr	r1, [r3, #16]
                                         (pConfig->OffsetSignedSaturation == ENABLE) \
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	7e1b      	ldrb	r3, [r3, #24]
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,      \
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d102      	bne.n	80034d6 <HAL_ADC_ConfigChannel+0x102>
 80034d0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80034d4:	e000      	b.n	80034d8 <HAL_ADC_ConfigChannel+0x104>
 80034d6:	2300      	movs	r3, #0
 80034d8:	461a      	mov	r2, r3
 80034da:	f7ff f9b1 	bl	8002840 <LL_ADC_SetOffsetSignedSaturation>
                                         ? LL_ADC_OFFSET_SIGNED_SAT_ENABLE           \
                                         : LL_ADC_OFFSET_SIGNED_SAT_DISABLE);
        /* Set ADC offset unsigned saturation */
        LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,    \
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6818      	ldr	r0, [r3, #0]
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	6919      	ldr	r1, [r3, #16]
                                           (pConfig->OffsetSaturation == ENABLE)     \
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	7e5b      	ldrb	r3, [r3, #25]
        LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,    \
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d102      	bne.n	80034f4 <HAL_ADC_ConfigChannel+0x120>
 80034ee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80034f2:	e000      	b.n	80034f6 <HAL_ADC_ConfigChannel+0x122>
 80034f4:	2300      	movs	r3, #0
 80034f6:	461a      	mov	r2, r3
 80034f8:	f7ff f9bd 	bl	8002876 <LL_ADC_SetOffsetUnsignedSaturation>
 80034fc:	e053      	b.n	80035a6 <HAL_ADC_ConfigChannel+0x1d2>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted.
           If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2100      	movs	r1, #0
 8003504:	4618      	mov	r0, r3
 8003506:	f7ff f94e 	bl	80027a6 <LL_ADC_GetOffsetChannel>
 800350a:	4602      	mov	r2, r0
            == __HAL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4053      	eors	r3, r2
 8003512:	f003 031f 	and.w	r3, r3, #31
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003516:	2b00      	cmp	r3, #0
 8003518:	d106      	bne.n	8003528 <HAL_ADC_ConfigChannel+0x154>
        {
          LL_ADC_SetOffsetLevel(hadc->Instance, LL_ADC_OFFSET_1, 0UL);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2200      	movs	r2, #0
 8003520:	2100      	movs	r1, #0
 8003522:	4618      	mov	r0, r3
 8003524:	f7ff f956 	bl	80027d4 <LL_ADC_SetOffsetLevel>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2101      	movs	r1, #1
 800352e:	4618      	mov	r0, r3
 8003530:	f7ff f939 	bl	80027a6 <LL_ADC_GetOffsetChannel>
 8003534:	4602      	mov	r2, r0
            == __HAL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4053      	eors	r3, r2
 800353c:	f003 031f 	and.w	r3, r3, #31
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003540:	2b00      	cmp	r3, #0
 8003542:	d106      	bne.n	8003552 <HAL_ADC_ConfigChannel+0x17e>
        {
          LL_ADC_SetOffsetLevel(hadc->Instance, LL_ADC_OFFSET_2, 0UL);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2200      	movs	r2, #0
 800354a:	2101      	movs	r1, #1
 800354c:	4618      	mov	r0, r3
 800354e:	f7ff f941 	bl	80027d4 <LL_ADC_SetOffsetLevel>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2102      	movs	r1, #2
 8003558:	4618      	mov	r0, r3
 800355a:	f7ff f924 	bl	80027a6 <LL_ADC_GetOffsetChannel>
 800355e:	4602      	mov	r2, r0
            == __HAL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4053      	eors	r3, r2
 8003566:	f003 031f 	and.w	r3, r3, #31
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800356a:	2b00      	cmp	r3, #0
 800356c:	d106      	bne.n	800357c <HAL_ADC_ConfigChannel+0x1a8>
        {
          LL_ADC_SetOffsetLevel(hadc->Instance, LL_ADC_OFFSET_3, 0UL);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2200      	movs	r2, #0
 8003574:	2102      	movs	r1, #2
 8003576:	4618      	mov	r0, r3
 8003578:	f7ff f92c 	bl	80027d4 <LL_ADC_SetOffsetLevel>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2103      	movs	r1, #3
 8003582:	4618      	mov	r0, r3
 8003584:	f7ff f90f 	bl	80027a6 <LL_ADC_GetOffsetChannel>
 8003588:	4602      	mov	r2, r0
            == __HAL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4053      	eors	r3, r2
 8003590:	f003 031f 	and.w	r3, r3, #31
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003594:	2b00      	cmp	r3, #0
 8003596:	d106      	bne.n	80035a6 <HAL_ADC_ConfigChannel+0x1d2>
        {
          LL_ADC_SetOffsetLevel(hadc->Instance, LL_ADC_OFFSET_4, 0UL);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2200      	movs	r2, #0
 800359e:	2103      	movs	r1, #3
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7ff f917 	bl	80027d4 <LL_ADC_SetOffsetLevel>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	f000 809f 	beq.w	80036f2 <HAL_ADC_ConfigChannel+0x31e>
    {
      tmp_config_common_path_internal_channel =
        LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80035b4:	4854      	ldr	r0, [pc, #336]	@ (8003708 <HAL_ADC_ConfigChannel+0x334>)
 80035b6:	f7ff f8a6 	bl	8002706 <LL_ADC_GetCommonPathInternalCh>
 80035ba:	6178      	str	r0, [r7, #20]
      tmp_config_path_internal_channel = LL_ADC_GetPathInternalCh(hadc->Instance);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7ff f8c4 	bl	800274e <LL_ADC_GetPathInternalCh>
 80035c6:	6138      	str	r0, [r7, #16]
      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a4f      	ldr	r2, [pc, #316]	@ (800370c <HAL_ADC_ConfigChannel+0x338>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d116      	bne.n	8003600 <HAL_ADC_ConfigChannel+0x22c>
          && ((tmp_config_common_path_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d111      	bne.n	8003600 <HAL_ADC_ConfigChannel+0x22c>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a4b      	ldr	r2, [pc, #300]	@ (8003710 <HAL_ADC_ConfigChannel+0x33c>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d004      	beq.n	80035f0 <HAL_ADC_ConfigChannel+0x21c>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a4a      	ldr	r2, [pc, #296]	@ (8003714 <HAL_ADC_ConfigChannel+0x340>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d17b      	bne.n	80036e8 <HAL_ADC_ConfigChannel+0x314>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80035f6:	4619      	mov	r1, r3
 80035f8:	4843      	ldr	r0, [pc, #268]	@ (8003708 <HAL_ADC_ConfigChannel+0x334>)
 80035fa:	f7ff f871 	bl	80026e0 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_VREFINT_INSTANCE(hadc))
 80035fe:	e073      	b.n	80036e8 <HAL_ADC_ConfigChannel+0x314>
                                         LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_common_path_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a44      	ldr	r2, [pc, #272]	@ (8003718 <HAL_ADC_ConfigChannel+0x344>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d12a      	bne.n	8003660 <HAL_ADC_ConfigChannel+0x28c>
               && ((tmp_config_common_path_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d125      	bne.n	8003660 <HAL_ADC_ConfigChannel+0x28c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a3d      	ldr	r2, [pc, #244]	@ (8003710 <HAL_ADC_ConfigChannel+0x33c>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d004      	beq.n	8003628 <HAL_ADC_ConfigChannel+0x254>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a3c      	ldr	r2, [pc, #240]	@ (8003714 <HAL_ADC_ConfigChannel+0x340>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d161      	bne.n	80036ec <HAL_ADC_ConfigChannel+0x318>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800362e:	4619      	mov	r1, r3
 8003630:	4835      	ldr	r0, [pc, #212]	@ (8003708 <HAL_ADC_ConfigChannel+0x334>)
 8003632:	f7ff f855 	bl	80026e0 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003636:	4b39      	ldr	r3, [pc, #228]	@ (800371c <HAL_ADC_ConfigChannel+0x348>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	099b      	lsrs	r3, r3, #6
 800363c:	4a38      	ldr	r2, [pc, #224]	@ (8003720 <HAL_ADC_ConfigChannel+0x34c>)
 800363e:	fba2 2303 	umull	r2, r3, r2, r3
 8003642:	099b      	lsrs	r3, r3, #6
 8003644:	1c5a      	adds	r2, r3, #1
 8003646:	4613      	mov	r3, r2
 8003648:	005b      	lsls	r3, r3, #1
 800364a:	4413      	add	r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003650:	e002      	b.n	8003658 <HAL_ADC_ConfigChannel+0x284>
          {
            wait_loop_index--;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	3b01      	subs	r3, #1
 8003656:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1f9      	bne.n	8003652 <HAL_ADC_ConfigChannel+0x27e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800365e:	e045      	b.n	80036ec <HAL_ADC_ConfigChannel+0x318>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a2f      	ldr	r2, [pc, #188]	@ (8003724 <HAL_ADC_ConfigChannel+0x350>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d116      	bne.n	8003698 <HAL_ADC_ConfigChannel+0x2c4>
               && ((tmp_config_common_path_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d111      	bne.n	8003698 <HAL_ADC_ConfigChannel+0x2c4>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a25      	ldr	r2, [pc, #148]	@ (8003710 <HAL_ADC_ConfigChannel+0x33c>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d004      	beq.n	8003688 <HAL_ADC_ConfigChannel+0x2b4>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a24      	ldr	r2, [pc, #144]	@ (8003714 <HAL_ADC_ConfigChannel+0x340>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d133      	bne.n	80036f0 <HAL_ADC_ConfigChannel+0x31c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800368e:	4619      	mov	r1, r3
 8003690:	481d      	ldr	r0, [pc, #116]	@ (8003708 <HAL_ADC_ConfigChannel+0x334>)
 8003692:	f7ff f825 	bl	80026e0 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003696:	e02b      	b.n	80036f0 <HAL_ADC_ConfigChannel+0x31c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_common_path_internal_channel);
        }
      }
      else if (((pConfig->Channel == ADC_CHANNEL_VDDCORE)
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a22      	ldr	r2, [pc, #136]	@ (8003728 <HAL_ADC_ConfigChannel+0x354>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d127      	bne.n	80036f2 <HAL_ADC_ConfigChannel+0x31e>
                && ((tmp_config_path_internal_channel & LL_ADC_PATH_INTERNAL_VDDCORE) == 0UL)))
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d122      	bne.n	80036f2 <HAL_ADC_ConfigChannel+0x31e>
      {
        if (ADC_VDDCORE_INSTANCE(hadc))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a17      	ldr	r2, [pc, #92]	@ (8003710 <HAL_ADC_ConfigChannel+0x33c>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d004      	beq.n	80036c0 <HAL_ADC_ConfigChannel+0x2ec>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a16      	ldr	r2, [pc, #88]	@ (8003714 <HAL_ADC_ConfigChannel+0x340>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d118      	bne.n	80036f2 <HAL_ADC_ConfigChannel+0x31e>
        {
          LL_ADC_SetPathInternalCh(hadc->Instance, LL_ADC_PATH_INTERNAL_VDDCORE | tmp_config_path_internal_channel);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036ca:	4619      	mov	r1, r3
 80036cc:	4610      	mov	r0, r2
 80036ce:	f7ff f828 	bl	8002722 <LL_ADC_SetPathInternalCh>
 80036d2:	e00e      	b.n	80036f2 <HAL_ADC_ConfigChannel+0x31e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036d8:	f043 0220 	orr.w	r2, r3, #32
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80036e6:	e004      	b.n	80036f2 <HAL_ADC_ConfigChannel+0x31e>
        if (ADC_VREFINT_INSTANCE(hadc))
 80036e8:	bf00      	nop
 80036ea:	e002      	b.n	80036f2 <HAL_ADC_ConfigChannel+0x31e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80036ec:	bf00      	nop
 80036ee:	e000      	b.n	80036f2 <HAL_ADC_ConfigChannel+0x31e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80036f0:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 80036fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3728      	adds	r7, #40	@ 0x28
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	42028300 	.word	0x42028300
 800370c:	00400c00 	.word	0x00400c00
 8003710:	42028000 	.word	0x42028000
 8003714:	42028100 	.word	0x42028100
 8003718:	00800c11 	.word	0x00800c11
 800371c:	20000004 	.word	0x20000004
 8003720:	053e2d63 	.word	0x053e2d63
 8003724:	01000c10 	.word	0x01000c10
 8003728:	00010c12 	.word	0x00010c12

0800372c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b088      	sub	sp, #32
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t conversion_timeout_cpu_cycles = 0UL;
 8003736:	2300      	movs	r3, #0
 8003738:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4618      	mov	r0, r3
 8003744:	f7ff fac8 	bl	8002cd8 <LL_ADC_REG_IsConversionOngoing>
 8003748:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4618      	mov	r0, r3
 8003750:	f7ff fae9 	bl	8002d26 <LL_ADC_INJ_IsConversionOngoing>
 8003754:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d103      	bne.n	8003764 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2b00      	cmp	r3, #0
 8003760:	f000 8098 	beq.w	8003894 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR1 & ADC_CFGR1_JAUTO) != 0UL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d02a      	beq.n	80037c8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	7d5b      	ldrb	r3, [r3, #21]
 8003776:	2b01      	cmp	r3, #1
 8003778:	d126      	bne.n	80037c8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	7d1b      	ldrb	r3, [r3, #20]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d122      	bne.n	80037c8 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003782:	2301      	movs	r3, #1
 8003784:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003786:	e014      	b.n	80037b2 <ADC_ConversionStop+0x86>
      {
        if (conversion_timeout_cpu_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	4a45      	ldr	r2, [pc, #276]	@ (80038a0 <ADC_ConversionStop+0x174>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d90d      	bls.n	80037ac <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003794:	f043 0210 	orr.w	r2, r3, #16
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037a0:	f043 0201 	orr.w	r2, r3, #1
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e074      	b.n	8003896 <ADC_ConversionStop+0x16a>
        }
        conversion_timeout_cpu_cycles ++;
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	3301      	adds	r3, #1
 80037b0:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037bc:	2b40      	cmp	r3, #64	@ 0x40
 80037be:	d1e3      	bne.n	8003788 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2240      	movs	r2, #64	@ 0x40
 80037c6:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d014      	beq.n	80037f8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4618      	mov	r0, r3
 80037d4:	f7ff fa80 	bl	8002cd8 <LL_ADC_REG_IsConversionOngoing>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d00c      	beq.n	80037f8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7ff fa3d 	bl	8002c62 <LL_ADC_IsDisableOngoing>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d104      	bne.n	80037f8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7ff fa5c 	bl	8002cb0 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d014      	beq.n	8003828 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4618      	mov	r0, r3
 8003804:	f7ff fa8f 	bl	8002d26 <LL_ADC_INJ_IsConversionOngoing>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00c      	beq.n	8003828 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4618      	mov	r0, r3
 8003814:	f7ff fa25 	bl	8002c62 <LL_ADC_IsDisableOngoing>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d104      	bne.n	8003828 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4618      	mov	r0, r3
 8003824:	f7ff fa6b 	bl	8002cfe <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	2b02      	cmp	r3, #2
 800382c:	d005      	beq.n	800383a <ADC_ConversionStop+0x10e>
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	2b03      	cmp	r3, #3
 8003832:	d105      	bne.n	8003840 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003834:	230c      	movs	r3, #12
 8003836:	617b      	str	r3, [r7, #20]
        break;
 8003838:	e005      	b.n	8003846 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800383a:	2308      	movs	r3, #8
 800383c:	617b      	str	r3, [r7, #20]
        break;
 800383e:	e002      	b.n	8003846 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003840:	2304      	movs	r3, #4
 8003842:	617b      	str	r3, [r7, #20]
        break;
 8003844:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003846:	f7fe ff1b 	bl	8002680 <HAL_GetTick>
 800384a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800384c:	e01b      	b.n	8003886 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800384e:	f7fe ff17 	bl	8002680 <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	2b05      	cmp	r3, #5
 800385a:	d914      	bls.n	8003886 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	689a      	ldr	r2, [r3, #8]
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	4013      	ands	r3, r2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00d      	beq.n	8003886 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800386e:	f043 0210 	orr.w	r2, r3, #16
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800387a:	f043 0201 	orr.w	r2, r3, #1
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e007      	b.n	8003896 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	689a      	ldr	r2, [r3, #8]
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	4013      	ands	r3, r2
 8003890:	2b00      	cmp	r3, #0
 8003892:	d1dc      	bne.n	800384e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3720      	adds	r7, #32
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	a33fffff 	.word	0xa33fffff

080038a4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4618      	mov	r0, r3
 80038b2:	f7ff f9c3 	bl	8002c3c <LL_ADC_IsEnabled>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d169      	bne.n	8003990 <ADC_Enable+0xec>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	689a      	ldr	r2, [r3, #8]
 80038c2:	4b36      	ldr	r3, [pc, #216]	@ (800399c <ADC_Enable+0xf8>)
 80038c4:	4013      	ands	r3, r2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00d      	beq.n	80038e6 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038ce:	f043 0210 	orr.w	r2, r3, #16
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038da:	f043 0201 	orr.w	r2, r3, #1
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e055      	b.n	8003992 <ADC_Enable+0xee>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4618      	mov	r0, r3
 80038ec:	f7ff f97e 	bl	8002bec <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80038f0:	482b      	ldr	r0, [pc, #172]	@ (80039a0 <ADC_Enable+0xfc>)
 80038f2:	f7fe ff08 	bl	8002706 <LL_ADC_GetCommonPathInternalCh>
 80038f6:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80038f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d013      	beq.n	8003928 <ADC_Enable+0x84>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003900:	4b28      	ldr	r3, [pc, #160]	@ (80039a4 <ADC_Enable+0x100>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	099b      	lsrs	r3, r3, #6
 8003906:	4a28      	ldr	r2, [pc, #160]	@ (80039a8 <ADC_Enable+0x104>)
 8003908:	fba2 2303 	umull	r2, r3, r2, r3
 800390c:	099b      	lsrs	r3, r3, #6
 800390e:	1c5a      	adds	r2, r3, #1
 8003910:	4613      	mov	r3, r2
 8003912:	005b      	lsls	r3, r3, #1
 8003914:	4413      	add	r3, r2
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 800391a:	e002      	b.n	8003922 <ADC_Enable+0x7e>
      {
        wait_loop_index--;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	3b01      	subs	r3, #1
 8003920:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d1f9      	bne.n	800391c <ADC_Enable+0x78>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003928:	f7fe feaa 	bl	8002680 <HAL_GetTick>
 800392c:	60b8      	str	r0, [r7, #8]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800392e:	e028      	b.n	8003982 <ADC_Enable+0xde>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4618      	mov	r0, r3
 8003936:	f7ff f981 	bl	8002c3c <LL_ADC_IsEnabled>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d104      	bne.n	800394a <ADC_Enable+0xa6>
      {
        LL_ADC_Enable(hadc->Instance);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4618      	mov	r0, r3
 8003946:	f7ff f951 	bl	8002bec <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800394a:	f7fe fe99 	bl	8002680 <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	2b02      	cmp	r3, #2
 8003956:	d914      	bls.n	8003982 <ADC_Enable+0xde>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	2b01      	cmp	r3, #1
 8003964:	d00d      	beq.n	8003982 <ADC_Enable+0xde>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800396a:	f043 0210 	orr.w	r2, r3, #16
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003976:	f043 0201 	orr.w	r2, r3, #1
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e007      	b.n	8003992 <ADC_Enable+0xee>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0301 	and.w	r3, r3, #1
 800398c:	2b01      	cmp	r3, #1
 800398e:	d1cf      	bne.n	8003930 <ADC_Enable+0x8c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3710      	adds	r7, #16
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	8000003f 	.word	0x8000003f
 80039a0:	42028300 	.word	0x42028300
 80039a4:	20000004 	.word	0x20000004
 80039a8:	053e2d63 	.word	0x053e2d63

080039ac <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4618      	mov	r0, r3
 80039ba:	f7ff f952 	bl	8002c62 <LL_ADC_IsDisableOngoing>
 80039be:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4618      	mov	r0, r3
 80039c6:	f7ff f939 	bl	8002c3c <LL_ADC_IsEnabled>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d047      	beq.n	8003a60 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d144      	bne.n	8003a60 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	f003 030d 	and.w	r3, r3, #13
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d10c      	bne.n	80039fe <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4618      	mov	r0, r3
 80039ea:	f7ff f913 	bl	8002c14 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2203      	movs	r2, #3
 80039f4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80039f6:	f7fe fe43 	bl	8002680 <HAL_GetTick>
 80039fa:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80039fc:	e029      	b.n	8003a52 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a02:	f043 0210 	orr.w	r2, r3, #16
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a0e:	f043 0201 	orr.w	r2, r3, #1
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e023      	b.n	8003a62 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003a1a:	f7fe fe31 	bl	8002680 <HAL_GetTick>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d914      	bls.n	8003a52 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f003 0301 	and.w	r3, r3, #1
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00d      	beq.n	8003a52 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a3a:	f043 0210 	orr.w	r2, r3, #16
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a46:	f043 0201 	orr.w	r2, r3, #1
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e007      	b.n	8003a62 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	f003 0301 	and.w	r3, r3, #1
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d1dc      	bne.n	8003a1a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3710      	adds	r7, #16
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}

08003a6a <LL_ADC_StartCalibration>:
{
 8003a6a:	b480      	push	{r7}
 8003a6c:	b083      	sub	sp, #12
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003a7a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003a7e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	609a      	str	r2, [r3, #8]
}
 8003a86:	bf00      	nop
 8003a88:	370c      	adds	r7, #12
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr

08003a92 <LL_ADC_IsCalibrationOnGoing>:
{
 8003a92:	b480      	push	{r7}
 8003a94:	b083      	sub	sp, #12
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003aa2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003aa6:	d101      	bne.n	8003aac <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e000      	b.n	8003aae <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	370c      	adds	r7, #12
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
	...

08003abc <HAL_ADCEx_Calibration_Start>:
  *         This parameter can be one of the following values:
  *           @arg @ref ADC_SINGLE_ENDED      Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
  UNUSED(SingleDiff);
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d101      	bne.n	8003ad8 <HAL_ADCEx_Calibration_Start+0x1c>
 8003ad4:	2302      	movs	r3, #2
 8003ad6:	e04c      	b.n	8003b72 <HAL_ADCEx_Calibration_Start+0xb6>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f7ff ff63 	bl	80039ac <ADC_Disable>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003aea:	7bfb      	ldrb	r3, [r7, #15]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d135      	bne.n	8003b5c <HAL_ADCEx_Calibration_Start+0xa0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003af4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003af8:	f023 0302 	bic.w	r3, r3, #2
 8003afc:	f043 0202 	orr.w	r2, r3, #2
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	659a      	str	r2, [r3, #88]	@ 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    /* Start ADC calibration */
    LL_ADC_StartCalibration(hadc->Instance);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f7ff ffae 	bl	8003a6a <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003b0e:	e014      	b.n	8003b3a <HAL_ADCEx_Calibration_Start+0x7e>
    {

      wait_loop_index++;
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	3301      	adds	r3, #1
 8003b14:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	4a18      	ldr	r2, [pc, #96]	@ (8003b7c <HAL_ADCEx_Calibration_Start+0xc0>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d90d      	bls.n	8003b3a <HAL_ADCEx_Calibration_Start+0x7e>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b22:	f023 0312 	bic.w	r3, r3, #18
 8003b26:	f043 0210 	orr.w	r2, r3, #16
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	659a      	str	r2, [r3, #88]	@ 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e01b      	b.n	8003b72 <HAL_ADCEx_Calibration_Start+0xb6>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7ff ffa7 	bl	8003a92 <LL_ADC_IsCalibrationOnGoing>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1e2      	bne.n	8003b10 <HAL_ADCEx_Calibration_Start+0x54>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b4e:	f023 0303 	bic.w	r3, r3, #3
 8003b52:	f043 0201 	orr.w	r2, r3, #1
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	659a      	str	r2, [r3, #88]	@ 0x58
 8003b5a:	e005      	b.n	8003b68 <HAL_ADCEx_Calibration_Start+0xac>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b60:	f043 0210 	orr.w	r2, r3, #16
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8003b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3710      	adds	r7, #16
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	0005e8ff 	.word	0x0005e8ff

08003b80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b085      	sub	sp, #20
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f003 0307 	and.w	r3, r3, #7
 8003b8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b90:	4b0c      	ldr	r3, [pc, #48]	@ (8003bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b96:	68ba      	ldr	r2, [r7, #8]
 8003b98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ba8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003bac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bb2:	4a04      	ldr	r2, [pc, #16]	@ (8003bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	60d3      	str	r3, [r2, #12]
}
 8003bb8:	bf00      	nop
 8003bba:	3714      	adds	r7, #20
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr
 8003bc4:	e000ed00 	.word	0xe000ed00

08003bc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bcc:	4b04      	ldr	r3, [pc, #16]	@ (8003be0 <__NVIC_GetPriorityGrouping+0x18>)
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	0a1b      	lsrs	r3, r3, #8
 8003bd2:	f003 0307 	and.w	r3, r3, #7
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr
 8003be0:	e000ed00 	.word	0xe000ed00

08003be4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	4603      	mov	r3, r0
 8003bec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	db0b      	blt.n	8003c0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bf6:	79fb      	ldrb	r3, [r7, #7]
 8003bf8:	f003 021f 	and.w	r2, r3, #31
 8003bfc:	4907      	ldr	r1, [pc, #28]	@ (8003c1c <__NVIC_EnableIRQ+0x38>)
 8003bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c02:	095b      	lsrs	r3, r3, #5
 8003c04:	2001      	movs	r0, #1
 8003c06:	fa00 f202 	lsl.w	r2, r0, r2
 8003c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c0e:	bf00      	nop
 8003c10:	370c      	adds	r7, #12
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop
 8003c1c:	e000e100 	.word	0xe000e100

08003c20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	4603      	mov	r3, r0
 8003c28:	6039      	str	r1, [r7, #0]
 8003c2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	db0a      	blt.n	8003c4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	b2da      	uxtb	r2, r3
 8003c38:	490c      	ldr	r1, [pc, #48]	@ (8003c6c <__NVIC_SetPriority+0x4c>)
 8003c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c3e:	0112      	lsls	r2, r2, #4
 8003c40:	b2d2      	uxtb	r2, r2
 8003c42:	440b      	add	r3, r1
 8003c44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c48:	e00a      	b.n	8003c60 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	b2da      	uxtb	r2, r3
 8003c4e:	4908      	ldr	r1, [pc, #32]	@ (8003c70 <__NVIC_SetPriority+0x50>)
 8003c50:	79fb      	ldrb	r3, [r7, #7]
 8003c52:	f003 030f 	and.w	r3, r3, #15
 8003c56:	3b04      	subs	r3, #4
 8003c58:	0112      	lsls	r2, r2, #4
 8003c5a:	b2d2      	uxtb	r2, r2
 8003c5c:	440b      	add	r3, r1
 8003c5e:	761a      	strb	r2, [r3, #24]
}
 8003c60:	bf00      	nop
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr
 8003c6c:	e000e100 	.word	0xe000e100
 8003c70:	e000ed00 	.word	0xe000ed00

08003c74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b089      	sub	sp, #36	@ 0x24
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f003 0307 	and.w	r3, r3, #7
 8003c86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	f1c3 0307 	rsb	r3, r3, #7
 8003c8e:	2b04      	cmp	r3, #4
 8003c90:	bf28      	it	cs
 8003c92:	2304      	movcs	r3, #4
 8003c94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	3304      	adds	r3, #4
 8003c9a:	2b06      	cmp	r3, #6
 8003c9c:	d902      	bls.n	8003ca4 <NVIC_EncodePriority+0x30>
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	3b03      	subs	r3, #3
 8003ca2:	e000      	b.n	8003ca6 <NVIC_EncodePriority+0x32>
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb2:	43da      	mvns	r2, r3
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	401a      	ands	r2, r3
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cbc:	f04f 31ff 	mov.w	r1, #4294967295
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8003cc6:	43d9      	mvns	r1, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ccc:	4313      	orrs	r3, r2
         );
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3724      	adds	r7, #36	@ 0x24
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr

08003cda <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cda:	b580      	push	{r7, lr}
 8003cdc:	b082      	sub	sp, #8
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f7ff ff4c 	bl	8003b80 <__NVIC_SetPriorityGrouping>
}
 8003ce8:	bf00      	nop
 8003cea:	3708      	adds	r7, #8
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b086      	sub	sp, #24
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	607a      	str	r2, [r7, #4]
 8003cfc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_PRIO_INTERRUPT(IRQn));
  prioritygroup = NVIC_GetPriorityGrouping();
 8003cfe:	f7ff ff63 	bl	8003bc8 <__NVIC_GetPriorityGrouping>
 8003d02:	6178      	str	r0, [r7, #20]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority, prioritygroup));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority, prioritygroup));

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	68b9      	ldr	r1, [r7, #8]
 8003d08:	6978      	ldr	r0, [r7, #20]
 8003d0a:	f7ff ffb3 	bl	8003c74 <NVIC_EncodePriority>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d14:	4611      	mov	r1, r2
 8003d16:	4618      	mov	r0, r3
 8003d18:	f7ff ff82 	bl	8003c20 <__NVIC_SetPriority>
}
 8003d1c:	bf00      	nop
 8003d1e:	3718      	adds	r7, #24
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *         to the appropriate CMSIS device file (stm32u3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d32:	4618      	mov	r0, r3
 8003d34:	f7ff ff56 	bl	8003be4 <__NVIC_EnableIRQ>
}
 8003d38:	bf00      	nop
 8003d3a:	3708      	adds	r7, #8
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d50:	d301      	bcc.n	8003d56 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8003d52:	2301      	movs	r3, #1
 8003d54:	e00d      	b.n	8003d72 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8003d56:	4a0a      	ldr	r2, [pc, #40]	@ (8003d80 <HAL_SYSTICK_Config+0x40>)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8003d5e:	4b08      	ldr	r3, [pc, #32]	@ (8003d80 <HAL_SYSTICK_Config+0x40>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8003d64:	4b06      	ldr	r3, [pc, #24]	@ (8003d80 <HAL_SYSTICK_Config+0x40>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a05      	ldr	r2, [pc, #20]	@ (8003d80 <HAL_SYSTICK_Config+0x40>)
 8003d6a:	f043 0303 	orr.w	r3, r3, #3
 8003d6e:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	370c      	adds	r7, #12
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	e000e010 	.word	0xe000e010

08003d84 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8 AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2b04      	cmp	r3, #4
 8003d90:	d844      	bhi.n	8003e1c <HAL_SYSTICK_CLKSourceConfig+0x98>
 8003d92:	a201      	add	r2, pc, #4	@ (adr r2, 8003d98 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8003d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d98:	08003dbb 	.word	0x08003dbb
 8003d9c:	08003dd9 	.word	0x08003dd9
 8003da0:	08003dfb 	.word	0x08003dfb
 8003da4:	08003e1d 	.word	0x08003e1d
 8003da8:	08003dad 	.word	0x08003dad
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8003dac:	4b1f      	ldr	r3, [pc, #124]	@ (8003e2c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a1e      	ldr	r2, [pc, #120]	@ (8003e2c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003db2:	f043 0304 	orr.w	r3, r3, #4
 8003db6:	6013      	str	r3, [r2, #0]
      break;
 8003db8:	e031      	b.n	8003e1e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8003dba:	4b1c      	ldr	r3, [pc, #112]	@ (8003e2c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a1b      	ldr	r2, [pc, #108]	@ (8003e2c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003dc0:	f023 0304 	bic.w	r3, r3, #4
 8003dc4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8003dc6:	4b1a      	ldr	r3, [pc, #104]	@ (8003e30 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003dc8:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003dcc:	4a18      	ldr	r2, [pc, #96]	@ (8003e30 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003dce:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8003dd2:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
      break;
 8003dd6:	e022      	b.n	8003e1e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8003dd8:	4b14      	ldr	r3, [pc, #80]	@ (8003e2c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a13      	ldr	r2, [pc, #76]	@ (8003e2c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003dde:	f023 0304 	bic.w	r3, r3, #4
 8003de2:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8003de4:	4b12      	ldr	r3, [pc, #72]	@ (8003e30 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003de6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003dea:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8003dee:	4a10      	ldr	r2, [pc, #64]	@ (8003e30 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003df0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003df4:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
      break;
 8003df8:	e011      	b.n	8003e1e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8003dfa:	4b0c      	ldr	r3, [pc, #48]	@ (8003e2c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a0b      	ldr	r2, [pc, #44]	@ (8003e2c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003e00:	f023 0304 	bic.w	r3, r3, #4
 8003e04:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8003e06:	4b0a      	ldr	r3, [pc, #40]	@ (8003e30 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003e08:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003e0c:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8003e10:	4a07      	ldr	r2, [pc, #28]	@ (8003e30 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003e12:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003e16:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
      break;
 8003e1a:	e000      	b.n	8003e1e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8003e1c:	bf00      	nop
  }
}
 8003e1e:	bf00      	nop
 8003e20:	370c      	adds	r7, #12
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	e000e010 	.word	0xe000e010
 8003e30:	40030c00 	.word	0x40030c00

08003e34 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d101      	bne.n	8003e46 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e014      	b.n	8003e70 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	791b      	ldrb	r3, [r3, #4]
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d105      	bne.n	8003e5c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f7fd fdfa 	bl	8001a50 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2202      	movs	r2, #2
 8003e60:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3708      	adds	r7, #8
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d101      	bne.n	8003e8c <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e056      	b.n	8003f3a <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	795b      	ldrb	r3, [r3, #5]
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d101      	bne.n	8003e98 <HAL_DAC_Start+0x20>
 8003e94:	2302      	movs	r3, #2
 8003e96:	e050      	b.n	8003f3a <HAL_DAC_Start+0xc2>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2202      	movs	r2, #2
 8003ea2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	6819      	ldr	r1, [r3, #0]
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	f003 0310 	and.w	r3, r3, #16
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	409a      	lsls	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	430a      	orrs	r2, r1
 8003eba:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ebc:	4b22      	ldr	r3, [pc, #136]	@ (8003f48 <HAL_DAC_Start+0xd0>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	099b      	lsrs	r3, r3, #6
 8003ec2:	4a22      	ldr	r2, [pc, #136]	@ (8003f4c <HAL_DAC_Start+0xd4>)
 8003ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec8:	099b      	lsrs	r3, r3, #6
 8003eca:	3301      	adds	r3, #1
 8003ecc:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8003ece:	e002      	b.n	8003ed6 <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d1f9      	bne.n	8003ed0 <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d10f      	bne.n	8003f02 <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d11d      	bne.n	8003f2c <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	685a      	ldr	r2, [r3, #4]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f042 0201 	orr.w	r2, r2, #1
 8003efe:	605a      	str	r2, [r3, #4]
 8003f00:	e014      	b.n	8003f2c <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	f003 0310 	and.w	r3, r3, #16
 8003f12:	2102      	movs	r1, #2
 8003f14:	fa01 f303 	lsl.w	r3, r1, r3
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d107      	bne.n	8003f2c <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	685a      	ldr	r2, [r3, #4]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f042 0202 	orr.w	r2, r2, #2
 8003f2a:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3714      	adds	r7, #20
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	20000004 	.word	0x20000004
 8003f4c:	053e2d63 	.word	0x053e2d63

08003f50 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b087      	sub	sp, #28
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	607a      	str	r2, [r7, #4]
 8003f5c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d101      	bne.n	8003f6c <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e018      	b.n	8003f9e <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d105      	bne.n	8003f8a <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003f7e:	697a      	ldr	r2, [r7, #20]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4413      	add	r3, r2
 8003f84:	3308      	adds	r3, #8
 8003f86:	617b      	str	r3, [r7, #20]
 8003f88:	e004      	b.n	8003f94 <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003f8a:	697a      	ldr	r2, [r7, #20]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4413      	add	r3, r2
 8003f90:	3314      	adds	r3, #20
 8003f92:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	461a      	mov	r2, r3
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	371c      	adds	r7, #28
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
	...

08003fac <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b08a      	sub	sp, #40	@ 0x28
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d002      	beq.n	8003fc8 <HAL_DAC_ConfigChannel+0x1c>
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d101      	bne.n	8003fcc <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e17b      	b.n	80042c4 <HAL_DAC_ConfigChannel+0x318>
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	795b      	ldrb	r3, [r3, #5]
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d101      	bne.n	8003fd8 <HAL_DAC_ConfigChannel+0x2c>
 8003fd4:	2302      	movs	r3, #2
 8003fd6:	e175      	b.n	80042c4 <HAL_DAC_ConfigChannel+0x318>
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2202      	movs	r2, #2
 8003fe2:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	2b04      	cmp	r3, #4
 8003fea:	d17a      	bne.n	80040e2 <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003fec:	f7fe fb48 	bl	8002680 <HAL_GetTick>
 8003ff0:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d13d      	bne.n	8004074 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003ff8:	e018      	b.n	800402c <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003ffa:	f7fe fb41 	bl	8002680 <HAL_GetTick>
 8003ffe:	4602      	mov	r2, r0
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	2b01      	cmp	r3, #1
 8004006:	d911      	bls.n	800402c <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800400e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00a      	beq.n	800402c <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	f043 0208 	orr.w	r2, r3, #8
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2203      	movs	r2, #3
 8004026:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e14b      	b.n	80042c4 <HAL_DAC_ConfigChannel+0x318>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004032:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d1df      	bne.n	8003ffa <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68ba      	ldr	r2, [r7, #8]
 8004040:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004042:	641a      	str	r2, [r3, #64]	@ 0x40
 8004044:	e020      	b.n	8004088 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004046:	f7fe fb1b 	bl	8002680 <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	2b01      	cmp	r3, #1
 8004052:	d90f      	bls.n	8004074 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800405a:	2b00      	cmp	r3, #0
 800405c:	da0a      	bge.n	8004074 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	f043 0208 	orr.w	r2, r3, #8
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2203      	movs	r2, #3
 800406e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e127      	b.n	80042c4 <HAL_DAC_ConfigChannel+0x318>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800407a:	2b00      	cmp	r3, #0
 800407c:	dbe3      	blt.n	8004046 <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68ba      	ldr	r2, [r7, #8]
 8004084:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004086:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f003 0310 	and.w	r3, r3, #16
 8004094:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8004098:	fa01 f303 	lsl.w	r3, r1, r3
 800409c:	43db      	mvns	r3, r3
 800409e:	ea02 0103 	and.w	r1, r2, r3
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f003 0310 	and.w	r3, r3, #16
 80040ac:	409a      	lsls	r2, r3
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	430a      	orrs	r2, r1
 80040b4:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f003 0310 	and.w	r3, r3, #16
 80040c2:	21ff      	movs	r1, #255	@ 0xff
 80040c4:	fa01 f303 	lsl.w	r3, r1, r3
 80040c8:	43db      	mvns	r3, r3
 80040ca:	ea02 0103 	and.w	r1, r2, r3
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f003 0310 	and.w	r3, r3, #16
 80040d8:	409a      	lsls	r2, r3
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	430a      	orrs	r2, r1
 80040e0:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  /* Autonomous mode configuration */
  MODIFY_REG(hdac->Instance->AUTOCR, DAC_AUTOCR_AUTOMODE, sConfig->DAC_AutonomousMode);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040e8:	f423 0180 	bic.w	r1, r3, #4194304	@ 0x400000
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	685a      	ldr	r2, [r3, #4]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	430a      	orrs	r2, r1
 80040f6:	655a      	str	r2, [r3, #84]	@ 0x54

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	69db      	ldr	r3, [r3, #28]
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d11d      	bne.n	800413c <HAL_DAC_ConfigChannel+0x190>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004106:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f003 0310 	and.w	r3, r3, #16
 800410e:	221f      	movs	r2, #31
 8004110:	fa02 f303 	lsl.w	r3, r2, r3
 8004114:	43db      	mvns	r3, r3
 8004116:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004118:	4013      	ands	r3, r2
 800411a:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	6a1b      	ldr	r3, [r3, #32]
 8004120:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f003 0310 	and.w	r3, r3, #16
 8004128:	697a      	ldr	r2, [r7, #20]
 800412a:	fa02 f303 	lsl.w	r3, r2, r3
 800412e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004130:	4313      	orrs	r3, r2
 8004132:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800413a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004142:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f003 0310 	and.w	r3, r3, #16
 800414a:	2207      	movs	r2, #7
 800414c:	fa02 f303 	lsl.w	r3, r2, r3
 8004150:	43db      	mvns	r3, r3
 8004152:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004154:	4013      	ands	r3, r2
 8004156:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	699b      	ldr	r3, [r3, #24]
 800415c:	2b01      	cmp	r3, #1
 800415e:	d102      	bne.n	8004166 <HAL_DAC_ConfigChannel+0x1ba>
  {
    connectOnChip = 0x00000000UL;
 8004160:	2300      	movs	r3, #0
 8004162:	623b      	str	r3, [r7, #32]
 8004164:	e00f      	b.n	8004186 <HAL_DAC_ConfigChannel+0x1da>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	699b      	ldr	r3, [r3, #24]
 800416a:	2b02      	cmp	r3, #2
 800416c:	d102      	bne.n	8004174 <HAL_DAC_ConfigChannel+0x1c8>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800416e:	2301      	movs	r3, #1
 8004170:	623b      	str	r3, [r7, #32]
 8004172:	e008      	b.n	8004186 <HAL_DAC_ConfigChannel+0x1da>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	695b      	ldr	r3, [r3, #20]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d102      	bne.n	8004182 <HAL_DAC_ConfigChannel+0x1d6>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800417c:	2301      	movs	r3, #1
 800417e:	623b      	str	r3, [r7, #32]
 8004180:	e001      	b.n	8004186 <HAL_DAC_ConfigChannel+0x1da>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004182:	2300      	movs	r3, #0
 8004184:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	68da      	ldr	r2, [r3, #12]
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	695b      	ldr	r3, [r3, #20]
 800418e:	4313      	orrs	r3, r2
 8004190:	6a3a      	ldr	r2, [r7, #32]
 8004192:	4313      	orrs	r3, r2
 8004194:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f003 0310 	and.w	r3, r3, #16
 800419c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80041a0:	fa02 f303 	lsl.w	r3, r2, r3
 80041a4:	43db      	mvns	r3, r3
 80041a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041a8:	4013      	ands	r3, r2
 80041aa:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	7a1b      	ldrb	r3, [r3, #8]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d102      	bne.n	80041ba <HAL_DAC_ConfigChannel+0x20e>
 80041b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80041b8:	e000      	b.n	80041bc <HAL_DAC_ConfigChannel+0x210>
 80041ba:	2300      	movs	r3, #0
 80041bc:	697a      	ldr	r2, [r7, #20]
 80041be:	4313      	orrs	r3, r2
 80041c0:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f003 0310 	and.w	r3, r3, #16
 80041c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80041cc:	fa02 f303 	lsl.w	r3, r2, r3
 80041d0:	43db      	mvns	r3, r3
 80041d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041d4:	4013      	ands	r3, r2
 80041d6:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	7a5b      	ldrb	r3, [r3, #9]
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d102      	bne.n	80041e6 <HAL_DAC_ConfigChannel+0x23a>
 80041e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80041e4:	e000      	b.n	80041e8 <HAL_DAC_ConfigChannel+0x23c>
 80041e6:	2300      	movs	r3, #0
 80041e8:	697a      	ldr	r2, [r7, #20]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80041ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80041f4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d10b      	bne.n	8004216 <HAL_DAC_ConfigChannel+0x26a>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80041fe:	f001 f93f 	bl	8005480 <HAL_RCC_GetHCLKFreq>
 8004202:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_48MHZ)
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	4a31      	ldr	r2, [pc, #196]	@ (80042cc <HAL_DAC_ConfigChannel+0x320>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d90a      	bls.n	8004222 <HAL_DAC_ConfigChannel+0x276>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_48MHZ;
 800420c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800420e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004212:	627b      	str	r3, [r7, #36]	@ 0x24
 8004214:	e006      	b.n	8004224 <HAL_DAC_ConfigChannel+0x278>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800421c:	4313      	orrs	r3, r2
 800421e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004220:	e000      	b.n	8004224 <HAL_DAC_ConfigChannel+0x278>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8004222:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f003 0310 	and.w	r3, r3, #16
 800422a:	697a      	ldr	r2, [r7, #20]
 800422c:	fa02 f303 	lsl.w	r3, r2, r3
 8004230:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004232:	4313      	orrs	r3, r2
 8004234:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800423c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	6819      	ldr	r1, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f003 0310 	and.w	r3, r3, #16
 800424a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800424e:	fa02 f303 	lsl.w	r3, r2, r3
 8004252:	43da      	mvns	r2, r3
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	400a      	ands	r2, r1
 800425a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f003 0310 	and.w	r3, r3, #16
 800426a:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800426e:	fa02 f303 	lsl.w	r3, r2, r3
 8004272:	43db      	mvns	r3, r3
 8004274:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004276:	4013      	ands	r3, r2
 8004278:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f003 0310 	and.w	r3, r3, #16
 8004286:	697a      	ldr	r2, [r7, #20]
 8004288:	fa02 f303 	lsl.w	r3, r2, r3
 800428c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800428e:	4313      	orrs	r3, r2
 8004290:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004298:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	6819      	ldr	r1, [r3, #0]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f003 0310 	and.w	r3, r3, #16
 80042a6:	22c0      	movs	r2, #192	@ 0xc0
 80042a8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ac:	43da      	mvns	r2, r3
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	400a      	ands	r2, r1
 80042b4:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2201      	movs	r2, #1
 80042ba:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2200      	movs	r2, #0
 80042c0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80042c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3728      	adds	r7, #40	@ 0x28
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	02dc6c00 	.word	0x02dc6c00

080042d0 <HAL_DACEx_SetConfigAutonomousMode>:
  * @param sConfig pointer to Autonomous mode structure parameters.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_SetConfigAutonomousMode(DAC_HandleTypeDef *hdac,
                                                    const DAC_AutonomousModeConfTypeDef *sConfig)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle and autonomous mode configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d002      	beq.n	80042e6 <HAL_DACEx_SetConfigAutonomousMode+0x16>
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d101      	bne.n	80042ea <HAL_DACEx_SetConfigAutonomousMode+0x1a>
  {
    return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e024      	b.n	8004334 <HAL_DACEx_SetConfigAutonomousMode+0x64>
  }

  assert_param(IS_DAC_AUTONOMOUS(sConfig->AutonomousModeState));

  if (hdac->State == HAL_DAC_STATE_READY)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	791b      	ldrb	r3, [r3, #4]
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d11e      	bne.n	8004332 <HAL_DACEx_SetConfigAutonomousMode+0x62>
  {
    /* Process Locked */
    __HAL_LOCK(hdac);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	795b      	ldrb	r3, [r3, #5]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d101      	bne.n	8004300 <HAL_DACEx_SetConfigAutonomousMode+0x30>
 80042fc:	2302      	movs	r3, #2
 80042fe:	e019      	b.n	8004334 <HAL_DACEx_SetConfigAutonomousMode+0x64>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	715a      	strb	r2, [r3, #5]

    hdac->State = HAL_DAC_STATE_BUSY;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2202      	movs	r2, #2
 800430a:	711a      	strb	r2, [r3, #4]

    /* NOTE: The set/reset of the bit automode in the AUTOCR
             register is for both dac_channel1 and dac_channel2 */

    /* Update the AUTOCR register */
    MODIFY_REG(hdac->Instance->AUTOCR, DAC_AUTOCR_AUTOMODE, sConfig->AutonomousModeState);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004312:	f423 0180 	bic.w	r1, r3, #4194304	@ 0x400000
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	430a      	orrs	r2, r1
 8004320:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Update the DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2201      	movs	r2, #1
 8004326:	711a      	strb	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdac);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	715a      	strb	r2, [r3, #5]

    return HAL_OK;
 800432e:	2300      	movs	r3, #0
 8004330:	e000      	b.n	8004334 <HAL_DACEx_SetConfigAutonomousMode+0x64>
  }
  else
  {
    return HAL_BUSY;
 8004332:	2302      	movs	r3, #2
  }
}
 8004334:	4618      	mov	r0, r3
 8004336:	370c      	adds	r7, #12
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <HAL_EXTI_RegisterCallback>:
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti,
                                            EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8004340:	b480      	push	{r7}
 8004342:	b087      	sub	sp, #28
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	460b      	mov	r3, r1
 800434a:	607a      	str	r2, [r7, #4]
 800434c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800434e:	2300      	movs	r3, #0
 8004350:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8004352:	7afb      	ldrb	r3, [r7, #11]
 8004354:	2b02      	cmp	r3, #2
 8004356:	d011      	beq.n	800437c <HAL_EXTI_RegisterCallback+0x3c>
 8004358:	2b02      	cmp	r3, #2
 800435a:	dc13      	bgt.n	8004384 <HAL_EXTI_RegisterCallback+0x44>
 800435c:	2b00      	cmp	r3, #0
 800435e:	d002      	beq.n	8004366 <HAL_EXTI_RegisterCallback+0x26>
 8004360:	2b01      	cmp	r3, #1
 8004362:	d007      	beq.n	8004374 <HAL_EXTI_RegisterCallback+0x34>
 8004364:	e00e      	b.n	8004384 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	609a      	str	r2, [r3, #8]
      break;
 8004372:	e00a      	b.n	800438a <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	605a      	str	r2, [r3, #4]
      break;
 800437a:	e006      	b.n	800438a <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	609a      	str	r2, [r3, #8]
      break;
 8004382:	e002      	b.n	800438a <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	75fb      	strb	r3, [r7, #23]
      break;
 8004388:	bf00      	nop
  }

  return status;
 800438a:	7dfb      	ldrb	r3, [r7, #23]
}
 800438c:	4618      	mov	r0, r3
 800438e:	371c      	adds	r7, #28
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d101      	bne.n	80043ac <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e003      	b.n	80043b4 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	683a      	ldr	r2, [r7, #0]
 80043b0:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80043b2:	2300      	movs	r3, #0
  }
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	370c      	adds	r7, #12
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b086      	sub	sp, #24
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80043c8:	2300      	movs	r3, #0
 80043ca:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 031f 	and.w	r3, r3, #31
 80043d4:	2201      	movs	r2, #1
 80043d6:	fa02 f303 	lsl.w	r3, r2, r3
 80043da:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	015a      	lsls	r2, r3, #5
 80043e0:	4b17      	ldr	r3, [pc, #92]	@ (8004440 <HAL_EXTI_IRQHandler+0x80>)
 80043e2:	4413      	add	r3, r2
 80043e4:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	4013      	ands	r3, r2
 80043ee:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d009      	beq.n	800440a <HAL_EXTI_IRQHandler+0x4a>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	693a      	ldr	r2, [r7, #16]
 80043fa:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d002      	beq.n	800440a <HAL_EXTI_IRQHandler+0x4a>
    {
      hexti->RisingCallback();
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	015a      	lsls	r2, r3, #5
 800440e:	4b0d      	ldr	r3, [pc, #52]	@ (8004444 <HAL_EXTI_IRQHandler+0x84>)
 8004410:	4413      	add	r3, r2
 8004412:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	693a      	ldr	r2, [r7, #16]
 800441a:	4013      	ands	r3, r2
 800441c:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d009      	beq.n	8004438 <HAL_EXTI_IRQHandler+0x78>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	693a      	ldr	r2, [r7, #16]
 8004428:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d002      	beq.n	8004438 <HAL_EXTI_IRQHandler+0x78>
    {
      hexti->FallingCallback();
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	4798      	blx	r3
    }
  }
}
 8004438:	bf00      	nop
 800443a:	3718      	adds	r7, #24
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}
 8004440:	4003200c 	.word	0x4003200c
 8004444:	40032010 	.word	0x40032010

08004448 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8004448:	b480      	push	{r7}
 800444a:	b087      	sub	sp, #28
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004452:	2300      	movs	r3, #0
 8004454:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004456:	e162      	b.n	800471e <HAL_GPIO_Init+0x2d6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	2101      	movs	r1, #1
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	fa01 f303 	lsl.w	r3, r1, r3
 8004464:	4013      	ands	r3, r2
 8004466:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2b00      	cmp	r3, #0
 800446c:	f000 8154 	beq.w	8004718 <HAL_GPIO_Init+0x2d0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f003 0303 	and.w	r3, r3, #3
 8004478:	2b01      	cmp	r3, #1
 800447a:	d005      	beq.n	8004488 <HAL_GPIO_Init+0x40>
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	f003 0303 	and.w	r3, r3, #3
 8004484:	2b02      	cmp	r3, #2
 8004486:	d130      	bne.n	80044ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	005b      	lsls	r3, r3, #1
 8004492:	2203      	movs	r2, #3
 8004494:	fa02 f303 	lsl.w	r3, r2, r3
 8004498:	43db      	mvns	r3, r3
 800449a:	693a      	ldr	r2, [r7, #16]
 800449c:	4013      	ands	r3, r2
 800449e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	68da      	ldr	r2, [r3, #12]
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	005b      	lsls	r3, r3, #1
 80044a8:	fa02 f303 	lsl.w	r3, r2, r3
 80044ac:	693a      	ldr	r2, [r7, #16]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	693a      	ldr	r2, [r7, #16]
 80044b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80044be:	2201      	movs	r2, #1
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	fa02 f303 	lsl.w	r3, r2, r3
 80044c6:	43db      	mvns	r3, r3
 80044c8:	693a      	ldr	r2, [r7, #16]
 80044ca:	4013      	ands	r3, r2
 80044cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	091b      	lsrs	r3, r3, #4
 80044d4:	f003 0201 	and.w	r2, r3, #1
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	fa02 f303 	lsl.w	r3, r2, r3
 80044de:	693a      	ldr	r2, [r7, #16]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	605a      	str	r2, [r3, #4]
      }

      if (((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) ||
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f003 0303 	and.w	r3, r3, #3
 80044f2:	2b03      	cmp	r3, #3
 80044f4:	d109      	bne.n	800450a <HAL_GPIO_Init+0xc2>
         (((GPIO_Init->Mode & GPIO_MODE) == MODE_ANALOG) && (GPIO_Init->Pull != GPIO_PULLUP)))
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) ||
 80044fe:	2b03      	cmp	r3, #3
 8004500:	d11b      	bne.n	800453a <HAL_GPIO_Init+0xf2>
         (((GPIO_Init->Mode & GPIO_MODE) == MODE_ANALOG) && (GPIO_Init->Pull != GPIO_PULLUP)))
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	2b01      	cmp	r3, #1
 8004508:	d017      	beq.n	800453a <HAL_GPIO_Init+0xf2>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	005b      	lsls	r3, r3, #1
 8004514:	2203      	movs	r2, #3
 8004516:	fa02 f303 	lsl.w	r3, r2, r3
 800451a:	43db      	mvns	r3, r3
 800451c:	693a      	ldr	r2, [r7, #16]
 800451e:	4013      	ands	r3, r2
 8004520:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	689a      	ldr	r2, [r3, #8]
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	005b      	lsls	r3, r3, #1
 800452a:	fa02 f303 	lsl.w	r3, r2, r3
 800452e:	693a      	ldr	r2, [r7, #16]
 8004530:	4313      	orrs	r3, r2
 8004532:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	693a      	ldr	r2, [r7, #16]
 8004538:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	f003 0303 	and.w	r3, r3, #3
 8004542:	2b02      	cmp	r3, #2
 8004544:	d123      	bne.n	800458e <HAL_GPIO_Init+0x146>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	08da      	lsrs	r2, r3, #3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	3208      	adds	r2, #8
 800454e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004552:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	f003 0307 	and.w	r3, r3, #7
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	220f      	movs	r2, #15
 800455e:	fa02 f303 	lsl.w	r3, r2, r3
 8004562:	43db      	mvns	r3, r3
 8004564:	693a      	ldr	r2, [r7, #16]
 8004566:	4013      	ands	r3, r2
 8004568:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	691a      	ldr	r2, [r3, #16]
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	f003 0307 	and.w	r3, r3, #7
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	fa02 f303 	lsl.w	r3, r2, r3
 800457a:	693a      	ldr	r2, [r7, #16]
 800457c:	4313      	orrs	r3, r2
 800457e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	08da      	lsrs	r2, r3, #3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	3208      	adds	r2, #8
 8004588:	6939      	ldr	r1, [r7, #16]
 800458a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	005b      	lsls	r3, r3, #1
 8004598:	2203      	movs	r2, #3
 800459a:	fa02 f303 	lsl.w	r3, r2, r3
 800459e:	43db      	mvns	r3, r3
 80045a0:	693a      	ldr	r2, [r7, #16]
 80045a2:	4013      	ands	r3, r2
 80045a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	f003 0203 	and.w	r2, r3, #3
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	005b      	lsls	r3, r3, #1
 80045b2:	fa02 f303 	lsl.w	r3, r2, r3
 80045b6:	693a      	ldr	r2, [r7, #16]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	f000 80a4 	beq.w	8004718 <HAL_GPIO_Init+0x2d0>
      {
        temp = EXTI->EXTICR[position >> 2U];
 80045d0:	4a5a      	ldr	r2, [pc, #360]	@ (800473c <HAL_GPIO_Init+0x2f4>)
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	089b      	lsrs	r3, r3, #2
 80045d6:	3318      	adds	r3, #24
 80045d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	f003 0303 	and.w	r3, r3, #3
 80045e4:	00db      	lsls	r3, r3, #3
 80045e6:	220f      	movs	r2, #15
 80045e8:	fa02 f303 	lsl.w	r3, r2, r3
 80045ec:	43db      	mvns	r3, r3
 80045ee:	693a      	ldr	r2, [r7, #16]
 80045f0:	4013      	ands	r3, r2
 80045f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	4a52      	ldr	r2, [pc, #328]	@ (8004740 <HAL_GPIO_Init+0x2f8>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d025      	beq.n	8004648 <HAL_GPIO_Init+0x200>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4a51      	ldr	r2, [pc, #324]	@ (8004744 <HAL_GPIO_Init+0x2fc>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d01f      	beq.n	8004644 <HAL_GPIO_Init+0x1fc>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a50      	ldr	r2, [pc, #320]	@ (8004748 <HAL_GPIO_Init+0x300>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d019      	beq.n	8004640 <HAL_GPIO_Init+0x1f8>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	4a4f      	ldr	r2, [pc, #316]	@ (800474c <HAL_GPIO_Init+0x304>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d013      	beq.n	800463c <HAL_GPIO_Init+0x1f4>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4a4e      	ldr	r2, [pc, #312]	@ (8004750 <HAL_GPIO_Init+0x308>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d00d      	beq.n	8004638 <HAL_GPIO_Init+0x1f0>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4a4d      	ldr	r2, [pc, #308]	@ (8004754 <HAL_GPIO_Init+0x30c>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d007      	beq.n	8004634 <HAL_GPIO_Init+0x1ec>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a4c      	ldr	r2, [pc, #304]	@ (8004758 <HAL_GPIO_Init+0x310>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d101      	bne.n	8004630 <HAL_GPIO_Init+0x1e8>
 800462c:	2307      	movs	r3, #7
 800462e:	e00c      	b.n	800464a <HAL_GPIO_Init+0x202>
 8004630:	2310      	movs	r3, #16
 8004632:	e00a      	b.n	800464a <HAL_GPIO_Init+0x202>
 8004634:	2306      	movs	r3, #6
 8004636:	e008      	b.n	800464a <HAL_GPIO_Init+0x202>
 8004638:	2304      	movs	r3, #4
 800463a:	e006      	b.n	800464a <HAL_GPIO_Init+0x202>
 800463c:	2303      	movs	r3, #3
 800463e:	e004      	b.n	800464a <HAL_GPIO_Init+0x202>
 8004640:	2302      	movs	r3, #2
 8004642:	e002      	b.n	800464a <HAL_GPIO_Init+0x202>
 8004644:	2301      	movs	r3, #1
 8004646:	e000      	b.n	800464a <HAL_GPIO_Init+0x202>
 8004648:	2300      	movs	r3, #0
 800464a:	697a      	ldr	r2, [r7, #20]
 800464c:	f002 0203 	and.w	r2, r2, #3
 8004650:	00d2      	lsls	r2, r2, #3
 8004652:	4093      	lsls	r3, r2
 8004654:	693a      	ldr	r2, [r7, #16]
 8004656:	4313      	orrs	r3, r2
 8004658:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 800465a:	4938      	ldr	r1, [pc, #224]	@ (800473c <HAL_GPIO_Init+0x2f4>)
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	089b      	lsrs	r3, r3, #2
 8004660:	3318      	adds	r3, #24
 8004662:	693a      	ldr	r2, [r7, #16]
 8004664:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004668:	4b34      	ldr	r3, [pc, #208]	@ (800473c <HAL_GPIO_Init+0x2f4>)
 800466a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800466e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	43db      	mvns	r3, r3
 8004674:	693a      	ldr	r2, [r7, #16]
 8004676:	4013      	ands	r3, r2
 8004678:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d003      	beq.n	800468e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004686:	693a      	ldr	r2, [r7, #16]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	4313      	orrs	r3, r2
 800468c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800468e:	4a2b      	ldr	r2, [pc, #172]	@ (800473c <HAL_GPIO_Init+0x2f4>)
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8004696:	4b29      	ldr	r3, [pc, #164]	@ (800473c <HAL_GPIO_Init+0x2f4>)
 8004698:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800469c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	43db      	mvns	r3, r3
 80046a2:	693a      	ldr	r2, [r7, #16]
 80046a4:	4013      	ands	r3, r2
 80046a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d003      	beq.n	80046bc <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 80046b4:	693a      	ldr	r2, [r7, #16]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80046bc:	4a1f      	ldr	r2, [pc, #124]	@ (800473c <HAL_GPIO_Init+0x2f4>)
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80046c4:	4b1d      	ldr	r3, [pc, #116]	@ (800473c <HAL_GPIO_Init+0x2f4>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	43db      	mvns	r3, r3
 80046ce:	693a      	ldr	r2, [r7, #16]
 80046d0:	4013      	ands	r3, r2
 80046d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d003      	beq.n	80046e8 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 80046e0:	693a      	ldr	r2, [r7, #16]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80046e8:	4a14      	ldr	r2, [pc, #80]	@ (800473c <HAL_GPIO_Init+0x2f4>)
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80046ee:	4b13      	ldr	r3, [pc, #76]	@ (800473c <HAL_GPIO_Init+0x2f4>)
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	43db      	mvns	r3, r3
 80046f8:	693a      	ldr	r2, [r7, #16]
 80046fa:	4013      	ands	r3, r2
 80046fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d003      	beq.n	8004712 <HAL_GPIO_Init+0x2ca>
        {
          temp |= iocurrent;
 800470a:	693a      	ldr	r2, [r7, #16]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	4313      	orrs	r3, r2
 8004710:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004712:	4a0a      	ldr	r2, [pc, #40]	@ (800473c <HAL_GPIO_Init+0x2f4>)
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	3301      	adds	r3, #1
 800471c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	fa22 f303 	lsr.w	r3, r2, r3
 8004728:	2b00      	cmp	r3, #0
 800472a:	f47f ae95 	bne.w	8004458 <HAL_GPIO_Init+0x10>
  }
}
 800472e:	bf00      	nop
 8004730:	bf00      	nop
 8004732:	371c      	adds	r7, #28
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr
 800473c:	40032000 	.word	0x40032000
 8004740:	42020000 	.word	0x42020000
 8004744:	42020400 	.word	0x42020400
 8004748:	42020800 	.word	0x42020800
 800474c:	42020c00 	.word	0x42020c00
 8004750:	42021000 	.word	0x42021000
 8004754:	42021800 	.word	0x42021800
 8004758:	42021c00 	.word	0x42021c00

0800475c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800475c:	b480      	push	{r7}
 800475e:	b085      	sub	sp, #20
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	460b      	mov	r3, r1
 8004766:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	691a      	ldr	r2, [r3, #16]
 800476c:	887b      	ldrh	r3, [r7, #2]
 800476e:	4013      	ands	r3, r2
 8004770:	2b00      	cmp	r3, #0
 8004772:	d002      	beq.n	800477a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004774:	2301      	movs	r3, #1
 8004776:	73fb      	strb	r3, [r7, #15]
 8004778:	e001      	b.n	800477e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800477a:	2300      	movs	r3, #0
 800477c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800477e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004780:	4618      	mov	r0, r3
 8004782:	3714      	adds	r7, #20
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	460b      	mov	r3, r1
 8004796:	807b      	strh	r3, [r7, #2]
 8004798:	4613      	mov	r3, r2
 800479a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800479c:	787b      	ldrb	r3, [r7, #1]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d003      	beq.n	80047aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80047a2:	887a      	ldrh	r2, [r7, #2]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80047a8:	e002      	b.n	80047b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80047aa:	887a      	ldrh	r2, [r7, #2]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80047b0:	bf00      	nop
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp: OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047c4:	2300      	movs	r3, #0
 80047c6:	73fb      	strb	r3, [r7, #15]
  uint32_t updateotrlpotr;

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d101      	bne.n	80047d2 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e0ca      	b.n	8004968 <HAL_OPAMP_Init+0x1ac>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	2b05      	cmp	r3, #5
 80047dc:	d101      	bne.n	80047e2 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e0c2      	b.n	8004968 <HAL_OPAMP_Init+0x1ac>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d101      	bne.n	80047f2 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e0ba      	b.n	8004968 <HAL_OPAMP_Init+0x1ac>
    {
      assert_param(IS_OPAMP_PGA_GAIN(hopamp->Init.PgaGain));
    }

    assert_param(IS_OPAMP_TRIMMING(hopamp->Init.UserTrimming));
    if ((hopamp->Init.UserTrimming) == OPAMP_TRIMMING_USER)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	69db      	ldr	r3, [r3, #28]
 80047f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80047fa:	d109      	bne.n	8004810 <HAL_OPAMP_Init+0x54>
    {
      if ((hopamp->Init.PowerMode == OPAMP_POWERMODE_NORMALPOWER_NORMALSPEED) || \
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d004      	beq.n	800480e <HAL_OPAMP_Init+0x52>
          (hopamp->Init.PowerMode == OPAMP_POWERMODE_NORMALPOWER_HIGHSPEED))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	689b      	ldr	r3, [r3, #8]
      if ((hopamp->Init.PowerMode == OPAMP_POWERMODE_NORMALPOWER_NORMALSPEED) || \
 8004808:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800480c:	e000      	b.n	8004810 <HAL_OPAMP_Init+0x54>
      {
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
 800480e:	bf00      	nop
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValuePLowPower));
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueNLowPower));
      }
    }

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004816:	b2db      	uxtb	r3, r3
 8004818:	2b00      	cmp	r3, #0
 800481a:	d103      	bne.n	8004824 <HAL_OPAMP_Init+0x68>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f7fd f973 	bl	8001b10 <HAL_OPAMP_MspInit>
#endif /* USE_HAL_OPAMP_REGISTER_CALLBACKS */

    /* Set operating mode */
    CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALON);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004838:	601a      	str	r2, [r3, #0]

    if (hopamp->Init.Mode == OPAMP_PGA_MODE)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	2b08      	cmp	r3, #8
 8004840:	d119      	bne.n	8004876 <HAL_OPAMP_Init+0xba>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_PGA, \
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	4b49      	ldr	r3, [pc, #292]	@ (8004970 <HAL_OPAMP_Init+0x1b4>)
 800484a:	4013      	ands	r3, r2
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	6891      	ldr	r1, [r2, #8]
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	68d2      	ldr	r2, [r2, #12]
 8004854:	4311      	orrs	r1, r2
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	6992      	ldr	r2, [r2, #24]
 800485a:	4311      	orrs	r1, r2
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	6912      	ldr	r2, [r2, #16]
 8004860:	4311      	orrs	r1, r2
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	6952      	ldr	r2, [r2, #20]
 8004866:	4311      	orrs	r1, r2
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	69d2      	ldr	r2, [r2, #28]
 800486c:	4311      	orrs	r1, r2
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	6812      	ldr	r2, [r2, #0]
 8004872:	430b      	orrs	r3, r1
 8004874:	6013      	str	r3, [r2, #0]
                 hopamp->Init.InvertingInput    | \
                 hopamp->Init.NonInvertingInput | \
                 hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	2b0c      	cmp	r3, #12
 800487c:	d113      	bne.n	80048a6 <HAL_OPAMP_Init+0xea>
    {
      /* In Follower mode InvertingInput is Not Applicable  */
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_FOLLOWER, \
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	4b3b      	ldr	r3, [pc, #236]	@ (8004974 <HAL_OPAMP_Init+0x1b8>)
 8004886:	4013      	ands	r3, r2
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	6891      	ldr	r1, [r2, #8]
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	68d2      	ldr	r2, [r2, #12]
 8004890:	4311      	orrs	r1, r2
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	6952      	ldr	r2, [r2, #20]
 8004896:	4311      	orrs	r1, r2
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	69d2      	ldr	r2, [r2, #28]
 800489c:	4311      	orrs	r1, r2
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	6812      	ldr	r2, [r2, #0]
 80048a2:	430b      	orrs	r3, r1
 80048a4:	6013      	str	r3, [r2, #0]
                 hopamp->Init.Mode | \
                 hopamp->Init.NonInvertingInput | \
                 hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.Mode == OPAMP_STANDALONE_MODE)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d116      	bne.n	80048dc <HAL_OPAMP_Init+0x120>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_STANDALONE, \
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	4b30      	ldr	r3, [pc, #192]	@ (8004978 <HAL_OPAMP_Init+0x1bc>)
 80048b6:	4013      	ands	r3, r2
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	6891      	ldr	r1, [r2, #8]
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	68d2      	ldr	r2, [r2, #12]
 80048c0:	4311      	orrs	r1, r2
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	6912      	ldr	r2, [r2, #16]
 80048c6:	4311      	orrs	r1, r2
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	6952      	ldr	r2, [r2, #20]
 80048cc:	4311      	orrs	r1, r2
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	69d2      	ldr	r2, [r2, #28]
 80048d2:	4311      	orrs	r1, r2
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	6812      	ldr	r2, [r2, #0]
 80048d8:	430b      	orrs	r3, r1
 80048da:	6013      	str	r3, [r2, #0]
                 hopamp->Init.InvertingInput    | \
                 hopamp->Init.NonInvertingInput | \
                 hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.UserTrimming == OPAMP_TRIMMING_USER)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	69db      	ldr	r3, [r3, #28]
 80048e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80048e4:	d12f      	bne.n	8004946 <HAL_OPAMP_Init+0x18a>
    {
      /* Set power mode and associated calibration parameters */
      if ((hopamp->Init.PowerMode != OPAMP_POWERMODE_LOWPOWER_NORMALSPEED) && \
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d018      	beq.n	8004920 <HAL_OPAMP_Init+0x164>
          (hopamp->Init.PowerMode != OPAMP_POWERMODE_LOWPOWER_HIGHSPEED))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	689b      	ldr	r3, [r3, #8]
      if ((hopamp->Init.PowerMode != OPAMP_POWERMODE_LOWPOWER_NORMALSPEED) && \
 80048f2:	4a22      	ldr	r2, [pc, #136]	@ (800497c <HAL_OPAMP_Init+0x1c0>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d013      	beq.n	8004920 <HAL_OPAMP_Init+0x164>
      {
        /* OPAMP_POWERMODE_NORMALPOWER_HIGHSPEED or OPAMP_POWERMODE_NORMALPOWER_NORMALSPEED */
        /* Set calibration mode (factory or user) and values for            */
        /* transistors differential pair high (PMOS) and low (NMOS) for     */
        /* normal mode.                                                     */
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6a1b      	ldr	r3, [r3, #32]
 80048fc:	021a      	lsls	r2, r3, #8
                          | (hopamp->Init.TrimmingValueN));
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 8004902:	4313      	orrs	r3, r2
 8004904:	60bb      	str	r3, [r7, #8]
        MODIFY_REG(hopamp->Instance->OTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 8004910:	f023 031f 	bic.w	r3, r3, #31
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	6812      	ldr	r2, [r2, #0]
 8004918:	68b9      	ldr	r1, [r7, #8]
 800491a:	430b      	orrs	r3, r1
 800491c:	6053      	str	r3, [r2, #4]
 800491e:	e012      	b.n	8004946 <HAL_OPAMP_Init+0x18a>
      else
      {
        /* OPAMP_POWERMODE_LOWPOWER_HIGHSPEED or OPAMP_POWERMODE_LOWPOWER_NORMALSPEED */
        /* transistors differential pair high (PMOS) and low (NMOS) for     */
        /* low power mode.                                                     */
        updateotrlpotr = (((hopamp->Init.TrimmingValuePLowPower) << (OPAMP_INPUT_NONINVERTING)) \
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004924:	021a      	lsls	r2, r3, #8
                          | (hopamp->Init.TrimmingValueNLowPower));
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        updateotrlpotr = (((hopamp->Init.TrimmingValuePLowPower) << (OPAMP_INPUT_NONINVERTING)) \
 800492a:	4313      	orrs	r3, r2
 800492c:	60bb      	str	r3, [r7, #8]
        MODIFY_REG(hopamp->Instance->LPOTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 8004938:	f023 031f 	bic.w	r3, r3, #31
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	6812      	ldr	r2, [r2, #0]
 8004940:	68b9      	ldr	r1, [r7, #8]
 8004942:	430b      	orrs	r3, r1
 8004944:	6093      	str	r3, [r2, #8]
    }

    /* Set the power supply range to high for performance purpose    */
    /* The OPAMP_CSR_OPARANGE is common configuration for all OPAMPs */
    /* bit OPAMP_CSR_OPARANGE applies for both OPAMPs                */
    MODIFY_REG(OPAMP12_COMMON->CSR, OPAMP_CSR_OPARANGE, OPAMP_CSR_OPARANGE);
 8004946:	4b0e      	ldr	r3, [pc, #56]	@ (8004980 <HAL_OPAMP_Init+0x1c4>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a0d      	ldr	r2, [pc, #52]	@ (8004980 <HAL_OPAMP_Init+0x1c4>)
 800494c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004950:	6013      	str	r3, [r2, #0]

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004958:	b2db      	uxtb	r3, r3
 800495a:	2b00      	cmp	r3, #0
 800495c:	d103      	bne.n	8004966 <HAL_OPAMP_Init+0x1aa>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2201      	movs	r2, #1
 8004962:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    }
    /* else: remain in READY or BUSY state (no update) */
    return status;
 8004966:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004968:	4618      	mov	r0, r3
 800496a:	3710      	adds	r7, #16
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	bfffb8c1 	.word	0xbfffb8c1
 8004974:	bfffbbf1 	.word	0xbfffbbf1
 8004978:	bfffb8f1 	.word	0xbfffb8f1
 800497c:	40000002 	.word	0x40000002
 8004980:	40007000 	.word	0x40007000

08004984 <HAL_OPAMP_Start>:
  * @param  hopamp: OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8004984:	b480      	push	{r7}
 8004986:	b085      	sub	sp, #20
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800498c:	2300      	movs	r3, #0
 800498e:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d102      	bne.n	800499c <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	73fb      	strb	r3, [r7, #15]
 800499a:	e01d      	b.n	80049d8 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	2b05      	cmp	r3, #5
 80049a6:	d102      	bne.n	80049ae <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	73fb      	strb	r3, [r7, #15]
 80049ac:	e014      	b.n	80049d8 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d10c      	bne.n	80049d4 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAEN);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f042 0201 	orr.w	r2, r2, #1
 80049c8:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2204      	movs	r2, #4
 80049ce:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
 80049d2:	e001      	b.n	80049d8 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	73fb      	strb	r3, [r7, #15]
    }

  }
  return status;
 80049d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3714      	adds	r7, #20
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
	...

080049e8 <HAL_PWREx_ControlVoltageScaling>:
  * @note   Before moving to voltage scaling 2, it is mandatory to ensure that
  *         the system frequency is equal or below 16 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b085      	sub	sp, #20
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Set voltage scaling level */
  vosr = (PWR->VOSR & ~(PWR_VOSR_R2EN | PWR_VOSR_R1EN));
 80049f0:	4b19      	ldr	r3, [pc, #100]	@ (8004a58 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	f023 0303 	bic.w	r3, r3, #3
 80049f8:	60bb      	str	r3, [r7, #8]
  vosr |= VoltageScaling;
 80049fa:	68ba      	ldr	r2, [r7, #8]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	60bb      	str	r3, [r7, #8]
  PWR->VOSR = vosr;
 8004a02:	4a15      	ldr	r2, [pc, #84]	@ (8004a58 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	60d3      	str	r3, [r2, #12]

  /* Wait until VOSRDY is set */
  timeout = ((PWR_VOSF_SETTING_DELAY_VALUE * SystemCoreClock) / 1000000U) + 1U;
 8004a08:	4b14      	ldr	r3, [pc, #80]	@ (8004a5c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	2232      	movs	r2, #50	@ 0x32
 8004a0e:	fb02 f303 	mul.w	r3, r2, r3
 8004a12:	4a13      	ldr	r2, [pc, #76]	@ (8004a60 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004a14:	fba2 2303 	umull	r2, r3, r2, r3
 8004a18:	0c9b      	lsrs	r3, r3, #18
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	60fb      	str	r3, [r7, #12]

  /* store expected ready flag */
  vosr = (VoltageScaling << (PWR_VOSR_R1RDY_Pos - PWR_VOSR_R1EN_Pos));
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	041b      	lsls	r3, r3, #16
 8004a22:	60bb      	str	r3, [r7, #8]

  while (((PWR->VOSR & vosr) != vosr) && (timeout != 0U))
 8004a24:	e002      	b.n	8004a2c <HAL_PWREx_ControlVoltageScaling+0x44>
  {
    timeout--;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	3b01      	subs	r3, #1
 8004a2a:	60fb      	str	r3, [r7, #12]
  while (((PWR->VOSR & vosr) != vosr) && (timeout != 0U))
 8004a2c:	4b0a      	ldr	r3, [pc, #40]	@ (8004a58 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004a2e:	68da      	ldr	r2, [r3, #12]
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	4013      	ands	r3, r2
 8004a34:	68ba      	ldr	r2, [r7, #8]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d002      	beq.n	8004a40 <HAL_PWREx_ControlVoltageScaling+0x58>
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d1f2      	bne.n	8004a26 <HAL_PWREx_ControlVoltageScaling+0x3e>
  }

  /* Check time out */
  if (timeout == 0U)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d101      	bne.n	8004a4a <HAL_PWREx_ControlVoltageScaling+0x62>
  {
    return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e000      	b.n	8004a4c <HAL_PWREx_ControlVoltageScaling+0x64>
  }
  else
  {
    return HAL_OK;
 8004a4a:	2300      	movs	r3, #0
  }
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3714      	adds	r7, #20
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr
 8004a58:	40030800 	.word	0x40030800
 8004a5c:	20000004 	.word	0x20000004
 8004a60:	431bde83 	.word	0x431bde83

08004a64 <HAL_PWREx_EnableVddA>:
  * @brief  Enable VDDA supply valid.
  * @note   Setting this bit is mandatory to use the analog peripherals.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8004a64:	b480      	push	{r7}
 8004a66:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8004a68:	4b05      	ldr	r3, [pc, #20]	@ (8004a80 <HAL_PWREx_EnableVddA+0x1c>)
 8004a6a:	691b      	ldr	r3, [r3, #16]
 8004a6c:	4a04      	ldr	r2, [pc, #16]	@ (8004a80 <HAL_PWREx_EnableVddA+0x1c>)
 8004a6e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004a72:	6113      	str	r3, [r2, #16]
}
 8004a74:	bf00      	nop
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop
 8004a80:	40030800 	.word	0x40030800

08004a84 <HAL_PWREx_EnableEpodBooster>:
  * @note   EPOD booster shall be enabled prior to increase system frequency above 24 MHz in all ranges.
  * @note   EPOD Booster clock source and divider shall be configured through RCC before calling this function.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_EnableEpodBooster(void)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Set EPOD booster bit */
  PWR->VOSR |= PWR_VOSR_BOOSTEN;
 8004a8a:	4b13      	ldr	r3, [pc, #76]	@ (8004ad8 <HAL_PWREx_EnableEpodBooster+0x54>)
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	4a12      	ldr	r2, [pc, #72]	@ (8004ad8 <HAL_PWREx_EnableEpodBooster+0x54>)
 8004a90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a94:	60d3      	str	r3, [r2, #12]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004a96:	f7fd fdf3 	bl	8002680 <HAL_GetTick>
 8004a9a:	6078      	str	r0, [r7, #4]

  /* Wait till boster ready bit is set */
  while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) != PWR_VOSR_BOOSTRDY)
 8004a9c:	e00f      	b.n	8004abe <HAL_PWREx_EnableEpodBooster+0x3a>
  {
    if ((HAL_GetTick() - tickstart) > BOOSTER_TIMEOUT_VALUE)
 8004a9e:	f7fd fdef 	bl	8002680 <HAL_GetTick>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d908      	bls.n	8004abe <HAL_PWREx_EnableEpodBooster+0x3a>
    {
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) != PWR_VOSR_BOOSTRDY)
 8004aac:	4b0a      	ldr	r3, [pc, #40]	@ (8004ad8 <HAL_PWREx_EnableEpodBooster+0x54>)
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ab4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004ab8:	d001      	beq.n	8004abe <HAL_PWREx_EnableEpodBooster+0x3a>
      {
        return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e007      	b.n	8004ace <HAL_PWREx_EnableEpodBooster+0x4a>
  while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) != PWR_VOSR_BOOSTRDY)
 8004abe:	4b06      	ldr	r3, [pc, #24]	@ (8004ad8 <HAL_PWREx_EnableEpodBooster+0x54>)
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ac6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004aca:	d1e8      	bne.n	8004a9e <HAL_PWREx_EnableEpodBooster+0x1a>
      }
    }
  }

  /* Booster is enabled and ready */
  return HAL_OK;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3708      	adds	r7, #8
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	40030800 	.word	0x40030800

08004adc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef *RCC_OscInitStruct)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b088      	sub	sp, #32
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t sysclksrc;
  uint32_t tmpreg1;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d101      	bne.n	8004aee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e340      	b.n	8005170 <HAL_RCC_OscConfig+0x694>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004aee:	4b98      	ldr	r3, [pc, #608]	@ (8004d50 <HAL_RCC_OscConfig+0x274>)
 8004af0:	69db      	ldr	r3, [r3, #28]
 8004af2:	f003 030c 	and.w	r3, r3, #12
 8004af6:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) != 0x00u)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0301 	and.w	r3, r3, #1
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	f000 80ad 	beq.w	8004c60 <HAL_RCC_OscConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock source, it is not allowed to be disabled */
    if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	2b08      	cmp	r3, #8
 8004b0a:	d106      	bne.n	8004b1a <HAL_RCC_OscConfig+0x3e>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	f040 80a5 	bne.w	8004c60 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e32a      	b.n	8005170 <HAL_RCC_OscConfig+0x694>
      }
    }
    else
    {
      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d04f      	beq.n	8004bc2 <HAL_RCC_OscConfig+0xe6>
      {
        /* Set the new HSE configuration ---------------------------------------*/
        __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b2a:	d106      	bne.n	8004b3a <HAL_RCC_OscConfig+0x5e>
 8004b2c:	4b88      	ldr	r3, [pc, #544]	@ (8004d50 <HAL_RCC_OscConfig+0x274>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a87      	ldr	r2, [pc, #540]	@ (8004d50 <HAL_RCC_OscConfig+0x274>)
 8004b32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b36:	6013      	str	r3, [r2, #0]
 8004b38:	e02f      	b.n	8004b9a <HAL_RCC_OscConfig+0xbe>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b42:	d10c      	bne.n	8004b5e <HAL_RCC_OscConfig+0x82>
 8004b44:	4b82      	ldr	r3, [pc, #520]	@ (8004d50 <HAL_RCC_OscConfig+0x274>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a81      	ldr	r2, [pc, #516]	@ (8004d50 <HAL_RCC_OscConfig+0x274>)
 8004b4a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b4e:	6013      	str	r3, [r2, #0]
 8004b50:	4b7f      	ldr	r3, [pc, #508]	@ (8004d50 <HAL_RCC_OscConfig+0x274>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a7e      	ldr	r2, [pc, #504]	@ (8004d50 <HAL_RCC_OscConfig+0x274>)
 8004b56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b5a:	6013      	str	r3, [r2, #0]
 8004b5c:	e01d      	b.n	8004b9a <HAL_RCC_OscConfig+0xbe>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8004b66:	d10c      	bne.n	8004b82 <HAL_RCC_OscConfig+0xa6>
 8004b68:	4b79      	ldr	r3, [pc, #484]	@ (8004d50 <HAL_RCC_OscConfig+0x274>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a78      	ldr	r2, [pc, #480]	@ (8004d50 <HAL_RCC_OscConfig+0x274>)
 8004b6e:	f443 13a0 	orr.w	r3, r3, #1310720	@ 0x140000
 8004b72:	6013      	str	r3, [r2, #0]
 8004b74:	4b76      	ldr	r3, [pc, #472]	@ (8004d50 <HAL_RCC_OscConfig+0x274>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a75      	ldr	r2, [pc, #468]	@ (8004d50 <HAL_RCC_OscConfig+0x274>)
 8004b7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b7e:	6013      	str	r3, [r2, #0]
 8004b80:	e00b      	b.n	8004b9a <HAL_RCC_OscConfig+0xbe>
 8004b82:	4b73      	ldr	r3, [pc, #460]	@ (8004d50 <HAL_RCC_OscConfig+0x274>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a72      	ldr	r2, [pc, #456]	@ (8004d50 <HAL_RCC_OscConfig+0x274>)
 8004b88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b8c:	6013      	str	r3, [r2, #0]
 8004b8e:	4b70      	ldr	r3, [pc, #448]	@ (8004d50 <HAL_RCC_OscConfig+0x274>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a6f      	ldr	r2, [pc, #444]	@ (8004d50 <HAL_RCC_OscConfig+0x274>)
 8004b94:	f423 13a0 	bic.w	r3, r3, #1310720	@ 0x140000
 8004b98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b9a:	f7fd fd71 	bl	8002680 <HAL_GetTick>
 8004b9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ba0:	e008      	b.n	8004bb4 <HAL_RCC_OscConfig+0xd8>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ba2:	f7fd fd6d 	bl	8002680 <HAL_GetTick>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	2b64      	cmp	r3, #100	@ 0x64
 8004bae:	d901      	bls.n	8004bb4 <HAL_RCC_OscConfig+0xd8>
          {
            return HAL_TIMEOUT;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	e2dd      	b.n	8005170 <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bb4:	4b66      	ldr	r3, [pc, #408]	@ (8004d50 <HAL_RCC_OscConfig+0x274>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d0f0      	beq.n	8004ba2 <HAL_RCC_OscConfig+0xc6>
 8004bc0:	e04e      	b.n	8004c60 <HAL_RCC_OscConfig+0x184>
        }
      }
      else
      {
        /* Set the new HSE configuration ---------------------------------------*/
        __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bca:	d106      	bne.n	8004bda <HAL_RCC_OscConfig+0xfe>
 8004bcc:	4b60      	ldr	r3, [pc, #384]	@ (8004d50 <HAL_RCC_OscConfig+0x274>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a5f      	ldr	r2, [pc, #380]	@ (8004d50 <HAL_RCC_OscConfig+0x274>)
 8004bd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bd6:	6013      	str	r3, [r2, #0]
 8004bd8:	e02f      	b.n	8004c3a <HAL_RCC_OscConfig+0x15e>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004be2:	d10c      	bne.n	8004bfe <HAL_RCC_OscConfig+0x122>
 8004be4:	4b5a      	ldr	r3, [pc, #360]	@ (8004d50 <HAL_RCC_OscConfig+0x274>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a59      	ldr	r2, [pc, #356]	@ (8004d50 <HAL_RCC_OscConfig+0x274>)
 8004bea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004bee:	6013      	str	r3, [r2, #0]
 8004bf0:	4b57      	ldr	r3, [pc, #348]	@ (8004d50 <HAL_RCC_OscConfig+0x274>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a56      	ldr	r2, [pc, #344]	@ (8004d50 <HAL_RCC_OscConfig+0x274>)
 8004bf6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bfa:	6013      	str	r3, [r2, #0]
 8004bfc:	e01d      	b.n	8004c3a <HAL_RCC_OscConfig+0x15e>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8004c06:	d10c      	bne.n	8004c22 <HAL_RCC_OscConfig+0x146>
 8004c08:	4b51      	ldr	r3, [pc, #324]	@ (8004d50 <HAL_RCC_OscConfig+0x274>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a50      	ldr	r2, [pc, #320]	@ (8004d50 <HAL_RCC_OscConfig+0x274>)
 8004c0e:	f443 13a0 	orr.w	r3, r3, #1310720	@ 0x140000
 8004c12:	6013      	str	r3, [r2, #0]
 8004c14:	4b4e      	ldr	r3, [pc, #312]	@ (8004d50 <HAL_RCC_OscConfig+0x274>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a4d      	ldr	r2, [pc, #308]	@ (8004d50 <HAL_RCC_OscConfig+0x274>)
 8004c1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c1e:	6013      	str	r3, [r2, #0]
 8004c20:	e00b      	b.n	8004c3a <HAL_RCC_OscConfig+0x15e>
 8004c22:	4b4b      	ldr	r3, [pc, #300]	@ (8004d50 <HAL_RCC_OscConfig+0x274>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a4a      	ldr	r2, [pc, #296]	@ (8004d50 <HAL_RCC_OscConfig+0x274>)
 8004c28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c2c:	6013      	str	r3, [r2, #0]
 8004c2e:	4b48      	ldr	r3, [pc, #288]	@ (8004d50 <HAL_RCC_OscConfig+0x274>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a47      	ldr	r2, [pc, #284]	@ (8004d50 <HAL_RCC_OscConfig+0x274>)
 8004c34:	f423 13a0 	bic.w	r3, r3, #1310720	@ 0x140000
 8004c38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c3a:	f7fd fd21 	bl	8002680 <HAL_GetTick>
 8004c3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c40:	e008      	b.n	8004c54 <HAL_RCC_OscConfig+0x178>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c42:	f7fd fd1d 	bl	8002680 <HAL_GetTick>
 8004c46:	4602      	mov	r2, r0
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	2b64      	cmp	r3, #100	@ 0x64
 8004c4e:	d901      	bls.n	8004c54 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e28d      	b.n	8005170 <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c54:	4b3e      	ldr	r3, [pc, #248]	@ (8004d50 <HAL_RCC_OscConfig+0x274>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d1f0      	bne.n	8004c42 <HAL_RCC_OscConfig+0x166>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) != 0x00u)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0302 	and.w	r3, r3, #2
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d054      	beq.n	8004d16 <HAL_RCC_OscConfig+0x23a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock */
    if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	2b04      	cmp	r3, #4
 8004c70:	d110      	bne.n	8004c94 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d101      	bne.n	8004c7e <HAL_RCC_OscConfig+0x1a2>
      {
        return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e278      	b.n	8005170 <HAL_RCC_OscConfig+0x694>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c7e:	4b34      	ldr	r3, [pc, #208]	@ (8004d50 <HAL_RCC_OscConfig+0x274>)
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	041b      	lsls	r3, r3, #16
 8004c8c:	4930      	ldr	r1, [pc, #192]	@ (8004d50 <HAL_RCC_OscConfig+0x274>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	610b      	str	r3, [r1, #16]
 8004c92:	e040      	b.n	8004d16 <HAL_RCC_OscConfig+0x23a>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d023      	beq.n	8004ce4 <HAL_RCC_OscConfig+0x208>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c9c:	4b2c      	ldr	r3, [pc, #176]	@ (8004d50 <HAL_RCC_OscConfig+0x274>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a2b      	ldr	r2, [pc, #172]	@ (8004d50 <HAL_RCC_OscConfig+0x274>)
 8004ca2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004ca6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ca8:	f7fd fcea 	bl	8002680 <HAL_GetTick>
 8004cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cae:	e008      	b.n	8004cc2 <HAL_RCC_OscConfig+0x1e6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cb0:	f7fd fce6 	bl	8002680 <HAL_GetTick>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d901      	bls.n	8004cc2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	e256      	b.n	8005170 <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cc2:	4b23      	ldr	r3, [pc, #140]	@ (8004d50 <HAL_RCC_OscConfig+0x274>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d0f0      	beq.n	8004cb0 <HAL_RCC_OscConfig+0x1d4>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cce:	4b20      	ldr	r3, [pc, #128]	@ (8004d50 <HAL_RCC_OscConfig+0x274>)
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	041b      	lsls	r3, r3, #16
 8004cdc:	491c      	ldr	r1, [pc, #112]	@ (8004d50 <HAL_RCC_OscConfig+0x274>)
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	610b      	str	r3, [r1, #16]
 8004ce2:	e018      	b.n	8004d16 <HAL_RCC_OscConfig+0x23a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ce4:	4b1a      	ldr	r3, [pc, #104]	@ (8004d50 <HAL_RCC_OscConfig+0x274>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a19      	ldr	r2, [pc, #100]	@ (8004d50 <HAL_RCC_OscConfig+0x274>)
 8004cea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004cee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cf0:	f7fd fcc6 	bl	8002680 <HAL_GetTick>
 8004cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004cf6:	e008      	b.n	8004d0a <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cf8:	f7fd fcc2 	bl	8002680 <HAL_GetTick>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	2b02      	cmp	r3, #2
 8004d04:	d901      	bls.n	8004d0a <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	e232      	b.n	8005170 <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d0a:	4b11      	ldr	r3, [pc, #68]	@ (8004d50 <HAL_RCC_OscConfig+0x274>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d1f0      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x21c>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) != 0x00u)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0310 	and.w	r3, r3, #16
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d038      	beq.n	8004d94 <HAL_RCC_OscConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d01b      	beq.n	8004d62 <HAL_RCC_OscConfig+0x286>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004d2a:	4b09      	ldr	r3, [pc, #36]	@ (8004d50 <HAL_RCC_OscConfig+0x274>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a08      	ldr	r2, [pc, #32]	@ (8004d50 <HAL_RCC_OscConfig+0x274>)
 8004d30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004d34:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d36:	f7fd fca3 	bl	8002680 <HAL_GetTick>
 8004d3a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004d3c:	e00a      	b.n	8004d54 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d3e:	f7fd fc9f 	bl	8002680 <HAL_GetTick>
 8004d42:	4602      	mov	r2, r0
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d903      	bls.n	8004d54 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	e20f      	b.n	8005170 <HAL_RCC_OscConfig+0x694>
 8004d50:	40030c00 	.word	0x40030c00
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004d54:	4ba0      	ldr	r3, [pc, #640]	@ (8004fd8 <HAL_RCC_OscConfig+0x4fc>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d0ee      	beq.n	8004d3e <HAL_RCC_OscConfig+0x262>
 8004d60:	e018      	b.n	8004d94 <HAL_RCC_OscConfig+0x2b8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004d62:	4b9d      	ldr	r3, [pc, #628]	@ (8004fd8 <HAL_RCC_OscConfig+0x4fc>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a9c      	ldr	r2, [pc, #624]	@ (8004fd8 <HAL_RCC_OscConfig+0x4fc>)
 8004d68:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d6c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d6e:	f7fd fc87 	bl	8002680 <HAL_GetTick>
 8004d72:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004d74:	e008      	b.n	8004d88 <HAL_RCC_OscConfig+0x2ac>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d76:	f7fd fc83 	bl	8002680 <HAL_GetTick>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d901      	bls.n	8004d88 <HAL_RCC_OscConfig+0x2ac>
        {
          return HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	e1f3      	b.n	8005170 <HAL_RCC_OscConfig+0x694>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004d88:	4b93      	ldr	r3, [pc, #588]	@ (8004fd8 <HAL_RCC_OscConfig+0x4fc>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d1f0      	bne.n	8004d76 <HAL_RCC_OscConfig+0x29a>
    }
  }


  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) != 0x00u)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0304 	and.w	r3, r3, #4
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	f000 80a7 	beq.w	8004ef0 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004da2:	2300      	movs	r3, #0
 8004da4:	76fb      	strb	r3, [r7, #27]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_ENABLED() != 0x01)
 8004da6:	4b8c      	ldr	r3, [pc, #560]	@ (8004fd8 <HAL_RCC_OscConfig+0x4fc>)
 8004da8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004dac:	f003 0304 	and.w	r3, r3, #4
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d110      	bne.n	8004dd6 <HAL_RCC_OscConfig+0x2fa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004db4:	4b88      	ldr	r3, [pc, #544]	@ (8004fd8 <HAL_RCC_OscConfig+0x4fc>)
 8004db6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004dba:	4a87      	ldr	r2, [pc, #540]	@ (8004fd8 <HAL_RCC_OscConfig+0x4fc>)
 8004dbc:	f043 0304 	orr.w	r3, r3, #4
 8004dc0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004dc4:	4b84      	ldr	r3, [pc, #528]	@ (8004fd8 <HAL_RCC_OscConfig+0x4fc>)
 8004dc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004dca:	f003 0304 	and.w	r3, r3, #4
 8004dce:	60fb      	str	r3, [r7, #12]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	76fb      	strb	r3, [r7, #27]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004dd6:	4b81      	ldr	r3, [pc, #516]	@ (8004fdc <HAL_RCC_OscConfig+0x500>)
 8004dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dda:	4a80      	ldr	r2, [pc, #512]	@ (8004fdc <HAL_RCC_OscConfig+0x500>)
 8004ddc:	f043 0301 	orr.w	r3, r3, #1
 8004de0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Set the new LSE configuration -----------------------------------------*/
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d051      	beq.n	8004e8e <HAL_RCC_OscConfig+0x3b2>
    {
      /* If LSE is already on or in bypass mode, only LSE system can be modified */
      tmpreg1 = (RCC->BDCR & ~RCC_BDCR_LSESYSEN);
 8004dea:	4b7b      	ldr	r3, [pc, #492]	@ (8004fd8 <HAL_RCC_OscConfig+0x4fc>)
 8004dec:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8004df0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004df4:	61fb      	str	r3, [r7, #28]
      tmpreg1 |= RCC_OscInitStruct->LSEState;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	695b      	ldr	r3, [r3, #20]
 8004dfa:	69fa      	ldr	r2, [r7, #28]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	61fb      	str	r3, [r7, #28]
      RCC->BDCR = tmpreg1;
 8004e00:	4a75      	ldr	r2, [pc, #468]	@ (8004fd8 <HAL_RCC_OscConfig+0x4fc>)
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e08:	f7fd fc3a 	bl	8002680 <HAL_GetTick>
 8004e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e0e:	e00a      	b.n	8004e26 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e10:	f7fd fc36 	bl	8002680 <HAL_GetTick>
 8004e14:	4602      	mov	r2, r0
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d901      	bls.n	8004e26 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e1a4      	b.n	8005170 <HAL_RCC_OscConfig+0x694>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e26:	4b6c      	ldr	r3, [pc, #432]	@ (8004fd8 <HAL_RCC_OscConfig+0x4fc>)
 8004e28:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8004e2c:	f003 0302 	and.w	r3, r3, #2
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d0ed      	beq.n	8004e10 <HAL_RCC_OscConfig+0x334>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	695b      	ldr	r3, [r3, #20]
 8004e38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d01e      	beq.n	8004e7e <HAL_RCC_OscConfig+0x3a2>
      {
        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004e40:	e00a      	b.n	8004e58 <HAL_RCC_OscConfig+0x37c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e42:	f7fd fc1d 	bl	8002680 <HAL_GetTick>
 8004e46:	4602      	mov	r2, r0
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d901      	bls.n	8004e58 <HAL_RCC_OscConfig+0x37c>
          {
            return HAL_TIMEOUT;
 8004e54:	2303      	movs	r3, #3
 8004e56:	e18b      	b.n	8005170 <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004e58:	4b5f      	ldr	r3, [pc, #380]	@ (8004fd8 <HAL_RCC_OscConfig+0x4fc>)
 8004e5a:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8004e5e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d0ed      	beq.n	8004e42 <HAL_RCC_OscConfig+0x366>
 8004e66:	e038      	b.n	8004eda <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e68:	f7fd fc0a 	bl	8002680 <HAL_GetTick>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d901      	bls.n	8004e7e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e178      	b.n	8005170 <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004e7e:	4b56      	ldr	r3, [pc, #344]	@ (8004fd8 <HAL_RCC_OscConfig+0x4fc>)
 8004e80:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8004e84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d1ed      	bne.n	8004e68 <HAL_RCC_OscConfig+0x38c>
 8004e8c:	e025      	b.n	8004eda <HAL_RCC_OscConfig+0x3fe>
        }
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, (RCC_BDCR_LSEON | RCC_BDCR_LSESYSEN));
 8004e8e:	4b52      	ldr	r3, [pc, #328]	@ (8004fd8 <HAL_RCC_OscConfig+0x4fc>)
 8004e90:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8004e94:	4a50      	ldr	r2, [pc, #320]	@ (8004fd8 <HAL_RCC_OscConfig+0x4fc>)
 8004e96:	f023 0381 	bic.w	r3, r3, #129	@ 0x81
 8004e9a:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004e9e:	4b4e      	ldr	r3, [pc, #312]	@ (8004fd8 <HAL_RCC_OscConfig+0x4fc>)
 8004ea0:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8004ea4:	4a4c      	ldr	r2, [pc, #304]	@ (8004fd8 <HAL_RCC_OscConfig+0x4fc>)
 8004ea6:	f023 0304 	bic.w	r3, r3, #4
 8004eaa:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eae:	f7fd fbe7 	bl	8002680 <HAL_GetTick>
 8004eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004eb4:	e00a      	b.n	8004ecc <HAL_RCC_OscConfig+0x3f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eb6:	f7fd fbe3 	bl	8002680 <HAL_GetTick>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d901      	bls.n	8004ecc <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e151      	b.n	8005170 <HAL_RCC_OscConfig+0x694>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ecc:	4b42      	ldr	r3, [pc, #264]	@ (8004fd8 <HAL_RCC_OscConfig+0x4fc>)
 8004ece:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8004ed2:	f003 0302 	and.w	r3, r3, #2
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1ed      	bne.n	8004eb6 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004eda:	7efb      	ldrb	r3, [r7, #27]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d107      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ee0:	4b3d      	ldr	r3, [pc, #244]	@ (8004fd8 <HAL_RCC_OscConfig+0x4fc>)
 8004ee2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ee6:	4a3c      	ldr	r2, [pc, #240]	@ (8004fd8 <HAL_RCC_OscConfig+0x4fc>)
 8004ee8:	f023 0304 	bic.w	r3, r3, #4
 8004eec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) != 0x00u)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 0308 	and.w	r3, r3, #8
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d078      	beq.n	8004fee <HAL_RCC_OscConfig+0x512>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Get CSR register value */
    tmpreg1 = RCC->CSR;
 8004efc:	4b36      	ldr	r3, [pc, #216]	@ (8004fd8 <HAL_RCC_OscConfig+0x4fc>)
 8004efe:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8004f02:	61fb      	str	r3, [r7, #28]

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	699b      	ldr	r3, [r3, #24]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d050      	beq.n	8004fae <HAL_RCC_OscConfig+0x4d2>
    {
      /* Check LSI division factor */
      assert_param(IS_RCC_LSI_DIV(RCC_OscInitStruct->LSIDiv));

      /* Check is LSIDiv is requested to be changed and LSI is already ON */
      if ((RCC_OscInitStruct->LSIDiv != (tmpreg1 & RCC_CSR_LSIPREDIV)) && ((tmpreg1 & RCC_CSR_LSIRDY) != 0x00u))
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	69da      	ldr	r2, [r3, #28]
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	f003 0304 	and.w	r3, r3, #4
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d023      	beq.n	8004f62 <HAL_RCC_OscConfig+0x486>
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	f003 0302 	and.w	r3, r3, #2
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d01e      	beq.n	8004f62 <HAL_RCC_OscConfig+0x486>
      {
        /* Disable LSI (end clear ready bit from tmpreg to avoid its propagation below) */
        tmpreg1 &= ~(RCC_CSR_LSION | RCC_CSR_LSIRDY);
 8004f24:	69fb      	ldr	r3, [r7, #28]
 8004f26:	f023 0303 	bic.w	r3, r3, #3
 8004f2a:	61fb      	str	r3, [r7, #28]
        RCC->CSR = tmpreg1;
 8004f2c:	4a2a      	ldr	r2, [pc, #168]	@ (8004fd8 <HAL_RCC_OscConfig+0x4fc>)
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f34:	f7fd fba4 	bl	8002680 <HAL_GetTick>
 8004f38:	6138      	str	r0, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0x00u)
 8004f3a:	e008      	b.n	8004f4e <HAL_RCC_OscConfig+0x472>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f3c:	f7fd fba0 	bl	8002680 <HAL_GetTick>
 8004f40:	4602      	mov	r2, r0
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	2b14      	cmp	r3, #20
 8004f48:	d901      	bls.n	8004f4e <HAL_RCC_OscConfig+0x472>
          {
            /* LSI may be forced ON by IWDG */
            return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e110      	b.n	8005170 <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0x00u)
 8004f4e:	4b22      	ldr	r3, [pc, #136]	@ (8004fd8 <HAL_RCC_OscConfig+0x4fc>)
 8004f50:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8004f54:	f003 0302 	and.w	r3, r3, #2
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d1ef      	bne.n	8004f3c <HAL_RCC_OscConfig+0x460>
          }
        }
        /* Wait at least a half of LSI clock period before applying the new LSI prediv value */
        HAL_Delay(1);
 8004f5c:	2001      	movs	r0, #1
 8004f5e:	f7fd fb9b 	bl	8002698 <HAL_Delay>
      }

      /* Set LSI division factor */
      tmpreg1 &= ~RCC_CSR_LSIPREDIV;
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	f023 0304 	bic.w	r3, r3, #4
 8004f68:	61fb      	str	r3, [r7, #28]
      tmpreg1 |= RCC_OscInitStruct->LSIDiv;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	69db      	ldr	r3, [r3, #28]
 8004f6e:	69fa      	ldr	r2, [r7, #28]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	61fb      	str	r3, [r7, #28]

      /* Enable  LSI */
      tmpreg1 |= RCC_CSR_LSION;
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	f043 0301 	orr.w	r3, r3, #1
 8004f7a:	61fb      	str	r3, [r7, #28]
      RCC->CSR = tmpreg1;
 8004f7c:	4a16      	ldr	r2, [pc, #88]	@ (8004fd8 <HAL_RCC_OscConfig+0x4fc>)
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f84:	f7fd fb7c 	bl	8002680 <HAL_GetTick>
 8004f88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0x00u)
 8004f8a:	e008      	b.n	8004f9e <HAL_RCC_OscConfig+0x4c2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f8c:	f7fd fb78 	bl	8002680 <HAL_GetTick>
 8004f90:	4602      	mov	r2, r0
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	2b14      	cmp	r3, #20
 8004f98:	d901      	bls.n	8004f9e <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e0e8      	b.n	8005170 <HAL_RCC_OscConfig+0x694>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0x00u)
 8004f9e:	4b0e      	ldr	r3, [pc, #56]	@ (8004fd8 <HAL_RCC_OscConfig+0x4fc>)
 8004fa0:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8004fa4:	f003 0302 	and.w	r3, r3, #2
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d0ef      	beq.n	8004f8c <HAL_RCC_OscConfig+0x4b0>
 8004fac:	e01f      	b.n	8004fee <HAL_RCC_OscConfig+0x512>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator */
      tmpreg1 &= ~RCC_CSR_LSION;
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	f023 0301 	bic.w	r3, r3, #1
 8004fb4:	61fb      	str	r3, [r7, #28]
      RCC->CSR = tmpreg1;
 8004fb6:	4a08      	ldr	r2, [pc, #32]	@ (8004fd8 <HAL_RCC_OscConfig+0x4fc>)
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fbe:	f7fd fb5f 	bl	8002680 <HAL_GetTick>
 8004fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0x00u)
 8004fc4:	e00c      	b.n	8004fe0 <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fc6:	f7fd fb5b 	bl	8002680 <HAL_GetTick>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	2b14      	cmp	r3, #20
 8004fd2:	d905      	bls.n	8004fe0 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	e0cb      	b.n	8005170 <HAL_RCC_OscConfig+0x694>
 8004fd8:	40030c00 	.word	0x40030c00
 8004fdc:	40030800 	.word	0x40030800
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0x00u)
 8004fe0:	4b65      	ldr	r3, [pc, #404]	@ (8005178 <HAL_RCC_OscConfig+0x69c>)
 8004fe2:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8004fe6:	f003 0302 	and.w	r3, r3, #2
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d1eb      	bne.n	8004fc6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
  }

  /*------------------------------ MSIS Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIS) != 0x00u)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0320 	and.w	r3, r3, #32
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d068      	beq.n	80050cc <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSISState));

    /* Check if MSIS is asked to be turn off */
    if (RCC_OscInitStruct->MSISState == RCC_MSI_OFF)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a1b      	ldr	r3, [r3, #32]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d10d      	bne.n	800501e <HAL_RCC_OscConfig+0x542>
    {
      /* When MSIS is used as system clock it will not be disabled */
      if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSIS)
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d101      	bne.n	800500c <HAL_RCC_OscConfig+0x530>
      {
        return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e0b1      	b.n	8005170 <HAL_RCC_OscConfig+0x694>
      }
      else
      {
        /* Disable the MSIS */
        __HAL_RCC_MSIS_DISABLE();
 800500c:	4b5a      	ldr	r3, [pc, #360]	@ (8005178 <HAL_RCC_OscConfig+0x69c>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a59      	ldr	r2, [pc, #356]	@ (8005178 <HAL_RCC_OscConfig+0x69c>)
 8005012:	f023 0301 	bic.w	r3, r3, #1
 8005016:	6013      	str	r3, [r2, #0]

        /* Store ready bit value for timeout */
        tmpreg1 = 0x00u;
 8005018:	2300      	movs	r3, #0
 800501a:	61fb      	str	r3, [r7, #28]
 800501c:	e03b      	b.n	8005096 <HAL_RCC_OscConfig+0x5ba>
      /* Otherwise, turn it ON or if already ON, changing source and range is allowed */
      assert_param(IS_RCC_MSI_SOURCE(RCC_OscInitStruct->MSISSource));
      assert_param(IS_RCC_MSI_DIV(RCC_OscInitStruct->MSISDiv));

      /* Changing source and range is not possible when osnillator is ON but not Ready */
      if ((RCC->CR & (RCC_CR_MSISON | RCC_CR_MSISRDY)) == RCC_CR_MSISON)
 800501e:	4b56      	ldr	r3, [pc, #344]	@ (8005178 <HAL_RCC_OscConfig+0x69c>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 0305 	and.w	r3, r3, #5
 8005026:	2b01      	cmp	r3, #1
 8005028:	d101      	bne.n	800502e <HAL_RCC_OscConfig+0x552>
      {
        return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e0a0      	b.n	8005170 <HAL_RCC_OscConfig+0x694>
      }
      else
      {
        /* Adjusts the MSIS source and divider, and force MSI selection to ICSCR1 */
        tmpreg1 = RCC->ICSCR1 & ~(RCC_ICSCR1_MSISSEL | RCC_ICSCR1_MSISDIV);
 800502e:	4b52      	ldr	r3, [pc, #328]	@ (8005178 <HAL_RCC_OscConfig+0x69c>)
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 8005036:	61fb      	str	r3, [r7, #28]
        tmpreg1 |= (RCC_ICSCR1_MSIRGSEL | RCC_OscInitStruct->MSISSource | RCC_OscInitStruct->MSISDiv);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005040:	431a      	orrs	r2, r3
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	4313      	orrs	r3, r2
 8005046:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800504a:	61fb      	str	r3, [r7, #28]
        RCC->ICSCR1 = tmpreg1;
 800504c:	4a4a      	ldr	r2, [pc, #296]	@ (8005178 <HAL_RCC_OscConfig+0x69c>)
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	6093      	str	r3, [r2, #8]

        /* If MSIS is already selected as system clock, update Systick */
        if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSIS)
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d116      	bne.n	8005086 <HAL_RCC_OscConfig+0x5aa>
        {
          /* Update the SystemCoreClock global variable */
          SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005058:	f000 f9ca 	bl	80053f0 <HAL_RCC_GetSysClockFreq>
 800505c:	4602      	mov	r2, r0
 800505e:	4b46      	ldr	r3, [pc, #280]	@ (8005178 <HAL_RCC_OscConfig+0x69c>)
 8005060:	6a1b      	ldr	r3, [r3, #32]
 8005062:	f003 030f 	and.w	r3, r3, #15
 8005066:	4945      	ldr	r1, [pc, #276]	@ (800517c <HAL_RCC_OscConfig+0x6a0>)
 8005068:	5ccb      	ldrb	r3, [r1, r3]
 800506a:	fa22 f303 	lsr.w	r3, r2, r3
 800506e:	4a44      	ldr	r2, [pc, #272]	@ (8005180 <HAL_RCC_OscConfig+0x6a4>)
 8005070:	6013      	str	r3, [r2, #0]

          /* Configure the source of time base considering new system clocks settings*/
          if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005072:	4b44      	ldr	r3, [pc, #272]	@ (8005184 <HAL_RCC_OscConfig+0x6a8>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4618      	mov	r0, r3
 8005078:	f7fd fa70 	bl	800255c <HAL_InitTick>
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d007      	beq.n	8005092 <HAL_RCC_OscConfig+0x5b6>
          {
            return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e074      	b.n	8005170 <HAL_RCC_OscConfig+0x694>
          }
        }
        else
        {
          /* Enable the MSIS */
          __HAL_RCC_MSIS_ENABLE();
 8005086:	4b3c      	ldr	r3, [pc, #240]	@ (8005178 <HAL_RCC_OscConfig+0x69c>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a3b      	ldr	r2, [pc, #236]	@ (8005178 <HAL_RCC_OscConfig+0x69c>)
 800508c:	f043 0301 	orr.w	r3, r3, #1
 8005090:	6013      	str	r3, [r2, #0]
        }

        /* Store ready bit value for timeout */
        tmpreg1 = RCC_CR_MSISRDY;
 8005092:	2304      	movs	r3, #4
 8005094:	61fb      	str	r3, [r7, #28]
      }
    }

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005096:	f7fd faf3 	bl	8002680 <HAL_GetTick>
 800509a:	6138      	str	r0, [r7, #16]

    /* Wait till HSI48 is disabled */
    while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != tmpreg1)
 800509c:	e00f      	b.n	80050be <HAL_RCC_OscConfig+0x5e2>
    {
      if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800509e:	f7fd faef 	bl	8002680 <HAL_GetTick>
 80050a2:	4602      	mov	r2, r0
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d908      	bls.n	80050be <HAL_RCC_OscConfig+0x5e2>
      {
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != tmpreg1)
 80050ac:	4b32      	ldr	r3, [pc, #200]	@ (8005178 <HAL_RCC_OscConfig+0x69c>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0304 	and.w	r3, r3, #4
 80050b4:	69fa      	ldr	r2, [r7, #28]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d001      	beq.n	80050be <HAL_RCC_OscConfig+0x5e2>
        {
          return HAL_TIMEOUT;
 80050ba:	2303      	movs	r3, #3
 80050bc:	e058      	b.n	8005170 <HAL_RCC_OscConfig+0x694>
    while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != tmpreg1)
 80050be:	4b2e      	ldr	r3, [pc, #184]	@ (8005178 <HAL_RCC_OscConfig+0x69c>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0304 	and.w	r3, r3, #4
 80050c6:	69fa      	ldr	r2, [r7, #28]
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d1e8      	bne.n	800509e <HAL_RCC_OscConfig+0x5c2>
      }
    }
  }

  /*------------------------------ MSIK Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) != 0x00u)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d04a      	beq.n	800516e <HAL_RCC_OscConfig+0x692>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIKState));

    /* Check if MSIK is asked to be turn off */
    if (RCC_OscInitStruct->MSIKState == RCC_MSI_OFF)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d108      	bne.n	80050f2 <HAL_RCC_OscConfig+0x616>
    {
      /* Disable the MSIK */
      __HAL_RCC_MSIK_DISABLE();
 80050e0:	4b25      	ldr	r3, [pc, #148]	@ (8005178 <HAL_RCC_OscConfig+0x69c>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a24      	ldr	r2, [pc, #144]	@ (8005178 <HAL_RCC_OscConfig+0x69c>)
 80050e6:	f023 0308 	bic.w	r3, r3, #8
 80050ea:	6013      	str	r3, [r2, #0]

      /* Store ready bit value for timeout */
      tmpreg1 = 0x00u;
 80050ec:	2300      	movs	r3, #0
 80050ee:	61fb      	str	r3, [r7, #28]
 80050f0:	e022      	b.n	8005138 <HAL_RCC_OscConfig+0x65c>
      /* Otherwise, turn it ON or if already ON, changing source and range is allowed */
      assert_param(IS_RCC_MSI_SOURCE(RCC_OscInitStruct->MSIKSource));
      assert_param(IS_RCC_MSI_DIV(RCC_OscInitStruct->MSIKDiv));

      /* Changing source and range is not possible when osnillator is ON but not Ready */
      if ((RCC->CR & (RCC_CR_MSIKON | RCC_CR_MSIKRDY)) == RCC_CR_MSIKON)
 80050f2:	4b21      	ldr	r3, [pc, #132]	@ (8005178 <HAL_RCC_OscConfig+0x69c>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 0318 	and.w	r3, r3, #24
 80050fa:	2b08      	cmp	r3, #8
 80050fc:	d101      	bne.n	8005102 <HAL_RCC_OscConfig+0x626>
      {
        return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e036      	b.n	8005170 <HAL_RCC_OscConfig+0x694>
      }
      else
      {
        /* Adjusts the MSIK source and divider, and force MSI selection to ICSCR1 */
        tmpreg1 = RCC->ICSCR1 & ~(RCC_ICSCR1_MSIKSEL | RCC_ICSCR1_MSIKDIV);
 8005102:	4b1d      	ldr	r3, [pc, #116]	@ (8005178 <HAL_RCC_OscConfig+0x69c>)
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	f023 53e0 	bic.w	r3, r3, #469762048	@ 0x1c000000
 800510a:	61fb      	str	r3, [r7, #28]
        tmpreg1 |= (RCC_ICSCR1_MSIRGSEL | ((RCC_OscInitStruct->MSIKSource | RCC_OscInitStruct->MSIKDiv) >> (RCC_ICSCR1_MSISSEL_Pos - RCC_ICSCR1_MSIKSEL_Pos)));
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005114:	4313      	orrs	r3, r2
 8005116:	08da      	lsrs	r2, r3, #3
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	4313      	orrs	r3, r2
 800511c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005120:	61fb      	str	r3, [r7, #28]
        RCC->ICSCR1 = tmpreg1;
 8005122:	4a15      	ldr	r2, [pc, #84]	@ (8005178 <HAL_RCC_OscConfig+0x69c>)
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	6093      	str	r3, [r2, #8]

        /* Enable the MSIK */
        __HAL_RCC_MSIK_ENABLE();
 8005128:	4b13      	ldr	r3, [pc, #76]	@ (8005178 <HAL_RCC_OscConfig+0x69c>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a12      	ldr	r2, [pc, #72]	@ (8005178 <HAL_RCC_OscConfig+0x69c>)
 800512e:	f043 0308 	orr.w	r3, r3, #8
 8005132:	6013      	str	r3, [r2, #0]

        /* Store ready bit value for timeout */
        tmpreg1 = RCC_CR_MSIKRDY;
 8005134:	2310      	movs	r3, #16
 8005136:	61fb      	str	r3, [r7, #28]
      }
    }

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005138:	f7fd faa2 	bl	8002680 <HAL_GetTick>
 800513c:	6138      	str	r0, [r7, #16]

    /* Wait till HSI48 is disabled */
    while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != tmpreg1)
 800513e:	e00f      	b.n	8005160 <HAL_RCC_OscConfig+0x684>
    {
      if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005140:	f7fd fa9e 	bl	8002680 <HAL_GetTick>
 8005144:	4602      	mov	r2, r0
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	2b02      	cmp	r3, #2
 800514c:	d908      	bls.n	8005160 <HAL_RCC_OscConfig+0x684>
      {
        if (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != tmpreg1)
 800514e:	4b0a      	ldr	r3, [pc, #40]	@ (8005178 <HAL_RCC_OscConfig+0x69c>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 0310 	and.w	r3, r3, #16
 8005156:	69fa      	ldr	r2, [r7, #28]
 8005158:	429a      	cmp	r2, r3
 800515a:	d001      	beq.n	8005160 <HAL_RCC_OscConfig+0x684>
        {
          return HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	e007      	b.n	8005170 <HAL_RCC_OscConfig+0x694>
    while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != tmpreg1)
 8005160:	4b05      	ldr	r3, [pc, #20]	@ (8005178 <HAL_RCC_OscConfig+0x69c>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 0310 	and.w	r3, r3, #16
 8005168:	69fa      	ldr	r2, [r7, #28]
 800516a:	429a      	cmp	r2, r3
 800516c:	d1e8      	bne.n	8005140 <HAL_RCC_OscConfig+0x664>
        }
      }
    }
  }

  return HAL_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	3720      	adds	r7, #32
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	40030c00 	.word	0x40030c00
 800517c:	08021590 	.word	0x08021590
 8005180:	20000004 	.word	0x20000004
 8005184:	20000018 	.word	0x20000018

08005188 <HAL_RCC_ClockConfig>:
  * @note   You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval None
  */
HAL_StatusTypeDef  HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b086      	sub	sp, #24
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;
  uint32_t update;
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d101      	bne.n	800519c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e0d2      	b.n	8005342 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800519c:	4b6b      	ldr	r3, [pc, #428]	@ (800534c <HAL_RCC_ClockConfig+0x1c4>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 030f 	and.w	r3, r3, #15
 80051a4:	683a      	ldr	r2, [r7, #0]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d910      	bls.n	80051cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051aa:	4b68      	ldr	r3, [pc, #416]	@ (800534c <HAL_RCC_ClockConfig+0x1c4>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f023 020f 	bic.w	r2, r3, #15
 80051b2:	4966      	ldr	r1, [pc, #408]	@ (800534c <HAL_RCC_ClockConfig+0x1c4>)
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051ba:	4b64      	ldr	r3, [pc, #400]	@ (800534c <HAL_RCC_ClockConfig+0x1c4>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 030f 	and.w	r3, r3, #15
 80051c2:	683a      	ldr	r2, [r7, #0]
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d001      	beq.n	80051cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e0ba      	b.n	8005342 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0301 	and.w	r3, r3, #1
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d040      	beq.n	800525a <HAL_RCC_ClockConfig+0xd2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* Read CR register */
    tmpreg1 = RCC->CR;
 80051d8:	4b5d      	ldr	r3, [pc, #372]	@ (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	617b      	str	r3, [r7, #20]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	2b02      	cmp	r3, #2
 80051e4:	d106      	bne.n	80051f4 <HAL_RCC_ClockConfig+0x6c>
    {
      /* Check the HSE ready flag */
      if ((tmpreg1 & RCC_CR_HSERDY) == 0U)
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d113      	bne.n	8005218 <HAL_RCC_ClockConfig+0x90>
      {
        return HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e0a6      	b.n	8005342 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d106      	bne.n	800520a <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSI ready flag */
      if ((tmpreg1 & RCC_CR_HSIRDY) == 0U)
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005202:	2b00      	cmp	r3, #0
 8005204:	d108      	bne.n	8005218 <HAL_RCC_ClockConfig+0x90>
      {
        return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e09b      	b.n	8005342 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* MSIS is selected as System Clock Source */
    else
    {
      /* Check the MSIS ready flag */
      if ((tmpreg1 & RCC_CR_MSISRDY) == 0U)
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	f003 0304 	and.w	r3, r3, #4
 8005210:	2b00      	cmp	r3, #0
 8005212:	d101      	bne.n	8005218 <HAL_RCC_ClockConfig+0x90>
      {
        return HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	e094      	b.n	8005342 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    /* Switch System clock source */
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005218:	4b4d      	ldr	r3, [pc, #308]	@ (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 800521a:	69db      	ldr	r3, [r3, #28]
 800521c:	f023 0203 	bic.w	r2, r3, #3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	494a      	ldr	r1, [pc, #296]	@ (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 8005226:	4313      	orrs	r3, r2
 8005228:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800522a:	f7fd fa29 	bl	8002680 <HAL_GetTick>
 800522e:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR1_SWS_Pos))
 8005230:	e00a      	b.n	8005248 <HAL_RCC_ClockConfig+0xc0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005232:	f7fd fa25 	bl	8002680 <HAL_GetTick>
 8005236:	4602      	mov	r2, r0
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	1ad3      	subs	r3, r2, r3
 800523c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005240:	4293      	cmp	r3, r2
 8005242:	d901      	bls.n	8005248 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_TIMEOUT;
 8005244:	2303      	movs	r3, #3
 8005246:	e07c      	b.n	8005342 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR1_SWS_Pos))
 8005248:	4b41      	ldr	r3, [pc, #260]	@ (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 800524a:	69db      	ldr	r3, [r3, #28]
 800524c:	f003 020c 	and.w	r2, r3, #12
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	429a      	cmp	r2, r3
 8005258:	d1eb      	bne.n	8005232 <HAL_RCC_ClockConfig+0xaa>
      }
    }
  }

  /* Get CFGR2 content value, and reset update variable */
  tmpreg1 = RCC->CFGR2;
 800525a:	4b3d      	ldr	r3, [pc, #244]	@ (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 800525c:	6a1b      	ldr	r3, [r3, #32]
 800525e:	617b      	str	r3, [r7, #20]
  update = 0x00u;
 8005260:	2300      	movs	r3, #0
 8005262:	613b      	str	r3, [r7, #16]

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 0302 	and.w	r3, r3, #2
 800526c:	2b00      	cmp	r3, #0
 800526e:	d00a      	beq.n	8005286 <HAL_RCC_ClockConfig+0xfe>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    /* update HCLK1 divider and notify register is required */
    tmpreg1 &= ~RCC_CFGR2_HPRE;
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	f023 030f 	bic.w	r3, r3, #15
 8005276:	617b      	str	r3, [r7, #20]
    tmpreg1 |= RCC_ClkInitStruct->AHBCLKDivider;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	697a      	ldr	r2, [r7, #20]
 800527e:	4313      	orrs	r3, r2
 8005280:	617b      	str	r3, [r7, #20]
    update = 0x01u;
 8005282:	2301      	movs	r3, #1
 8005284:	613b      	str	r3, [r7, #16]
  }


  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 0304 	and.w	r3, r3, #4
 800528e:	2b00      	cmp	r3, #0
 8005290:	d00a      	beq.n	80052a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));

    /* update PCLK1 divider and notify register is required */
    tmpreg1 &= ~RCC_CFGR2_PPRE1;
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005298:	617b      	str	r3, [r7, #20]
    tmpreg1 |= RCC_ClkInitStruct->APB1CLKDivider;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	697a      	ldr	r2, [r7, #20]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	617b      	str	r3, [r7, #20]
    update = 0x01u;
 80052a4:	2301      	movs	r3, #1
 80052a6:	613b      	str	r3, [r7, #16]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 0308 	and.w	r3, r3, #8
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d00b      	beq.n	80052cc <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));

    /* update PCLK2 divider and notify register is required */
    tmpreg1 &= ~RCC_CFGR2_PPRE2;
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80052ba:	617b      	str	r3, [r7, #20]
    tmpreg1 |= (RCC_ClkInitStruct->APB2CLKDivider << (RCC_CFGR2_PPRE2_Pos - RCC_CFGR2_PPRE1_Pos));
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	691b      	ldr	r3, [r3, #16]
 80052c0:	011b      	lsls	r3, r3, #4
 80052c2:	697a      	ldr	r2, [r7, #20]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	617b      	str	r3, [r7, #20]
    update = 0x01u;
 80052c8:	2301      	movs	r3, #1
 80052ca:	613b      	str	r3, [r7, #16]
  }

  /* update CFGR2 if required */
  if (update != 0x00u)
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d002      	beq.n	80052d8 <HAL_RCC_ClockConfig+0x150>
  {
    RCC->CFGR2 = tmpreg1;
 80052d2:	4a1f      	ldr	r2, [pc, #124]	@ (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	6213      	str	r3, [r2, #32]
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0310 	and.w	r3, r3, #16
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d003      	beq.n	80052ec <HAL_RCC_ClockConfig+0x164>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB3CLKDivider));
    WRITE_REG(RCC->CFGR3, RCC_ClkInitStruct->APB3CLKDivider);
 80052e4:	4a1a      	ldr	r2, [pc, #104]	@ (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	695b      	ldr	r3, [r3, #20]
 80052ea:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80052ec:	4b17      	ldr	r3, [pc, #92]	@ (800534c <HAL_RCC_ClockConfig+0x1c4>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 030f 	and.w	r3, r3, #15
 80052f4:	683a      	ldr	r2, [r7, #0]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d210      	bcs.n	800531c <HAL_RCC_ClockConfig+0x194>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052fa:	4b14      	ldr	r3, [pc, #80]	@ (800534c <HAL_RCC_ClockConfig+0x1c4>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f023 020f 	bic.w	r2, r3, #15
 8005302:	4912      	ldr	r1, [pc, #72]	@ (800534c <HAL_RCC_ClockConfig+0x1c4>)
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	4313      	orrs	r3, r2
 8005308:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800530a:	4b10      	ldr	r3, [pc, #64]	@ (800534c <HAL_RCC_ClockConfig+0x1c4>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 030f 	and.w	r3, r3, #15
 8005312:	683a      	ldr	r2, [r7, #0]
 8005314:	429a      	cmp	r2, r3
 8005316:	d001      	beq.n	800531c <HAL_RCC_ClockConfig+0x194>
    {
      return HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	e012      	b.n	8005342 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800531c:	f000 f868 	bl	80053f0 <HAL_RCC_GetSysClockFreq>
 8005320:	4602      	mov	r2, r0
 8005322:	4b0b      	ldr	r3, [pc, #44]	@ (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 8005324:	6a1b      	ldr	r3, [r3, #32]
 8005326:	f003 030f 	and.w	r3, r3, #15
 800532a:	490a      	ldr	r1, [pc, #40]	@ (8005354 <HAL_RCC_ClockConfig+0x1cc>)
 800532c:	5ccb      	ldrb	r3, [r1, r3]
 800532e:	fa22 f303 	lsr.w	r3, r2, r3
 8005332:	4a09      	ldr	r2, [pc, #36]	@ (8005358 <HAL_RCC_ClockConfig+0x1d0>)
 8005334:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005336:	4b09      	ldr	r3, [pc, #36]	@ (800535c <HAL_RCC_ClockConfig+0x1d4>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4618      	mov	r0, r3
 800533c:	f7fd f90e 	bl	800255c <HAL_InitTick>
 8005340:	4603      	mov	r3, r0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3718      	adds	r7, #24
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	40022000 	.word	0x40022000
 8005350:	40030c00 	.word	0x40030c00
 8005354:	08021590 	.word	0x08021590
 8005358:	20000004 	.word	0x20000004
 800535c:	20000018 	.word	0x20000018

08005360 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCO2DIV_64  division by 64 applied to MCO2 clock
  *            @arg @ref RCC_MCO2DIV_128 division by 128 applied to MCO2 clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b08c      	sub	sp, #48	@ 0x30
 8005364:	af00      	add	r7, sp, #0
 8005366:	60f8      	str	r0, [r7, #12]
 8005368:	60b9      	str	r1, [r7, #8]
 800536a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));

  /* MCO Clock Enable. On U3, MCO1 and MCO2 are always on GPIOA */
  __MCO_CLK_ENABLE();
 800536c:	4b1e      	ldr	r3, [pc, #120]	@ (80053e8 <HAL_RCC_MCOConfig+0x88>)
 800536e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005372:	4a1d      	ldr	r2, [pc, #116]	@ (80053e8 <HAL_RCC_MCOConfig+0x88>)
 8005374:	f043 0301 	orr.w	r3, r3, #1
 8005378:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800537c:	4b1a      	ldr	r3, [pc, #104]	@ (80053e8 <HAL_RCC_MCOConfig+0x88>)
 800537e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005382:	f003 0301 	and.w	r3, r3, #1
 8005386:	617b      	str	r3, [r7, #20]
 8005388:	697b      	ldr	r3, [r7, #20]

  /* Configure the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin = (RCC_MCOx & RCC_MCO_GPIOPIN_MASK);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	b29b      	uxth	r3, r3
 800538e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005390:	2302      	movs	r3, #2
 8005392:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005394:	2303      	movs	r3, #3
 8005396:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005398:	2300      	movs	r3, #0
 800539a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = ((RCC_MCOx & RCC_MCO_GPIOAF_MASK) >> RCC_MCO_GPIOAF_POS);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	0d1b      	lsrs	r3, r3, #20
 80053a0:	f003 030f 	and.w	r3, r3, #15
 80053a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(MCO_GPIO_PORT, &GPIO_InitStruct);
 80053a6:	f107 0318 	add.w	r3, r7, #24
 80053aa:	4619      	mov	r1, r3
 80053ac:	480f      	ldr	r0, [pc, #60]	@ (80053ec <HAL_RCC_MCOConfig+0x8c>)
 80053ae:	f7ff f84b 	bl	8004448 <HAL_GPIO_Init>

  if ((RCC_MCOx & RCC_MCO_INDEX_MASK) != 0x00u)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d003      	beq.n	80053c4 <HAL_RCC_MCOConfig+0x64>
  {
    assert_param(IS_RCC_MCO2DIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO2SOURCE(RCC_MCOSource));
    clearmask = (RCC_CFGR1_MCO2SEL | RCC_CFGR1_MCO2PRE);
 80053bc:	f44f 03fe 	mov.w	r3, #8323072	@ 0x7f0000
 80053c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053c2:	e002      	b.n	80053ca <HAL_RCC_MCOConfig+0x6a>
  }
  else
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    clearmask = (RCC_CFGR1_MCOSEL | RCC_CFGR1_MCOPRE);
 80053c4:	f04f 43fe 	mov.w	r3, #2130706432	@ 0x7f000000
 80053c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Mask MCOxSEL[] and MCOxPRE[] bits then set MCOx clock source and prescaler */
  MODIFY_REG(RCC->CFGR1, clearmask, (RCC_MCOSource | RCC_MCODiv));
 80053ca:	4b07      	ldr	r3, [pc, #28]	@ (80053e8 <HAL_RCC_MCOConfig+0x88>)
 80053cc:	69da      	ldr	r2, [r3, #28]
 80053ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053d0:	43db      	mvns	r3, r3
 80053d2:	401a      	ands	r2, r3
 80053d4:	68b9      	ldr	r1, [r7, #8]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	430b      	orrs	r3, r1
 80053da:	4903      	ldr	r1, [pc, #12]	@ (80053e8 <HAL_RCC_MCOConfig+0x88>)
 80053dc:	4313      	orrs	r3, r2
 80053de:	61cb      	str	r3, [r1, #28]
}
 80053e0:	bf00      	nop
 80053e2:	3730      	adds	r7, #48	@ 0x30
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}
 80053e8:	40030c00 	.word	0x40030c00
 80053ec:	42020000 	.word	0x42020000

080053f0 <HAL_RCC_GetSysClockFreq>:
  * @note   This function can be used by the user application to compute the
  *         baudrate for the communication peripherals or configure other parameters.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
  uint32_t tmpcfgr;
  uint32_t sysclk;

  /* Get SYSCLK source */
  tmpcfgr = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053f6:	4b1e      	ldr	r3, [pc, #120]	@ (8005470 <HAL_RCC_GetSysClockFreq+0x80>)
 80053f8:	69db      	ldr	r3, [r3, #28]
 80053fa:	f003 030c 	and.w	r3, r3, #12
 80053fe:	607b      	str	r3, [r7, #4]

  if (tmpcfgr == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2b08      	cmp	r3, #8
 8005404:	d102      	bne.n	800540c <HAL_RCC_GetSysClockFreq+0x1c>
  {
    /* HSE used as system clock source */
    sysclk = HSE_VALUE;
 8005406:	4b1b      	ldr	r3, [pc, #108]	@ (8005474 <HAL_RCC_GetSysClockFreq+0x84>)
 8005408:	603b      	str	r3, [r7, #0]
 800540a:	e029      	b.n	8005460 <HAL_RCC_GetSysClockFreq+0x70>
  }
  else if (tmpcfgr == RCC_SYSCLKSOURCE_STATUS_HSI)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2b04      	cmp	r3, #4
 8005410:	d102      	bne.n	8005418 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* HSI used as system clock source */
    sysclk = HSI_VALUE;
 8005412:	4b18      	ldr	r3, [pc, #96]	@ (8005474 <HAL_RCC_GetSysClockFreq+0x84>)
 8005414:	603b      	str	r3, [r7, #0]
 8005416:	e023      	b.n	8005460 <HAL_RCC_GetSysClockFreq+0x70>
  }
  else
  {
    /* MSIS used as system clock source. Read ICSR1 register */
    tmpcfgr = RCC->ICSCR1;
 8005418:	4b15      	ldr	r3, [pc, #84]	@ (8005470 <HAL_RCC_GetSysClockFreq+0x80>)
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	607b      	str	r3, [r7, #4]

    /* Check which MSIS Range is selected */
    if ((tmpcfgr & RCC_ICSCR1_MSIRGSEL) != 0x00u)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005424:	2b00      	cmp	r3, #0
 8005426:	d00d      	beq.n	8005444 <HAL_RCC_GetSysClockFreq+0x54>
    {
      /* Check which MSIRCx is selected as MSIS source */
      if ((tmpcfgr & RCC_ICSCR1_MSISSEL) != 0x00u)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2b00      	cmp	r3, #0
 800542c:	da02      	bge.n	8005434 <HAL_RCC_GetSysClockFreq+0x44>
      {
        /* MSI RC1 is selected */
        sysclk = MSIRC1_VALUE;
 800542e:	4b12      	ldr	r3, [pc, #72]	@ (8005478 <HAL_RCC_GetSysClockFreq+0x88>)
 8005430:	603b      	str	r3, [r7, #0]
 8005432:	e001      	b.n	8005438 <HAL_RCC_GetSysClockFreq+0x48>
      }
      else
      {
        /* MSI RC0 is selected */
        sysclk = MSIRC0_VALUE;
 8005434:	4b11      	ldr	r3, [pc, #68]	@ (800547c <HAL_RCC_GetSysClockFreq+0x8c>)
 8005436:	603b      	str	r3, [r7, #0]
      }

      /* Get MSIS range */
      tmpcfgr = (tmpcfgr & RCC_ICSCR1_MSISDIV) >> RCC_ICSCR1_MSISDIV_Pos;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	0f5b      	lsrs	r3, r3, #29
 800543c:	f003 0303 	and.w	r3, r3, #3
 8005440:	607b      	str	r3, [r7, #4]
 8005442:	e008      	b.n	8005456 <HAL_RCC_GetSysClockFreq+0x66>
    }
    else
    {
      /* MSI RC1 is selected */
      sysclk = MSIRC1_VALUE;
 8005444:	4b0c      	ldr	r3, [pc, #48]	@ (8005478 <HAL_RCC_GetSysClockFreq+0x88>)
 8005446:	603b      	str	r3, [r7, #0]

      /* Get MSIS range */
      tmpcfgr = (RCC->CSR & (RCC_CSR_MSISDIVS_1 | RCC_CSR_MSISDIVS_0)) >> RCC_CSR_MSISDIVS_Pos;
 8005448:	4b09      	ldr	r3, [pc, #36]	@ (8005470 <HAL_RCC_GetSysClockFreq+0x80>)
 800544a:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800544e:	0b1b      	lsrs	r3, r3, #12
 8005450:	f003 0303 	and.w	r3, r3, #3
 8005454:	607b      	str	r3, [r7, #4]
    }

    /* MSIS frequency in HZ*/
    sysclk >>= tmpcfgr;
 8005456:	683a      	ldr	r2, [r7, #0]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	fa22 f303 	lsr.w	r3, r2, r3
 800545e:	603b      	str	r3, [r7, #0]
  }

  return sysclk;
 8005460:	683b      	ldr	r3, [r7, #0]
}
 8005462:	4618      	mov	r0, r3
 8005464:	370c      	adds	r7, #12
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr
 800546e:	bf00      	nop
 8005470:	40030c00 	.word	0x40030c00
 8005474:	00f42400 	.word	0x00f42400
 8005478:	016e3600 	.word	0x016e3600
 800547c:	05b8d800 	.word	0x05b8d800

08005480 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005484:	f7ff ffb4 	bl	80053f0 <HAL_RCC_GetSysClockFreq>
 8005488:	4602      	mov	r2, r0
 800548a:	4b07      	ldr	r3, [pc, #28]	@ (80054a8 <HAL_RCC_GetHCLKFreq+0x28>)
 800548c:	6a1b      	ldr	r3, [r3, #32]
 800548e:	f003 030f 	and.w	r3, r3, #15
 8005492:	4906      	ldr	r1, [pc, #24]	@ (80054ac <HAL_RCC_GetHCLKFreq+0x2c>)
 8005494:	5ccb      	ldrb	r3, [r1, r3]
 8005496:	fa22 f303 	lsr.w	r3, r2, r3
 800549a:	4a05      	ldr	r2, [pc, #20]	@ (80054b0 <HAL_RCC_GetHCLKFreq+0x30>)
 800549c:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800549e:	4b04      	ldr	r3, [pc, #16]	@ (80054b0 <HAL_RCC_GetHCLKFreq+0x30>)
 80054a0:	681b      	ldr	r3, [r3, #0]
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	40030c00 	.word	0x40030c00
 80054ac:	08021590 	.word	0x08021590
 80054b0:	20000004 	.word	0x20000004

080054b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 80054b8:	f7ff ffe2 	bl	8005480 <HAL_RCC_GetHCLKFreq>
 80054bc:	4602      	mov	r2, r0
 80054be:	4b05      	ldr	r3, [pc, #20]	@ (80054d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80054c0:	6a1b      	ldr	r3, [r3, #32]
 80054c2:	091b      	lsrs	r3, r3, #4
 80054c4:	f003 0307 	and.w	r3, r3, #7
 80054c8:	4903      	ldr	r1, [pc, #12]	@ (80054d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054ca:	5ccb      	ldrb	r3, [r1, r3]
 80054cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	40030c00 	.word	0x40030c00
 80054d8:	080215a0 	.word	0x080215a0

080054dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 80054e0:	f7ff ffce 	bl	8005480 <HAL_RCC_GetHCLKFreq>
 80054e4:	4602      	mov	r2, r0
 80054e6:	4b05      	ldr	r3, [pc, #20]	@ (80054fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80054e8:	6a1b      	ldr	r3, [r3, #32]
 80054ea:	0a1b      	lsrs	r3, r3, #8
 80054ec:	f003 0307 	and.w	r3, r3, #7
 80054f0:	4903      	ldr	r1, [pc, #12]	@ (8005500 <HAL_RCC_GetPCLK2Freq+0x24>)
 80054f2:	5ccb      	ldrb	r3, [r1, r3]
 80054f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	bd80      	pop	{r7, pc}
 80054fc:	40030c00 	.word	0x40030c00
 8005500:	080215a0 	.word	0x080215a0

08005504 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8005508:	f7ff ffba 	bl	8005480 <HAL_RCC_GetHCLKFreq>
 800550c:	4602      	mov	r2, r0
 800550e:	4b05      	ldr	r3, [pc, #20]	@ (8005524 <HAL_RCC_GetPCLK3Freq+0x20>)
 8005510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005512:	091b      	lsrs	r3, r3, #4
 8005514:	f003 0307 	and.w	r3, r3, #7
 8005518:	4903      	ldr	r1, [pc, #12]	@ (8005528 <HAL_RCC_GetPCLK3Freq+0x24>)
 800551a:	5ccb      	ldrb	r3, [r1, r3]
 800551c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005520:	4618      	mov	r0, r3
 8005522:	bd80      	pop	{r7, pc}
 8005524:	40030c00 	.word	0x40030c00
 8005528:	080215a0 	.word	0x080215a0

0800552c <HAL_RCC_GetMSIKFreq>:
/**
  * @brief  Return the MSIK frequency.
  * @retval MSIK frequency in Hz
  */
uint32_t HAL_RCC_GetMSIKFreq(void)
{
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
  uint32_t tmp;
  uint32_t msirange;

  /* Compute MSIK frequency ------------------------------------------------*/
  /* Read RCC ICSR1 register */
  tmp = RCC->ICSCR1;
 8005532:	4b16      	ldr	r3, [pc, #88]	@ (800558c <HAL_RCC_GetMSIKFreq+0x60>)
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	607b      	str	r3, [r7, #4]

  /* Check which MSIK Range is selected */
  if ((tmp & RCC_ICSCR1_MSIRGSEL) != 0x00u)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800553e:	2b00      	cmp	r3, #0
 8005540:	d00f      	beq.n	8005562 <HAL_RCC_GetMSIKFreq+0x36>
  {
    /* Get MSIK range */
    msirange = (tmp & RCC_ICSCR1_MSIKDIV) >> RCC_ICSCR1_MSIKDIV_Pos;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	0e9b      	lsrs	r3, r3, #26
 8005546:	f003 0303 	and.w	r3, r3, #3
 800554a:	603b      	str	r3, [r7, #0]

    /* Check which MSIRCx is selected as MSIK source */
    if ((tmp & RCC_ICSCR1_MSIKSEL) != 0x00u)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005552:	2b00      	cmp	r3, #0
 8005554:	d002      	beq.n	800555c <HAL_RCC_GetMSIKFreq+0x30>
    {
      /* MSI RC1 is selected */
      tmp = MSIRC1_VALUE;
 8005556:	4b0e      	ldr	r3, [pc, #56]	@ (8005590 <HAL_RCC_GetMSIKFreq+0x64>)
 8005558:	607b      	str	r3, [r7, #4]
 800555a:	e00b      	b.n	8005574 <HAL_RCC_GetMSIKFreq+0x48>
    }
    else
    {
      /* MSI RC0 is selected */
      tmp = MSIRC0_VALUE;
 800555c:	4b0d      	ldr	r3, [pc, #52]	@ (8005594 <HAL_RCC_GetMSIKFreq+0x68>)
 800555e:	607b      	str	r3, [r7, #4]
 8005560:	e008      	b.n	8005574 <HAL_RCC_GetMSIKFreq+0x48>
    }
  }
  else
  {
    /* MSI RC1 is selected */
    tmp = MSIRC1_VALUE;
 8005562:	4b0b      	ldr	r3, [pc, #44]	@ (8005590 <HAL_RCC_GetMSIKFreq+0x64>)
 8005564:	607b      	str	r3, [r7, #4]

    /* Get MSIK range */
    msirange = (RCC->CSR & (RCC_CSR_MSIKDIVS_1 | RCC_CSR_MSIKDIVS_0)) >> RCC_CSR_MSIKDIVS_Pos;
 8005566:	4b09      	ldr	r3, [pc, #36]	@ (800558c <HAL_RCC_GetMSIKFreq+0x60>)
 8005568:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800556c:	0a1b      	lsrs	r3, r3, #8
 800556e:	f003 0303 	and.w	r3, r3, #3
 8005572:	603b      	str	r3, [r7, #0]
  }

  /*MSIK frequency in HZ*/
  tmp >>= msirange;
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	fa22 f303 	lsr.w	r3, r2, r3
 800557c:	607b      	str	r3, [r7, #4]

  return tmp;
 800557e:	687b      	ldr	r3, [r7, #4]
}
 8005580:	4618      	mov	r0, r3
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr
 800558c:	40030c00 	.word	0x40030c00
 8005590:	016e3600 	.word	0x016e3600
 8005594:	05b8d800 	.word	0x05b8d800

08005598 <HAL_RCCEx_PeriphCLKConfig>:
  * @note   Care must be taken when HAL_RCCEx_PeriphCLKConfig() is used to select
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef *PeriphClkInit)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b088      	sub	sp, #32
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 0301 	and.w	r3, r3, #1
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d00a      	beq.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80055ac:	4bad      	ldr	r3, [pc, #692]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80055ae:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80055b2:	f023 0201 	bic.w	r2, r3, #1
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	49aa      	ldr	r1, [pc, #680]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80055bc:	4313      	orrs	r3, r2
 80055be:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 0302 	and.w	r3, r3, #2
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d00a      	beq.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80055ce:	4ba5      	ldr	r3, [pc, #660]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80055d0:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80055d4:	f023 0204 	bic.w	r2, r3, #4
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	49a1      	ldr	r1, [pc, #644]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80055de:	4313      	orrs	r3, r2
 80055e0:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- UART4 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0304 	and.w	r3, r3, #4
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d00a      	beq.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80055f0:	4b9c      	ldr	r3, [pc, #624]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80055f2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80055f6:	f023 0210 	bic.w	r2, r3, #16
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	4999      	ldr	r1, [pc, #612]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005600:	4313      	orrs	r3, r2
 8005602:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- UART5 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 0308 	and.w	r3, r3, #8
 800560e:	2b00      	cmp	r3, #0
 8005610:	d00a      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005612:	4b94      	ldr	r3, [pc, #592]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005614:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005618:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	691b      	ldr	r3, [r3, #16]
 8005620:	4990      	ldr	r1, [pc, #576]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005622:	4313      	orrs	r3, r2
 8005624:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 0310 	and.w	r3, r3, #16
 8005630:	2b00      	cmp	r3, #0
 8005632:	d00a      	beq.n	800564a <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(PeriphClkInit->I3c1ClockSelection));

    /* Configure the I3C1 clock source */
    __HAL_RCC_I3C1_CONFIG(PeriphClkInit->I3c1ClockSelection);
 8005634:	4b8b      	ldr	r3, [pc, #556]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005636:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800563a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	695b      	ldr	r3, [r3, #20]
 8005642:	4988      	ldr	r1, [pc, #544]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005644:	4313      	orrs	r3, r2
 8005646:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 0320 	and.w	r3, r3, #32
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00a      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005656:	4b83      	ldr	r3, [pc, #524]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005658:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800565c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	699b      	ldr	r3, [r3, #24]
 8005664:	497f      	ldr	r1, [pc, #508]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005666:	4313      	orrs	r3, r2
 8005668:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

#if defined(I2C2)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005674:	2b00      	cmp	r3, #0
 8005676:	d00a      	beq.n	800568e <HAL_RCCEx_PeriphCLKConfig+0xf6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005678:	4b7a      	ldr	r3, [pc, #488]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800567a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800567e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	69db      	ldr	r3, [r3, #28]
 8005686:	4977      	ldr	r1, [pc, #476]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005688:	4313      	orrs	r3, r2
 800568a:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }
#endif /* I2C2 */

#if defined(I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00a      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(PeriphClkInit->I3c2ClockSelection));

    /* Configure the I3C2 clock source */
    __HAL_RCC_I3C2_CONFIG(PeriphClkInit->I3c2ClockSelection);
 800569a:	4b72      	ldr	r3, [pc, #456]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800569c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80056a0:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a1b      	ldr	r3, [r3, #32]
 80056a8:	496e      	ldr	r1, [pc, #440]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80056aa:	4313      	orrs	r3, r2
 80056ac:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }
#endif /* I3C2 */

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d00a      	beq.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(PeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(PeriphClkInit->Spi2ClockSelection);
 80056bc:	4b69      	ldr	r3, [pc, #420]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80056be:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80056c2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ca:	4966      	ldr	r1, [pc, #408]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80056cc:	4313      	orrs	r3, r2
 80056ce:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00a      	beq.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80056de:	4b61      	ldr	r3, [pc, #388]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80056e0:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80056e4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056ec:	495d      	ldr	r1, [pc, #372]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80056ee:	4313      	orrs	r3, r2
 80056f0:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d00a      	beq.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x17e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(PeriphClkInit->Spi1ClockSelection);
 8005700:	4b58      	ldr	r3, [pc, #352]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005702:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005706:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800570e:	4955      	ldr	r1, [pc, #340]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005710:	4313      	orrs	r3, r2
 8005712:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- SYSTICK clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SYSTICK) == RCC_PERIPHCLK_SYSTICK)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800571e:	2b00      	cmp	r3, #0
 8005720:	d00a      	beq.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SYSTICKCLKSOURCE(PeriphClkInit->SystickClockSelection));

    /* Configure the SYSTICK clock source */
    __HAL_RCC_SYSTICK_CONFIG(PeriphClkInit->SystickClockSelection);
 8005722:	4b50      	ldr	r3, [pc, #320]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005724:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005728:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005730:	494c      	ldr	r1, [pc, #304]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005732:	4313      	orrs	r3, r2
 8005734:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005740:	2b00      	cmp	r3, #0
 8005742:	d00a      	beq.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN1 clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005744:	4b47      	ldr	r3, [pc, #284]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005746:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800574a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005752:	4944      	ldr	r1, [pc, #272]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005754:	4313      	orrs	r3, r2
 8005756:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }
#endif /* FDCAN1 */

  /*-------------------------- ICLK clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005762:	2b00      	cmp	r3, #0
 8005764:	d00a      	beq.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(PeriphClkInit->IclkClockSelection));

    /* Set the source of ICLK clock*/
    __HAL_RCC_ICLK_CONFIG(PeriphClkInit->IclkClockSelection);
 8005766:	4b3f      	ldr	r3, [pc, #252]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005768:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800576c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005774:	493b      	ldr	r1, [pc, #236]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005776:	4313      	orrs	r3, r2
 8005778:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- USB1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB1) == RCC_PERIPHCLK_USB1)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005784:	2b00      	cmp	r3, #0
 8005786:	d00a      	beq.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USB1CLKSOURCE(PeriphClkInit->Usb1ClockSelection));

    /* Set the source of USB1 clock*/
    __HAL_RCC_USB1_CONFIG(PeriphClkInit->Usb1ClockSelection);
 8005788:	4b36      	ldr	r3, [pc, #216]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800578a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800578e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005796:	4933      	ldr	r1, [pc, #204]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005798:	4313      	orrs	r3, r2
 800579a:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- TIMIC clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIMIC) == RCC_PERIPHCLK_TIMIC)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d00a      	beq.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMICCLKSOURCE(PeriphClkInit->TimIcClockSelection));

    /* Configure the TIMIC clock source */
    __HAL_RCC_TIMIC_CONFIG(PeriphClkInit->TimIcClockSelection);
 80057aa:	4b2e      	ldr	r3, [pc, #184]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80057ac:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80057b0:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057b8:	492a      	ldr	r1, [pc, #168]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80057ba:	4313      	orrs	r3, r2
 80057bc:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

#if defined(ADF1)
  /*-------------------------- ADF1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d00a      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(PeriphClkInit->Adf1ClockSelection));

    /* Set the source of ADF1 clock*/
    __HAL_RCC_ADF1_CONFIG(PeriphClkInit->Adf1ClockSelection);
 80057cc:	4b25      	ldr	r3, [pc, #148]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80057ce:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80057d2:	f023 0203 	bic.w	r2, r3, #3
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057da:	4922      	ldr	r1, [pc, #136]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80057dc:	4313      	orrs	r3, r2
 80057de:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }
#endif /* ADF1 */

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d00a      	beq.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(PeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(PeriphClkInit->Spi3ClockSelection);
 80057ee:	4b1d      	ldr	r3, [pc, #116]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80057f0:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80057f4:	f023 0208 	bic.w	r2, r3, #8
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057fc:	4919      	ldr	r1, [pc, #100]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80057fe:	4313      	orrs	r3, r2
 8005800:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800580c:	2b00      	cmp	r3, #0
 800580e:	d00a      	beq.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Set the source of SAI1 clock*/
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005810:	4b14      	ldr	r3, [pc, #80]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005812:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8005816:	f023 0260 	bic.w	r2, r3, #96	@ 0x60
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800581e:	4911      	ldr	r1, [pc, #68]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005820:	4313      	orrs	r3, r2
 8005822:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }
#endif /* SAI1 */

  /*-------------------------- RNG clock source configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800582e:	2b00      	cmp	r3, #0
 8005830:	d00a      	beq.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Set the source of RNG clock*/
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005832:	4b0c      	ldr	r3, [pc, #48]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005834:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8005838:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005840:	4908      	ldr	r1, [pc, #32]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005842:	4313      	orrs	r3, r2
 8005844:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005850:	2b00      	cmp	r3, #0
 8005852:	d019      	beq.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(PeriphClkInit->AdcDacClockSelection));
    assert_param(IS_RCC_ADCDAC_DIV(PeriphClkInit->AdcDacClockDivider));

    /* Configure the ADC12 and DAC1 interface clock source */
    __HAL_RCC_ADCDAC_CONFIG(PeriphClkInit->AdcDacClockSelection);
 8005854:	4b03      	ldr	r3, [pc, #12]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005856:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800585a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	e002      	b.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8005862:	bf00      	nop
 8005864:	40030c00 	.word	0x40030c00
 8005868:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800586a:	4980      	ldr	r1, [pc, #512]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800586c:	4313      	orrs	r3, r2
 800586e:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104

    /* Configure the ADC12 and DAC1 interface clock divider */
    __HAL_RCC_ADCDAC_DIV_CONFIG(PeriphClkInit->AdcDacClockDivider);
 8005872:	4b7e      	ldr	r3, [pc, #504]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005874:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8005878:	f423 4270 	bic.w	r2, r3, #61440	@ 0xf000
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005880:	497a      	ldr	r1, [pc, #488]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005882:	4313      	orrs	r3, r2
 8005884:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }

  /*-------------------------- DAC1SH clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1SH) == RCC_PERIPHCLK_DAC1SH)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d00a      	beq.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DAC1SHCLKSOURCE(PeriphClkInit->Dac1SampleHoldClockSelection));

    /* Configure the DAC1 sample and hold interface clock source */
    __HAL_RCC_DAC1SH_CONFIG(PeriphClkInit->Dac1SampleHoldClockSelection);
 8005894:	4b75      	ldr	r3, [pc, #468]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005896:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800589a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058a2:	4972      	ldr	r1, [pc, #456]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80058a4:	4313      	orrs	r3, r2
 80058a6:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }

  /*-------------------------- OCTOSPI1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OCTOSPI1) == RCC_PERIPHCLK_OCTOSPI1)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d00a      	beq.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OCTOSPICLKSOURCE(PeriphClkInit->Octospi1ClockSelection));

    /* Configure the OCTOSPI1 clock source */
    __HAL_RCC_OCTOSPI_CONFIG(PeriphClkInit->Octospi1ClockSelection);
 80058b6:	4b6d      	ldr	r3, [pc, #436]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80058b8:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80058bc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058c4:	4969      	ldr	r1, [pc, #420]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80058c6:	4313      	orrs	r3, r2
 80058c8:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d00a      	beq.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x356>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80058d8:	4b64      	ldr	r3, [pc, #400]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80058da:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80058de:	f023 0203 	bic.w	r2, r3, #3
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80058e6:	4961      	ldr	r1, [pc, #388]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80058e8:	4313      	orrs	r3, r2
 80058ea:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d00a      	beq.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x378>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80058fa:	4b5c      	ldr	r3, [pc, #368]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80058fc:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005900:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005908:	4958      	ldr	r1, [pc, #352]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800590a:	4313      	orrs	r3, r2
 800590c:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005918:	2b00      	cmp	r3, #0
 800591a:	d00a      	beq.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x39a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM34CLKSOURCE(PeriphClkInit->Lptim34ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_LPTIM34_CONFIG(PeriphClkInit->Lptim34ClockSelection);
 800591c:	4b53      	ldr	r3, [pc, #332]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800591e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005922:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800592a:	4950      	ldr	r1, [pc, #320]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800592c:	4313      	orrs	r3, r2
 800592e:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800593a:	2b00      	cmp	r3, #0
 800593c:	d00a      	beq.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800593e:	4b4b      	ldr	r3, [pc, #300]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005940:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005944:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800594c:	4947      	ldr	r1, [pc, #284]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800594e:	4313      	orrs	r3, r2
 8005950:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
    __HAL_RCC_SPI4_CONFIG(PeriphClkInit->Spi4ClockSelection);
  }
#endif /* SPI4 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	2b00      	cmp	r3, #0
 800595a:	f280 8082 	bge.w	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Reset the Backup domain only if the RTC Clock source selection is different then axisting one */
    tmpreg1 = RCC->BDCR;
 800595e:	4b43      	ldr	r3, [pc, #268]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005960:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8005964:	61fb      	str	r3, [r7, #28]
    tmpreg2 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005966:	4b41      	ldr	r3, [pc, #260]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005968:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800596c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005970:	617b      	str	r3, [r7, #20]

    /* Check if RTC clock source needs to be changed */
    if (tmpreg2 != PeriphClkInit->RTCClockSelection)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005976:	697a      	ldr	r2, [r7, #20]
 8005978:	429a      	cmp	r2, r3
 800597a:	d072      	beq.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      FlagStatus       pwrclkchanged = RESET;
 800597c:	2300      	movs	r3, #0
 800597e:	76fb      	strb	r3, [r7, #27]

      /* Enable Power Clock */
      if (__HAL_RCC_PWR_IS_CLK_ENABLED() != 0x01u)
 8005980:	4b3a      	ldr	r3, [pc, #232]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005982:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005986:	f003 0304 	and.w	r3, r3, #4
 800598a:	2b00      	cmp	r3, #0
 800598c:	d110      	bne.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x418>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800598e:	4b37      	ldr	r3, [pc, #220]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005990:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005994:	4a35      	ldr	r2, [pc, #212]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005996:	f043 0304 	orr.w	r3, r3, #4
 800599a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800599e:	4b33      	ldr	r3, [pc, #204]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80059a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059a4:	f003 0304 	and.w	r3, r3, #4
 80059a8:	60fb      	str	r3, [r7, #12]
 80059aa:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80059ac:	2301      	movs	r3, #1
 80059ae:	76fb      	strb	r3, [r7, #27]
      }

      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80059b0:	4b2f      	ldr	r3, [pc, #188]	@ (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 80059b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059b4:	4a2e      	ldr	r2, [pc, #184]	@ (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 80059b6:	f043 0301 	orr.w	r3, r3, #1
 80059ba:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Check if a backup domain reset is required */
      if (tmpreg2 != RCC_RTCCLKSOURCE_DISABLE)
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d00f      	beq.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80059c2:	4b2a      	ldr	r3, [pc, #168]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80059c4:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80059c8:	4a28      	ldr	r2, [pc, #160]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80059ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059ce:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
        __HAL_RCC_BACKUPRESET_RELEASE();
 80059d2:	4b26      	ldr	r3, [pc, #152]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80059d4:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80059d8:	4a24      	ldr	r2, [pc, #144]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80059da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059de:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
      }

      /* Apply new RTC clock source selection */
      tmpreg1 &= ~(RCC_BDCR_RTCSEL | RCC_BDCR_RTCEN);
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80059e8:	61fb      	str	r3, [r7, #28]

      /* Check is RTC disable is asked */
      if (PeriphClkInit->RTCClockSelection != RCC_RTCCLKSOURCE_DISABLE)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d006      	beq.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x468>
      {
        tmpreg1 |= (RCC_BDCR_RTCEN | PeriphClkInit->RTCClockSelection);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059fe:	61fb      	str	r3, [r7, #28]
      }
      RCC->BDCR = tmpreg1;
 8005a00:	4a1a      	ldr	r2, [pc, #104]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110

      /* Check if an oscillator was enable */
      if ((tmpreg1 & RCC_BDCR_LSEON) != 0x00u)
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	f003 0301 	and.w	r3, r3, #1
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d01c      	beq.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4b4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a12:	f7fc fe35 	bl	8002680 <HAL_GetTick>
 8005a16:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0x00u)
 8005a18:	e011      	b.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a1a:	f7fc fe31 	bl	8002680 <HAL_GetTick>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	1ad3      	subs	r3, r2, r3
 8005a24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d908      	bls.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
          {
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0x00u)
 8005a2c:	4b0f      	ldr	r3, [pc, #60]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005a2e:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8005a32:	f003 0302 	and.w	r3, r3, #2
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d101      	bne.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
            {
              return HAL_TIMEOUT;
 8005a3a:	2303      	movs	r3, #3
 8005a3c:	e012      	b.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0x00u)
 8005a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005a40:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8005a44:	f003 0302 	and.w	r3, r3, #2
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d0e6      	beq.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x482>
            }
          }
        }
      }
      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005a4c:	7efb      	ldrb	r3, [r7, #27]
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d107      	bne.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005a52:	4b06      	ldr	r3, [pc, #24]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005a54:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a58:	4a04      	ldr	r2, [pc, #16]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005a5a:	f023 0304 	bic.w	r3, r3, #4
 8005a5e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }
    }
  }

  return HAL_OK;
 8005a62:	2300      	movs	r3, #0
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3720      	adds	r7, #32
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}
 8005a6c:	40030c00 	.word	0x40030c00
 8005a70:	40030800 	.word	0x40030800

08005a74 <HAL_RCCEx_GetPeriphCLKFreq>:
  *
  *            (*) value not defined in all devices.
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b084      	sub	sp, #16
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	60fb      	str	r3, [r7, #12]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005a86:	f000 8469 	beq.w	800635c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005a90:	f200 84a0 	bhi.w	80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005a9a:	f000 8420 	beq.w	80062de <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005aa4:	f200 8496 	bhi.w	80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005aae:	f000 83d3 	beq.w	8006258 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005ab8:	f200 848c 	bhi.w	80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005ac2:	f000 83b8 	beq.w	8006236 <HAL_RCCEx_GetPeriphCLKFreq+0x7c2>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005acc:	f200 8482 	bhi.w	80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005ad6:	f000 8378 	beq.w	80061ca <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005ae0:	f200 8478 	bhi.w	80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005aea:	f000 835d 	beq.w	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005af4:	f200 846e 	bhi.w	80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005afe:	f000 8326 	beq.w	800614e <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005b08:	f200 8464 	bhi.w	80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b12:	f000 82db 	beq.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b1c:	f200 845a 	bhi.w	80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005b26:	f000 82b9 	beq.w	800609c <HAL_RCCEx_GetPeriphCLKFreq+0x628>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005b30:	f200 8450 	bhi.w	80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005b3a:	f000 828c 	beq.w	8006056 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005b44:	f200 8446 	bhi.w	80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b4e:	f000 8271 	beq.w	8006034 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b58:	f200 843c 	bhi.w	80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b62:	f000 8246 	beq.w	8005ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b6c:	f200 8432 	bhi.w	80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b76:	f000 8228 	beq.w	8005fca <HAL_RCCEx_GetPeriphCLKFreq+0x556>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b80:	f200 8428 	bhi.w	80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b8a:	f000 81ef 	beq.w	8005f6c <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b94:	f200 841e 	bhi.w	80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b9e:	f000 81ce 	beq.w	8005f3e <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ba8:	f200 8414 	bhi.w	80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005bb2:	f000 8189 	beq.w	8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x454>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005bbc:	f200 840a 	bhi.w	80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bc6:	f000 816e 	beq.w	8005ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bd0:	f200 8400 	bhi.w	80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bda:	f000 8121 	beq.w	8005e20 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005be4:	f200 83f6 	bhi.w	80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bee:	f000 8106 	beq.w	8005dfe <HAL_RCCEx_GetPeriphCLKFreq+0x38a>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bf8:	f200 83ec 	bhi.w	80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2b80      	cmp	r3, #128	@ 0x80
 8005c00:	f000 80ec 	beq.w	8005ddc <HAL_RCCEx_GetPeriphCLKFreq+0x368>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2b80      	cmp	r3, #128	@ 0x80
 8005c08:	f200 83e4 	bhi.w	80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2b20      	cmp	r3, #32
 8005c10:	d84c      	bhi.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x238>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	f000 83dd 	beq.w	80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	3b01      	subs	r3, #1
 8005c1e:	2b1f      	cmp	r3, #31
 8005c20:	f200 83d8 	bhi.w	80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8005c24:	a201      	add	r2, pc, #4	@ (adr r2, 8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8005c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c2a:	bf00      	nop
 8005c2c:	08005cb7 	.word	0x08005cb7
 8005c30:	08005ce7 	.word	0x08005ce7
 8005c34:	080063d5 	.word	0x080063d5
 8005c38:	08005d17 	.word	0x08005d17
 8005c3c:	080063d5 	.word	0x080063d5
 8005c40:	080063d5 	.word	0x080063d5
 8005c44:	080063d5 	.word	0x080063d5
 8005c48:	08005d47 	.word	0x08005d47
 8005c4c:	080063d5 	.word	0x080063d5
 8005c50:	080063d5 	.word	0x080063d5
 8005c54:	080063d5 	.word	0x080063d5
 8005c58:	080063d5 	.word	0x080063d5
 8005c5c:	080063d5 	.word	0x080063d5
 8005c60:	080063d5 	.word	0x080063d5
 8005c64:	080063d5 	.word	0x080063d5
 8005c68:	08005d77 	.word	0x08005d77
 8005c6c:	080063d5 	.word	0x080063d5
 8005c70:	080063d5 	.word	0x080063d5
 8005c74:	080063d5 	.word	0x080063d5
 8005c78:	080063d5 	.word	0x080063d5
 8005c7c:	080063d5 	.word	0x080063d5
 8005c80:	080063d5 	.word	0x080063d5
 8005c84:	080063d5 	.word	0x080063d5
 8005c88:	080063d5 	.word	0x080063d5
 8005c8c:	080063d5 	.word	0x080063d5
 8005c90:	080063d5 	.word	0x080063d5
 8005c94:	080063d5 	.word	0x080063d5
 8005c98:	080063d5 	.word	0x080063d5
 8005c9c:	080063d5 	.word	0x080063d5
 8005ca0:	080063d5 	.word	0x080063d5
 8005ca4:	080063d5 	.word	0x080063d5
 8005ca8:	08005d99 	.word	0x08005d99
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2b40      	cmp	r3, #64	@ 0x40
 8005cb0:	f000 8083 	beq.w	8005dba <HAL_RCCEx_GetPeriphCLKFreq+0x346>
      break;

    /* Do nothing for Timer input capture as clock source is selected in timer block */
    case RCC_PERIPHCLK_TIMIC:
    default:
      break;
 8005cb4:	e38e      	b.n	80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
      srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005cb6:	4ba9      	ldr	r3, [pc, #676]	@ (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005cb8:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005cbc:	f003 0301 	and.w	r3, r3, #1
 8005cc0:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d103      	bne.n	8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
        frequency = HAL_RCC_GetPCLK2Freq();
 8005cc8:	f7ff fc08 	bl	80054dc <HAL_RCC_GetPCLK2Freq>
 8005ccc:	60f8      	str	r0, [r7, #12]
      break;
 8005cce:	e383      	b.n	80063d8 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005cd0:	4ba2      	ldr	r3, [pc, #648]	@ (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005cd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005cdc:	f040 837c 	bne.w	80063d8 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
          frequency = HSI_VALUE;
 8005ce0:	4b9f      	ldr	r3, [pc, #636]	@ (8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005ce2:	60fb      	str	r3, [r7, #12]
      break;
 8005ce4:	e378      	b.n	80063d8 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
      srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8005ce6:	4b9d      	ldr	r3, [pc, #628]	@ (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005ce8:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005cec:	f003 0304 	and.w	r3, r3, #4
 8005cf0:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d103      	bne.n	8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
        frequency = HAL_RCC_GetPCLK1Freq();
 8005cf8:	f7ff fbdc 	bl	80054b4 <HAL_RCC_GetPCLK1Freq>
 8005cfc:	60f8      	str	r0, [r7, #12]
      break;
 8005cfe:	e36d      	b.n	80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x968>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005d00:	4b96      	ldr	r3, [pc, #600]	@ (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005d08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d0c:	f040 8366 	bne.w	80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x968>
          frequency = HSI_VALUE;
 8005d10:	4b93      	ldr	r3, [pc, #588]	@ (8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005d12:	60fb      	str	r3, [r7, #12]
      break;
 8005d14:	e362      	b.n	80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x968>
      srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8005d16:	4b91      	ldr	r3, [pc, #580]	@ (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005d18:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005d1c:	f003 0310 	and.w	r3, r3, #16
 8005d20:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d103      	bne.n	8005d30 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
        frequency = HAL_RCC_GetPCLK1Freq();
 8005d28:	f7ff fbc4 	bl	80054b4 <HAL_RCC_GetPCLK1Freq>
 8005d2c:	60f8      	str	r0, [r7, #12]
      break;
 8005d2e:	e357      	b.n	80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005d30:	4b8a      	ldr	r3, [pc, #552]	@ (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005d38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d3c:	f040 8350 	bne.w	80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
          frequency = HSI_VALUE;
 8005d40:	4b87      	ldr	r3, [pc, #540]	@ (8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005d42:	60fb      	str	r3, [r7, #12]
      break;
 8005d44:	e34c      	b.n	80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
      srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8005d46:	4b85      	ldr	r3, [pc, #532]	@ (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005d48:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005d4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d50:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d103      	bne.n	8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>
        frequency = HAL_RCC_GetPCLK1Freq();
 8005d58:	f7ff fbac 	bl	80054b4 <HAL_RCC_GetPCLK1Freq>
 8005d5c:	60f8      	str	r0, [r7, #12]
      break;
 8005d5e:	e341      	b.n	80063e4 <HAL_RCCEx_GetPeriphCLKFreq+0x970>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005d60:	4b7e      	ldr	r3, [pc, #504]	@ (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005d68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d6c:	f040 833a 	bne.w	80063e4 <HAL_RCCEx_GetPeriphCLKFreq+0x970>
          frequency = HSI_VALUE;
 8005d70:	4b7b      	ldr	r3, [pc, #492]	@ (8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005d72:	60fb      	str	r3, [r7, #12]
      break;
 8005d74:	e336      	b.n	80063e4 <HAL_RCCEx_GetPeriphCLKFreq+0x970>
      srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8005d76:	4b79      	ldr	r3, [pc, #484]	@ (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005d78:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005d7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d80:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d103      	bne.n	8005d90 <HAL_RCCEx_GetPeriphCLKFreq+0x31c>
        frequency = HAL_RCC_GetPCLK1Freq();
 8005d88:	f7ff fb94 	bl	80054b4 <HAL_RCC_GetPCLK1Freq>
 8005d8c:	60f8      	str	r0, [r7, #12]
      break;
 8005d8e:	e340      	b.n	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 8005d90:	f7ff fbcc 	bl	800552c <HAL_RCC_GetMSIKFreq>
 8005d94:	60f8      	str	r0, [r7, #12]
      break;
 8005d96:	e33c      	b.n	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005d98:	4b70      	ldr	r3, [pc, #448]	@ (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005d9a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005d9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005da2:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d103      	bne.n	8005db2 <HAL_RCCEx_GetPeriphCLKFreq+0x33e>
        frequency = HAL_RCC_GetPCLK1Freq();
 8005daa:	f7ff fb83 	bl	80054b4 <HAL_RCC_GetPCLK1Freq>
 8005dae:	60f8      	str	r0, [r7, #12]
      break;
 8005db0:	e32f      	b.n	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 8005db2:	f7ff fbbb 	bl	800552c <HAL_RCC_GetMSIKFreq>
 8005db6:	60f8      	str	r0, [r7, #12]
      break;
 8005db8:	e32b      	b.n	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8005dba:	4b68      	ldr	r3, [pc, #416]	@ (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005dbc:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005dc0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005dc4:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d103      	bne.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        frequency = HAL_RCC_GetPCLK1Freq();
 8005dcc:	f7ff fb72 	bl	80054b4 <HAL_RCC_GetPCLK1Freq>
 8005dd0:	60f8      	str	r0, [r7, #12]
      break;
 8005dd2:	e31e      	b.n	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 8005dd4:	f7ff fbaa 	bl	800552c <HAL_RCC_GetMSIKFreq>
 8005dd8:	60f8      	str	r0, [r7, #12]
      break;
 8005dda:	e31a      	b.n	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 8005ddc:	4b5f      	ldr	r3, [pc, #380]	@ (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005dde:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005de2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005de6:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_I3C2CLKSOURCE_PCLK2)
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d103      	bne.n	8005df6 <HAL_RCCEx_GetPeriphCLKFreq+0x382>
        frequency = HAL_RCC_GetPCLK2Freq();
 8005dee:	f7ff fb75 	bl	80054dc <HAL_RCC_GetPCLK2Freq>
 8005df2:	60f8      	str	r0, [r7, #12]
      break;
 8005df4:	e30d      	b.n	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 8005df6:	f7ff fb99 	bl	800552c <HAL_RCC_GetMSIKFreq>
 8005dfa:	60f8      	str	r0, [r7, #12]
      break;
 8005dfc:	e309      	b.n	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8005dfe:	4b57      	ldr	r3, [pc, #348]	@ (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005e00:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005e04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e08:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_SPI2CLKSOURCE_PCLK1)
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d103      	bne.n	8005e18 <HAL_RCCEx_GetPeriphCLKFreq+0x3a4>
        frequency = HAL_RCC_GetPCLK1Freq();
 8005e10:	f7ff fb50 	bl	80054b4 <HAL_RCC_GetPCLK1Freq>
 8005e14:	60f8      	str	r0, [r7, #12]
      break;
 8005e16:	e2fc      	b.n	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 8005e18:	f7ff fb88 	bl	800552c <HAL_RCC_GetMSIKFreq>
 8005e1c:	60f8      	str	r0, [r7, #12]
      break;
 8005e1e:	e2f8      	b.n	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005e20:	4b4e      	ldr	r3, [pc, #312]	@ (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005e22:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005e26:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8005e2a:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d103      	bne.n	8005e3a <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
        frequency = HAL_RCC_GetPCLK1Freq();
 8005e32:	f7ff fb3f 	bl	80054b4 <HAL_RCC_GetPCLK1Freq>
 8005e36:	60f8      	str	r0, [r7, #12]
      break;
 8005e38:	e2d6      	b.n	80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
      else if (srcclk == RCC_LPTIM2CLKSOURCE_LSI)
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005e40:	d116      	bne.n	8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005e42:	4b46      	ldr	r3, [pc, #280]	@ (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005e44:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8005e48:	f003 0302 	and.w	r3, r3, #2
 8005e4c:	2b02      	cmp	r3, #2
 8005e4e:	f040 82cb 	bne.w	80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = LSI_VALUE;
 8005e52:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005e56:	60fb      	str	r3, [r7, #12]
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8005e58:	4b40      	ldr	r3, [pc, #256]	@ (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005e5a:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8005e5e:	f003 0304 	and.w	r3, r3, #4
 8005e62:	2b04      	cmp	r3, #4
 8005e64:	f040 82c0 	bne.w	80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
            frequency /= 128U;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	09db      	lsrs	r3, r3, #7
 8005e6c:	60fb      	str	r3, [r7, #12]
      break;
 8005e6e:	e2bb      	b.n	80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
      else if (srcclk == RCC_LPTIM2CLKSOURCE_HSI)
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005e76:	d10a      	bne.n	8005e8e <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005e78:	4b38      	ldr	r3, [pc, #224]	@ (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005e80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e84:	f040 82b0 	bne.w	80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = HSI_VALUE;
 8005e88:	4b35      	ldr	r3, [pc, #212]	@ (8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005e8a:	60fb      	str	r3, [r7, #12]
      break;
 8005e8c:	e2ac      	b.n	80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005e8e:	4b33      	ldr	r3, [pc, #204]	@ (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005e90:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8005e94:	f003 0302 	and.w	r3, r3, #2
 8005e98:	2b02      	cmp	r3, #2
 8005e9a:	f040 82a5 	bne.w	80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = LSE_VALUE;
 8005e9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ea2:	60fb      	str	r3, [r7, #12]
      break;
 8005ea4:	e2a0      	b.n	80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
      srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8005ea6:	4b2d      	ldr	r3, [pc, #180]	@ (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005ea8:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005eac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005eb0:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_SPI1CLKSOURCE_PCLK2)
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d103      	bne.n	8005ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
        frequency = HAL_RCC_GetPCLK2Freq();
 8005eb8:	f7ff fb10 	bl	80054dc <HAL_RCC_GetPCLK2Freq>
 8005ebc:	60f8      	str	r0, [r7, #12]
      break;
 8005ebe:	e2a8      	b.n	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 8005ec0:	f7ff fb34 	bl	800552c <HAL_RCC_GetMSIKFreq>
 8005ec4:	60f8      	str	r0, [r7, #12]
      break;
 8005ec6:	e2a4      	b.n	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_SYSTICK_SOURCE();
 8005ec8:	4b24      	ldr	r3, [pc, #144]	@ (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005eca:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005ece:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8005ed2:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_SYSTICKCLKSOURCE_HCLK_DIV8)
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d105      	bne.n	8005ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
        frequency = (HAL_RCC_GetHCLKFreq() / 8u);
 8005eda:	f7ff fad1 	bl	8005480 <HAL_RCC_GetHCLKFreq>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	08db      	lsrs	r3, r3, #3
 8005ee2:	60fb      	str	r3, [r7, #12]
      break;
 8005ee4:	e282      	b.n	80063ec <HAL_RCCEx_GetPeriphCLKFreq+0x978>
      else if (srcclk == RCC_SYSTICKCLKSOURCE_LSE)
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005eec:	d10b      	bne.n	8005f06 <HAL_RCCEx_GetPeriphCLKFreq+0x492>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005eee:	4b1b      	ldr	r3, [pc, #108]	@ (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005ef0:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8005ef4:	f003 0302 	and.w	r3, r3, #2
 8005ef8:	2b02      	cmp	r3, #2
 8005efa:	f040 8277 	bne.w	80063ec <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = LSE_VALUE;
 8005efe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f02:	60fb      	str	r3, [r7, #12]
      break;
 8005f04:	e272      	b.n	80063ec <HAL_RCCEx_GetPeriphCLKFreq+0x978>
      else if (srcclk == RCC_SYSTICKCLKSOURCE_LSI)
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f0c:	f040 826e 	bne.w	80063ec <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005f10:	4b12      	ldr	r3, [pc, #72]	@ (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005f12:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8005f16:	f003 0302 	and.w	r3, r3, #2
 8005f1a:	2b02      	cmp	r3, #2
 8005f1c:	f040 8266 	bne.w	80063ec <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = LSI_VALUE;
 8005f20:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005f24:	60fb      	str	r3, [r7, #12]
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8005f26:	4b0d      	ldr	r3, [pc, #52]	@ (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005f28:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8005f2c:	f003 0304 	and.w	r3, r3, #4
 8005f30:	2b04      	cmp	r3, #4
 8005f32:	f040 825b 	bne.w	80063ec <HAL_RCCEx_GetPeriphCLKFreq+0x978>
            frequency /= 128u;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	09db      	lsrs	r3, r3, #7
 8005f3a:	60fb      	str	r3, [r7, #12]
      break;
 8005f3c:	e256      	b.n	80063ec <HAL_RCCEx_GetPeriphCLKFreq+0x978>
      srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8005f3e:	4b07      	ldr	r3, [pc, #28]	@ (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005f40:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005f44:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005f48:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_FDCANCLKSOURCE_MSIK)
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005f50:	d108      	bne.n	8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>
        frequency = HAL_RCC_GetMSIKFreq();
 8005f52:	f7ff faeb 	bl	800552c <HAL_RCC_GetMSIKFreq>
 8005f56:	60f8      	str	r0, [r7, #12]
      break;
 8005f58:	e25b      	b.n	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8005f5a:	bf00      	nop
 8005f5c:	40030c00 	.word	0x40030c00
 8005f60:	00f42400 	.word	0x00f42400
        frequency = HAL_RCC_GetSysClockFreq();
 8005f64:	f7ff fa44 	bl	80053f0 <HAL_RCC_GetSysClockFreq>
 8005f68:	60f8      	str	r0, [r7, #12]
      break;
 8005f6a:	e252      	b.n	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8005f6c:	4ba4      	ldr	r3, [pc, #656]	@ (8006200 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005f6e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005f72:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8005f76:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_ICLKCLKSOURCE_HSI48)
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d10a      	bne.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8005f7e:	4ba0      	ldr	r3, [pc, #640]	@ (8006200 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f8a:	f040 8231 	bne.w	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0x97c>
          frequency = HSI48_VALUE;
 8005f8e:	4b9d      	ldr	r3, [pc, #628]	@ (8006204 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8005f90:	60fb      	str	r3, [r7, #12]
      break;
 8005f92:	e22d      	b.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0x97c>
      else if (srcclk == RCC_ICLKCLKSOURCE_MSIK)
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005f9a:	d103      	bne.n	8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>
        frequency = HAL_RCC_GetMSIKFreq();
 8005f9c:	f7ff fac6 	bl	800552c <HAL_RCC_GetMSIKFreq>
 8005fa0:	60f8      	str	r0, [r7, #12]
      break;
 8005fa2:	e225      	b.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0x97c>
      else if (srcclk == RCC_ICLKCLKSOURCE_HSE)
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005faa:	d10a      	bne.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005fac:	4b94      	ldr	r3, [pc, #592]	@ (8006200 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fb4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005fb8:	f040 821a 	bne.w	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0x97c>
          frequency = HSE_VALUE;
 8005fbc:	4b92      	ldr	r3, [pc, #584]	@ (8006208 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8005fbe:	60fb      	str	r3, [r7, #12]
      break;
 8005fc0:	e216      	b.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0x97c>
        frequency = HAL_RCC_GetSysClockFreq();
 8005fc2:	f7ff fa15 	bl	80053f0 <HAL_RCC_GetSysClockFreq>
 8005fc6:	60f8      	str	r0, [r7, #12]
      break;
 8005fc8:	e212      	b.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0x97c>
      frequency = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ICLK);
 8005fca:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8005fce:	f7ff fd51 	bl	8005a74 <HAL_RCCEx_GetPeriphCLKFreq>
 8005fd2:	60f8      	str	r0, [r7, #12]
      srcclk = __HAL_RCC_GET_USB1_SOURCE();
 8005fd4:	4b8a      	ldr	r3, [pc, #552]	@ (8006200 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005fd6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005fda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005fde:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_USB1CLKSOURCE_ICLK_DIV2)
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005fe6:	f040 8205 	bne.w	80063f4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
        frequency = (frequency >> 1u);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	085b      	lsrs	r3, r3, #1
 8005fee:	60fb      	str	r3, [r7, #12]
      break;
 8005ff0:	e200      	b.n	80063f4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8005ff2:	4b83      	ldr	r3, [pc, #524]	@ (8006200 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005ff4:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8005ff8:	f003 0303 	and.w	r3, r3, #3
 8005ffc:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_ADF1CLKSOURCE_HCLK)
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d103      	bne.n	800600c <HAL_RCCEx_GetPeriphCLKFreq+0x598>
        frequency = HAL_RCC_GetHCLKFreq();
 8006004:	f7ff fa3c 	bl	8005480 <HAL_RCC_GetHCLKFreq>
 8006008:	60f8      	str	r0, [r7, #12]
      break;
 800600a:	e202      	b.n	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      else if (srcclk == RCC_ADF1CLKSOURCE_PIN)
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	2b01      	cmp	r3, #1
 8006010:	d103      	bne.n	800601a <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006012:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006016:	60fb      	str	r3, [r7, #12]
      break;
 8006018:	e1fb      	b.n	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      else if (srcclk == RCC_ADF1CLKSOURCE_MSIK)
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	2b02      	cmp	r3, #2
 800601e:	d103      	bne.n	8006028 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
        frequency = HAL_RCC_GetMSIKFreq();
 8006020:	f7ff fa84 	bl	800552c <HAL_RCC_GetMSIKFreq>
 8006024:	60f8      	str	r0, [r7, #12]
      break;
 8006026:	e1f4      	b.n	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8006028:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800602c:	f7ff fd22 	bl	8005a74 <HAL_RCCEx_GetPeriphCLKFreq>
 8006030:	60f8      	str	r0, [r7, #12]
      break;
 8006032:	e1ee      	b.n	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8006034:	4b72      	ldr	r3, [pc, #456]	@ (8006200 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006036:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800603a:	f003 0308 	and.w	r3, r3, #8
 800603e:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_SPI3CLKSOURCE_PCLK1)
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d103      	bne.n	800604e <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
        frequency = HAL_RCC_GetPCLK1Freq();
 8006046:	f7ff fa35 	bl	80054b4 <HAL_RCC_GetPCLK1Freq>
 800604a:	60f8      	str	r0, [r7, #12]
      break;
 800604c:	e1e1      	b.n	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 800604e:	f7ff fa6d 	bl	800552c <HAL_RCC_GetMSIKFreq>
 8006052:	60f8      	str	r0, [r7, #12]
      break;
 8006054:	e1dd      	b.n	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006056:	4b6a      	ldr	r3, [pc, #424]	@ (8006200 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006058:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800605c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006060:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_SAI1CLKSOURCE_MSIK)
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d103      	bne.n	8006070 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
        frequency = HAL_RCC_GetMSIKFreq();
 8006068:	f7ff fa60 	bl	800552c <HAL_RCC_GetMSIKFreq>
 800606c:	60f8      	str	r0, [r7, #12]
      break;
 800606e:	e1c3      	b.n	80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
      else if (srcclk == RCC_SAI1CLKSOURCE_PIN)
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	2b20      	cmp	r3, #32
 8006074:	d103      	bne.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006076:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800607a:	60fb      	str	r3, [r7, #12]
      break;
 800607c:	e1bc      	b.n	80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
      else if (srcclk == RCC_SAI1CLKSOURCE_HSE)
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	2b40      	cmp	r3, #64	@ 0x40
 8006082:	f040 81b9 	bne.w	80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006086:	4b5e      	ldr	r3, [pc, #376]	@ (8006200 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800608e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006092:	f040 81b1 	bne.w	80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
          frequency = HSE_VALUE;
 8006096:	4b5c      	ldr	r3, [pc, #368]	@ (8006208 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8006098:	60fb      	str	r3, [r7, #12]
      break;
 800609a:	e1ad      	b.n	80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
      srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800609c:	4b58      	ldr	r3, [pc, #352]	@ (8006200 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800609e:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80060a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80060a6:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_RNGCLKSOURCE_HSI48)
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d10a      	bne.n	80060c4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80060ae:	4b54      	ldr	r3, [pc, #336]	@ (8006200 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80060b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060ba:	f040 819f 	bne.w	80063fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = HSI48_VALUE;
 80060be:	4b51      	ldr	r3, [pc, #324]	@ (8006204 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 80060c0:	60fb      	str	r3, [r7, #12]
      break;
 80060c2:	e19b      	b.n	80063fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        frequency = HAL_RCC_GetMSIKFreq();
 80060c4:	f7ff fa32 	bl	800552c <HAL_RCC_GetMSIKFreq>
 80060c8:	60f8      	str	r0, [r7, #12]
      break;
 80060ca:	e197      	b.n	80063fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
      srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80060cc:	4b4c      	ldr	r3, [pc, #304]	@ (8006200 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80060ce:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80060d2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80060d6:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d103      	bne.n	80060e6 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
        frequency = HAL_RCC_GetHCLKFreq();
 80060de:	f7ff f9cf 	bl	8005480 <HAL_RCC_GetHCLKFreq>
 80060e2:	60f8      	str	r0, [r7, #12]
 80060e4:	e014      	b.n	8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
      else if (srcclk == RCC_ADCDACCLKSOURCE_HSE)
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060ec:	d109      	bne.n	8006102 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80060ee:	4b44      	ldr	r3, [pc, #272]	@ (8006200 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80060fa:	d109      	bne.n	8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
          frequency = HSE_VALUE;
 80060fc:	4b42      	ldr	r3, [pc, #264]	@ (8006208 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 80060fe:	60fb      	str	r3, [r7, #12]
 8006100:	e006      	b.n	8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
      else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006108:	d102      	bne.n	8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
        frequency = HAL_RCC_GetMSIKFreq();
 800610a:	f7ff fa0f 	bl	800552c <HAL_RCC_GetMSIKFreq>
 800610e:	60f8      	str	r0, [r7, #12]
      srcclk = __HAL_RCC_GET_ADCDAC_DIV();
 8006110:	4b3b      	ldr	r3, [pc, #236]	@ (8006200 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006112:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8006116:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800611a:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_ADCDACCLK_DIV1)
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d102      	bne.n	8006128 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
        srcclk = 0u;
 8006122:	2300      	movs	r3, #0
 8006124:	60bb      	str	r3, [r7, #8]
 8006126:	e00c      	b.n	8006142 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
      else if (srcclk < RCC_CCIPR2_ADCDACPRE_3)
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800612e:	d202      	bcs.n	8006136 <HAL_RCCEx_GetPeriphCLKFreq+0x6c2>
        srcclk = 1u;
 8006130:	2301      	movs	r3, #1
 8006132:	60bb      	str	r3, [r7, #8]
 8006134:	e005      	b.n	8006142 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        srcclk = ((srcclk & ~RCC_CCIPR2_ADCDACPRE_3) >> RCC_CCIPR2_ADCDACPRE_Pos) + 2u;
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	0b1a      	lsrs	r2, r3, #12
 800613a:	4b34      	ldr	r3, [pc, #208]	@ (800620c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800613c:	4013      	ands	r3, r2
 800613e:	3302      	adds	r3, #2
 8006140:	60bb      	str	r3, [r7, #8]
      frequency = (frequency >> srcclk);
 8006142:	68fa      	ldr	r2, [r7, #12]
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	fa22 f303 	lsr.w	r3, r2, r3
 800614a:	60fb      	str	r3, [r7, #12]
      break;
 800614c:	e161      	b.n	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_DAC1SH_SOURCE();
 800614e:	4b2c      	ldr	r3, [pc, #176]	@ (8006200 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006150:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8006154:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006158:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_DAC1SHCLKSOURCE_LSI)
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006160:	d116      	bne.n	8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006162:	4b27      	ldr	r3, [pc, #156]	@ (8006200 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006164:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8006168:	f003 0302 	and.w	r3, r3, #2
 800616c:	2b02      	cmp	r3, #2
 800616e:	f040 8147 	bne.w	8006400 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
          frequency = LSI_VALUE;
 8006172:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006176:	60fb      	str	r3, [r7, #12]
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8006178:	4b21      	ldr	r3, [pc, #132]	@ (8006200 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800617a:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800617e:	f003 0304 	and.w	r3, r3, #4
 8006182:	2b04      	cmp	r3, #4
 8006184:	f040 813c 	bne.w	8006400 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
            frequency /= 128u;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	09db      	lsrs	r3, r3, #7
 800618c:	60fb      	str	r3, [r7, #12]
      break;
 800618e:	e137      	b.n	8006400 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006190:	4b1b      	ldr	r3, [pc, #108]	@ (8006200 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006192:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8006196:	f003 0302 	and.w	r3, r3, #2
 800619a:	2b02      	cmp	r3, #2
 800619c:	f040 8130 	bne.w	8006400 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
          frequency = LSE_VALUE;
 80061a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80061a4:	60fb      	str	r3, [r7, #12]
      break;
 80061a6:	e12b      	b.n	8006400 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
      srcclk = __HAL_RCC_GET_OCTOSPI_SOURCE();
 80061a8:	4b15      	ldr	r3, [pc, #84]	@ (8006200 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80061aa:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80061ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80061b2:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_OCTOSPICLKSOURCE_SYSCLK)
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d103      	bne.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
        frequency = HAL_RCC_GetSysClockFreq();
 80061ba:	f7ff f919 	bl	80053f0 <HAL_RCC_GetSysClockFreq>
 80061be:	60f8      	str	r0, [r7, #12]
      break;
 80061c0:	e127      	b.n	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 80061c2:	f7ff f9b3 	bl	800552c <HAL_RCC_GetMSIKFreq>
 80061c6:	60f8      	str	r0, [r7, #12]
      break;
 80061c8:	e123      	b.n	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80061ca:	4b0d      	ldr	r3, [pc, #52]	@ (8006200 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80061cc:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80061d0:	f003 0303 	and.w	r3, r3, #3
 80061d4:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d103      	bne.n	80061e4 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
        frequency = HAL_RCC_GetPCLK3Freq();
 80061dc:	f7ff f992 	bl	8005504 <HAL_RCC_GetPCLK3Freq>
 80061e0:	60f8      	str	r0, [r7, #12]
      break;
 80061e2:	e10f      	b.n	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
      else if (srcclk == RCC_LPUART1CLKSOURCE_HSI)
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d112      	bne.n	8006210 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80061ea:	4b05      	ldr	r3, [pc, #20]	@ (8006200 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80061f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061f6:	f040 8105 	bne.w	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
          frequency = HSI_VALUE;
 80061fa:	4b03      	ldr	r3, [pc, #12]	@ (8006208 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 80061fc:	60fb      	str	r3, [r7, #12]
      break;
 80061fe:	e101      	b.n	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
 8006200:	40030c00 	.word	0x40030c00
 8006204:	02dc6c00 	.word	0x02dc6c00
 8006208:	00f42400 	.word	0x00f42400
 800620c:	000ffff7 	.word	0x000ffff7
      else if (srcclk == RCC_LPUART1CLKSOURCE_LSE)
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	2b02      	cmp	r3, #2
 8006214:	d10b      	bne.n	800622e <HAL_RCCEx_GetPeriphCLKFreq+0x7ba>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006216:	4b81      	ldr	r3, [pc, #516]	@ (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8006218:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800621c:	f003 0302 	and.w	r3, r3, #2
 8006220:	2b02      	cmp	r3, #2
 8006222:	f040 80ef 	bne.w	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
          frequency = LSE_VALUE;
 8006226:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800622a:	60fb      	str	r3, [r7, #12]
      break;
 800622c:	e0ea      	b.n	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
        frequency = HAL_RCC_GetMSIKFreq();
 800622e:	f7ff f97d 	bl	800552c <HAL_RCC_GetMSIKFreq>
 8006232:	60f8      	str	r0, [r7, #12]
      break;
 8006234:	e0e6      	b.n	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
      srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006236:	4b79      	ldr	r3, [pc, #484]	@ (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8006238:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800623c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006240:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d103      	bne.n	8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
        frequency = HAL_RCC_GetPCLK3Freq();
 8006248:	f7ff f95c 	bl	8005504 <HAL_RCC_GetPCLK3Freq>
 800624c:	60f8      	str	r0, [r7, #12]
      break;
 800624e:	e0e0      	b.n	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 8006250:	f7ff f96c 	bl	800552c <HAL_RCC_GetMSIKFreq>
 8006254:	60f8      	str	r0, [r7, #12]
      break;
 8006256:	e0dc      	b.n	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8006258:	4b70      	ldr	r3, [pc, #448]	@ (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800625a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800625e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006262:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d103      	bne.n	8006272 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
        frequency = HAL_RCC_GetMSIKFreq();
 800626a:	f7ff f95f 	bl	800552c <HAL_RCC_GetMSIKFreq>
 800626e:	60f8      	str	r0, [r7, #12]
      break;
 8006270:	e0ca      	b.n	8006408 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
      else if (srcclk == RCC_LPTIM34CLKSOURCE_LSI)
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006278:	d116      	bne.n	80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800627a:	4b68      	ldr	r3, [pc, #416]	@ (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800627c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8006280:	f003 0302 	and.w	r3, r3, #2
 8006284:	2b02      	cmp	r3, #2
 8006286:	f040 80bf 	bne.w	8006408 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
          frequency = LSI_VALUE;
 800628a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800628e:	60fb      	str	r3, [r7, #12]
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8006290:	4b62      	ldr	r3, [pc, #392]	@ (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8006292:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8006296:	f003 0304 	and.w	r3, r3, #4
 800629a:	2b04      	cmp	r3, #4
 800629c:	f040 80b4 	bne.w	8006408 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
            frequency /= 128u;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	09db      	lsrs	r3, r3, #7
 80062a4:	60fb      	str	r3, [r7, #12]
      break;
 80062a6:	e0af      	b.n	8006408 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
      else if (srcclk == RCC_LPTIM34CLKSOURCE_HSI)
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062ae:	d10a      	bne.n	80062c6 <HAL_RCCEx_GetPeriphCLKFreq+0x852>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80062b0:	4b5a      	ldr	r3, [pc, #360]	@ (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80062b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062bc:	f040 80a4 	bne.w	8006408 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
          frequency = HSI_VALUE;
 80062c0:	4b57      	ldr	r3, [pc, #348]	@ (8006420 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 80062c2:	60fb      	str	r3, [r7, #12]
      break;
 80062c4:	e0a0      	b.n	8006408 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80062c6:	4b55      	ldr	r3, [pc, #340]	@ (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 80062c8:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80062cc:	f003 0302 	and.w	r3, r3, #2
 80062d0:	2b02      	cmp	r3, #2
 80062d2:	f040 8099 	bne.w	8006408 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
          frequency = LSE_VALUE;
 80062d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80062da:	60fb      	str	r3, [r7, #12]
      break;
 80062dc:	e094      	b.n	8006408 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
      srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80062de:	4b4f      	ldr	r3, [pc, #316]	@ (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 80062e0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80062e4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80062e8:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d103      	bne.n	80062f8 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        frequency = HAL_RCC_GetMSIKFreq();
 80062f0:	f7ff f91c 	bl	800552c <HAL_RCC_GetMSIKFreq>
 80062f4:	60f8      	str	r0, [r7, #12]
      break;
 80062f6:	e089      	b.n	800640c <HAL_RCCEx_GetPeriphCLKFreq+0x998>
      else if (srcclk == RCC_LPTIM1CLKSOURCE_LSI)
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062fe:	d114      	bne.n	800632a <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006300:	4b46      	ldr	r3, [pc, #280]	@ (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8006302:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8006306:	f003 0302 	and.w	r3, r3, #2
 800630a:	2b02      	cmp	r3, #2
 800630c:	d17e      	bne.n	800640c <HAL_RCCEx_GetPeriphCLKFreq+0x998>
          frequency = LSI_VALUE;
 800630e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006312:	60fb      	str	r3, [r7, #12]
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8006314:	4b41      	ldr	r3, [pc, #260]	@ (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8006316:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800631a:	f003 0304 	and.w	r3, r3, #4
 800631e:	2b04      	cmp	r3, #4
 8006320:	d174      	bne.n	800640c <HAL_RCCEx_GetPeriphCLKFreq+0x998>
            frequency /= 128u;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	09db      	lsrs	r3, r3, #7
 8006326:	60fb      	str	r3, [r7, #12]
      break;
 8006328:	e070      	b.n	800640c <HAL_RCCEx_GetPeriphCLKFreq+0x998>
      else if (srcclk == RCC_LPTIM1CLKSOURCE_HSI)
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006330:	d109      	bne.n	8006346 <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006332:	4b3a      	ldr	r3, [pc, #232]	@ (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800633a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800633e:	d165      	bne.n	800640c <HAL_RCCEx_GetPeriphCLKFreq+0x998>
          frequency = HSI_VALUE;
 8006340:	4b37      	ldr	r3, [pc, #220]	@ (8006420 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 8006342:	60fb      	str	r3, [r7, #12]
      break;
 8006344:	e062      	b.n	800640c <HAL_RCCEx_GetPeriphCLKFreq+0x998>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006346:	4b35      	ldr	r3, [pc, #212]	@ (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8006348:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800634c:	f003 0302 	and.w	r3, r3, #2
 8006350:	2b02      	cmp	r3, #2
 8006352:	d15b      	bne.n	800640c <HAL_RCCEx_GetPeriphCLKFreq+0x998>
          frequency = LSE_VALUE;
 8006354:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006358:	60fb      	str	r3, [r7, #12]
      break;
 800635a:	e057      	b.n	800640c <HAL_RCCEx_GetPeriphCLKFreq+0x998>
      srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800635c:	4b2f      	ldr	r3, [pc, #188]	@ (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800635e:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8006362:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006366:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_RTCCLKSOURCE_LSE)
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800636e:	d10a      	bne.n	8006386 <HAL_RCCEx_GetPeriphCLKFreq+0x912>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006370:	4b2a      	ldr	r3, [pc, #168]	@ (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8006372:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8006376:	f003 0302 	and.w	r3, r3, #2
 800637a:	2b02      	cmp	r3, #2
 800637c:	d148      	bne.n	8006410 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
          frequency = LSE_VALUE;
 800637e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006382:	60fb      	str	r3, [r7, #12]
      break;
 8006384:	e044      	b.n	8006410 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
      else if (srcclk == RCC_RTCCLKSOURCE_LSI)
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800638c:	d114      	bne.n	80063b8 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800638e:	4b23      	ldr	r3, [pc, #140]	@ (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8006390:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8006394:	f003 0302 	and.w	r3, r3, #2
 8006398:	2b02      	cmp	r3, #2
 800639a:	d139      	bne.n	8006410 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
          frequency = LSI_VALUE;
 800639c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80063a0:	60fb      	str	r3, [r7, #12]
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 80063a2:	4b1e      	ldr	r3, [pc, #120]	@ (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 80063a4:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80063a8:	f003 0304 	and.w	r3, r3, #4
 80063ac:	2b04      	cmp	r3, #4
 80063ae:	d12f      	bne.n	8006410 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
            frequency /= 128u;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	09db      	lsrs	r3, r3, #7
 80063b4:	60fb      	str	r3, [r7, #12]
      break;
 80063b6:	e02b      	b.n	8006410 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
      else if (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32)
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063be:	d127      	bne.n	8006410 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80063c0:	4b16      	ldr	r3, [pc, #88]	@ (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80063cc:	d120      	bne.n	8006410 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
          frequency = HSE_VALUE / 32u;
 80063ce:	4b15      	ldr	r3, [pc, #84]	@ (8006424 <HAL_RCCEx_GetPeriphCLKFreq+0x9b0>)
 80063d0:	60fb      	str	r3, [r7, #12]
      break;
 80063d2:	e01d      	b.n	8006410 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
      break;
 80063d4:	bf00      	nop
 80063d6:	e01c      	b.n	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 80063d8:	bf00      	nop
 80063da:	e01a      	b.n	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 80063dc:	bf00      	nop
 80063de:	e018      	b.n	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 80063e0:	bf00      	nop
 80063e2:	e016      	b.n	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 80063e4:	bf00      	nop
 80063e6:	e014      	b.n	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 80063e8:	bf00      	nop
 80063ea:	e012      	b.n	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 80063ec:	bf00      	nop
 80063ee:	e010      	b.n	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 80063f0:	bf00      	nop
 80063f2:	e00e      	b.n	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 80063f4:	bf00      	nop
 80063f6:	e00c      	b.n	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 80063f8:	bf00      	nop
 80063fa:	e00a      	b.n	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 80063fc:	bf00      	nop
 80063fe:	e008      	b.n	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8006400:	bf00      	nop
 8006402:	e006      	b.n	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8006404:	bf00      	nop
 8006406:	e004      	b.n	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8006408:	bf00      	nop
 800640a:	e002      	b.n	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 800640c:	bf00      	nop
 800640e:	e000      	b.n	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8006410:	bf00      	nop
  }

  return (frequency);
 8006412:	68fb      	ldr	r3, [r7, #12]
}
 8006414:	4618      	mov	r0, r3
 8006416:	3710      	adds	r7, #16
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}
 800641c:	40030c00 	.word	0x40030c00
 8006420:	00f42400 	.word	0x00f42400
 8006424:	0007a120 	.word	0x0007a120

08006428 <HAL_RCCEx_EpodBoosterClkConfig>:
  *         will be ignored
  * @note   When booster is not user, clock source shall be set to RCC_EPODBOOSTER_SOURCE_NONE to save power.
  * @retval None
  */
HAL_StatusTypeDef HAL_RCCEx_EpodBoosterClkConfig(uint32_t Source, uint32_t Divider)
{
 8006428:	b480      	push	{r7}
 800642a:	b085      	sub	sp, #20
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	6039      	str	r1, [r7, #0]

  assert_param(IS_RCC_EPODBOOSTER_SOURCE(Source));
  assert_param(IS_RCC_EPODBOOSTER_DIV(Divider));

  /* check if any source is selected and ready */
  tmpreg1 = RCC->CR;
 8006432:	4b1e      	ldr	r3, [pc, #120]	@ (80064ac <HAL_RCCEx_EpodBoosterClkConfig+0x84>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	60bb      	str	r3, [r7, #8]

  /* MSIS is selected as EPOD Booster clock source, check if MSIS is ready */
  if ((Source == RCC_EPODBOOSTER_SOURCE_MSIS) && ((tmpreg1 & RCC_CR_MSISRDY) == 0U))
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2b01      	cmp	r3, #1
 800643c:	d107      	bne.n	800644e <HAL_RCCEx_EpodBoosterClkConfig+0x26>
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	f003 0304 	and.w	r3, r3, #4
 8006444:	2b00      	cmp	r3, #0
 8006446:	d102      	bne.n	800644e <HAL_RCCEx_EpodBoosterClkConfig+0x26>
  {
    status = HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	73fb      	strb	r3, [r7, #15]
 800644c:	e027      	b.n	800649e <HAL_RCCEx_EpodBoosterClkConfig+0x76>
  }
  /* HSI is selected as EPOD Booster clock source, check if HSI is ready */
  else if ((Source == RCC_EPODBOOSTER_SOURCE_HSI) && ((tmpreg1 & RCC_CR_HSIRDY) == 0U))
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2b02      	cmp	r3, #2
 8006452:	d107      	bne.n	8006464 <HAL_RCCEx_EpodBoosterClkConfig+0x3c>
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800645a:	2b00      	cmp	r3, #0
 800645c:	d102      	bne.n	8006464 <HAL_RCCEx_EpodBoosterClkConfig+0x3c>
  {
    status = HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	73fb      	strb	r3, [r7, #15]
 8006462:	e01c      	b.n	800649e <HAL_RCCEx_EpodBoosterClkConfig+0x76>
  }
  /* HSE is selected as EPOD Booster clock source, check if HSE is ready */
  else if ((Source == RCC_EPODBOOSTER_SOURCE_HSE) && ((tmpreg1 & RCC_CR_HSERDY) == 0U))
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2b03      	cmp	r3, #3
 8006468:	d107      	bne.n	800647a <HAL_RCCEx_EpodBoosterClkConfig+0x52>
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006470:	2b00      	cmp	r3, #0
 8006472:	d102      	bne.n	800647a <HAL_RCCEx_EpodBoosterClkConfig+0x52>
  {
    status = HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	73fb      	strb	r3, [r7, #15]
 8006478:	e011      	b.n	800649e <HAL_RCCEx_EpodBoosterClkConfig+0x76>
  }
  else
  {
    /* Apply configuration */
    tmpreg1 = (RCC->CFGR4 & ~(RCC_CFGR4_BOOSTDIV | RCC_CFGR4_BOOSTSEL));
 800647a:	4b0c      	ldr	r3, [pc, #48]	@ (80064ac <HAL_RCCEx_EpodBoosterClkConfig+0x84>)
 800647c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800647e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006482:	f023 0303 	bic.w	r3, r3, #3
 8006486:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= (Divider | Source);
 8006488:	683a      	ldr	r2, [r7, #0]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	4313      	orrs	r3, r2
 800648e:	68ba      	ldr	r2, [r7, #8]
 8006490:	4313      	orrs	r3, r2
 8006492:	60bb      	str	r3, [r7, #8]
    RCC->CFGR4 = tmpreg1;
 8006494:	4a05      	ldr	r2, [pc, #20]	@ (80064ac <HAL_RCCEx_EpodBoosterClkConfig+0x84>)
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	6293      	str	r3, [r2, #40]	@ 0x28

    /* update status is ok */
    status = HAL_OK;
 800649a:	2300      	movs	r3, #0
 800649c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800649e:	7bfb      	ldrb	r3, [r7, #15]
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3714      	adds	r7, #20
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr
 80064ac:	40030c00 	.word	0x40030c00

080064b0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b084      	sub	sp, #16
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d101      	bne.n	80064c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e0dc      	b.n	800667c <HAL_SPI_Init+0x1cc>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a6d      	ldr	r2, [pc, #436]	@ (8006684 <HAL_SPI_Init+0x1d4>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d105      	bne.n	80064de <HAL_SPI_Init+0x2e>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	2b0f      	cmp	r3, #15
 80064d8:	d901      	bls.n	80064de <HAL_SPI_Init+0x2e>
  {
    return HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	e0ce      	b.n	800667c <HAL_SPI_Init+0x1cc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f001 f9b4 	bl	800784c <SPI_GetPacketSize>
 80064e4:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a66      	ldr	r2, [pc, #408]	@ (8006684 <HAL_SPI_Init+0x1d4>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d102      	bne.n	80064f6 <HAL_SPI_Init+0x46>
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2b08      	cmp	r3, #8
 80064f4:	d80c      	bhi.n	8006510 <HAL_SPI_Init+0x60>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80064fa:	4a63      	ldr	r2, [pc, #396]	@ (8006688 <HAL_SPI_Init+0x1d8>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d004      	beq.n	800650a <HAL_SPI_Init+0x5a>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a61      	ldr	r2, [pc, #388]	@ (800668c <HAL_SPI_Init+0x1dc>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d104      	bne.n	8006514 <HAL_SPI_Init+0x64>
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2b10      	cmp	r3, #16
 800650e:	d901      	bls.n	8006514 <HAL_SPI_Init+0x64>
  {
    return HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	e0b3      	b.n	800667c <HAL_SPI_Init+0x1cc>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800651a:	b2db      	uxtb	r3, r3
 800651c:	2b00      	cmp	r3, #0
 800651e:	d106      	bne.n	800652e <HAL_SPI_Init+0x7e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f7fb fb37 	bl	8001b9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2202      	movs	r2, #2
 8006532:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f022 0201 	bic.w	r2, r2, #1
 8006544:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8006550:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	699b      	ldr	r3, [r3, #24]
 8006556:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800655a:	d119      	bne.n	8006590 <HAL_SPI_Init+0xe0>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006564:	d103      	bne.n	800656e <HAL_SPI_Init+0xbe>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800656a:	2b00      	cmp	r3, #0
 800656c:	d008      	beq.n	8006580 <HAL_SPI_Init+0xd0>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006572:	2b00      	cmp	r3, #0
 8006574:	d10c      	bne.n	8006590 <HAL_SPI_Init+0xe0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800657a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800657e:	d107      	bne.n	8006590 <HAL_SPI_Init+0xe0>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800658e:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006598:	2b00      	cmp	r3, #0
 800659a:	d00f      	beq.n	80065bc <HAL_SPI_Init+0x10c>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	68db      	ldr	r3, [r3, #12]
 80065a0:	2b06      	cmp	r3, #6
 80065a2:	d90b      	bls.n	80065bc <HAL_SPI_Init+0x10c>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	430a      	orrs	r2, r1
 80065b8:	601a      	str	r2, [r3, #0]
 80065ba:	e007      	b.n	80065cc <HAL_SPI_Init+0x11c>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80065ca:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	69da      	ldr	r2, [r3, #28]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065d4:	431a      	orrs	r2, r3
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	431a      	orrs	r2, r3
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065de:	ea42 0103 	orr.w	r1, r2, r3
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	68da      	ldr	r2, [r3, #12]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	430a      	orrs	r2, r1
 80065ec:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065f6:	431a      	orrs	r2, r3
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065fc:	431a      	orrs	r2, r3
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	699b      	ldr	r3, [r3, #24]
 8006602:	431a      	orrs	r2, r3
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	691b      	ldr	r3, [r3, #16]
 8006608:	431a      	orrs	r2, r3
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	695b      	ldr	r3, [r3, #20]
 800660e:	431a      	orrs	r2, r3
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6a1b      	ldr	r3, [r3, #32]
 8006614:	431a      	orrs	r2, r3
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	431a      	orrs	r2, r3
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006620:	431a      	orrs	r2, r3
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	431a      	orrs	r2, r3
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800662c:	431a      	orrs	r2, r3
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006632:	431a      	orrs	r2, r3
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006638:	ea42 0103 	orr.w	r1, r2, r3
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	430a      	orrs	r2, r1
 8006646:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006650:	2b00      	cmp	r3, #0
 8006652:	d00a      	beq.n	800666a <HAL_SPI_Init+0x1ba>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	68db      	ldr	r3, [r3, #12]
 800665a:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	430a      	orrs	r2, r1
 8006668:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2200      	movs	r2, #0
 800666e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2201      	movs	r2, #1
 8006676:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 800667a:	2300      	movs	r3, #0
}
 800667c:	4618      	mov	r0, r3
 800667e:	3710      	adds	r7, #16
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}
 8006684:	40002000 	.word	0x40002000
 8006688:	40013000 	.word	0x40013000
 800668c:	40003800 	.word	0x40003800

08006690 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b088      	sub	sp, #32
 8006694:	af02      	add	r7, sp, #8
 8006696:	60f8      	str	r0, [r7, #12]
 8006698:	60b9      	str	r1, [r7, #8]
 800669a:	603b      	str	r3, [r7, #0]
 800669c:	4613      	mov	r3, r2
 800669e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	3320      	adds	r3, #32
 80066a6:	617b      	str	r3, [r7, #20]
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80066a8:	f7fb ffea 	bl	8002680 <HAL_GetTick>
 80066ac:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d001      	beq.n	80066be <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 80066ba:	2302      	movs	r3, #2
 80066bc:	e1e5      	b.n	8006a8a <HAL_SPI_Transmit+0x3fa>
  }

  if ((pData == NULL) || (Size == 0UL))
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d002      	beq.n	80066ca <HAL_SPI_Transmit+0x3a>
 80066c4:	88fb      	ldrh	r3, [r7, #6]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d101      	bne.n	80066ce <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 80066ca:	2301      	movs	r3, #1
 80066cc:	e1dd      	b.n	8006a8a <HAL_SPI_Transmit+0x3fa>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d101      	bne.n	80066dc <HAL_SPI_Transmit+0x4c>
 80066d8:	2302      	movs	r3, #2
 80066da:	e1d6      	b.n	8006a8a <HAL_SPI_Transmit+0x3fa>
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2201      	movs	r2, #1
 80066e0:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2203      	movs	r2, #3
 80066e8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	68ba      	ldr	r2, [r7, #8]
 80066f8:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	88fa      	ldrh	r2, [r7, #6]
 80066fe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	88fa      	ldrh	r2, [r7, #6]
 8006706:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2200      	movs	r2, #0
 800670e:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2200      	movs	r2, #0
 8006714:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2200      	movs	r2, #0
 800671c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2200      	movs	r2, #0
 8006724:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2200      	movs	r2, #0
 800672a:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8006734:	d108      	bne.n	8006748 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006744:	601a      	str	r2, [r3, #0]
 8006746:	e009      	b.n	800675c <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800675a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	0c1b      	lsrs	r3, r3, #16
 8006764:	041b      	lsls	r3, r3, #16
 8006766:	88f9      	ldrh	r1, [r7, #6]
 8006768:	68fa      	ldr	r2, [r7, #12]
 800676a:	6812      	ldr	r2, [r2, #0]
 800676c:	430b      	orrs	r3, r1
 800676e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f042 0201 	orr.w	r2, r2, #1
 800677e:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	69db      	ldr	r3, [r3, #28]
 8006786:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800678a:	2b00      	cmp	r3, #0
 800678c:	d10c      	bne.n	80067a8 <HAL_SPI_Transmit+0x118>
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006796:	d107      	bne.n	80067a8 <HAL_SPI_Transmit+0x118>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80067a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	2b0f      	cmp	r3, #15
 80067ae:	d951      	bls.n	8006854 <HAL_SPI_Transmit+0x1c4>
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a8a      	ldr	r2, [pc, #552]	@ (80069e0 <HAL_SPI_Transmit+0x350>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d045      	beq.n	8006846 <HAL_SPI_Transmit+0x1b6>
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a89      	ldr	r2, [pc, #548]	@ (80069e4 <HAL_SPI_Transmit+0x354>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d147      	bne.n	8006854 <HAL_SPI_Transmit+0x1c4>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80067c4:	e03f      	b.n	8006846 <HAL_SPI_Transmit+0x1b6>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	695b      	ldr	r3, [r3, #20]
 80067cc:	f003 0302 	and.w	r3, r3, #2
 80067d0:	2b02      	cmp	r3, #2
 80067d2:	d114      	bne.n	80067fe <HAL_SPI_Transmit+0x16e>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	6812      	ldr	r2, [r2, #0]
 80067de:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80067e4:	1d1a      	adds	r2, r3, #4
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	3b01      	subs	r3, #1
 80067f4:	b29a      	uxth	r2, r3
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80067fc:	e023      	b.n	8006846 <HAL_SPI_Transmit+0x1b6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067fe:	f7fb ff3f 	bl	8002680 <HAL_GetTick>
 8006802:	4602      	mov	r2, r0
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	1ad3      	subs	r3, r2, r3
 8006808:	683a      	ldr	r2, [r7, #0]
 800680a:	429a      	cmp	r2, r3
 800680c:	d803      	bhi.n	8006816 <HAL_SPI_Transmit+0x186>
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006814:	d102      	bne.n	800681c <HAL_SPI_Transmit+0x18c>
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d114      	bne.n	8006846 <HAL_SPI_Transmit+0x1b6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800681c:	68f8      	ldr	r0, [r7, #12]
 800681e:	f000 ff47 	bl	80076b0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006828:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2201      	movs	r2, #1
 8006836:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2200      	movs	r2, #0
 800683e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8006842:	2303      	movs	r3, #3
 8006844:	e121      	b.n	8006a8a <HAL_SPI_Transmit+0x3fa>
    while (hspi->TxXferCount > 0UL)
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800684c:	b29b      	uxth	r3, r3
 800684e:	2b00      	cmp	r3, #0
 8006850:	d1b9      	bne.n	80067c6 <HAL_SPI_Transmit+0x136>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8006852:	e0f4      	b.n	8006a3e <HAL_SPI_Transmit+0x3ae>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	2b07      	cmp	r3, #7
 800685a:	f240 80e9 	bls.w	8006a30 <HAL_SPI_Transmit+0x3a0>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800685e:	e05d      	b.n	800691c <HAL_SPI_Transmit+0x28c>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	695b      	ldr	r3, [r3, #20]
 8006866:	f003 0302 	and.w	r3, r3, #2
 800686a:	2b02      	cmp	r3, #2
 800686c:	d132      	bne.n	80068d4 <HAL_SPI_Transmit+0x244>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006874:	b29b      	uxth	r3, r3
 8006876:	2b01      	cmp	r3, #1
 8006878:	d918      	bls.n	80068ac <HAL_SPI_Transmit+0x21c>
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800687e:	2b00      	cmp	r3, #0
 8006880:	d014      	beq.n	80068ac <HAL_SPI_Transmit+0x21c>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	6812      	ldr	r2, [r2, #0]
 800688c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006892:	1d1a      	adds	r2, r3, #4
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800689e:	b29b      	uxth	r3, r3
 80068a0:	3b02      	subs	r3, #2
 80068a2:	b29a      	uxth	r2, r3
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80068aa:	e037      	b.n	800691c <HAL_SPI_Transmit+0x28c>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80068b0:	881a      	ldrh	r2, [r3, #0]
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80068ba:	1c9a      	adds	r2, r3, #2
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	3b01      	subs	r3, #1
 80068ca:	b29a      	uxth	r2, r3
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80068d2:	e023      	b.n	800691c <HAL_SPI_Transmit+0x28c>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80068d4:	f7fb fed4 	bl	8002680 <HAL_GetTick>
 80068d8:	4602      	mov	r2, r0
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	1ad3      	subs	r3, r2, r3
 80068de:	683a      	ldr	r2, [r7, #0]
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d803      	bhi.n	80068ec <HAL_SPI_Transmit+0x25c>
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ea:	d102      	bne.n	80068f2 <HAL_SPI_Transmit+0x262>
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d114      	bne.n	800691c <HAL_SPI_Transmit+0x28c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80068f2:	68f8      	ldr	r0, [r7, #12]
 80068f4:	f000 fedc 	bl	80076b0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80068fe:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2201      	movs	r2, #1
 800690c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2200      	movs	r2, #0
 8006914:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8006918:	2303      	movs	r3, #3
 800691a:	e0b6      	b.n	8006a8a <HAL_SPI_Transmit+0x3fa>
    while (hspi->TxXferCount > 0UL)
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006922:	b29b      	uxth	r3, r3
 8006924:	2b00      	cmp	r3, #0
 8006926:	d19b      	bne.n	8006860 <HAL_SPI_Transmit+0x1d0>
 8006928:	e089      	b.n	8006a3e <HAL_SPI_Transmit+0x3ae>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	695b      	ldr	r3, [r3, #20]
 8006930:	f003 0302 	and.w	r3, r3, #2
 8006934:	2b02      	cmp	r3, #2
 8006936:	d157      	bne.n	80069e8 <HAL_SPI_Transmit+0x358>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800693e:	b29b      	uxth	r3, r3
 8006940:	2b03      	cmp	r3, #3
 8006942:	d918      	bls.n	8006976 <HAL_SPI_Transmit+0x2e6>
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006948:	2b40      	cmp	r3, #64	@ 0x40
 800694a:	d914      	bls.n	8006976 <HAL_SPI_Transmit+0x2e6>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	6812      	ldr	r2, [r2, #0]
 8006956:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800695c:	1d1a      	adds	r2, r3, #4
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006968:	b29b      	uxth	r3, r3
 800696a:	3b04      	subs	r3, #4
 800696c:	b29a      	uxth	r2, r3
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006974:	e05c      	b.n	8006a30 <HAL_SPI_Transmit+0x3a0>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800697c:	b29b      	uxth	r3, r3
 800697e:	2b01      	cmp	r3, #1
 8006980:	d917      	bls.n	80069b2 <HAL_SPI_Transmit+0x322>
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006986:	2b00      	cmp	r3, #0
 8006988:	d013      	beq.n	80069b2 <HAL_SPI_Transmit+0x322>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800698e:	881a      	ldrh	r2, [r3, #0]
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006998:	1c9a      	adds	r2, r3, #2
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	3b02      	subs	r3, #2
 80069a8:	b29a      	uxth	r2, r3
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80069b0:	e03e      	b.n	8006a30 <HAL_SPI_Transmit+0x3a0>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	3320      	adds	r3, #32
 80069bc:	7812      	ldrb	r2, [r2, #0]
 80069be:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80069c4:	1c5a      	adds	r2, r3, #1
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	3b01      	subs	r3, #1
 80069d4:	b29a      	uxth	r2, r3
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80069dc:	e028      	b.n	8006a30 <HAL_SPI_Transmit+0x3a0>
 80069de:	bf00      	nop
 80069e0:	40013000 	.word	0x40013000
 80069e4:	40003800 	.word	0x40003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069e8:	f7fb fe4a 	bl	8002680 <HAL_GetTick>
 80069ec:	4602      	mov	r2, r0
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	1ad3      	subs	r3, r2, r3
 80069f2:	683a      	ldr	r2, [r7, #0]
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d803      	bhi.n	8006a00 <HAL_SPI_Transmit+0x370>
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069fe:	d102      	bne.n	8006a06 <HAL_SPI_Transmit+0x376>
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d114      	bne.n	8006a30 <HAL_SPI_Transmit+0x3a0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006a06:	68f8      	ldr	r0, [r7, #12]
 8006a08:	f000 fe52 	bl	80076b0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006a12:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2200      	movs	r2, #0
 8006a28:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8006a2c:	2303      	movs	r3, #3
 8006a2e:	e02c      	b.n	8006a8a <HAL_SPI_Transmit+0x3fa>
    while (hspi->TxXferCount > 0UL)
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	f47f af76 	bne.w	800692a <HAL_SPI_Transmit+0x29a>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	9300      	str	r3, [sp, #0]
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	2200      	movs	r2, #0
 8006a46:	2108      	movs	r1, #8
 8006a48:	68f8      	ldr	r0, [r7, #12]
 8006a4a:	f000 fed1 	bl	80077f0 <SPI_WaitOnFlagUntilTimeout>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d007      	beq.n	8006a64 <HAL_SPI_Transmit+0x3d4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006a5a:	f043 0220 	orr.w	r2, r3, #32
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006a64:	68f8      	ldr	r0, [r7, #12]
 8006a66:	f000 fe23 	bl	80076b0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d001      	beq.n	8006a88 <HAL_SPI_Transmit+0x3f8>
  {
    return HAL_ERROR;
 8006a84:	2301      	movs	r3, #1
 8006a86:	e000      	b.n	8006a8a <HAL_SPI_Transmit+0x3fa>
  }
  else
  {
    return HAL_OK;
 8006a88:	2300      	movs	r3, #0
  }
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3718      	adds	r7, #24
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}
 8006a92:	bf00      	nop

08006a94 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b088      	sub	sp, #32
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	60f8      	str	r0, [r7, #12]
 8006a9c:	60b9      	str	r1, [r7, #8]
 8006a9e:	603b      	str	r3, [r7, #0]
 8006aa0:	4613      	mov	r3, r2
 8006aa2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006aa8:	095b      	lsrs	r3, r3, #5
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	3301      	adds	r3, #1
 8006aae:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	3330      	adds	r3, #48	@ 0x30
 8006ab6:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ab8:	f7fb fde2 	bl	8002680 <HAL_GetTick>
 8006abc:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d001      	beq.n	8006ace <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8006aca:	2302      	movs	r3, #2
 8006acc:	e2aa      	b.n	8007024 <HAL_SPI_Receive+0x590>
  }

  if ((pData == NULL) || (Size == 0UL))
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d002      	beq.n	8006ada <HAL_SPI_Receive+0x46>
 8006ad4:	88fb      	ldrh	r3, [r7, #6]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d101      	bne.n	8006ade <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	e2a2      	b.n	8007024 <HAL_SPI_Receive+0x590>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d101      	bne.n	8006aec <HAL_SPI_Receive+0x58>
 8006ae8:	2302      	movs	r3, #2
 8006aea:	e29b      	b.n	8007024 <HAL_SPI_Receive+0x590>
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2201      	movs	r2, #1
 8006af0:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2204      	movs	r2, #4
 8006af8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	68ba      	ldr	r2, [r7, #8]
 8006b08:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = Size;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	88fa      	ldrh	r2, [r7, #6]
 8006b0e:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = Size;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	88fa      	ldrh	r2, [r7, #6]
 8006b16:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = (uint16_t) 0UL;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = (uint16_t) 0UL;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxISR       = NULL;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2200      	movs	r2, #0
 8006b34:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8006b44:	d108      	bne.n	8006b58 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	681a      	ldr	r2, [r3, #0]
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006b54:	601a      	str	r2, [r3, #0]
 8006b56:	e009      	b.n	8006b6c <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	68db      	ldr	r3, [r3, #12]
 8006b5e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8006b6a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	0c1b      	lsrs	r3, r3, #16
 8006b74:	041b      	lsls	r3, r3, #16
 8006b76:	88f9      	ldrh	r1, [r7, #6]
 8006b78:	68fa      	ldr	r2, [r7, #12]
 8006b7a:	6812      	ldr	r2, [r2, #0]
 8006b7c:	430b      	orrs	r3, r1
 8006b7e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	681a      	ldr	r2, [r3, #0]
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f042 0201 	orr.w	r2, r2, #1
 8006b8e:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	69db      	ldr	r3, [r3, #28]
 8006b96:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d10c      	bne.n	8006bb8 <HAL_SPI_Receive+0x124>
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006ba6:	d107      	bne.n	8006bb8 <HAL_SPI_Receive+0x124>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006bb6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	68db      	ldr	r3, [r3, #12]
 8006bbc:	2b0f      	cmp	r3, #15
 8006bbe:	f240 8090 	bls.w	8006ce2 <HAL_SPI_Receive+0x24e>
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a8b      	ldr	r2, [pc, #556]	@ (8006df4 <HAL_SPI_Receive+0x360>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	f000 8082 	beq.w	8006cd2 <HAL_SPI_Receive+0x23e>
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a89      	ldr	r2, [pc, #548]	@ (8006df8 <HAL_SPI_Receive+0x364>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	f040 8084 	bne.w	8006ce2 <HAL_SPI_Receive+0x24e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8006bda:	e07a      	b.n	8006cd2 <HAL_SPI_Receive+0x23e>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	695b      	ldr	r3, [r3, #20]
 8006be2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	695b      	ldr	r3, [r3, #20]
 8006bea:	f003 0301 	and.w	r3, r3, #1
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d114      	bne.n	8006c1c <HAL_SPI_Receive+0x188>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681a      	ldr	r2, [r3, #0]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006bfa:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006bfc:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c02:	1d1a      	adds	r2, r3, #4
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	3b01      	subs	r3, #1
 8006c12:	b29a      	uxth	r2, r3
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8006c1a:	e05a      	b.n	8006cd2 <HAL_SPI_Receive+0x23e>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	8bfa      	ldrh	r2, [r7, #30]
 8006c26:	429a      	cmp	r2, r3
 8006c28:	d919      	bls.n	8006c5e <HAL_SPI_Receive+0x1ca>
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d014      	beq.n	8006c5e <HAL_SPI_Receive+0x1ca>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c3c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006c3e:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c44:	1d1a      	adds	r2, r3, #4
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	3b01      	subs	r3, #1
 8006c54:	b29a      	uxth	r2, r3
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8006c5c:	e039      	b.n	8006cd2 <HAL_SPI_Receive+0x23e>
      }
      /* Check if transfer is locked because of a suspend */
      else if (HAL_IS_BIT_SET(temp_sr_reg, SPI_SR_SUSP))
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d010      	beq.n	8006c8a <HAL_SPI_Receive+0x1f6>
      {
        /* Verify suspend is triggered by hardware and not software */
        if (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART))
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c72:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c76:	d12c      	bne.n	8006cd2 <HAL_SPI_Receive+0x23e>
        {
          __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	699a      	ldr	r2, [r3, #24]
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006c86:	619a      	str	r2, [r3, #24]
 8006c88:	e023      	b.n	8006cd2 <HAL_SPI_Receive+0x23e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c8a:	f7fb fcf9 	bl	8002680 <HAL_GetTick>
 8006c8e:	4602      	mov	r2, r0
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	1ad3      	subs	r3, r2, r3
 8006c94:	683a      	ldr	r2, [r7, #0]
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d803      	bhi.n	8006ca2 <HAL_SPI_Receive+0x20e>
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ca0:	d102      	bne.n	8006ca8 <HAL_SPI_Receive+0x214>
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d114      	bne.n	8006cd2 <HAL_SPI_Receive+0x23e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006ca8:	68f8      	ldr	r0, [r7, #12]
 8006caa:	f000 fd01 	bl	80076b0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006cb4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8006cce:	2303      	movs	r3, #3
 8006cd0:	e1a8      	b.n	8007024 <HAL_SPI_Receive+0x590>
    while (hspi->RxXferCount > 0UL)
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	f47f af7e 	bne.w	8006bdc <HAL_SPI_Receive+0x148>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8006ce0:	e18d      	b.n	8006ffe <HAL_SPI_Receive+0x56a>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	68db      	ldr	r3, [r3, #12]
 8006ce6:	2b07      	cmp	r3, #7
 8006ce8:	f240 8182 	bls.w	8006ff0 <HAL_SPI_Receive+0x55c>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8006cec:	e0aa      	b.n	8006e44 <HAL_SPI_Receive+0x3b0>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	695b      	ldr	r3, [r3, #20]
 8006cf4:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	695b      	ldr	r3, [r3, #20]
 8006cfc:	f003 0301 	and.w	r3, r3, #1
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d114      	bne.n	8006d2e <HAL_SPI_Receive+0x29a>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d08:	69ba      	ldr	r2, [r7, #24]
 8006d0a:	8812      	ldrh	r2, [r2, #0]
 8006d0c:	b292      	uxth	r2, r2
 8006d0e:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d14:	1c9a      	adds	r2, r3, #2
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	3b01      	subs	r3, #1
 8006d24:	b29a      	uxth	r2, r3
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8006d2c:	e08a      	b.n	8006e44 <HAL_SPI_Receive+0x3b0>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	8bfa      	ldrh	r2, [r7, #30]
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d924      	bls.n	8006d86 <HAL_SPI_Receive+0x2f2>
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d01f      	beq.n	8006d86 <HAL_SPI_Receive+0x2f2>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d4a:	69ba      	ldr	r2, [r7, #24]
 8006d4c:	8812      	ldrh	r2, [r2, #0]
 8006d4e:	b292      	uxth	r2, r2
 8006d50:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d56:	1c9a      	adds	r2, r3, #2
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d60:	69ba      	ldr	r2, [r7, #24]
 8006d62:	8812      	ldrh	r2, [r2, #0]
 8006d64:	b292      	uxth	r2, r2
 8006d66:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d6c:	1c9a      	adds	r2, r3, #2
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount -= (uint16_t)2UL;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	3b02      	subs	r3, #2
 8006d7c:	b29a      	uxth	r2, r3
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8006d84:	e05e      	b.n	8006e44 <HAL_SPI_Receive+0x3b0>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d119      	bne.n	8006dc6 <HAL_SPI_Receive+0x332>
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d014      	beq.n	8006dc6 <HAL_SPI_Receive+0x332>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006da0:	69ba      	ldr	r2, [r7, #24]
 8006da2:	8812      	ldrh	r2, [r2, #0]
 8006da4:	b292      	uxth	r2, r2
 8006da6:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006dac:	1c9a      	adds	r2, r3, #2
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	3b01      	subs	r3, #1
 8006dbc:	b29a      	uxth	r2, r3
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8006dc4:	e03e      	b.n	8006e44 <HAL_SPI_Receive+0x3b0>
      }
      /* Check if transfer is locked because of a suspend */
      else if (HAL_IS_BIT_SET(temp_sr_reg, SPI_SR_SUSP))
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d015      	beq.n	8006dfc <HAL_SPI_Receive+0x368>
      {
        /* Verify suspend is triggered by hardware and not software */
        if (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART))
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006dda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006dde:	d131      	bne.n	8006e44 <HAL_SPI_Receive+0x3b0>
        {
          __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	699a      	ldr	r2, [r3, #24]
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006dee:	619a      	str	r2, [r3, #24]
 8006df0:	e028      	b.n	8006e44 <HAL_SPI_Receive+0x3b0>
 8006df2:	bf00      	nop
 8006df4:	40013000 	.word	0x40013000
 8006df8:	40003800 	.word	0x40003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006dfc:	f7fb fc40 	bl	8002680 <HAL_GetTick>
 8006e00:	4602      	mov	r2, r0
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	1ad3      	subs	r3, r2, r3
 8006e06:	683a      	ldr	r2, [r7, #0]
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d803      	bhi.n	8006e14 <HAL_SPI_Receive+0x380>
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e12:	d102      	bne.n	8006e1a <HAL_SPI_Receive+0x386>
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d114      	bne.n	8006e44 <HAL_SPI_Receive+0x3b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006e1a:	68f8      	ldr	r0, [r7, #12]
 8006e1c:	f000 fc48 	bl	80076b0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006e26:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2201      	movs	r2, #1
 8006e34:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8006e40:	2303      	movs	r3, #3
 8006e42:	e0ef      	b.n	8007024 <HAL_SPI_Receive+0x590>
    while (hspi->RxXferCount > 0UL)
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	f47f af4e 	bne.w	8006cee <HAL_SPI_Receive+0x25a>
 8006e52:	e0d4      	b.n	8006ffe <HAL_SPI_Receive+0x56a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	695b      	ldr	r3, [r3, #20]
 8006e5a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	695b      	ldr	r3, [r3, #20]
 8006e62:	f003 0301 	and.w	r3, r3, #1
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d117      	bne.n	8006e9a <HAL_SPI_Receive+0x406>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e76:	7812      	ldrb	r2, [r2, #0]
 8006e78:	b2d2      	uxtb	r2, r2
 8006e7a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e80:	1c5a      	adds	r2, r3, #1
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	3b01      	subs	r3, #1
 8006e90:	b29a      	uxth	r2, r3
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8006e98:	e0aa      	b.n	8006ff0 <HAL_SPI_Receive+0x55c>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	8bfa      	ldrh	r2, [r7, #30]
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d946      	bls.n	8006f36 <HAL_SPI_Receive+0x4a2>
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d041      	beq.n	8006f36 <HAL_SPI_Receive+0x4a2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ebe:	7812      	ldrb	r2, [r2, #0]
 8006ec0:	b2d2      	uxtb	r2, r2
 8006ec2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ec8:	1c5a      	adds	r2, r3, #1
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	66da      	str	r2, [r3, #108]	@ 0x6c
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006eda:	7812      	ldrb	r2, [r2, #0]
 8006edc:	b2d2      	uxtb	r2, r2
 8006ede:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ee4:	1c5a      	adds	r2, r3, #1
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	66da      	str	r2, [r3, #108]	@ 0x6c
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ef6:	7812      	ldrb	r2, [r2, #0]
 8006ef8:	b2d2      	uxtb	r2, r2
 8006efa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f00:	1c5a      	adds	r2, r3, #1
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	66da      	str	r2, [r3, #108]	@ 0x6c
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f12:	7812      	ldrb	r2, [r2, #0]
 8006f14:	b2d2      	uxtb	r2, r2
 8006f16:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f1c:	1c5a      	adds	r2, r3, #1
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount -= (uint16_t)4UL;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	3b04      	subs	r3, #4
 8006f2c:	b29a      	uxth	r2, r3
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8006f34:	e05c      	b.n	8006ff0 <HAL_SPI_Receive+0x55c>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	2b03      	cmp	r3, #3
 8006f40:	d81c      	bhi.n	8006f7c <HAL_SPI_Receive+0x4e8>
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d017      	beq.n	8006f7c <HAL_SPI_Receive+0x4e8>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f58:	7812      	ldrb	r2, [r2, #0]
 8006f5a:	b2d2      	uxtb	r2, r2
 8006f5c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f62:	1c5a      	adds	r2, r3, #1
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	3b01      	subs	r3, #1
 8006f72:	b29a      	uxth	r2, r3
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8006f7a:	e039      	b.n	8006ff0 <HAL_SPI_Receive+0x55c>
      }
      /* Check if transfer is locked because of a suspend */
      else if (HAL_IS_BIT_SET(temp_sr_reg, SPI_SR_SUSP))
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d010      	beq.n	8006fa8 <HAL_SPI_Receive+0x514>
      {
        /* Verify suspend is triggered by hardware and not software */
        if (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART))
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f94:	d12c      	bne.n	8006ff0 <HAL_SPI_Receive+0x55c>
        {
          __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	699a      	ldr	r2, [r3, #24]
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006fa4:	619a      	str	r2, [r3, #24]
 8006fa6:	e023      	b.n	8006ff0 <HAL_SPI_Receive+0x55c>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006fa8:	f7fb fb6a 	bl	8002680 <HAL_GetTick>
 8006fac:	4602      	mov	r2, r0
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	1ad3      	subs	r3, r2, r3
 8006fb2:	683a      	ldr	r2, [r7, #0]
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d803      	bhi.n	8006fc0 <HAL_SPI_Receive+0x52c>
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fbe:	d102      	bne.n	8006fc6 <HAL_SPI_Receive+0x532>
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d114      	bne.n	8006ff0 <HAL_SPI_Receive+0x55c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006fc6:	68f8      	ldr	r0, [r7, #12]
 8006fc8:	f000 fb72 	bl	80076b0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006fd2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2201      	movs	r2, #1
 8006fe0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8006fec:	2303      	movs	r3, #3
 8006fee:	e019      	b.n	8007024 <HAL_SPI_Receive+0x590>
    while (hspi->RxXferCount > 0UL)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	f47f af2b 	bne.w	8006e54 <HAL_SPI_Receive+0x3c0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006ffe:	68f8      	ldr	r0, [r7, #12]
 8007000:	f000 fb56 	bl	80076b0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2201      	movs	r2, #1
 8007008:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2200      	movs	r2, #0
 8007010:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800701a:	2b00      	cmp	r3, #0
 800701c:	d001      	beq.n	8007022 <HAL_SPI_Receive+0x58e>
  {
    return HAL_ERROR;
 800701e:	2301      	movs	r3, #1
 8007020:	e000      	b.n	8007024 <HAL_SPI_Receive+0x590>
  }
  else
  {
    return HAL_OK;
 8007022:	2300      	movs	r3, #0
  }
}
 8007024:	4618      	mov	r0, r3
 8007026:	3720      	adds	r7, #32
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}

0800702c <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b08e      	sub	sp, #56	@ 0x38
 8007030:	af02      	add	r7, sp, #8
 8007032:	60f8      	str	r0, [r7, #12]
 8007034:	60b9      	str	r1, [r7, #8]
 8007036:	607a      	str	r2, [r7, #4]
 8007038:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	3320      	adds	r3, #32
 8007040:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	3330      	adds	r3, #48	@ 0x30
 8007048:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800704e:	095b      	lsrs	r3, r3, #5
 8007050:	b29b      	uxth	r3, r3
 8007052:	3301      	adds	r3, #1
 8007054:	83fb      	strh	r3, [r7, #30]
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007056:	f7fb fb13 	bl	8002680 <HAL_GetTick>
 800705a:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 800705c:	887b      	ldrh	r3, [r7, #2]
 800705e:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 8007060:	887b      	ldrh	r3, [r7, #2]
 8007062:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800706a:	b2db      	uxtb	r3, r3
 800706c:	2b01      	cmp	r3, #1
 800706e:	d001      	beq.n	8007074 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 8007070:	2302      	movs	r3, #2
 8007072:	e318      	b.n	80076a6 <HAL_SPI_TransmitReceive+0x67a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d005      	beq.n	8007086 <HAL_SPI_TransmitReceive+0x5a>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d002      	beq.n	8007086 <HAL_SPI_TransmitReceive+0x5a>
 8007080:	887b      	ldrh	r3, [r7, #2]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d101      	bne.n	800708a <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 8007086:	2301      	movs	r3, #1
 8007088:	e30d      	b.n	80076a6 <HAL_SPI_TransmitReceive+0x67a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8007090:	2b01      	cmp	r3, #1
 8007092:	d101      	bne.n	8007098 <HAL_SPI_TransmitReceive+0x6c>
 8007094:	2302      	movs	r3, #2
 8007096:	e306      	b.n	80076a6 <HAL_SPI_TransmitReceive+0x67a>
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2201      	movs	r2, #1
 800709c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2205      	movs	r2, #5
 80070a4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2200      	movs	r2, #0
 80070ac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferCount = Size;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	887a      	ldrh	r2, [r7, #2]
 80070ba:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->RxXferSize  = Size;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	887a      	ldrh	r2, [r7, #2]
 80070c2:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	68ba      	ldr	r2, [r7, #8]
 80070ca:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferCount = Size;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	887a      	ldrh	r2, [r7, #2]
 80070d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferSize  = Size;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	887a      	ldrh	r2, [r7, #2]
 80070d8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2200      	movs	r2, #0
 80070e0:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2200      	movs	r2, #0
 80070e6:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	68da      	ldr	r2, [r3, #12]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 80070f6:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_FULL_INSTANCE(hspi->Instance))
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a76      	ldr	r2, [pc, #472]	@ (80072d8 <HAL_SPI_TransmitReceive+0x2ac>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d004      	beq.n	800710c <HAL_SPI_TransmitReceive+0xe0>
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a75      	ldr	r2, [pc, #468]	@ (80072dc <HAL_SPI_TransmitReceive+0x2b0>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d102      	bne.n	8007112 <HAL_SPI_TransmitReceive+0xe6>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800710c:	2310      	movs	r3, #16
 800710e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007110:	e001      	b.n	8007116 <HAL_SPI_TransmitReceive+0xea>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8007112:	2308      	movs	r3, #8
 8007114:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	0c1b      	lsrs	r3, r3, #16
 800711e:	041b      	lsls	r3, r3, #16
 8007120:	8879      	ldrh	r1, [r7, #2]
 8007122:	68fa      	ldr	r2, [r7, #12]
 8007124:	6812      	ldr	r2, [r2, #0]
 8007126:	430b      	orrs	r3, r1
 8007128:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f042 0201 	orr.w	r2, r2, #1
 8007138:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	69db      	ldr	r3, [r3, #28]
 8007140:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007144:	2b00      	cmp	r3, #0
 8007146:	d10c      	bne.n	8007162 <HAL_SPI_TransmitReceive+0x136>
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007150:	d107      	bne.n	8007162 <HAL_SPI_TransmitReceive+0x136>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	681a      	ldr	r2, [r3, #0]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007160:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	68db      	ldr	r3, [r3, #12]
 8007166:	2b0f      	cmp	r3, #15
 8007168:	f240 80ad 	bls.w	80072c6 <HAL_SPI_TransmitReceive+0x29a>
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a59      	ldr	r2, [pc, #356]	@ (80072d8 <HAL_SPI_TransmitReceive+0x2ac>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d005      	beq.n	8007182 <HAL_SPI_TransmitReceive+0x156>
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a58      	ldr	r2, [pc, #352]	@ (80072dc <HAL_SPI_TransmitReceive+0x2b0>)
 800717c:	4293      	cmp	r3, r2
 800717e:	f040 80a2 	bne.w	80072c6 <HAL_SPI_TransmitReceive+0x29a>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8007182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007184:	089b      	lsrs	r3, r3, #2
 8007186:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007188:	e094      	b.n	80072b4 <HAL_SPI_TransmitReceive+0x288>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	695b      	ldr	r3, [r3, #20]
 8007190:	f003 0302 	and.w	r3, r3, #2
 8007194:	2b02      	cmp	r3, #2
 8007196:	d120      	bne.n	80071da <HAL_SPI_TransmitReceive+0x1ae>
 8007198:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800719a:	2b00      	cmp	r3, #0
 800719c:	d01d      	beq.n	80071da <HAL_SPI_TransmitReceive+0x1ae>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800719e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80071a0:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80071a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071a4:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d217      	bcs.n	80071da <HAL_SPI_TransmitReceive+0x1ae>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	6812      	ldr	r2, [r2, #0]
 80071b4:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071ba:	1d1a      	adds	r2, r3, #4
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount --;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	3b01      	subs	r3, #1
 80071ca:	b29a      	uxth	r2, r3
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80071d8:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	695b      	ldr	r3, [r3, #20]
 80071e0:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80071e2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d065      	beq.n	80072b4 <HAL_SPI_TransmitReceive+0x288>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	695b      	ldr	r3, [r3, #20]
 80071ee:	f003 0301 	and.w	r3, r3, #1
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	d118      	bne.n	8007228 <HAL_SPI_TransmitReceive+0x1fc>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071fe:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007200:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007206:	1d1a      	adds	r2, r3, #4
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount--;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007212:	b29b      	uxth	r3, r3
 8007214:	3b01      	subs	r3, #1
 8007216:	b29a      	uxth	r2, r3
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007224:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007226:	e045      	b.n	80072b4 <HAL_SPI_TransmitReceive+0x288>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007228:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800722a:	8bfb      	ldrh	r3, [r7, #30]
 800722c:	429a      	cmp	r2, r3
 800722e:	d21d      	bcs.n	800726c <HAL_SPI_TransmitReceive+0x240>
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007236:	2b00      	cmp	r3, #0
 8007238:	d018      	beq.n	800726c <HAL_SPI_TransmitReceive+0x240>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007242:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007244:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800724a:	1d1a      	adds	r2, r3, #4
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount--;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007256:	b29b      	uxth	r3, r3
 8007258:	3b01      	subs	r3, #1
 800725a:	b29a      	uxth	r2, r3
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007268:	853b      	strh	r3, [r7, #40]	@ 0x28
 800726a:	e023      	b.n	80072b4 <HAL_SPI_TransmitReceive+0x288>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800726c:	f7fb fa08 	bl	8002680 <HAL_GetTick>
 8007270:	4602      	mov	r2, r0
 8007272:	69bb      	ldr	r3, [r7, #24]
 8007274:	1ad3      	subs	r3, r2, r3
 8007276:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007278:	429a      	cmp	r2, r3
 800727a:	d803      	bhi.n	8007284 <HAL_SPI_TransmitReceive+0x258>
 800727c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800727e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007282:	d102      	bne.n	800728a <HAL_SPI_TransmitReceive+0x25e>
 8007284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007286:	2b00      	cmp	r3, #0
 8007288:	d114      	bne.n	80072b4 <HAL_SPI_TransmitReceive+0x288>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800728a:	68f8      	ldr	r0, [r7, #12]
 800728c:	f000 fa10 	bl	80076b0 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007296:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
            hspi->State = HAL_SPI_STATE_READY;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2201      	movs	r2, #1
 80072a4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2200      	movs	r2, #0
 80072ac:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

            return HAL_TIMEOUT;
 80072b0:	2303      	movs	r3, #3
 80072b2:	e1f8      	b.n	80076a6 <HAL_SPI_TransmitReceive+0x67a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80072b4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	f47f af67 	bne.w	800718a <HAL_SPI_TransmitReceive+0x15e>
 80072bc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80072be:	2b00      	cmp	r3, #0
 80072c0:	f47f af63 	bne.w	800718a <HAL_SPI_TransmitReceive+0x15e>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80072c4:	e1c9      	b.n	800765a <HAL_SPI_TransmitReceive+0x62e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	68db      	ldr	r3, [r3, #12]
 80072ca:	2b07      	cmp	r3, #7
 80072cc:	f240 81bd 	bls.w	800764a <HAL_SPI_TransmitReceive+0x61e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 80072d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072d2:	085b      	lsrs	r3, r3, #1
 80072d4:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80072d6:	e0c4      	b.n	8007462 <HAL_SPI_TransmitReceive+0x436>
 80072d8:	40013000 	.word	0x40013000
 80072dc:	40003800 	.word	0x40003800
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	695b      	ldr	r3, [r3, #20]
 80072e6:	f003 0302 	and.w	r3, r3, #2
 80072ea:	2b02      	cmp	r3, #2
 80072ec:	d11f      	bne.n	800732e <HAL_SPI_TransmitReceive+0x302>
 80072ee:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d01c      	beq.n	800732e <HAL_SPI_TransmitReceive+0x302>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 80072f4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80072f6:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80072f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072fa:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d216      	bcs.n	800732e <HAL_SPI_TransmitReceive+0x302>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007304:	881a      	ldrh	r2, [r3, #0]
 8007306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007308:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800730e:	1c9a      	adds	r2, r3, #2
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800731a:	b29b      	uxth	r3, r3
 800731c:	3b01      	subs	r3, #1
 800731e:	b29a      	uxth	r2, r3
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800732c:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	695b      	ldr	r3, [r3, #20]
 8007334:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8007336:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007338:	2b00      	cmp	r3, #0
 800733a:	f000 8092 	beq.w	8007462 <HAL_SPI_TransmitReceive+0x436>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	695b      	ldr	r3, [r3, #20]
 8007344:	f003 0301 	and.w	r3, r3, #1
 8007348:	2b01      	cmp	r3, #1
 800734a:	d118      	bne.n	800737e <HAL_SPI_TransmitReceive+0x352>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007350:	6a3a      	ldr	r2, [r7, #32]
 8007352:	8812      	ldrh	r2, [r2, #0]
 8007354:	b292      	uxth	r2, r2
 8007356:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800735c:	1c9a      	adds	r2, r3, #2
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount--;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007368:	b29b      	uxth	r3, r3
 800736a:	3b01      	subs	r3, #1
 800736c:	b29a      	uxth	r2, r3
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800737a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800737c:	e071      	b.n	8007462 <HAL_SPI_TransmitReceive+0x436>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800737e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8007380:	8bfb      	ldrh	r3, [r7, #30]
 8007382:	429a      	cmp	r2, r3
 8007384:	d228      	bcs.n	80073d8 <HAL_SPI_TransmitReceive+0x3ac>
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800738c:	2b00      	cmp	r3, #0
 800738e:	d023      	beq.n	80073d8 <HAL_SPI_TransmitReceive+0x3ac>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007394:	6a3a      	ldr	r2, [r7, #32]
 8007396:	8812      	ldrh	r2, [r2, #0]
 8007398:	b292      	uxth	r2, r2
 800739a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80073a0:	1c9a      	adds	r2, r3, #2
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	66da      	str	r2, [r3, #108]	@ 0x6c
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80073aa:	6a3a      	ldr	r2, [r7, #32]
 80073ac:	8812      	ldrh	r2, [r2, #0]
 80073ae:	b292      	uxth	r2, r2
 80073b0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80073b6:	1c9a      	adds	r2, r3, #2
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount -= (uint16_t)2UL;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	3b02      	subs	r3, #2
 80073c6:	b29a      	uxth	r2, r3
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80073d4:	853b      	strh	r3, [r7, #40]	@ 0x28
 80073d6:	e044      	b.n	8007462 <HAL_SPI_TransmitReceive+0x436>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 80073d8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80073da:	2b01      	cmp	r3, #1
 80073dc:	d11d      	bne.n	800741a <HAL_SPI_TransmitReceive+0x3ee>
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d018      	beq.n	800741a <HAL_SPI_TransmitReceive+0x3ee>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80073ec:	6a3a      	ldr	r2, [r7, #32]
 80073ee:	8812      	ldrh	r2, [r2, #0]
 80073f0:	b292      	uxth	r2, r2
 80073f2:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80073f8:	1c9a      	adds	r2, r3, #2
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount--;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007404:	b29b      	uxth	r3, r3
 8007406:	3b01      	subs	r3, #1
 8007408:	b29a      	uxth	r2, r3
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007416:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007418:	e023      	b.n	8007462 <HAL_SPI_TransmitReceive+0x436>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800741a:	f7fb f931 	bl	8002680 <HAL_GetTick>
 800741e:	4602      	mov	r2, r0
 8007420:	69bb      	ldr	r3, [r7, #24]
 8007422:	1ad3      	subs	r3, r2, r3
 8007424:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007426:	429a      	cmp	r2, r3
 8007428:	d803      	bhi.n	8007432 <HAL_SPI_TransmitReceive+0x406>
 800742a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800742c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007430:	d102      	bne.n	8007438 <HAL_SPI_TransmitReceive+0x40c>
 8007432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007434:	2b00      	cmp	r3, #0
 8007436:	d114      	bne.n	8007462 <HAL_SPI_TransmitReceive+0x436>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8007438:	68f8      	ldr	r0, [r7, #12]
 800743a:	f000 f939 	bl	80076b0 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007444:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
            hspi->State = HAL_SPI_STATE_READY;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2201      	movs	r2, #1
 8007452:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2200      	movs	r2, #0
 800745a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

            return HAL_TIMEOUT;
 800745e:	2303      	movs	r3, #3
 8007460:	e121      	b.n	80076a6 <HAL_SPI_TransmitReceive+0x67a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007462:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007464:	2b00      	cmp	r3, #0
 8007466:	f47f af3b 	bne.w	80072e0 <HAL_SPI_TransmitReceive+0x2b4>
 800746a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800746c:	2b00      	cmp	r3, #0
 800746e:	f47f af37 	bne.w	80072e0 <HAL_SPI_TransmitReceive+0x2b4>
 8007472:	e0f2      	b.n	800765a <HAL_SPI_TransmitReceive+0x62e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	695b      	ldr	r3, [r3, #20]
 800747a:	f003 0302 	and.w	r3, r3, #2
 800747e:	2b02      	cmp	r3, #2
 8007480:	d121      	bne.n	80074c6 <HAL_SPI_TransmitReceive+0x49a>
 8007482:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007484:	2b00      	cmp	r3, #0
 8007486:	d01e      	beq.n	80074c6 <HAL_SPI_TransmitReceive+0x49a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8007488:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800748a:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800748c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800748e:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8007490:	429a      	cmp	r2, r3
 8007492:	d218      	bcs.n	80074c6 <HAL_SPI_TransmitReceive+0x49a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	3320      	adds	r3, #32
 800749e:	7812      	ldrb	r2, [r2, #0]
 80074a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80074a6:	1c5a      	adds	r2, r3, #1
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80074b2:	b29b      	uxth	r3, r3
 80074b4:	3b01      	subs	r3, #1
 80074b6:	b29a      	uxth	r2, r3
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80074c4:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	695b      	ldr	r3, [r3, #20]
 80074cc:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80074ce:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	f000 80ba 	beq.w	800764a <HAL_SPI_TransmitReceive+0x61e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	695b      	ldr	r3, [r3, #20]
 80074dc:	f003 0301 	and.w	r3, r3, #1
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d11b      	bne.n	800751c <HAL_SPI_TransmitReceive+0x4f0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80074f0:	7812      	ldrb	r2, [r2, #0]
 80074f2:	b2d2      	uxtb	r2, r2
 80074f4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80074fa:	1c5a      	adds	r2, r3, #1
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount--;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007506:	b29b      	uxth	r3, r3
 8007508:	3b01      	subs	r3, #1
 800750a:	b29a      	uxth	r2, r3
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007518:	853b      	strh	r3, [r7, #40]	@ 0x28
 800751a:	e096      	b.n	800764a <HAL_SPI_TransmitReceive+0x61e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800751c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800751e:	8bfb      	ldrh	r3, [r7, #30]
 8007520:	429a      	cmp	r2, r3
 8007522:	d24a      	bcs.n	80075ba <HAL_SPI_TransmitReceive+0x58e>
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800752a:	2b00      	cmp	r3, #0
 800752c:	d045      	beq.n	80075ba <HAL_SPI_TransmitReceive+0x58e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800753a:	7812      	ldrb	r2, [r2, #0]
 800753c:	b2d2      	uxtb	r2, r2
 800753e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007544:	1c5a      	adds	r2, r3, #1
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	66da      	str	r2, [r3, #108]	@ 0x6c
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007556:	7812      	ldrb	r2, [r2, #0]
 8007558:	b2d2      	uxtb	r2, r2
 800755a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007560:	1c5a      	adds	r2, r3, #1
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	66da      	str	r2, [r3, #108]	@ 0x6c
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007572:	7812      	ldrb	r2, [r2, #0]
 8007574:	b2d2      	uxtb	r2, r2
 8007576:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800757c:	1c5a      	adds	r2, r3, #1
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	66da      	str	r2, [r3, #108]	@ 0x6c
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800758e:	7812      	ldrb	r2, [r2, #0]
 8007590:	b2d2      	uxtb	r2, r2
 8007592:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007598:	1c5a      	adds	r2, r3, #1
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount -= (uint16_t)4UL;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	3b04      	subs	r3, #4
 80075a8:	b29a      	uxth	r2, r3
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80075b6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80075b8:	e047      	b.n	800764a <HAL_SPI_TransmitReceive+0x61e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 80075ba:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80075bc:	2b03      	cmp	r3, #3
 80075be:	d820      	bhi.n	8007602 <HAL_SPI_TransmitReceive+0x5d6>
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d01b      	beq.n	8007602 <HAL_SPI_TransmitReceive+0x5d6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80075d6:	7812      	ldrb	r2, [r2, #0]
 80075d8:	b2d2      	uxtb	r2, r2
 80075da:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80075e0:	1c5a      	adds	r2, r3, #1
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount--;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	3b01      	subs	r3, #1
 80075f0:	b29a      	uxth	r2, r3
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80075fe:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007600:	e023      	b.n	800764a <HAL_SPI_TransmitReceive+0x61e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007602:	f7fb f83d 	bl	8002680 <HAL_GetTick>
 8007606:	4602      	mov	r2, r0
 8007608:	69bb      	ldr	r3, [r7, #24]
 800760a:	1ad3      	subs	r3, r2, r3
 800760c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800760e:	429a      	cmp	r2, r3
 8007610:	d803      	bhi.n	800761a <HAL_SPI_TransmitReceive+0x5ee>
 8007612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007618:	d102      	bne.n	8007620 <HAL_SPI_TransmitReceive+0x5f4>
 800761a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800761c:	2b00      	cmp	r3, #0
 800761e:	d114      	bne.n	800764a <HAL_SPI_TransmitReceive+0x61e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8007620:	68f8      	ldr	r0, [r7, #12]
 8007622:	f000 f845 	bl	80076b0 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800762c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
            hspi->State = HAL_SPI_STATE_READY;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2201      	movs	r2, #1
 800763a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2200      	movs	r2, #0
 8007642:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

            return HAL_TIMEOUT;
 8007646:	2303      	movs	r3, #3
 8007648:	e02d      	b.n	80076a6 <HAL_SPI_TransmitReceive+0x67a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800764a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800764c:	2b00      	cmp	r3, #0
 800764e:	f47f af11 	bne.w	8007474 <HAL_SPI_TransmitReceive+0x448>
 8007652:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007654:	2b00      	cmp	r3, #0
 8007656:	f47f af0d 	bne.w	8007474 <HAL_SPI_TransmitReceive+0x448>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800765a:	69bb      	ldr	r3, [r7, #24]
 800765c:	9300      	str	r3, [sp, #0]
 800765e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007660:	2200      	movs	r2, #0
 8007662:	2108      	movs	r1, #8
 8007664:	68f8      	ldr	r0, [r7, #12]
 8007666:	f000 f8c3 	bl	80077f0 <SPI_WaitOnFlagUntilTimeout>
 800766a:	4603      	mov	r3, r0
 800766c:	2b00      	cmp	r3, #0
 800766e:	d007      	beq.n	8007680 <HAL_SPI_TransmitReceive+0x654>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007676:	f043 0220 	orr.w	r2, r3, #32
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007680:	68f8      	ldr	r0, [r7, #12]
 8007682:	f000 f815 	bl	80076b0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2201      	movs	r2, #1
 800768a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2200      	movs	r2, #0
 8007692:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800769c:	2b00      	cmp	r3, #0
 800769e:	d001      	beq.n	80076a4 <HAL_SPI_TransmitReceive+0x678>
  {
    return HAL_ERROR;
 80076a0:	2301      	movs	r3, #1
 80076a2:	e000      	b.n	80076a6 <HAL_SPI_TransmitReceive+0x67a>
  }
  else
  {
    return HAL_OK;
 80076a4:	2300      	movs	r3, #0
  }
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3730      	adds	r7, #48	@ 0x30
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
 80076ae:	bf00      	nop

080076b0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b085      	sub	sp, #20
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	695b      	ldr	r3, [r3, #20]
 80076be:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	699a      	ldr	r2, [r3, #24]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f042 0208 	orr.w	r2, r2, #8
 80076ce:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	699a      	ldr	r2, [r3, #24]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f042 0210 	orr.w	r2, r2, #16
 80076de:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f022 0201 	bic.w	r2, r2, #1
 80076ee:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	691b      	ldr	r3, [r3, #16]
 80076f6:	687a      	ldr	r2, [r7, #4]
 80076f8:	6812      	ldr	r2, [r2, #0]
 80076fa:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 80076fe:	f023 0303 	bic.w	r3, r3, #3
 8007702:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	689a      	ldr	r2, [r3, #8]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8007712:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800771a:	b2db      	uxtb	r3, r3
 800771c:	2b04      	cmp	r3, #4
 800771e:	d014      	beq.n	800774a <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	f003 0320 	and.w	r3, r3, #32
 8007726:	2b00      	cmp	r3, #0
 8007728:	d00f      	beq.n	800774a <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007730:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	699a      	ldr	r2, [r3, #24]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f042 0220 	orr.w	r2, r2, #32
 8007748:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007750:	b2db      	uxtb	r3, r3
 8007752:	2b03      	cmp	r3, #3
 8007754:	d014      	beq.n	8007780 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800775c:	2b00      	cmp	r3, #0
 800775e:	d00f      	beq.n	8007780 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007766:	f043 0204 	orr.w	r2, r3, #4
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	699a      	ldr	r2, [r3, #24]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800777e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007786:	2b00      	cmp	r3, #0
 8007788:	d00f      	beq.n	80077aa <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007790:	f043 0201 	orr.w	r2, r3, #1
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	699a      	ldr	r2, [r3, #24]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80077a8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d00f      	beq.n	80077d4 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80077ba:	f043 0208 	orr.w	r2, r3, #8
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	699a      	ldr	r2, [r3, #24]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80077d2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2200      	movs	r2, #0
 80077d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2200      	movs	r2, #0
 80077e0:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 80077e4:	bf00      	nop
 80077e6:	3714      	adds	r7, #20
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr

080077f0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b084      	sub	sp, #16
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	60f8      	str	r0, [r7, #12]
 80077f8:	60b9      	str	r1, [r7, #8]
 80077fa:	603b      	str	r3, [r7, #0]
 80077fc:	4613      	mov	r3, r2
 80077fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007800:	e010      	b.n	8007824 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007802:	f7fa ff3d 	bl	8002680 <HAL_GetTick>
 8007806:	4602      	mov	r2, r0
 8007808:	69bb      	ldr	r3, [r7, #24]
 800780a:	1ad3      	subs	r3, r2, r3
 800780c:	683a      	ldr	r2, [r7, #0]
 800780e:	429a      	cmp	r2, r3
 8007810:	d803      	bhi.n	800781a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007818:	d102      	bne.n	8007820 <SPI_WaitOnFlagUntilTimeout+0x30>
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d101      	bne.n	8007824 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8007820:	2303      	movs	r3, #3
 8007822:	e00f      	b.n	8007844 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	695a      	ldr	r2, [r3, #20]
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	4013      	ands	r3, r2
 800782e:	68ba      	ldr	r2, [r7, #8]
 8007830:	429a      	cmp	r2, r3
 8007832:	bf0c      	ite	eq
 8007834:	2301      	moveq	r3, #1
 8007836:	2300      	movne	r3, #0
 8007838:	b2db      	uxtb	r3, r3
 800783a:	461a      	mov	r2, r3
 800783c:	79fb      	ldrb	r3, [r7, #7]
 800783e:	429a      	cmp	r2, r3
 8007840:	d0df      	beq.n	8007802 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8007842:	2300      	movs	r3, #0
}
 8007844:	4618      	mov	r0, r3
 8007846:	3710      	adds	r7, #16
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}

0800784c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800784c:	b480      	push	{r7}
 800784e:	b085      	sub	sp, #20
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007858:	095b      	lsrs	r3, r3, #5
 800785a:	3301      	adds	r3, #1
 800785c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	68db      	ldr	r3, [r3, #12]
 8007862:	3301      	adds	r3, #1
 8007864:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	3307      	adds	r3, #7
 800786a:	08db      	lsrs	r3, r3, #3
 800786c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	68fa      	ldr	r2, [r7, #12]
 8007872:	fb02 f303 	mul.w	r3, r2, r3
}
 8007876:	4618      	mov	r0, r3
 8007878:	3714      	adds	r7, #20
 800787a:	46bd      	mov	sp, r7
 800787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007880:	4770      	bx	lr

08007882 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 8007882:	b480      	push	{r7}
 8007884:	b083      	sub	sp, #12
 8007886:	af00      	add	r7, sp, #0
 8007888:	6078      	str	r0, [r7, #4]
 800788a:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007892:	b2db      	uxtb	r3, r3
 8007894:	2b01      	cmp	r3, #1
 8007896:	d12e      	bne.n	80078f6 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800789e:	2b01      	cmp	r3, #1
 80078a0:	d101      	bne.n	80078a6 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 80078a2:	2302      	movs	r3, #2
 80078a4:	e028      	b.n	80078f8 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2201      	movs	r2, #1
 80078aa:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2202      	movs	r2, #2
 80078b2:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f022 0201 	bic.w	r2, r2, #1
 80078c4:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80078d2:	ea42 0103 	orr.w	r1, r2, r3
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	689a      	ldr	r2, [r3, #8]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	430a      	orrs	r2, r1
 80078e0:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2201      	movs	r2, #1
 80078e6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2200      	movs	r2, #0
 80078ee:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80078f2:	2300      	movs	r3, #0
 80078f4:	e000      	b.n	80078f8 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 80078f6:	2301      	movs	r3, #1
  }
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	370c      	adds	r7, #12
 80078fc:	46bd      	mov	sp, r7
 80078fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007902:	4770      	bx	lr

08007904 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b082      	sub	sp, #8
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d101      	bne.n	8007916 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007912:	2301      	movs	r3, #1
 8007914:	e049      	b.n	80079aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800791c:	b2db      	uxtb	r3, r3
 800791e:	2b00      	cmp	r3, #0
 8007920:	d106      	bne.n	8007930 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2200      	movs	r2, #0
 8007926:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f7fa fa22 	bl	8001d74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2202      	movs	r2, #2
 8007934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681a      	ldr	r2, [r3, #0]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	3304      	adds	r3, #4
 8007940:	4619      	mov	r1, r3
 8007942:	4610      	mov	r0, r2
 8007944:	f000 fa92 	bl	8007e6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2201      	movs	r2, #1
 800794c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2201      	movs	r2, #1
 8007954:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2201      	movs	r2, #1
 800795c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2201      	movs	r2, #1
 8007964:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2201      	movs	r2, #1
 800796c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2201      	movs	r2, #1
 8007974:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2201      	movs	r2, #1
 800797c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2201      	movs	r2, #1
 8007984:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2201      	movs	r2, #1
 800798c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2201      	movs	r2, #1
 8007994:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2201      	movs	r2, #1
 800799c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2201      	movs	r2, #1
 80079a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80079a8:	2300      	movs	r3, #0
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3708      	adds	r7, #8
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}

080079b2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80079b2:	b580      	push	{r7, lr}
 80079b4:	b082      	sub	sp, #8
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d101      	bne.n	80079c4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80079c0:	2301      	movs	r3, #1
 80079c2:	e049      	b.n	8007a58 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80079ca:	b2db      	uxtb	r3, r3
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d106      	bne.n	80079de <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2200      	movs	r2, #0
 80079d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f000 f841 	bl	8007a60 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2202      	movs	r2, #2
 80079e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681a      	ldr	r2, [r3, #0]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	3304      	adds	r3, #4
 80079ee:	4619      	mov	r1, r3
 80079f0:	4610      	mov	r0, r2
 80079f2:	f000 fa3b 	bl	8007e6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2201      	movs	r2, #1
 80079fa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2201      	movs	r2, #1
 8007a02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2201      	movs	r2, #1
 8007a0a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2201      	movs	r2, #1
 8007a12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2201      	movs	r2, #1
 8007a1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2201      	movs	r2, #1
 8007a22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2201      	movs	r2, #1
 8007a2a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2201      	movs	r2, #1
 8007a32:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2201      	movs	r2, #1
 8007a3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2201      	movs	r2, #1
 8007a42:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2201      	movs	r2, #1
 8007a4a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2201      	movs	r2, #1
 8007a52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007a56:	2300      	movs	r3, #0
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3708      	adds	r7, #8
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}

08007a60 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b083      	sub	sp, #12
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007a68:	bf00      	nop
 8007a6a:	370c      	adds	r7, #12
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr

08007a74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b086      	sub	sp, #24
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	60f8      	str	r0, [r7, #12]
 8007a7c:	60b9      	str	r1, [r7, #8]
 8007a7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a80:	2300      	movs	r3, #0
 8007a82:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	d101      	bne.n	8007a92 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007a8e:	2302      	movs	r3, #2
 8007a90:	e0ff      	b.n	8007c92 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2201      	movs	r2, #1
 8007a96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2b14      	cmp	r3, #20
 8007a9e:	f200 80f0 	bhi.w	8007c82 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007aa2:	a201      	add	r2, pc, #4	@ (adr r2, 8007aa8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aa8:	08007afd 	.word	0x08007afd
 8007aac:	08007c83 	.word	0x08007c83
 8007ab0:	08007c83 	.word	0x08007c83
 8007ab4:	08007c83 	.word	0x08007c83
 8007ab8:	08007b3d 	.word	0x08007b3d
 8007abc:	08007c83 	.word	0x08007c83
 8007ac0:	08007c83 	.word	0x08007c83
 8007ac4:	08007c83 	.word	0x08007c83
 8007ac8:	08007b7f 	.word	0x08007b7f
 8007acc:	08007c83 	.word	0x08007c83
 8007ad0:	08007c83 	.word	0x08007c83
 8007ad4:	08007c83 	.word	0x08007c83
 8007ad8:	08007bbf 	.word	0x08007bbf
 8007adc:	08007c83 	.word	0x08007c83
 8007ae0:	08007c83 	.word	0x08007c83
 8007ae4:	08007c83 	.word	0x08007c83
 8007ae8:	08007c01 	.word	0x08007c01
 8007aec:	08007c83 	.word	0x08007c83
 8007af0:	08007c83 	.word	0x08007c83
 8007af4:	08007c83 	.word	0x08007c83
 8007af8:	08007c41 	.word	0x08007c41
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	68b9      	ldr	r1, [r7, #8]
 8007b02:	4618      	mov	r0, r3
 8007b04:	f000 fa3a 	bl	8007f7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	699a      	ldr	r2, [r3, #24]
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f042 0208 	orr.w	r2, r2, #8
 8007b16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	699a      	ldr	r2, [r3, #24]
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f022 0204 	bic.w	r2, r2, #4
 8007b26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	6999      	ldr	r1, [r3, #24]
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	691a      	ldr	r2, [r3, #16]
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	430a      	orrs	r2, r1
 8007b38:	619a      	str	r2, [r3, #24]
      break;
 8007b3a:	e0a5      	b.n	8007c88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	68b9      	ldr	r1, [r7, #8]
 8007b42:	4618      	mov	r0, r3
 8007b44:	f000 faa0 	bl	8008088 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	699a      	ldr	r2, [r3, #24]
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007b56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	699a      	ldr	r2, [r3, #24]
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007b66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	6999      	ldr	r1, [r3, #24]
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	691b      	ldr	r3, [r3, #16]
 8007b72:	021a      	lsls	r2, r3, #8
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	430a      	orrs	r2, r1
 8007b7a:	619a      	str	r2, [r3, #24]
      break;
 8007b7c:	e084      	b.n	8007c88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	68b9      	ldr	r1, [r7, #8]
 8007b84:	4618      	mov	r0, r3
 8007b86:	f000 faff 	bl	8008188 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	69da      	ldr	r2, [r3, #28]
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f042 0208 	orr.w	r2, r2, #8
 8007b98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	69da      	ldr	r2, [r3, #28]
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f022 0204 	bic.w	r2, r2, #4
 8007ba8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	69d9      	ldr	r1, [r3, #28]
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	691a      	ldr	r2, [r3, #16]
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	430a      	orrs	r2, r1
 8007bba:	61da      	str	r2, [r3, #28]
      break;
 8007bbc:	e064      	b.n	8007c88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	68b9      	ldr	r1, [r7, #8]
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f000 fb5d 	bl	8008284 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	69da      	ldr	r2, [r3, #28]
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007bd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	69da      	ldr	r2, [r3, #28]
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007be8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	69d9      	ldr	r1, [r3, #28]
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	691b      	ldr	r3, [r3, #16]
 8007bf4:	021a      	lsls	r2, r3, #8
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	430a      	orrs	r2, r1
 8007bfc:	61da      	str	r2, [r3, #28]
      break;
 8007bfe:	e043      	b.n	8007c88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	68b9      	ldr	r1, [r7, #8]
 8007c06:	4618      	mov	r0, r3
 8007c08:	f000 fbbc 	bl	8008384 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f042 0208 	orr.w	r2, r2, #8
 8007c1a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f022 0204 	bic.w	r2, r2, #4
 8007c2a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	691a      	ldr	r2, [r3, #16]
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	430a      	orrs	r2, r1
 8007c3c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007c3e:	e023      	b.n	8007c88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	68b9      	ldr	r1, [r7, #8]
 8007c46:	4618      	mov	r0, r3
 8007c48:	f000 fbfa 	bl	8008440 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007c5a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007c6a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	691b      	ldr	r3, [r3, #16]
 8007c76:	021a      	lsls	r2, r3, #8
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	430a      	orrs	r2, r1
 8007c7e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007c80:	e002      	b.n	8007c88 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007c82:	2301      	movs	r3, #1
 8007c84:	75fb      	strb	r3, [r7, #23]
      break;
 8007c86:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007c90:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3718      	adds	r7, #24
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}
 8007c9a:	bf00      	nop

08007c9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b084      	sub	sp, #16
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d101      	bne.n	8007cb8 <HAL_TIM_ConfigClockSource+0x1c>
 8007cb4:	2302      	movs	r3, #2
 8007cb6:	e0ce      	b.n	8007e56 <HAL_TIM_ConfigClockSource+0x1ba>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2202      	movs	r2, #2
 8007cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	689b      	ldr	r3, [r3, #8]
 8007cce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8007cd6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007cda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007ce2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	68ba      	ldr	r2, [r7, #8]
 8007cea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a5b      	ldr	r2, [pc, #364]	@ (8007e60 <HAL_TIM_ConfigClockSource+0x1c4>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	f000 8099 	beq.w	8007e2a <HAL_TIM_ConfigClockSource+0x18e>
 8007cf8:	4a59      	ldr	r2, [pc, #356]	@ (8007e60 <HAL_TIM_ConfigClockSource+0x1c4>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	f200 809e 	bhi.w	8007e3c <HAL_TIM_ConfigClockSource+0x1a0>
 8007d00:	4a58      	ldr	r2, [pc, #352]	@ (8007e64 <HAL_TIM_ConfigClockSource+0x1c8>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	f000 8091 	beq.w	8007e2a <HAL_TIM_ConfigClockSource+0x18e>
 8007d08:	4a56      	ldr	r2, [pc, #344]	@ (8007e64 <HAL_TIM_ConfigClockSource+0x1c8>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	f200 8096 	bhi.w	8007e3c <HAL_TIM_ConfigClockSource+0x1a0>
 8007d10:	4a55      	ldr	r2, [pc, #340]	@ (8007e68 <HAL_TIM_ConfigClockSource+0x1cc>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	f000 8089 	beq.w	8007e2a <HAL_TIM_ConfigClockSource+0x18e>
 8007d18:	4a53      	ldr	r2, [pc, #332]	@ (8007e68 <HAL_TIM_ConfigClockSource+0x1cc>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	f200 808e 	bhi.w	8007e3c <HAL_TIM_ConfigClockSource+0x1a0>
 8007d20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d24:	d03e      	beq.n	8007da4 <HAL_TIM_ConfigClockSource+0x108>
 8007d26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d2a:	f200 8087 	bhi.w	8007e3c <HAL_TIM_ConfigClockSource+0x1a0>
 8007d2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d32:	f000 8086 	beq.w	8007e42 <HAL_TIM_ConfigClockSource+0x1a6>
 8007d36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d3a:	d87f      	bhi.n	8007e3c <HAL_TIM_ConfigClockSource+0x1a0>
 8007d3c:	2b70      	cmp	r3, #112	@ 0x70
 8007d3e:	d01a      	beq.n	8007d76 <HAL_TIM_ConfigClockSource+0xda>
 8007d40:	2b70      	cmp	r3, #112	@ 0x70
 8007d42:	d87b      	bhi.n	8007e3c <HAL_TIM_ConfigClockSource+0x1a0>
 8007d44:	2b60      	cmp	r3, #96	@ 0x60
 8007d46:	d050      	beq.n	8007dea <HAL_TIM_ConfigClockSource+0x14e>
 8007d48:	2b60      	cmp	r3, #96	@ 0x60
 8007d4a:	d877      	bhi.n	8007e3c <HAL_TIM_ConfigClockSource+0x1a0>
 8007d4c:	2b50      	cmp	r3, #80	@ 0x50
 8007d4e:	d03c      	beq.n	8007dca <HAL_TIM_ConfigClockSource+0x12e>
 8007d50:	2b50      	cmp	r3, #80	@ 0x50
 8007d52:	d873      	bhi.n	8007e3c <HAL_TIM_ConfigClockSource+0x1a0>
 8007d54:	2b40      	cmp	r3, #64	@ 0x40
 8007d56:	d058      	beq.n	8007e0a <HAL_TIM_ConfigClockSource+0x16e>
 8007d58:	2b40      	cmp	r3, #64	@ 0x40
 8007d5a:	d86f      	bhi.n	8007e3c <HAL_TIM_ConfigClockSource+0x1a0>
 8007d5c:	2b30      	cmp	r3, #48	@ 0x30
 8007d5e:	d064      	beq.n	8007e2a <HAL_TIM_ConfigClockSource+0x18e>
 8007d60:	2b30      	cmp	r3, #48	@ 0x30
 8007d62:	d86b      	bhi.n	8007e3c <HAL_TIM_ConfigClockSource+0x1a0>
 8007d64:	2b20      	cmp	r3, #32
 8007d66:	d060      	beq.n	8007e2a <HAL_TIM_ConfigClockSource+0x18e>
 8007d68:	2b20      	cmp	r3, #32
 8007d6a:	d867      	bhi.n	8007e3c <HAL_TIM_ConfigClockSource+0x1a0>
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d05c      	beq.n	8007e2a <HAL_TIM_ConfigClockSource+0x18e>
 8007d70:	2b10      	cmp	r3, #16
 8007d72:	d05a      	beq.n	8007e2a <HAL_TIM_ConfigClockSource+0x18e>
 8007d74:	e062      	b.n	8007e3c <HAL_TIM_ConfigClockSource+0x1a0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007d86:	f000 fc37 	bl	80085f8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	689b      	ldr	r3, [r3, #8]
 8007d90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007d98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	68ba      	ldr	r2, [r7, #8]
 8007da0:	609a      	str	r2, [r3, #8]
      break;
 8007da2:	e04f      	b.n	8007e44 <HAL_TIM_ConfigClockSource+0x1a8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007db4:	f000 fc20 	bl	80085f8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	689a      	ldr	r2, [r3, #8]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007dc6:	609a      	str	r2, [r3, #8]
      break;
 8007dc8:	e03c      	b.n	8007e44 <HAL_TIM_ConfigClockSource+0x1a8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	f000 fb92 	bl	8008500 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	2150      	movs	r1, #80	@ 0x50
 8007de2:	4618      	mov	r0, r3
 8007de4:	f000 fbeb 	bl	80085be <TIM_ITRx_SetConfig>
      break;
 8007de8:	e02c      	b.n	8007e44 <HAL_TIM_ConfigClockSource+0x1a8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007df6:	461a      	mov	r2, r3
 8007df8:	f000 fbb1 	bl	800855e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	2160      	movs	r1, #96	@ 0x60
 8007e02:	4618      	mov	r0, r3
 8007e04:	f000 fbdb 	bl	80085be <TIM_ITRx_SetConfig>
      break;
 8007e08:	e01c      	b.n	8007e44 <HAL_TIM_ConfigClockSource+0x1a8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e16:	461a      	mov	r2, r3
 8007e18:	f000 fb72 	bl	8008500 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	2140      	movs	r1, #64	@ 0x40
 8007e22:	4618      	mov	r0, r3
 8007e24:	f000 fbcb 	bl	80085be <TIM_ITRx_SetConfig>
      break;
 8007e28:	e00c      	b.n	8007e44 <HAL_TIM_ConfigClockSource+0x1a8>
#endif /* TIM12 */
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681a      	ldr	r2, [r3, #0]
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4619      	mov	r1, r3
 8007e34:	4610      	mov	r0, r2
 8007e36:	f000 fbc2 	bl	80085be <TIM_ITRx_SetConfig>
      break;
 8007e3a:	e003      	b.n	8007e44 <HAL_TIM_ConfigClockSource+0x1a8>
    }

    default:
      status = HAL_ERROR;
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	73fb      	strb	r3, [r7, #15]
      break;
 8007e40:	e000      	b.n	8007e44 <HAL_TIM_ConfigClockSource+0x1a8>
      break;
 8007e42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2201      	movs	r2, #1
 8007e48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3710      	adds	r7, #16
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}
 8007e5e:	bf00      	nop
 8007e60:	00100040 	.word	0x00100040
 8007e64:	00100030 	.word	0x00100030
 8007e68:	00100020 	.word	0x00100020

08007e6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b085      	sub	sp, #20
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	4a39      	ldr	r2, [pc, #228]	@ (8007f64 <TIM_Base_SetConfig+0xf8>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d00b      	beq.n	8007e9c <TIM_Base_SetConfig+0x30>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e8a:	d007      	beq.n	8007e9c <TIM_Base_SetConfig+0x30>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	4a36      	ldr	r2, [pc, #216]	@ (8007f68 <TIM_Base_SetConfig+0xfc>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d003      	beq.n	8007e9c <TIM_Base_SetConfig+0x30>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	4a35      	ldr	r2, [pc, #212]	@ (8007f6c <TIM_Base_SetConfig+0x100>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d108      	bne.n	8007eae <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ea2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	68fa      	ldr	r2, [r7, #12]
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	4a2c      	ldr	r2, [pc, #176]	@ (8007f64 <TIM_Base_SetConfig+0xf8>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d017      	beq.n	8007ee6 <TIM_Base_SetConfig+0x7a>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ebc:	d013      	beq.n	8007ee6 <TIM_Base_SetConfig+0x7a>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	4a29      	ldr	r2, [pc, #164]	@ (8007f68 <TIM_Base_SetConfig+0xfc>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d00f      	beq.n	8007ee6 <TIM_Base_SetConfig+0x7a>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	4a28      	ldr	r2, [pc, #160]	@ (8007f6c <TIM_Base_SetConfig+0x100>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d00b      	beq.n	8007ee6 <TIM_Base_SetConfig+0x7a>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	4a27      	ldr	r2, [pc, #156]	@ (8007f70 <TIM_Base_SetConfig+0x104>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d007      	beq.n	8007ee6 <TIM_Base_SetConfig+0x7a>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	4a26      	ldr	r2, [pc, #152]	@ (8007f74 <TIM_Base_SetConfig+0x108>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d003      	beq.n	8007ee6 <TIM_Base_SetConfig+0x7a>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	4a25      	ldr	r2, [pc, #148]	@ (8007f78 <TIM_Base_SetConfig+0x10c>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d108      	bne.n	8007ef8 <TIM_Base_SetConfig+0x8c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007eec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	68db      	ldr	r3, [r3, #12]
 8007ef2:	68fa      	ldr	r2, [r7, #12]
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	695b      	ldr	r3, [r3, #20]
 8007f02:	4313      	orrs	r3, r2
 8007f04:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	689a      	ldr	r2, [r3, #8]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	681a      	ldr	r2, [r3, #0]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	4a12      	ldr	r2, [pc, #72]	@ (8007f64 <TIM_Base_SetConfig+0xf8>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d00b      	beq.n	8007f36 <TIM_Base_SetConfig+0xca>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	4a13      	ldr	r2, [pc, #76]	@ (8007f70 <TIM_Base_SetConfig+0x104>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d007      	beq.n	8007f36 <TIM_Base_SetConfig+0xca>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	4a12      	ldr	r2, [pc, #72]	@ (8007f74 <TIM_Base_SetConfig+0x108>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d003      	beq.n	8007f36 <TIM_Base_SetConfig+0xca>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	4a11      	ldr	r2, [pc, #68]	@ (8007f78 <TIM_Base_SetConfig+0x10c>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d103      	bne.n	8007f3e <TIM_Base_SetConfig+0xd2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	691a      	ldr	r2, [r3, #16]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f043 0204 	orr.w	r2, r3, #4
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	68fa      	ldr	r2, [r7, #12]
 8007f54:	601a      	str	r2, [r3, #0]
}
 8007f56:	bf00      	nop
 8007f58:	3714      	adds	r7, #20
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f60:	4770      	bx	lr
 8007f62:	bf00      	nop
 8007f64:	40012c00 	.word	0x40012c00
 8007f68:	40000400 	.word	0x40000400
 8007f6c:	40000800 	.word	0x40000800
 8007f70:	40014000 	.word	0x40014000
 8007f74:	40014400 	.word	0x40014400
 8007f78:	40014800 	.word	0x40014800

08007f7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b087      	sub	sp, #28
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6a1b      	ldr	r3, [r3, #32]
 8007f8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6a1b      	ldr	r3, [r3, #32]
 8007f90:	f023 0201 	bic.w	r2, r3, #1
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	699b      	ldr	r3, [r3, #24]
 8007fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007faa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f023 0303 	bic.w	r3, r3, #3
 8007fb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	68fa      	ldr	r2, [r7, #12]
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	f023 0302 	bic.w	r3, r3, #2
 8007fc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	689b      	ldr	r3, [r3, #8]
 8007fce:	697a      	ldr	r2, [r7, #20]
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	4a28      	ldr	r2, [pc, #160]	@ (8008078 <TIM_OC1_SetConfig+0xfc>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d00b      	beq.n	8007ff4 <TIM_OC1_SetConfig+0x78>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	4a27      	ldr	r2, [pc, #156]	@ (800807c <TIM_OC1_SetConfig+0x100>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d007      	beq.n	8007ff4 <TIM_OC1_SetConfig+0x78>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	4a26      	ldr	r2, [pc, #152]	@ (8008080 <TIM_OC1_SetConfig+0x104>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d003      	beq.n	8007ff4 <TIM_OC1_SetConfig+0x78>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	4a25      	ldr	r2, [pc, #148]	@ (8008084 <TIM_OC1_SetConfig+0x108>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d10c      	bne.n	800800e <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	f023 0308 	bic.w	r3, r3, #8
 8007ffa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	68db      	ldr	r3, [r3, #12]
 8008000:	697a      	ldr	r2, [r7, #20]
 8008002:	4313      	orrs	r3, r2
 8008004:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	f023 0304 	bic.w	r3, r3, #4
 800800c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	4a19      	ldr	r2, [pc, #100]	@ (8008078 <TIM_OC1_SetConfig+0xfc>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d00b      	beq.n	800802e <TIM_OC1_SetConfig+0xb2>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	4a18      	ldr	r2, [pc, #96]	@ (800807c <TIM_OC1_SetConfig+0x100>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d007      	beq.n	800802e <TIM_OC1_SetConfig+0xb2>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	4a17      	ldr	r2, [pc, #92]	@ (8008080 <TIM_OC1_SetConfig+0x104>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d003      	beq.n	800802e <TIM_OC1_SetConfig+0xb2>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	4a16      	ldr	r2, [pc, #88]	@ (8008084 <TIM_OC1_SetConfig+0x108>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d111      	bne.n	8008052 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008034:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800803c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	695b      	ldr	r3, [r3, #20]
 8008042:	693a      	ldr	r2, [r7, #16]
 8008044:	4313      	orrs	r3, r2
 8008046:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	699b      	ldr	r3, [r3, #24]
 800804c:	693a      	ldr	r2, [r7, #16]
 800804e:	4313      	orrs	r3, r2
 8008050:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	693a      	ldr	r2, [r7, #16]
 8008056:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	68fa      	ldr	r2, [r7, #12]
 800805c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	685a      	ldr	r2, [r3, #4]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	697a      	ldr	r2, [r7, #20]
 800806a:	621a      	str	r2, [r3, #32]
}
 800806c:	bf00      	nop
 800806e:	371c      	adds	r7, #28
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr
 8008078:	40012c00 	.word	0x40012c00
 800807c:	40014000 	.word	0x40014000
 8008080:	40014400 	.word	0x40014400
 8008084:	40014800 	.word	0x40014800

08008088 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008088:	b480      	push	{r7}
 800808a:	b087      	sub	sp, #28
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
 8008090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6a1b      	ldr	r3, [r3, #32]
 8008096:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6a1b      	ldr	r3, [r3, #32]
 800809c:	f023 0210 	bic.w	r2, r3, #16
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	699b      	ldr	r3, [r3, #24]
 80080ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80080b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80080ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80080c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	021b      	lsls	r3, r3, #8
 80080ca:	68fa      	ldr	r2, [r7, #12]
 80080cc:	4313      	orrs	r3, r2
 80080ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	f023 0320 	bic.w	r3, r3, #32
 80080d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	689b      	ldr	r3, [r3, #8]
 80080dc:	011b      	lsls	r3, r3, #4
 80080de:	697a      	ldr	r2, [r7, #20]
 80080e0:	4313      	orrs	r3, r2
 80080e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	4a24      	ldr	r2, [pc, #144]	@ (8008178 <TIM_OC2_SetConfig+0xf0>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d10d      	bne.n	8008108 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80080f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	68db      	ldr	r3, [r3, #12]
 80080f8:	011b      	lsls	r3, r3, #4
 80080fa:	697a      	ldr	r2, [r7, #20]
 80080fc:	4313      	orrs	r3, r2
 80080fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008106:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	4a1b      	ldr	r2, [pc, #108]	@ (8008178 <TIM_OC2_SetConfig+0xf0>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d00b      	beq.n	8008128 <TIM_OC2_SetConfig+0xa0>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	4a1a      	ldr	r2, [pc, #104]	@ (800817c <TIM_OC2_SetConfig+0xf4>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d007      	beq.n	8008128 <TIM_OC2_SetConfig+0xa0>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	4a19      	ldr	r2, [pc, #100]	@ (8008180 <TIM_OC2_SetConfig+0xf8>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d003      	beq.n	8008128 <TIM_OC2_SetConfig+0xa0>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	4a18      	ldr	r2, [pc, #96]	@ (8008184 <TIM_OC2_SetConfig+0xfc>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d113      	bne.n	8008150 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800812e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008136:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	695b      	ldr	r3, [r3, #20]
 800813c:	009b      	lsls	r3, r3, #2
 800813e:	693a      	ldr	r2, [r7, #16]
 8008140:	4313      	orrs	r3, r2
 8008142:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	699b      	ldr	r3, [r3, #24]
 8008148:	009b      	lsls	r3, r3, #2
 800814a:	693a      	ldr	r2, [r7, #16]
 800814c:	4313      	orrs	r3, r2
 800814e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	693a      	ldr	r2, [r7, #16]
 8008154:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	68fa      	ldr	r2, [r7, #12]
 800815a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	685a      	ldr	r2, [r3, #4]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	697a      	ldr	r2, [r7, #20]
 8008168:	621a      	str	r2, [r3, #32]
}
 800816a:	bf00      	nop
 800816c:	371c      	adds	r7, #28
 800816e:	46bd      	mov	sp, r7
 8008170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008174:	4770      	bx	lr
 8008176:	bf00      	nop
 8008178:	40012c00 	.word	0x40012c00
 800817c:	40014000 	.word	0x40014000
 8008180:	40014400 	.word	0x40014400
 8008184:	40014800 	.word	0x40014800

08008188 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008188:	b480      	push	{r7}
 800818a:	b087      	sub	sp, #28
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6a1b      	ldr	r3, [r3, #32]
 8008196:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6a1b      	ldr	r3, [r3, #32]
 800819c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	69db      	ldr	r3, [r3, #28]
 80081ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80081b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f023 0303 	bic.w	r3, r3, #3
 80081c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	68fa      	ldr	r2, [r7, #12]
 80081ca:	4313      	orrs	r3, r2
 80081cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80081d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	689b      	ldr	r3, [r3, #8]
 80081da:	021b      	lsls	r3, r3, #8
 80081dc:	697a      	ldr	r2, [r7, #20]
 80081de:	4313      	orrs	r3, r2
 80081e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	4a23      	ldr	r2, [pc, #140]	@ (8008274 <TIM_OC3_SetConfig+0xec>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d10d      	bne.n	8008206 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80081f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	68db      	ldr	r3, [r3, #12]
 80081f6:	021b      	lsls	r3, r3, #8
 80081f8:	697a      	ldr	r2, [r7, #20]
 80081fa:	4313      	orrs	r3, r2
 80081fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008204:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	4a1a      	ldr	r2, [pc, #104]	@ (8008274 <TIM_OC3_SetConfig+0xec>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d00b      	beq.n	8008226 <TIM_OC3_SetConfig+0x9e>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	4a19      	ldr	r2, [pc, #100]	@ (8008278 <TIM_OC3_SetConfig+0xf0>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d007      	beq.n	8008226 <TIM_OC3_SetConfig+0x9e>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	4a18      	ldr	r2, [pc, #96]	@ (800827c <TIM_OC3_SetConfig+0xf4>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d003      	beq.n	8008226 <TIM_OC3_SetConfig+0x9e>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	4a17      	ldr	r2, [pc, #92]	@ (8008280 <TIM_OC3_SetConfig+0xf8>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d113      	bne.n	800824e <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008226:	693b      	ldr	r3, [r7, #16]
 8008228:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800822c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008234:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	695b      	ldr	r3, [r3, #20]
 800823a:	011b      	lsls	r3, r3, #4
 800823c:	693a      	ldr	r2, [r7, #16]
 800823e:	4313      	orrs	r3, r2
 8008240:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	699b      	ldr	r3, [r3, #24]
 8008246:	011b      	lsls	r3, r3, #4
 8008248:	693a      	ldr	r2, [r7, #16]
 800824a:	4313      	orrs	r3, r2
 800824c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	693a      	ldr	r2, [r7, #16]
 8008252:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	68fa      	ldr	r2, [r7, #12]
 8008258:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	685a      	ldr	r2, [r3, #4]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	697a      	ldr	r2, [r7, #20]
 8008266:	621a      	str	r2, [r3, #32]
}
 8008268:	bf00      	nop
 800826a:	371c      	adds	r7, #28
 800826c:	46bd      	mov	sp, r7
 800826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008272:	4770      	bx	lr
 8008274:	40012c00 	.word	0x40012c00
 8008278:	40014000 	.word	0x40014000
 800827c:	40014400 	.word	0x40014400
 8008280:	40014800 	.word	0x40014800

08008284 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008284:	b480      	push	{r7}
 8008286:	b087      	sub	sp, #28
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6a1b      	ldr	r3, [r3, #32]
 8008292:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6a1b      	ldr	r3, [r3, #32]
 8008298:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	685b      	ldr	r3, [r3, #4]
 80082a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	69db      	ldr	r3, [r3, #28]
 80082aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80082b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80082b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80082be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	021b      	lsls	r3, r3, #8
 80082c6:	68fa      	ldr	r2, [r7, #12]
 80082c8:	4313      	orrs	r3, r2
 80082ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80082d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	689b      	ldr	r3, [r3, #8]
 80082d8:	031b      	lsls	r3, r3, #12
 80082da:	697a      	ldr	r2, [r7, #20]
 80082dc:	4313      	orrs	r3, r2
 80082de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	4a24      	ldr	r2, [pc, #144]	@ (8008374 <TIM_OC4_SetConfig+0xf0>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d10d      	bne.n	8008304 <TIM_OC4_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80082ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	68db      	ldr	r3, [r3, #12]
 80082f4:	031b      	lsls	r3, r3, #12
 80082f6:	697a      	ldr	r2, [r7, #20]
 80082f8:	4313      	orrs	r3, r2
 80082fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008302:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	4a1b      	ldr	r2, [pc, #108]	@ (8008374 <TIM_OC4_SetConfig+0xf0>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d00b      	beq.n	8008324 <TIM_OC4_SetConfig+0xa0>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	4a1a      	ldr	r2, [pc, #104]	@ (8008378 <TIM_OC4_SetConfig+0xf4>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d007      	beq.n	8008324 <TIM_OC4_SetConfig+0xa0>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	4a19      	ldr	r2, [pc, #100]	@ (800837c <TIM_OC4_SetConfig+0xf8>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d003      	beq.n	8008324 <TIM_OC4_SetConfig+0xa0>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	4a18      	ldr	r2, [pc, #96]	@ (8008380 <TIM_OC4_SetConfig+0xfc>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d113      	bne.n	800834c <TIM_OC4_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800832a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800832c:	693b      	ldr	r3, [r7, #16]
 800832e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008332:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	695b      	ldr	r3, [r3, #20]
 8008338:	019b      	lsls	r3, r3, #6
 800833a:	693a      	ldr	r2, [r7, #16]
 800833c:	4313      	orrs	r3, r2
 800833e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	699b      	ldr	r3, [r3, #24]
 8008344:	019b      	lsls	r3, r3, #6
 8008346:	693a      	ldr	r2, [r7, #16]
 8008348:	4313      	orrs	r3, r2
 800834a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	693a      	ldr	r2, [r7, #16]
 8008350:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	68fa      	ldr	r2, [r7, #12]
 8008356:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	685a      	ldr	r2, [r3, #4]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	697a      	ldr	r2, [r7, #20]
 8008364:	621a      	str	r2, [r3, #32]
}
 8008366:	bf00      	nop
 8008368:	371c      	adds	r7, #28
 800836a:	46bd      	mov	sp, r7
 800836c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008370:	4770      	bx	lr
 8008372:	bf00      	nop
 8008374:	40012c00 	.word	0x40012c00
 8008378:	40014000 	.word	0x40014000
 800837c:	40014400 	.word	0x40014400
 8008380:	40014800 	.word	0x40014800

08008384 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008384:	b480      	push	{r7}
 8008386:	b087      	sub	sp, #28
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
 800838c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6a1b      	ldr	r3, [r3, #32]
 8008392:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6a1b      	ldr	r3, [r3, #32]
 8008398:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	685b      	ldr	r3, [r3, #4]
 80083a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80083b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	68fa      	ldr	r2, [r7, #12]
 80083be:	4313      	orrs	r3, r2
 80083c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80083c8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	689b      	ldr	r3, [r3, #8]
 80083ce:	041b      	lsls	r3, r3, #16
 80083d0:	693a      	ldr	r2, [r7, #16]
 80083d2:	4313      	orrs	r3, r2
 80083d4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	4a15      	ldr	r2, [pc, #84]	@ (8008430 <TIM_OC5_SetConfig+0xac>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d00b      	beq.n	80083f6 <TIM_OC5_SetConfig+0x72>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	4a14      	ldr	r2, [pc, #80]	@ (8008434 <TIM_OC5_SetConfig+0xb0>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d007      	beq.n	80083f6 <TIM_OC5_SetConfig+0x72>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	4a13      	ldr	r2, [pc, #76]	@ (8008438 <TIM_OC5_SetConfig+0xb4>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d003      	beq.n	80083f6 <TIM_OC5_SetConfig+0x72>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	4a12      	ldr	r2, [pc, #72]	@ (800843c <TIM_OC5_SetConfig+0xb8>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d109      	bne.n	800840a <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80083fc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	695b      	ldr	r3, [r3, #20]
 8008402:	021b      	lsls	r3, r3, #8
 8008404:	697a      	ldr	r2, [r7, #20]
 8008406:	4313      	orrs	r3, r2
 8008408:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	697a      	ldr	r2, [r7, #20]
 800840e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	68fa      	ldr	r2, [r7, #12]
 8008414:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	685a      	ldr	r2, [r3, #4]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	693a      	ldr	r2, [r7, #16]
 8008422:	621a      	str	r2, [r3, #32]
}
 8008424:	bf00      	nop
 8008426:	371c      	adds	r7, #28
 8008428:	46bd      	mov	sp, r7
 800842a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842e:	4770      	bx	lr
 8008430:	40012c00 	.word	0x40012c00
 8008434:	40014000 	.word	0x40014000
 8008438:	40014400 	.word	0x40014400
 800843c:	40014800 	.word	0x40014800

08008440 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008440:	b480      	push	{r7}
 8008442:	b087      	sub	sp, #28
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
 8008448:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6a1b      	ldr	r3, [r3, #32]
 800844e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6a1b      	ldr	r3, [r3, #32]
 8008454:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800846e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008472:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	021b      	lsls	r3, r3, #8
 800847a:	68fa      	ldr	r2, [r7, #12]
 800847c:	4313      	orrs	r3, r2
 800847e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008486:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	689b      	ldr	r3, [r3, #8]
 800848c:	051b      	lsls	r3, r3, #20
 800848e:	693a      	ldr	r2, [r7, #16]
 8008490:	4313      	orrs	r3, r2
 8008492:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	4a16      	ldr	r2, [pc, #88]	@ (80084f0 <TIM_OC6_SetConfig+0xb0>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d00b      	beq.n	80084b4 <TIM_OC6_SetConfig+0x74>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	4a15      	ldr	r2, [pc, #84]	@ (80084f4 <TIM_OC6_SetConfig+0xb4>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d007      	beq.n	80084b4 <TIM_OC6_SetConfig+0x74>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	4a14      	ldr	r2, [pc, #80]	@ (80084f8 <TIM_OC6_SetConfig+0xb8>)
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d003      	beq.n	80084b4 <TIM_OC6_SetConfig+0x74>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	4a13      	ldr	r2, [pc, #76]	@ (80084fc <TIM_OC6_SetConfig+0xbc>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d109      	bne.n	80084c8 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80084ba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	695b      	ldr	r3, [r3, #20]
 80084c0:	029b      	lsls	r3, r3, #10
 80084c2:	697a      	ldr	r2, [r7, #20]
 80084c4:	4313      	orrs	r3, r2
 80084c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	697a      	ldr	r2, [r7, #20]
 80084cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	68fa      	ldr	r2, [r7, #12]
 80084d2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	685a      	ldr	r2, [r3, #4]
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	693a      	ldr	r2, [r7, #16]
 80084e0:	621a      	str	r2, [r3, #32]
}
 80084e2:	bf00      	nop
 80084e4:	371c      	adds	r7, #28
 80084e6:	46bd      	mov	sp, r7
 80084e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ec:	4770      	bx	lr
 80084ee:	bf00      	nop
 80084f0:	40012c00 	.word	0x40012c00
 80084f4:	40014000 	.word	0x40014000
 80084f8:	40014400 	.word	0x40014400
 80084fc:	40014800 	.word	0x40014800

08008500 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008500:	b480      	push	{r7}
 8008502:	b087      	sub	sp, #28
 8008504:	af00      	add	r7, sp, #0
 8008506:	60f8      	str	r0, [r7, #12]
 8008508:	60b9      	str	r1, [r7, #8]
 800850a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	6a1b      	ldr	r3, [r3, #32]
 8008510:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	6a1b      	ldr	r3, [r3, #32]
 8008516:	f023 0201 	bic.w	r2, r3, #1
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	699b      	ldr	r3, [r3, #24]
 8008522:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800852a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	011b      	lsls	r3, r3, #4
 8008530:	693a      	ldr	r2, [r7, #16]
 8008532:	4313      	orrs	r3, r2
 8008534:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	f023 030a 	bic.w	r3, r3, #10
 800853c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800853e:	697a      	ldr	r2, [r7, #20]
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	4313      	orrs	r3, r2
 8008544:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	693a      	ldr	r2, [r7, #16]
 800854a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	697a      	ldr	r2, [r7, #20]
 8008550:	621a      	str	r2, [r3, #32]
}
 8008552:	bf00      	nop
 8008554:	371c      	adds	r7, #28
 8008556:	46bd      	mov	sp, r7
 8008558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855c:	4770      	bx	lr

0800855e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800855e:	b480      	push	{r7}
 8008560:	b087      	sub	sp, #28
 8008562:	af00      	add	r7, sp, #0
 8008564:	60f8      	str	r0, [r7, #12]
 8008566:	60b9      	str	r1, [r7, #8]
 8008568:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	6a1b      	ldr	r3, [r3, #32]
 800856e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	6a1b      	ldr	r3, [r3, #32]
 8008574:	f023 0210 	bic.w	r2, r3, #16
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	699b      	ldr	r3, [r3, #24]
 8008580:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008588:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	031b      	lsls	r3, r3, #12
 800858e:	693a      	ldr	r2, [r7, #16]
 8008590:	4313      	orrs	r3, r2
 8008592:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800859a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	011b      	lsls	r3, r3, #4
 80085a0:	697a      	ldr	r2, [r7, #20]
 80085a2:	4313      	orrs	r3, r2
 80085a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	693a      	ldr	r2, [r7, #16]
 80085aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	697a      	ldr	r2, [r7, #20]
 80085b0:	621a      	str	r2, [r3, #32]
}
 80085b2:	bf00      	nop
 80085b4:	371c      	adds	r7, #28
 80085b6:	46bd      	mov	sp, r7
 80085b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085bc:	4770      	bx	lr

080085be <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80085be:	b480      	push	{r7}
 80085c0:	b085      	sub	sp, #20
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	6078      	str	r0, [r7, #4]
 80085c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	689b      	ldr	r3, [r3, #8]
 80085cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80085d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80085da:	683a      	ldr	r2, [r7, #0]
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	4313      	orrs	r3, r2
 80085e0:	f043 0307 	orr.w	r3, r3, #7
 80085e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	68fa      	ldr	r2, [r7, #12]
 80085ea:	609a      	str	r2, [r3, #8]
}
 80085ec:	bf00      	nop
 80085ee:	3714      	adds	r7, #20
 80085f0:	46bd      	mov	sp, r7
 80085f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f6:	4770      	bx	lr

080085f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b087      	sub	sp, #28
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	60f8      	str	r0, [r7, #12]
 8008600:	60b9      	str	r1, [r7, #8]
 8008602:	607a      	str	r2, [r7, #4]
 8008604:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	689b      	ldr	r3, [r3, #8]
 800860a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008612:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	021a      	lsls	r2, r3, #8
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	431a      	orrs	r2, r3
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	4313      	orrs	r3, r2
 8008620:	697a      	ldr	r2, [r7, #20]
 8008622:	4313      	orrs	r3, r2
 8008624:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	697a      	ldr	r2, [r7, #20]
 800862a:	609a      	str	r2, [r3, #8]
}
 800862c:	bf00      	nop
 800862e:	371c      	adds	r7, #28
 8008630:	46bd      	mov	sp, r7
 8008632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008636:	4770      	bx	lr

08008638 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008638:	b480      	push	{r7}
 800863a:	b085      	sub	sp, #20
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
 8008640:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008648:	2b01      	cmp	r3, #1
 800864a:	d101      	bne.n	8008650 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800864c:	2302      	movs	r3, #2
 800864e:	e05b      	b.n	8008708 <HAL_TIMEx_MasterConfigSynchronization+0xd0>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2201      	movs	r2, #1
 8008654:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2202      	movs	r2, #2
 800865c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	685b      	ldr	r3, [r3, #4]
 8008666:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	689b      	ldr	r3, [r3, #8]
 800866e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	4a27      	ldr	r2, [pc, #156]	@ (8008714 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d108      	bne.n	800868c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008680:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	685b      	ldr	r3, [r3, #4]
 8008686:	68fa      	ldr	r2, [r7, #12]
 8008688:	4313      	orrs	r3, r2
 800868a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008692:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008696:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	68fa      	ldr	r2, [r7, #12]
 800869e:	4313      	orrs	r3, r2
 80086a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	68fa      	ldr	r2, [r7, #12]
 80086a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4a19      	ldr	r2, [pc, #100]	@ (8008714 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d013      	beq.n	80086dc <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086bc:	d00e      	beq.n	80086dc <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4a15      	ldr	r2, [pc, #84]	@ (8008718 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d009      	beq.n	80086dc <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a13      	ldr	r2, [pc, #76]	@ (800871c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d004      	beq.n	80086dc <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4a12      	ldr	r2, [pc, #72]	@ (8008720 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d10c      	bne.n	80086f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80086e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	689b      	ldr	r3, [r3, #8]
 80086e8:	68ba      	ldr	r2, [r7, #8]
 80086ea:	4313      	orrs	r3, r2
 80086ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	68ba      	ldr	r2, [r7, #8]
 80086f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2201      	movs	r2, #1
 80086fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2200      	movs	r2, #0
 8008702:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008706:	2300      	movs	r3, #0
}
 8008708:	4618      	mov	r0, r3
 800870a:	3714      	adds	r7, #20
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr
 8008714:	40012c00 	.word	0x40012c00
 8008718:	40000400 	.word	0x40000400
 800871c:	40000800 	.word	0x40000800
 8008720:	40014000 	.word	0x40014000

08008724 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b082      	sub	sp, #8
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d101      	bne.n	8008736 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008732:	2301      	movs	r3, #1
 8008734:	e042      	b.n	80087bc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800873c:	2b00      	cmp	r3, #0
 800873e:	d106      	bne.n	800874e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2200      	movs	r2, #0
 8008744:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f7f9 fb71 	bl	8001e30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2224      	movs	r2, #36	@ 0x24
 8008752:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	681a      	ldr	r2, [r3, #0]
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f022 0201 	bic.w	r2, r2, #1
 8008764:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800876a:	2b00      	cmp	r3, #0
 800876c:	d002      	beq.n	8008774 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f000 fa2a 	bl	8008bc8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f000 f8b3 	bl	80088e0 <UART_SetConfig>
 800877a:	4603      	mov	r3, r0
 800877c:	2b01      	cmp	r3, #1
 800877e:	d101      	bne.n	8008784 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008780:	2301      	movs	r3, #1
 8008782:	e01b      	b.n	80087bc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	685a      	ldr	r2, [r3, #4]
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008792:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	689a      	ldr	r2, [r3, #8]
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80087a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	681a      	ldr	r2, [r3, #0]
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f042 0201 	orr.w	r2, r2, #1
 80087b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f000 faa9 	bl	8008d0c <UART_CheckIdleState>
 80087ba:	4603      	mov	r3, r0
}
 80087bc:	4618      	mov	r0, r3
 80087be:	3708      	adds	r7, #8
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}

080087c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b08a      	sub	sp, #40	@ 0x28
 80087c8:	af02      	add	r7, sp, #8
 80087ca:	60f8      	str	r0, [r7, #12]
 80087cc:	60b9      	str	r1, [r7, #8]
 80087ce:	603b      	str	r3, [r7, #0]
 80087d0:	4613      	mov	r3, r2
 80087d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087da:	2b20      	cmp	r3, #32
 80087dc:	d17b      	bne.n	80088d6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d002      	beq.n	80087ea <HAL_UART_Transmit+0x26>
 80087e4:	88fb      	ldrh	r3, [r7, #6]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d101      	bne.n	80087ee <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80087ea:	2301      	movs	r3, #1
 80087ec:	e074      	b.n	80088d8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	2200      	movs	r2, #0
 80087f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	2221      	movs	r2, #33	@ 0x21
 80087fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80087fe:	f7f9 ff3f 	bl	8002680 <HAL_GetTick>
 8008802:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	88fa      	ldrh	r2, [r7, #6]
 8008808:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	88fa      	ldrh	r2, [r7, #6]
 8008810:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	689b      	ldr	r3, [r3, #8]
 8008818:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800881c:	d108      	bne.n	8008830 <HAL_UART_Transmit+0x6c>
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	691b      	ldr	r3, [r3, #16]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d104      	bne.n	8008830 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008826:	2300      	movs	r3, #0
 8008828:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	61bb      	str	r3, [r7, #24]
 800882e:	e003      	b.n	8008838 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008834:	2300      	movs	r3, #0
 8008836:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008838:	e030      	b.n	800889c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	9300      	str	r3, [sp, #0]
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	2200      	movs	r2, #0
 8008842:	2180      	movs	r1, #128	@ 0x80
 8008844:	68f8      	ldr	r0, [r7, #12]
 8008846:	f000 fb0b 	bl	8008e60 <UART_WaitOnFlagUntilTimeout>
 800884a:	4603      	mov	r3, r0
 800884c:	2b00      	cmp	r3, #0
 800884e:	d005      	beq.n	800885c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2220      	movs	r2, #32
 8008854:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008858:	2303      	movs	r3, #3
 800885a:	e03d      	b.n	80088d8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800885c:	69fb      	ldr	r3, [r7, #28]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d10b      	bne.n	800887a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008862:	69bb      	ldr	r3, [r7, #24]
 8008864:	881b      	ldrh	r3, [r3, #0]
 8008866:	461a      	mov	r2, r3
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008870:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008872:	69bb      	ldr	r3, [r7, #24]
 8008874:	3302      	adds	r3, #2
 8008876:	61bb      	str	r3, [r7, #24]
 8008878:	e007      	b.n	800888a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800887a:	69fb      	ldr	r3, [r7, #28]
 800887c:	781a      	ldrb	r2, [r3, #0]
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008884:	69fb      	ldr	r3, [r7, #28]
 8008886:	3301      	adds	r3, #1
 8008888:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008890:	b29b      	uxth	r3, r3
 8008892:	3b01      	subs	r3, #1
 8008894:	b29a      	uxth	r2, r3
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80088a2:	b29b      	uxth	r3, r3
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d1c8      	bne.n	800883a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	9300      	str	r3, [sp, #0]
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	2200      	movs	r2, #0
 80088b0:	2140      	movs	r1, #64	@ 0x40
 80088b2:	68f8      	ldr	r0, [r7, #12]
 80088b4:	f000 fad4 	bl	8008e60 <UART_WaitOnFlagUntilTimeout>
 80088b8:	4603      	mov	r3, r0
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d005      	beq.n	80088ca <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	2220      	movs	r2, #32
 80088c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80088c6:	2303      	movs	r3, #3
 80088c8:	e006      	b.n	80088d8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	2220      	movs	r2, #32
 80088ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80088d2:	2300      	movs	r3, #0
 80088d4:	e000      	b.n	80088d8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80088d6:	2302      	movs	r3, #2
  }
}
 80088d8:	4618      	mov	r0, r3
 80088da:	3720      	adds	r7, #32
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}

080088e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80088e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80088e4:	b08e      	sub	sp, #56	@ 0x38
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80088ea:	2300      	movs	r3, #0
 80088ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	689a      	ldr	r2, [r3, #8]
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	691b      	ldr	r3, [r3, #16]
 80088f8:	431a      	orrs	r2, r3
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	695b      	ldr	r3, [r3, #20]
 80088fe:	431a      	orrs	r2, r3
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	69db      	ldr	r3, [r3, #28]
 8008904:	4313      	orrs	r3, r2
 8008906:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	681a      	ldr	r2, [r3, #0]
 800890e:	4b9b      	ldr	r3, [pc, #620]	@ (8008b7c <UART_SetConfig+0x29c>)
 8008910:	4013      	ands	r3, r2
 8008912:	697a      	ldr	r2, [r7, #20]
 8008914:	6812      	ldr	r2, [r2, #0]
 8008916:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008918:	430b      	orrs	r3, r1
 800891a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	685b      	ldr	r3, [r3, #4]
 8008922:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	68da      	ldr	r2, [r3, #12]
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	430a      	orrs	r2, r1
 8008930:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	699b      	ldr	r3, [r3, #24]
 8008936:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	4a90      	ldr	r2, [pc, #576]	@ (8008b80 <UART_SetConfig+0x2a0>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d004      	beq.n	800894c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	6a1b      	ldr	r3, [r3, #32]
 8008946:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008948:	4313      	orrs	r3, r2
 800894a:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	689b      	ldr	r3, [r3, #8]
 8008952:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8008956:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800895a:	697a      	ldr	r2, [r7, #20]
 800895c:	6812      	ldr	r2, [r2, #0]
 800895e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008960:	430b      	orrs	r3, r1
 8008962:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800896a:	f023 010f 	bic.w	r1, r3, #15
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	430a      	orrs	r2, r1
 8008978:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	4a81      	ldr	r2, [pc, #516]	@ (8008b84 <UART_SetConfig+0x2a4>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d102      	bne.n	800898a <UART_SetConfig+0xaa>
 8008984:	2301      	movs	r3, #1
 8008986:	633b      	str	r3, [r7, #48]	@ 0x30
 8008988:	e022      	b.n	80089d0 <UART_SetConfig+0xf0>
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	4a7e      	ldr	r2, [pc, #504]	@ (8008b88 <UART_SetConfig+0x2a8>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d102      	bne.n	800899a <UART_SetConfig+0xba>
 8008994:	2302      	movs	r3, #2
 8008996:	633b      	str	r3, [r7, #48]	@ 0x30
 8008998:	e01a      	b.n	80089d0 <UART_SetConfig+0xf0>
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	4a7b      	ldr	r2, [pc, #492]	@ (8008b8c <UART_SetConfig+0x2ac>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d102      	bne.n	80089aa <UART_SetConfig+0xca>
 80089a4:	2304      	movs	r3, #4
 80089a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80089a8:	e012      	b.n	80089d0 <UART_SetConfig+0xf0>
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	4a78      	ldr	r2, [pc, #480]	@ (8008b90 <UART_SetConfig+0x2b0>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d102      	bne.n	80089ba <UART_SetConfig+0xda>
 80089b4:	2308      	movs	r3, #8
 80089b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80089b8:	e00a      	b.n	80089d0 <UART_SetConfig+0xf0>
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	4a70      	ldr	r2, [pc, #448]	@ (8008b80 <UART_SetConfig+0x2a0>)
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d103      	bne.n	80089cc <UART_SetConfig+0xec>
 80089c4:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80089c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80089ca:	e001      	b.n	80089d0 <UART_SetConfig+0xf0>
 80089cc:	2300      	movs	r3, #0
 80089ce:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4a6a      	ldr	r2, [pc, #424]	@ (8008b80 <UART_SetConfig+0x2a0>)
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d16c      	bne.n	8008ab4 <UART_SetConfig+0x1d4>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80089da:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80089dc:	f7fd f84a 	bl	8005a74 <HAL_RCCEx_GetPeriphCLKFreq>
 80089e0:	62b8      	str	r0, [r7, #40]	@ 0x28

    /* If proper clock source reported */
    if (pclk != 0U)
 80089e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	f000 80da 	beq.w	8008b9e <UART_SetConfig+0x2be>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089ee:	4a69      	ldr	r2, [pc, #420]	@ (8008b94 <UART_SetConfig+0x2b4>)
 80089f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80089f4:	461a      	mov	r2, r3
 80089f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80089fc:	61fb      	str	r3, [r7, #28]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	685a      	ldr	r2, [r3, #4]
 8008a02:	4613      	mov	r3, r2
 8008a04:	005b      	lsls	r3, r3, #1
 8008a06:	4413      	add	r3, r2
 8008a08:	69fa      	ldr	r2, [r7, #28]
 8008a0a:	429a      	cmp	r2, r3
 8008a0c:	d305      	bcc.n	8008a1a <UART_SetConfig+0x13a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	685b      	ldr	r3, [r3, #4]
 8008a12:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008a14:	69fa      	ldr	r2, [r7, #28]
 8008a16:	429a      	cmp	r2, r3
 8008a18:	d903      	bls.n	8008a22 <UART_SetConfig+0x142>
      {
        ret = HAL_ERROR;
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8008a20:	e0bd      	b.n	8008b9e <UART_SetConfig+0x2be>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a24:	2200      	movs	r2, #0
 8008a26:	60bb      	str	r3, [r7, #8]
 8008a28:	60fa      	str	r2, [r7, #12]
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a2e:	4a59      	ldr	r2, [pc, #356]	@ (8008b94 <UART_SetConfig+0x2b4>)
 8008a30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a34:	b29b      	uxth	r3, r3
 8008a36:	2200      	movs	r2, #0
 8008a38:	603b      	str	r3, [r7, #0]
 8008a3a:	607a      	str	r2, [r7, #4]
 8008a3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a40:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008a44:	f7f7 fdda 	bl	80005fc <__aeabi_uldivmod>
 8008a48:	4602      	mov	r2, r0
 8008a4a:	460b      	mov	r3, r1
 8008a4c:	4610      	mov	r0, r2
 8008a4e:	4619      	mov	r1, r3
 8008a50:	f04f 0200 	mov.w	r2, #0
 8008a54:	f04f 0300 	mov.w	r3, #0
 8008a58:	020b      	lsls	r3, r1, #8
 8008a5a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008a5e:	0202      	lsls	r2, r0, #8
 8008a60:	6979      	ldr	r1, [r7, #20]
 8008a62:	6849      	ldr	r1, [r1, #4]
 8008a64:	0849      	lsrs	r1, r1, #1
 8008a66:	2000      	movs	r0, #0
 8008a68:	460c      	mov	r4, r1
 8008a6a:	4605      	mov	r5, r0
 8008a6c:	eb12 0804 	adds.w	r8, r2, r4
 8008a70:	eb43 0905 	adc.w	r9, r3, r5
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	685b      	ldr	r3, [r3, #4]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	469a      	mov	sl, r3
 8008a7c:	4693      	mov	fp, r2
 8008a7e:	4652      	mov	r2, sl
 8008a80:	465b      	mov	r3, fp
 8008a82:	4640      	mov	r0, r8
 8008a84:	4649      	mov	r1, r9
 8008a86:	f7f7 fdb9 	bl	80005fc <__aeabi_uldivmod>
 8008a8a:	4602      	mov	r2, r0
 8008a8c:	460b      	mov	r3, r1
 8008a8e:	4613      	mov	r3, r2
 8008a90:	627b      	str	r3, [r7, #36]	@ 0x24
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a94:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008a98:	d308      	bcc.n	8008aac <UART_SetConfig+0x1cc>
 8008a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a9c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008aa0:	d204      	bcs.n	8008aac <UART_SetConfig+0x1cc>
        {
          huart->Instance->BRR = usartdiv;
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008aa8:	60da      	str	r2, [r3, #12]
 8008aaa:	e078      	b.n	8008b9e <UART_SetConfig+0x2be>
        }
        else
        {
          ret = HAL_ERROR;
 8008aac:	2301      	movs	r3, #1
 8008aae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8008ab2:	e074      	b.n	8008b9e <UART_SetConfig+0x2be>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	69db      	ldr	r3, [r3, #28]
 8008ab8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008abc:	d137      	bne.n	8008b2e <UART_SetConfig+0x24e>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008abe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008ac0:	f7fc ffd8 	bl	8005a74 <HAL_RCCEx_GetPeriphCLKFreq>
 8008ac4:	62b8      	str	r0, [r7, #40]	@ 0x28

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d068      	beq.n	8008b9e <UART_SetConfig+0x2be>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ad0:	4a30      	ldr	r2, [pc, #192]	@ (8008b94 <UART_SetConfig+0x2b4>)
 8008ad2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ad6:	461a      	mov	r2, r3
 8008ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ada:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ade:	005a      	lsls	r2, r3, #1
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	685b      	ldr	r3, [r3, #4]
 8008ae4:	085b      	lsrs	r3, r3, #1
 8008ae6:	441a      	add	r2, r3
 8008ae8:	697b      	ldr	r3, [r7, #20]
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8008af0:	627b      	str	r3, [r7, #36]	@ 0x24
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008af4:	2b0f      	cmp	r3, #15
 8008af6:	d916      	bls.n	8008b26 <UART_SetConfig+0x246>
 8008af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008afa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008afe:	d212      	bcs.n	8008b26 <UART_SetConfig+0x246>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b02:	b29b      	uxth	r3, r3
 8008b04:	f023 030f 	bic.w	r3, r3, #15
 8008b08:	847b      	strh	r3, [r7, #34]	@ 0x22
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b0c:	085b      	lsrs	r3, r3, #1
 8008b0e:	b29b      	uxth	r3, r3
 8008b10:	f003 0307 	and.w	r3, r3, #7
 8008b14:	b29a      	uxth	r2, r3
 8008b16:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008b18:	4313      	orrs	r3, r2
 8008b1a:	847b      	strh	r3, [r7, #34]	@ 0x22
        huart->Instance->BRR = brrtemp;
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8008b22:	60da      	str	r2, [r3, #12]
 8008b24:	e03b      	b.n	8008b9e <UART_SetConfig+0x2be>
      }
      else
      {
        ret = HAL_ERROR;
 8008b26:	2301      	movs	r3, #1
 8008b28:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8008b2c:	e037      	b.n	8008b9e <UART_SetConfig+0x2be>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008b2e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008b30:	f7fc ffa0 	bl	8005a74 <HAL_RCCEx_GetPeriphCLKFreq>
 8008b34:	62b8      	str	r0, [r7, #40]	@ 0x28

    if (pclk != 0U)
 8008b36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d030      	beq.n	8008b9e <UART_SetConfig+0x2be>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b40:	4a14      	ldr	r2, [pc, #80]	@ (8008b94 <UART_SetConfig+0x2b4>)
 8008b42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b46:	461a      	mov	r2, r3
 8008b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b4a:	fbb3 f2f2 	udiv	r2, r3, r2
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	085b      	lsrs	r3, r3, #1
 8008b54:	441a      	add	r2, r3
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	685b      	ldr	r3, [r3, #4]
 8008b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b5e:	627b      	str	r3, [r7, #36]	@ 0x24
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b62:	2b0f      	cmp	r3, #15
 8008b64:	d918      	bls.n	8008b98 <UART_SetConfig+0x2b8>
 8008b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b6c:	d214      	bcs.n	8008b98 <UART_SetConfig+0x2b8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b70:	b29a      	uxth	r2, r3
 8008b72:	697b      	ldr	r3, [r7, #20]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	60da      	str	r2, [r3, #12]
 8008b78:	e011      	b.n	8008b9e <UART_SetConfig+0x2be>
 8008b7a:	bf00      	nop
 8008b7c:	cfff69f3 	.word	0xcfff69f3
 8008b80:	40042400 	.word	0x40042400
 8008b84:	40013800 	.word	0x40013800
 8008b88:	40004800 	.word	0x40004800
 8008b8c:	40004c00 	.word	0x40004c00
 8008b90:	40005000 	.word	0x40005000
 8008b94:	080215f8 	.word	0x080215f8
      }
      else
      {
        ret = HAL_ERROR;
 8008b98:	2301      	movs	r3, #1
 8008b9a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	2201      	movs	r2, #1
 8008ba2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008ba6:	697b      	ldr	r3, [r7, #20]
 8008ba8:	2201      	movs	r2, #1
 8008baa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008bba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3738      	adds	r7, #56	@ 0x38
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008bc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b083      	sub	sp, #12
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bd4:	f003 0308 	and.w	r3, r3, #8
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d00a      	beq.n	8008bf2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	685b      	ldr	r3, [r3, #4]
 8008be2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	430a      	orrs	r2, r1
 8008bf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bf6:	f003 0301 	and.w	r3, r3, #1
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d00a      	beq.n	8008c14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	685b      	ldr	r3, [r3, #4]
 8008c04:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	430a      	orrs	r2, r1
 8008c12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c18:	f003 0302 	and.w	r3, r3, #2
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d00a      	beq.n	8008c36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	685b      	ldr	r3, [r3, #4]
 8008c26:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	430a      	orrs	r2, r1
 8008c34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c3a:	f003 0304 	and.w	r3, r3, #4
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d00a      	beq.n	8008c58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	430a      	orrs	r2, r1
 8008c56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c5c:	f003 0310 	and.w	r3, r3, #16
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d00a      	beq.n	8008c7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	689b      	ldr	r3, [r3, #8]
 8008c6a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	430a      	orrs	r2, r1
 8008c78:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c7e:	f003 0320 	and.w	r3, r3, #32
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d00a      	beq.n	8008c9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	689b      	ldr	r3, [r3, #8]
 8008c8c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	430a      	orrs	r2, r1
 8008c9a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ca0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d01a      	beq.n	8008cde <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	430a      	orrs	r2, r1
 8008cbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008cc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008cc6:	d10a      	bne.n	8008cde <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	685b      	ldr	r3, [r3, #4]
 8008cce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	430a      	orrs	r2, r1
 8008cdc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d00a      	beq.n	8008d00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	430a      	orrs	r2, r1
 8008cfe:	605a      	str	r2, [r3, #4]
  }
}
 8008d00:	bf00      	nop
 8008d02:	370c      	adds	r7, #12
 8008d04:	46bd      	mov	sp, r7
 8008d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0a:	4770      	bx	lr

08008d0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b098      	sub	sp, #96	@ 0x60
 8008d10:	af02      	add	r7, sp, #8
 8008d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2200      	movs	r2, #0
 8008d18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008d1c:	f7f9 fcb0 	bl	8002680 <HAL_GetTick>
 8008d20:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f003 0308 	and.w	r3, r3, #8
 8008d2c:	2b08      	cmp	r3, #8
 8008d2e:	d12f      	bne.n	8008d90 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d30:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008d34:	9300      	str	r3, [sp, #0]
 8008d36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008d38:	2200      	movs	r2, #0
 8008d3a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f000 f88e 	bl	8008e60 <UART_WaitOnFlagUntilTimeout>
 8008d44:	4603      	mov	r3, r0
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d022      	beq.n	8008d90 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d52:	e853 3f00 	ldrex	r3, [r3]
 8008d56:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008d58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d5a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008d5e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	461a      	mov	r2, r3
 8008d66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008d68:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d6a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d6c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008d6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008d70:	e841 2300 	strex	r3, r2, [r1]
 8008d74:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008d76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d1e6      	bne.n	8008d4a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2220      	movs	r2, #32
 8008d80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2200      	movs	r2, #0
 8008d88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d8c:	2303      	movs	r3, #3
 8008d8e:	e063      	b.n	8008e58 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f003 0304 	and.w	r3, r3, #4
 8008d9a:	2b04      	cmp	r3, #4
 8008d9c:	d149      	bne.n	8008e32 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d9e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008da2:	9300      	str	r3, [sp, #0]
 8008da4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008da6:	2200      	movs	r2, #0
 8008da8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f000 f857 	bl	8008e60 <UART_WaitOnFlagUntilTimeout>
 8008db2:	4603      	mov	r3, r0
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d03c      	beq.n	8008e32 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dc0:	e853 3f00 	ldrex	r3, [r3]
 8008dc4:	623b      	str	r3, [r7, #32]
   return(result);
 8008dc6:	6a3b      	ldr	r3, [r7, #32]
 8008dc8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008dcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	461a      	mov	r2, r3
 8008dd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008dd6:	633b      	str	r3, [r7, #48]	@ 0x30
 8008dd8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dda:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008ddc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008dde:	e841 2300 	strex	r3, r2, [r1]
 8008de2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d1e6      	bne.n	8008db8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	3308      	adds	r3, #8
 8008df0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008df2:	693b      	ldr	r3, [r7, #16]
 8008df4:	e853 3f00 	ldrex	r3, [r3]
 8008df8:	60fb      	str	r3, [r7, #12]
   return(result);
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	f023 0301 	bic.w	r3, r3, #1
 8008e00:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	3308      	adds	r3, #8
 8008e08:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008e0a:	61fa      	str	r2, [r7, #28]
 8008e0c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e0e:	69b9      	ldr	r1, [r7, #24]
 8008e10:	69fa      	ldr	r2, [r7, #28]
 8008e12:	e841 2300 	strex	r3, r2, [r1]
 8008e16:	617b      	str	r3, [r7, #20]
   return(result);
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d1e5      	bne.n	8008dea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2220      	movs	r2, #32
 8008e22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e2e:	2303      	movs	r3, #3
 8008e30:	e012      	b.n	8008e58 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2220      	movs	r2, #32
 8008e36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2220      	movs	r2, #32
 8008e3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2200      	movs	r2, #0
 8008e46:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2200      	movs	r2, #0
 8008e52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008e56:	2300      	movs	r3, #0
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	3758      	adds	r7, #88	@ 0x58
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}

08008e60 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b084      	sub	sp, #16
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	60f8      	str	r0, [r7, #12]
 8008e68:	60b9      	str	r1, [r7, #8]
 8008e6a:	603b      	str	r3, [r7, #0]
 8008e6c:	4613      	mov	r3, r2
 8008e6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e70:	e04f      	b.n	8008f12 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e72:	69bb      	ldr	r3, [r7, #24]
 8008e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e78:	d04b      	beq.n	8008f12 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e7a:	f7f9 fc01 	bl	8002680 <HAL_GetTick>
 8008e7e:	4602      	mov	r2, r0
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	1ad3      	subs	r3, r2, r3
 8008e84:	69ba      	ldr	r2, [r7, #24]
 8008e86:	429a      	cmp	r2, r3
 8008e88:	d302      	bcc.n	8008e90 <UART_WaitOnFlagUntilTimeout+0x30>
 8008e8a:	69bb      	ldr	r3, [r7, #24]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d101      	bne.n	8008e94 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008e90:	2303      	movs	r3, #3
 8008e92:	e04e      	b.n	8008f32 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f003 0304 	and.w	r3, r3, #4
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d037      	beq.n	8008f12 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	2b80      	cmp	r3, #128	@ 0x80
 8008ea6:	d034      	beq.n	8008f12 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	2b40      	cmp	r3, #64	@ 0x40
 8008eac:	d031      	beq.n	8008f12 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	69db      	ldr	r3, [r3, #28]
 8008eb4:	f003 0308 	and.w	r3, r3, #8
 8008eb8:	2b08      	cmp	r3, #8
 8008eba:	d110      	bne.n	8008ede <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	2208      	movs	r2, #8
 8008ec2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008ec4:	68f8      	ldr	r0, [r7, #12]
 8008ec6:	f000 f838 	bl	8008f3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	2208      	movs	r2, #8
 8008ece:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008eda:	2301      	movs	r3, #1
 8008edc:	e029      	b.n	8008f32 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	69db      	ldr	r3, [r3, #28]
 8008ee4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008ee8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008eec:	d111      	bne.n	8008f12 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008ef6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008ef8:	68f8      	ldr	r0, [r7, #12]
 8008efa:	f000 f81e 	bl	8008f3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	2220      	movs	r2, #32
 8008f02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008f0e:	2303      	movs	r3, #3
 8008f10:	e00f      	b.n	8008f32 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	69da      	ldr	r2, [r3, #28]
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	4013      	ands	r3, r2
 8008f1c:	68ba      	ldr	r2, [r7, #8]
 8008f1e:	429a      	cmp	r2, r3
 8008f20:	bf0c      	ite	eq
 8008f22:	2301      	moveq	r3, #1
 8008f24:	2300      	movne	r3, #0
 8008f26:	b2db      	uxtb	r3, r3
 8008f28:	461a      	mov	r2, r3
 8008f2a:	79fb      	ldrb	r3, [r7, #7]
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	d0a0      	beq.n	8008e72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008f30:	2300      	movs	r3, #0
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3710      	adds	r7, #16
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}

08008f3a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008f3a:	b480      	push	{r7}
 8008f3c:	b095      	sub	sp, #84	@ 0x54
 8008f3e:	af00      	add	r7, sp, #0
 8008f40:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f4a:	e853 3f00 	ldrex	r3, [r3]
 8008f4e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f52:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008f56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	461a      	mov	r2, r3
 8008f5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f60:	643b      	str	r3, [r7, #64]	@ 0x40
 8008f62:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f64:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008f66:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008f68:	e841 2300 	strex	r3, r2, [r1]
 8008f6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d1e6      	bne.n	8008f42 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	3308      	adds	r3, #8
 8008f7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f7c:	6a3b      	ldr	r3, [r7, #32]
 8008f7e:	e853 3f00 	ldrex	r3, [r3]
 8008f82:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f84:	69fb      	ldr	r3, [r7, #28]
 8008f86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008f8a:	f023 0301 	bic.w	r3, r3, #1
 8008f8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	3308      	adds	r3, #8
 8008f96:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008f98:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008f9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008f9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008fa0:	e841 2300 	strex	r3, r2, [r1]
 8008fa4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d1e3      	bne.n	8008f74 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008fb0:	2b01      	cmp	r3, #1
 8008fb2:	d118      	bne.n	8008fe6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	e853 3f00 	ldrex	r3, [r3]
 8008fc0:	60bb      	str	r3, [r7, #8]
   return(result);
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	f023 0310 	bic.w	r3, r3, #16
 8008fc8:	647b      	str	r3, [r7, #68]	@ 0x44
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	461a      	mov	r2, r3
 8008fd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008fd2:	61bb      	str	r3, [r7, #24]
 8008fd4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fd6:	6979      	ldr	r1, [r7, #20]
 8008fd8:	69ba      	ldr	r2, [r7, #24]
 8008fda:	e841 2300 	strex	r3, r2, [r1]
 8008fde:	613b      	str	r3, [r7, #16]
   return(result);
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d1e6      	bne.n	8008fb4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2220      	movs	r2, #32
 8008fea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008ffa:	bf00      	nop
 8008ffc:	3754      	adds	r7, #84	@ 0x54
 8008ffe:	46bd      	mov	sp, r7
 8009000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009004:	4770      	bx	lr

08009006 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009006:	b480      	push	{r7}
 8009008:	b085      	sub	sp, #20
 800900a:	af00      	add	r7, sp, #0
 800900c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009014:	2b01      	cmp	r3, #1
 8009016:	d101      	bne.n	800901c <HAL_UARTEx_DisableFifoMode+0x16>
 8009018:	2302      	movs	r3, #2
 800901a:	e027      	b.n	800906c <HAL_UARTEx_DisableFifoMode+0x66>
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2201      	movs	r2, #1
 8009020:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2224      	movs	r2, #36	@ 0x24
 8009028:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	681a      	ldr	r2, [r3, #0]
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f022 0201 	bic.w	r2, r2, #1
 8009042:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800904a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2200      	movs	r2, #0
 8009050:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	68fa      	ldr	r2, [r7, #12]
 8009058:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2220      	movs	r2, #32
 800905e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2200      	movs	r2, #0
 8009066:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800906a:	2300      	movs	r3, #0
}
 800906c:	4618      	mov	r0, r3
 800906e:	3714      	adds	r7, #20
 8009070:	46bd      	mov	sp, r7
 8009072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009076:	4770      	bx	lr

08009078 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b084      	sub	sp, #16
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
 8009080:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009088:	2b01      	cmp	r3, #1
 800908a:	d101      	bne.n	8009090 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800908c:	2302      	movs	r3, #2
 800908e:	e02d      	b.n	80090ec <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2201      	movs	r2, #1
 8009094:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2224      	movs	r2, #36	@ 0x24
 800909c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	681a      	ldr	r2, [r3, #0]
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f022 0201 	bic.w	r2, r2, #1
 80090b6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	689b      	ldr	r3, [r3, #8]
 80090be:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	683a      	ldr	r2, [r7, #0]
 80090c8:	430a      	orrs	r2, r1
 80090ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f000 f84f 	bl	8009170 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	68fa      	ldr	r2, [r7, #12]
 80090d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2220      	movs	r2, #32
 80090de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2200      	movs	r2, #0
 80090e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80090ea:	2300      	movs	r3, #0
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	3710      	adds	r7, #16
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}

080090f4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b084      	sub	sp, #16
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
 80090fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009104:	2b01      	cmp	r3, #1
 8009106:	d101      	bne.n	800910c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009108:	2302      	movs	r3, #2
 800910a:	e02d      	b.n	8009168 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2201      	movs	r2, #1
 8009110:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2224      	movs	r2, #36	@ 0x24
 8009118:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	681a      	ldr	r2, [r3, #0]
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f022 0201 	bic.w	r2, r2, #1
 8009132:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	689b      	ldr	r3, [r3, #8]
 800913a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	683a      	ldr	r2, [r7, #0]
 8009144:	430a      	orrs	r2, r1
 8009146:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f000 f811 	bl	8009170 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	68fa      	ldr	r2, [r7, #12]
 8009154:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2220      	movs	r2, #32
 800915a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2200      	movs	r2, #0
 8009162:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009166:	2300      	movs	r3, #0
}
 8009168:	4618      	mov	r0, r3
 800916a:	3710      	adds	r7, #16
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}

08009170 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009170:	b480      	push	{r7}
 8009172:	b085      	sub	sp, #20
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800917c:	2b00      	cmp	r3, #0
 800917e:	d108      	bne.n	8009192 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2201      	movs	r2, #1
 8009184:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2201      	movs	r2, #1
 800918c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009190:	e031      	b.n	80091f6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009192:	2308      	movs	r3, #8
 8009194:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009196:	2308      	movs	r3, #8
 8009198:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	689b      	ldr	r3, [r3, #8]
 80091a0:	0e5b      	lsrs	r3, r3, #25
 80091a2:	b2db      	uxtb	r3, r3
 80091a4:	f003 0307 	and.w	r3, r3, #7
 80091a8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	689b      	ldr	r3, [r3, #8]
 80091b0:	0f5b      	lsrs	r3, r3, #29
 80091b2:	b2db      	uxtb	r3, r3
 80091b4:	f003 0307 	and.w	r3, r3, #7
 80091b8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80091ba:	7bbb      	ldrb	r3, [r7, #14]
 80091bc:	7b3a      	ldrb	r2, [r7, #12]
 80091be:	4911      	ldr	r1, [pc, #68]	@ (8009204 <UARTEx_SetNbDataToProcess+0x94>)
 80091c0:	5c8a      	ldrb	r2, [r1, r2]
 80091c2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80091c6:	7b3a      	ldrb	r2, [r7, #12]
 80091c8:	490f      	ldr	r1, [pc, #60]	@ (8009208 <UARTEx_SetNbDataToProcess+0x98>)
 80091ca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80091cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80091d0:	b29a      	uxth	r2, r3
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80091d8:	7bfb      	ldrb	r3, [r7, #15]
 80091da:	7b7a      	ldrb	r2, [r7, #13]
 80091dc:	4909      	ldr	r1, [pc, #36]	@ (8009204 <UARTEx_SetNbDataToProcess+0x94>)
 80091de:	5c8a      	ldrb	r2, [r1, r2]
 80091e0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80091e4:	7b7a      	ldrb	r2, [r7, #13]
 80091e6:	4908      	ldr	r1, [pc, #32]	@ (8009208 <UARTEx_SetNbDataToProcess+0x98>)
 80091e8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80091ea:	fb93 f3f2 	sdiv	r3, r3, r2
 80091ee:	b29a      	uxth	r2, r3
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80091f6:	bf00      	nop
 80091f8:	3714      	adds	r7, #20
 80091fa:	46bd      	mov	sp, r7
 80091fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009200:	4770      	bx	lr
 8009202:	bf00      	nop
 8009204:	08021610 	.word	0x08021610
 8009208:	08021618 	.word	0x08021618

0800920c <std>:
 800920c:	2300      	movs	r3, #0
 800920e:	b510      	push	{r4, lr}
 8009210:	4604      	mov	r4, r0
 8009212:	6083      	str	r3, [r0, #8]
 8009214:	8181      	strh	r1, [r0, #12]
 8009216:	4619      	mov	r1, r3
 8009218:	6643      	str	r3, [r0, #100]	@ 0x64
 800921a:	81c2      	strh	r2, [r0, #14]
 800921c:	2208      	movs	r2, #8
 800921e:	6183      	str	r3, [r0, #24]
 8009220:	e9c0 3300 	strd	r3, r3, [r0]
 8009224:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009228:	305c      	adds	r0, #92	@ 0x5c
 800922a:	f000 fa2f 	bl	800968c <memset>
 800922e:	4b0d      	ldr	r3, [pc, #52]	@ (8009264 <std+0x58>)
 8009230:	6224      	str	r4, [r4, #32]
 8009232:	6263      	str	r3, [r4, #36]	@ 0x24
 8009234:	4b0c      	ldr	r3, [pc, #48]	@ (8009268 <std+0x5c>)
 8009236:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009238:	4b0c      	ldr	r3, [pc, #48]	@ (800926c <std+0x60>)
 800923a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800923c:	4b0c      	ldr	r3, [pc, #48]	@ (8009270 <std+0x64>)
 800923e:	6323      	str	r3, [r4, #48]	@ 0x30
 8009240:	4b0c      	ldr	r3, [pc, #48]	@ (8009274 <std+0x68>)
 8009242:	429c      	cmp	r4, r3
 8009244:	d006      	beq.n	8009254 <std+0x48>
 8009246:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800924a:	4294      	cmp	r4, r2
 800924c:	d002      	beq.n	8009254 <std+0x48>
 800924e:	33d0      	adds	r3, #208	@ 0xd0
 8009250:	429c      	cmp	r4, r3
 8009252:	d105      	bne.n	8009260 <std+0x54>
 8009254:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800925c:	f000 ba8e 	b.w	800977c <__retarget_lock_init_recursive>
 8009260:	bd10      	pop	{r4, pc}
 8009262:	bf00      	nop
 8009264:	080094dd 	.word	0x080094dd
 8009268:	080094ff 	.word	0x080094ff
 800926c:	08009537 	.word	0x08009537
 8009270:	0800955b 	.word	0x0800955b
 8009274:	20000418 	.word	0x20000418

08009278 <stdio_exit_handler>:
 8009278:	4a02      	ldr	r2, [pc, #8]	@ (8009284 <stdio_exit_handler+0xc>)
 800927a:	4903      	ldr	r1, [pc, #12]	@ (8009288 <stdio_exit_handler+0x10>)
 800927c:	4803      	ldr	r0, [pc, #12]	@ (800928c <stdio_exit_handler+0x14>)
 800927e:	f000 b869 	b.w	8009354 <_fwalk_sglue>
 8009282:	bf00      	nop
 8009284:	20000020 	.word	0x20000020
 8009288:	0800a2e9 	.word	0x0800a2e9
 800928c:	20000030 	.word	0x20000030

08009290 <cleanup_stdio>:
 8009290:	6841      	ldr	r1, [r0, #4]
 8009292:	4b0c      	ldr	r3, [pc, #48]	@ (80092c4 <cleanup_stdio+0x34>)
 8009294:	4299      	cmp	r1, r3
 8009296:	b510      	push	{r4, lr}
 8009298:	4604      	mov	r4, r0
 800929a:	d001      	beq.n	80092a0 <cleanup_stdio+0x10>
 800929c:	f001 f824 	bl	800a2e8 <_fflush_r>
 80092a0:	68a1      	ldr	r1, [r4, #8]
 80092a2:	4b09      	ldr	r3, [pc, #36]	@ (80092c8 <cleanup_stdio+0x38>)
 80092a4:	4299      	cmp	r1, r3
 80092a6:	d002      	beq.n	80092ae <cleanup_stdio+0x1e>
 80092a8:	4620      	mov	r0, r4
 80092aa:	f001 f81d 	bl	800a2e8 <_fflush_r>
 80092ae:	68e1      	ldr	r1, [r4, #12]
 80092b0:	4b06      	ldr	r3, [pc, #24]	@ (80092cc <cleanup_stdio+0x3c>)
 80092b2:	4299      	cmp	r1, r3
 80092b4:	d004      	beq.n	80092c0 <cleanup_stdio+0x30>
 80092b6:	4620      	mov	r0, r4
 80092b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092bc:	f001 b814 	b.w	800a2e8 <_fflush_r>
 80092c0:	bd10      	pop	{r4, pc}
 80092c2:	bf00      	nop
 80092c4:	20000418 	.word	0x20000418
 80092c8:	20000480 	.word	0x20000480
 80092cc:	200004e8 	.word	0x200004e8

080092d0 <global_stdio_init.part.0>:
 80092d0:	b510      	push	{r4, lr}
 80092d2:	4b0b      	ldr	r3, [pc, #44]	@ (8009300 <global_stdio_init.part.0+0x30>)
 80092d4:	2104      	movs	r1, #4
 80092d6:	4c0b      	ldr	r4, [pc, #44]	@ (8009304 <global_stdio_init.part.0+0x34>)
 80092d8:	4a0b      	ldr	r2, [pc, #44]	@ (8009308 <global_stdio_init.part.0+0x38>)
 80092da:	4620      	mov	r0, r4
 80092dc:	601a      	str	r2, [r3, #0]
 80092de:	2200      	movs	r2, #0
 80092e0:	f7ff ff94 	bl	800920c <std>
 80092e4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80092e8:	2201      	movs	r2, #1
 80092ea:	2109      	movs	r1, #9
 80092ec:	f7ff ff8e 	bl	800920c <std>
 80092f0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80092f4:	2202      	movs	r2, #2
 80092f6:	2112      	movs	r1, #18
 80092f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092fc:	f7ff bf86 	b.w	800920c <std>
 8009300:	20000550 	.word	0x20000550
 8009304:	20000418 	.word	0x20000418
 8009308:	08009279 	.word	0x08009279

0800930c <__sfp_lock_acquire>:
 800930c:	4801      	ldr	r0, [pc, #4]	@ (8009314 <__sfp_lock_acquire+0x8>)
 800930e:	f000 ba36 	b.w	800977e <__retarget_lock_acquire_recursive>
 8009312:	bf00      	nop
 8009314:	20000559 	.word	0x20000559

08009318 <__sfp_lock_release>:
 8009318:	4801      	ldr	r0, [pc, #4]	@ (8009320 <__sfp_lock_release+0x8>)
 800931a:	f000 ba31 	b.w	8009780 <__retarget_lock_release_recursive>
 800931e:	bf00      	nop
 8009320:	20000559 	.word	0x20000559

08009324 <__sinit>:
 8009324:	b510      	push	{r4, lr}
 8009326:	4604      	mov	r4, r0
 8009328:	f7ff fff0 	bl	800930c <__sfp_lock_acquire>
 800932c:	6a23      	ldr	r3, [r4, #32]
 800932e:	b11b      	cbz	r3, 8009338 <__sinit+0x14>
 8009330:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009334:	f7ff bff0 	b.w	8009318 <__sfp_lock_release>
 8009338:	4b04      	ldr	r3, [pc, #16]	@ (800934c <__sinit+0x28>)
 800933a:	6223      	str	r3, [r4, #32]
 800933c:	4b04      	ldr	r3, [pc, #16]	@ (8009350 <__sinit+0x2c>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d1f5      	bne.n	8009330 <__sinit+0xc>
 8009344:	f7ff ffc4 	bl	80092d0 <global_stdio_init.part.0>
 8009348:	e7f2      	b.n	8009330 <__sinit+0xc>
 800934a:	bf00      	nop
 800934c:	08009291 	.word	0x08009291
 8009350:	20000550 	.word	0x20000550

08009354 <_fwalk_sglue>:
 8009354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009358:	4607      	mov	r7, r0
 800935a:	4688      	mov	r8, r1
 800935c:	4614      	mov	r4, r2
 800935e:	2600      	movs	r6, #0
 8009360:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009364:	f1b9 0901 	subs.w	r9, r9, #1
 8009368:	d505      	bpl.n	8009376 <_fwalk_sglue+0x22>
 800936a:	6824      	ldr	r4, [r4, #0]
 800936c:	2c00      	cmp	r4, #0
 800936e:	d1f7      	bne.n	8009360 <_fwalk_sglue+0xc>
 8009370:	4630      	mov	r0, r6
 8009372:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009376:	89ab      	ldrh	r3, [r5, #12]
 8009378:	2b01      	cmp	r3, #1
 800937a:	d907      	bls.n	800938c <_fwalk_sglue+0x38>
 800937c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009380:	3301      	adds	r3, #1
 8009382:	d003      	beq.n	800938c <_fwalk_sglue+0x38>
 8009384:	4629      	mov	r1, r5
 8009386:	4638      	mov	r0, r7
 8009388:	47c0      	blx	r8
 800938a:	4306      	orrs	r6, r0
 800938c:	3568      	adds	r5, #104	@ 0x68
 800938e:	e7e9      	b.n	8009364 <_fwalk_sglue+0x10>

08009390 <iprintf>:
 8009390:	b40f      	push	{r0, r1, r2, r3}
 8009392:	b507      	push	{r0, r1, r2, lr}
 8009394:	4906      	ldr	r1, [pc, #24]	@ (80093b0 <iprintf+0x20>)
 8009396:	ab04      	add	r3, sp, #16
 8009398:	6808      	ldr	r0, [r1, #0]
 800939a:	f853 2b04 	ldr.w	r2, [r3], #4
 800939e:	6881      	ldr	r1, [r0, #8]
 80093a0:	9301      	str	r3, [sp, #4]
 80093a2:	f000 fc75 	bl	8009c90 <_vfiprintf_r>
 80093a6:	b003      	add	sp, #12
 80093a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80093ac:	b004      	add	sp, #16
 80093ae:	4770      	bx	lr
 80093b0:	2000002c 	.word	0x2000002c

080093b4 <_puts_r>:
 80093b4:	6a03      	ldr	r3, [r0, #32]
 80093b6:	b570      	push	{r4, r5, r6, lr}
 80093b8:	4605      	mov	r5, r0
 80093ba:	460e      	mov	r6, r1
 80093bc:	6884      	ldr	r4, [r0, #8]
 80093be:	b90b      	cbnz	r3, 80093c4 <_puts_r+0x10>
 80093c0:	f7ff ffb0 	bl	8009324 <__sinit>
 80093c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80093c6:	07db      	lsls	r3, r3, #31
 80093c8:	d405      	bmi.n	80093d6 <_puts_r+0x22>
 80093ca:	89a3      	ldrh	r3, [r4, #12]
 80093cc:	0598      	lsls	r0, r3, #22
 80093ce:	d402      	bmi.n	80093d6 <_puts_r+0x22>
 80093d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80093d2:	f000 f9d4 	bl	800977e <__retarget_lock_acquire_recursive>
 80093d6:	89a3      	ldrh	r3, [r4, #12]
 80093d8:	0719      	lsls	r1, r3, #28
 80093da:	d502      	bpl.n	80093e2 <_puts_r+0x2e>
 80093dc:	6923      	ldr	r3, [r4, #16]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d135      	bne.n	800944e <_puts_r+0x9a>
 80093e2:	4621      	mov	r1, r4
 80093e4:	4628      	mov	r0, r5
 80093e6:	f000 f8fb 	bl	80095e0 <__swsetup_r>
 80093ea:	b380      	cbz	r0, 800944e <_puts_r+0x9a>
 80093ec:	f04f 35ff 	mov.w	r5, #4294967295
 80093f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80093f2:	07da      	lsls	r2, r3, #31
 80093f4:	d405      	bmi.n	8009402 <_puts_r+0x4e>
 80093f6:	89a3      	ldrh	r3, [r4, #12]
 80093f8:	059b      	lsls	r3, r3, #22
 80093fa:	d402      	bmi.n	8009402 <_puts_r+0x4e>
 80093fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80093fe:	f000 f9bf 	bl	8009780 <__retarget_lock_release_recursive>
 8009402:	4628      	mov	r0, r5
 8009404:	bd70      	pop	{r4, r5, r6, pc}
 8009406:	2b00      	cmp	r3, #0
 8009408:	da04      	bge.n	8009414 <_puts_r+0x60>
 800940a:	69a2      	ldr	r2, [r4, #24]
 800940c:	429a      	cmp	r2, r3
 800940e:	dc17      	bgt.n	8009440 <_puts_r+0x8c>
 8009410:	290a      	cmp	r1, #10
 8009412:	d015      	beq.n	8009440 <_puts_r+0x8c>
 8009414:	6823      	ldr	r3, [r4, #0]
 8009416:	1c5a      	adds	r2, r3, #1
 8009418:	6022      	str	r2, [r4, #0]
 800941a:	7019      	strb	r1, [r3, #0]
 800941c:	68a3      	ldr	r3, [r4, #8]
 800941e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009422:	3b01      	subs	r3, #1
 8009424:	60a3      	str	r3, [r4, #8]
 8009426:	2900      	cmp	r1, #0
 8009428:	d1ed      	bne.n	8009406 <_puts_r+0x52>
 800942a:	2b00      	cmp	r3, #0
 800942c:	da11      	bge.n	8009452 <_puts_r+0x9e>
 800942e:	4622      	mov	r2, r4
 8009430:	210a      	movs	r1, #10
 8009432:	4628      	mov	r0, r5
 8009434:	f000 f895 	bl	8009562 <__swbuf_r>
 8009438:	3001      	adds	r0, #1
 800943a:	d0d7      	beq.n	80093ec <_puts_r+0x38>
 800943c:	250a      	movs	r5, #10
 800943e:	e7d7      	b.n	80093f0 <_puts_r+0x3c>
 8009440:	4622      	mov	r2, r4
 8009442:	4628      	mov	r0, r5
 8009444:	f000 f88d 	bl	8009562 <__swbuf_r>
 8009448:	3001      	adds	r0, #1
 800944a:	d1e7      	bne.n	800941c <_puts_r+0x68>
 800944c:	e7ce      	b.n	80093ec <_puts_r+0x38>
 800944e:	3e01      	subs	r6, #1
 8009450:	e7e4      	b.n	800941c <_puts_r+0x68>
 8009452:	6823      	ldr	r3, [r4, #0]
 8009454:	1c5a      	adds	r2, r3, #1
 8009456:	6022      	str	r2, [r4, #0]
 8009458:	220a      	movs	r2, #10
 800945a:	701a      	strb	r2, [r3, #0]
 800945c:	e7ee      	b.n	800943c <_puts_r+0x88>
	...

08009460 <puts>:
 8009460:	4b02      	ldr	r3, [pc, #8]	@ (800946c <puts+0xc>)
 8009462:	4601      	mov	r1, r0
 8009464:	6818      	ldr	r0, [r3, #0]
 8009466:	f7ff bfa5 	b.w	80093b4 <_puts_r>
 800946a:	bf00      	nop
 800946c:	2000002c 	.word	0x2000002c

08009470 <sniprintf>:
 8009470:	b40c      	push	{r2, r3}
 8009472:	4b19      	ldr	r3, [pc, #100]	@ (80094d8 <sniprintf+0x68>)
 8009474:	b530      	push	{r4, r5, lr}
 8009476:	1e0c      	subs	r4, r1, #0
 8009478:	b09d      	sub	sp, #116	@ 0x74
 800947a:	681d      	ldr	r5, [r3, #0]
 800947c:	da08      	bge.n	8009490 <sniprintf+0x20>
 800947e:	238b      	movs	r3, #139	@ 0x8b
 8009480:	f04f 30ff 	mov.w	r0, #4294967295
 8009484:	602b      	str	r3, [r5, #0]
 8009486:	b01d      	add	sp, #116	@ 0x74
 8009488:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800948c:	b002      	add	sp, #8
 800948e:	4770      	bx	lr
 8009490:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009494:	9002      	str	r0, [sp, #8]
 8009496:	9006      	str	r0, [sp, #24]
 8009498:	a902      	add	r1, sp, #8
 800949a:	f8ad 3014 	strh.w	r3, [sp, #20]
 800949e:	f04f 0300 	mov.w	r3, #0
 80094a2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80094a4:	4628      	mov	r0, r5
 80094a6:	931b      	str	r3, [sp, #108]	@ 0x6c
 80094a8:	bf14      	ite	ne
 80094aa:	f104 33ff 	addne.w	r3, r4, #4294967295
 80094ae:	4623      	moveq	r3, r4
 80094b0:	9304      	str	r3, [sp, #16]
 80094b2:	9307      	str	r3, [sp, #28]
 80094b4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80094b8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80094bc:	ab21      	add	r3, sp, #132	@ 0x84
 80094be:	9301      	str	r3, [sp, #4]
 80094c0:	f000 fac0 	bl	8009a44 <_svfiprintf_r>
 80094c4:	1c43      	adds	r3, r0, #1
 80094c6:	bfbc      	itt	lt
 80094c8:	238b      	movlt	r3, #139	@ 0x8b
 80094ca:	602b      	strlt	r3, [r5, #0]
 80094cc:	2c00      	cmp	r4, #0
 80094ce:	d0da      	beq.n	8009486 <sniprintf+0x16>
 80094d0:	9b02      	ldr	r3, [sp, #8]
 80094d2:	2200      	movs	r2, #0
 80094d4:	701a      	strb	r2, [r3, #0]
 80094d6:	e7d6      	b.n	8009486 <sniprintf+0x16>
 80094d8:	2000002c 	.word	0x2000002c

080094dc <__sread>:
 80094dc:	b510      	push	{r4, lr}
 80094de:	460c      	mov	r4, r1
 80094e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094e4:	f000 f8fc 	bl	80096e0 <_read_r>
 80094e8:	2800      	cmp	r0, #0
 80094ea:	bfab      	itete	ge
 80094ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80094ee:	89a3      	ldrhlt	r3, [r4, #12]
 80094f0:	181b      	addge	r3, r3, r0
 80094f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80094f6:	bfac      	ite	ge
 80094f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80094fa:	81a3      	strhlt	r3, [r4, #12]
 80094fc:	bd10      	pop	{r4, pc}

080094fe <__swrite>:
 80094fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009502:	461f      	mov	r7, r3
 8009504:	898b      	ldrh	r3, [r1, #12]
 8009506:	4605      	mov	r5, r0
 8009508:	460c      	mov	r4, r1
 800950a:	05db      	lsls	r3, r3, #23
 800950c:	4616      	mov	r6, r2
 800950e:	d505      	bpl.n	800951c <__swrite+0x1e>
 8009510:	2302      	movs	r3, #2
 8009512:	2200      	movs	r2, #0
 8009514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009518:	f000 f8d0 	bl	80096bc <_lseek_r>
 800951c:	89a3      	ldrh	r3, [r4, #12]
 800951e:	4632      	mov	r2, r6
 8009520:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009524:	4628      	mov	r0, r5
 8009526:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800952a:	81a3      	strh	r3, [r4, #12]
 800952c:	463b      	mov	r3, r7
 800952e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009532:	f000 b8e7 	b.w	8009704 <_write_r>

08009536 <__sseek>:
 8009536:	b510      	push	{r4, lr}
 8009538:	460c      	mov	r4, r1
 800953a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800953e:	f000 f8bd 	bl	80096bc <_lseek_r>
 8009542:	1c43      	adds	r3, r0, #1
 8009544:	89a3      	ldrh	r3, [r4, #12]
 8009546:	bf15      	itete	ne
 8009548:	6560      	strne	r0, [r4, #84]	@ 0x54
 800954a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800954e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009552:	81a3      	strheq	r3, [r4, #12]
 8009554:	bf18      	it	ne
 8009556:	81a3      	strhne	r3, [r4, #12]
 8009558:	bd10      	pop	{r4, pc}

0800955a <__sclose>:
 800955a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800955e:	f000 b89d 	b.w	800969c <_close_r>

08009562 <__swbuf_r>:
 8009562:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009564:	460e      	mov	r6, r1
 8009566:	4614      	mov	r4, r2
 8009568:	4605      	mov	r5, r0
 800956a:	b118      	cbz	r0, 8009574 <__swbuf_r+0x12>
 800956c:	6a03      	ldr	r3, [r0, #32]
 800956e:	b90b      	cbnz	r3, 8009574 <__swbuf_r+0x12>
 8009570:	f7ff fed8 	bl	8009324 <__sinit>
 8009574:	69a3      	ldr	r3, [r4, #24]
 8009576:	60a3      	str	r3, [r4, #8]
 8009578:	89a3      	ldrh	r3, [r4, #12]
 800957a:	071a      	lsls	r2, r3, #28
 800957c:	d501      	bpl.n	8009582 <__swbuf_r+0x20>
 800957e:	6923      	ldr	r3, [r4, #16]
 8009580:	b943      	cbnz	r3, 8009594 <__swbuf_r+0x32>
 8009582:	4621      	mov	r1, r4
 8009584:	4628      	mov	r0, r5
 8009586:	f000 f82b 	bl	80095e0 <__swsetup_r>
 800958a:	b118      	cbz	r0, 8009594 <__swbuf_r+0x32>
 800958c:	f04f 37ff 	mov.w	r7, #4294967295
 8009590:	4638      	mov	r0, r7
 8009592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009594:	6823      	ldr	r3, [r4, #0]
 8009596:	b2f6      	uxtb	r6, r6
 8009598:	6922      	ldr	r2, [r4, #16]
 800959a:	4637      	mov	r7, r6
 800959c:	1a98      	subs	r0, r3, r2
 800959e:	6963      	ldr	r3, [r4, #20]
 80095a0:	4283      	cmp	r3, r0
 80095a2:	dc05      	bgt.n	80095b0 <__swbuf_r+0x4e>
 80095a4:	4621      	mov	r1, r4
 80095a6:	4628      	mov	r0, r5
 80095a8:	f000 fe9e 	bl	800a2e8 <_fflush_r>
 80095ac:	2800      	cmp	r0, #0
 80095ae:	d1ed      	bne.n	800958c <__swbuf_r+0x2a>
 80095b0:	68a3      	ldr	r3, [r4, #8]
 80095b2:	3b01      	subs	r3, #1
 80095b4:	60a3      	str	r3, [r4, #8]
 80095b6:	6823      	ldr	r3, [r4, #0]
 80095b8:	1c5a      	adds	r2, r3, #1
 80095ba:	6022      	str	r2, [r4, #0]
 80095bc:	701e      	strb	r6, [r3, #0]
 80095be:	1c43      	adds	r3, r0, #1
 80095c0:	6962      	ldr	r2, [r4, #20]
 80095c2:	429a      	cmp	r2, r3
 80095c4:	d004      	beq.n	80095d0 <__swbuf_r+0x6e>
 80095c6:	89a3      	ldrh	r3, [r4, #12]
 80095c8:	07db      	lsls	r3, r3, #31
 80095ca:	d5e1      	bpl.n	8009590 <__swbuf_r+0x2e>
 80095cc:	2e0a      	cmp	r6, #10
 80095ce:	d1df      	bne.n	8009590 <__swbuf_r+0x2e>
 80095d0:	4621      	mov	r1, r4
 80095d2:	4628      	mov	r0, r5
 80095d4:	f000 fe88 	bl	800a2e8 <_fflush_r>
 80095d8:	2800      	cmp	r0, #0
 80095da:	d0d9      	beq.n	8009590 <__swbuf_r+0x2e>
 80095dc:	e7d6      	b.n	800958c <__swbuf_r+0x2a>
	...

080095e0 <__swsetup_r>:
 80095e0:	b538      	push	{r3, r4, r5, lr}
 80095e2:	4b29      	ldr	r3, [pc, #164]	@ (8009688 <__swsetup_r+0xa8>)
 80095e4:	4605      	mov	r5, r0
 80095e6:	460c      	mov	r4, r1
 80095e8:	6818      	ldr	r0, [r3, #0]
 80095ea:	b118      	cbz	r0, 80095f4 <__swsetup_r+0x14>
 80095ec:	6a03      	ldr	r3, [r0, #32]
 80095ee:	b90b      	cbnz	r3, 80095f4 <__swsetup_r+0x14>
 80095f0:	f7ff fe98 	bl	8009324 <__sinit>
 80095f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095f8:	0719      	lsls	r1, r3, #28
 80095fa:	d422      	bmi.n	8009642 <__swsetup_r+0x62>
 80095fc:	06da      	lsls	r2, r3, #27
 80095fe:	d407      	bmi.n	8009610 <__swsetup_r+0x30>
 8009600:	2209      	movs	r2, #9
 8009602:	602a      	str	r2, [r5, #0]
 8009604:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009608:	f04f 30ff 	mov.w	r0, #4294967295
 800960c:	81a3      	strh	r3, [r4, #12]
 800960e:	e033      	b.n	8009678 <__swsetup_r+0x98>
 8009610:	0758      	lsls	r0, r3, #29
 8009612:	d512      	bpl.n	800963a <__swsetup_r+0x5a>
 8009614:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009616:	b141      	cbz	r1, 800962a <__swsetup_r+0x4a>
 8009618:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800961c:	4299      	cmp	r1, r3
 800961e:	d002      	beq.n	8009626 <__swsetup_r+0x46>
 8009620:	4628      	mov	r0, r5
 8009622:	f000 f8bb 	bl	800979c <_free_r>
 8009626:	2300      	movs	r3, #0
 8009628:	6363      	str	r3, [r4, #52]	@ 0x34
 800962a:	89a3      	ldrh	r3, [r4, #12]
 800962c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009630:	81a3      	strh	r3, [r4, #12]
 8009632:	2300      	movs	r3, #0
 8009634:	6063      	str	r3, [r4, #4]
 8009636:	6923      	ldr	r3, [r4, #16]
 8009638:	6023      	str	r3, [r4, #0]
 800963a:	89a3      	ldrh	r3, [r4, #12]
 800963c:	f043 0308 	orr.w	r3, r3, #8
 8009640:	81a3      	strh	r3, [r4, #12]
 8009642:	6923      	ldr	r3, [r4, #16]
 8009644:	b94b      	cbnz	r3, 800965a <__swsetup_r+0x7a>
 8009646:	89a3      	ldrh	r3, [r4, #12]
 8009648:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800964c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009650:	d003      	beq.n	800965a <__swsetup_r+0x7a>
 8009652:	4621      	mov	r1, r4
 8009654:	4628      	mov	r0, r5
 8009656:	f000 fe94 	bl	800a382 <__smakebuf_r>
 800965a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800965e:	f013 0201 	ands.w	r2, r3, #1
 8009662:	d00a      	beq.n	800967a <__swsetup_r+0x9a>
 8009664:	2200      	movs	r2, #0
 8009666:	60a2      	str	r2, [r4, #8]
 8009668:	6962      	ldr	r2, [r4, #20]
 800966a:	4252      	negs	r2, r2
 800966c:	61a2      	str	r2, [r4, #24]
 800966e:	6922      	ldr	r2, [r4, #16]
 8009670:	b942      	cbnz	r2, 8009684 <__swsetup_r+0xa4>
 8009672:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009676:	d1c5      	bne.n	8009604 <__swsetup_r+0x24>
 8009678:	bd38      	pop	{r3, r4, r5, pc}
 800967a:	0799      	lsls	r1, r3, #30
 800967c:	bf58      	it	pl
 800967e:	6962      	ldrpl	r2, [r4, #20]
 8009680:	60a2      	str	r2, [r4, #8]
 8009682:	e7f4      	b.n	800966e <__swsetup_r+0x8e>
 8009684:	2000      	movs	r0, #0
 8009686:	e7f7      	b.n	8009678 <__swsetup_r+0x98>
 8009688:	2000002c 	.word	0x2000002c

0800968c <memset>:
 800968c:	4402      	add	r2, r0
 800968e:	4603      	mov	r3, r0
 8009690:	4293      	cmp	r3, r2
 8009692:	d100      	bne.n	8009696 <memset+0xa>
 8009694:	4770      	bx	lr
 8009696:	f803 1b01 	strb.w	r1, [r3], #1
 800969a:	e7f9      	b.n	8009690 <memset+0x4>

0800969c <_close_r>:
 800969c:	b538      	push	{r3, r4, r5, lr}
 800969e:	2300      	movs	r3, #0
 80096a0:	4d05      	ldr	r5, [pc, #20]	@ (80096b8 <_close_r+0x1c>)
 80096a2:	4604      	mov	r4, r0
 80096a4:	4608      	mov	r0, r1
 80096a6:	602b      	str	r3, [r5, #0]
 80096a8:	f7f8 fcbb 	bl	8002022 <_close>
 80096ac:	1c43      	adds	r3, r0, #1
 80096ae:	d102      	bne.n	80096b6 <_close_r+0x1a>
 80096b0:	682b      	ldr	r3, [r5, #0]
 80096b2:	b103      	cbz	r3, 80096b6 <_close_r+0x1a>
 80096b4:	6023      	str	r3, [r4, #0]
 80096b6:	bd38      	pop	{r3, r4, r5, pc}
 80096b8:	20000554 	.word	0x20000554

080096bc <_lseek_r>:
 80096bc:	b538      	push	{r3, r4, r5, lr}
 80096be:	4604      	mov	r4, r0
 80096c0:	4d06      	ldr	r5, [pc, #24]	@ (80096dc <_lseek_r+0x20>)
 80096c2:	4608      	mov	r0, r1
 80096c4:	4611      	mov	r1, r2
 80096c6:	2200      	movs	r2, #0
 80096c8:	602a      	str	r2, [r5, #0]
 80096ca:	461a      	mov	r2, r3
 80096cc:	f7f8 fcd0 	bl	8002070 <_lseek>
 80096d0:	1c43      	adds	r3, r0, #1
 80096d2:	d102      	bne.n	80096da <_lseek_r+0x1e>
 80096d4:	682b      	ldr	r3, [r5, #0]
 80096d6:	b103      	cbz	r3, 80096da <_lseek_r+0x1e>
 80096d8:	6023      	str	r3, [r4, #0]
 80096da:	bd38      	pop	{r3, r4, r5, pc}
 80096dc:	20000554 	.word	0x20000554

080096e0 <_read_r>:
 80096e0:	b538      	push	{r3, r4, r5, lr}
 80096e2:	4604      	mov	r4, r0
 80096e4:	4d06      	ldr	r5, [pc, #24]	@ (8009700 <_read_r+0x20>)
 80096e6:	4608      	mov	r0, r1
 80096e8:	4611      	mov	r1, r2
 80096ea:	2200      	movs	r2, #0
 80096ec:	602a      	str	r2, [r5, #0]
 80096ee:	461a      	mov	r2, r3
 80096f0:	f7f8 fc5e 	bl	8001fb0 <_read>
 80096f4:	1c43      	adds	r3, r0, #1
 80096f6:	d102      	bne.n	80096fe <_read_r+0x1e>
 80096f8:	682b      	ldr	r3, [r5, #0]
 80096fa:	b103      	cbz	r3, 80096fe <_read_r+0x1e>
 80096fc:	6023      	str	r3, [r4, #0]
 80096fe:	bd38      	pop	{r3, r4, r5, pc}
 8009700:	20000554 	.word	0x20000554

08009704 <_write_r>:
 8009704:	b538      	push	{r3, r4, r5, lr}
 8009706:	4604      	mov	r4, r0
 8009708:	4d06      	ldr	r5, [pc, #24]	@ (8009724 <_write_r+0x20>)
 800970a:	4608      	mov	r0, r1
 800970c:	4611      	mov	r1, r2
 800970e:	2200      	movs	r2, #0
 8009710:	602a      	str	r2, [r5, #0]
 8009712:	461a      	mov	r2, r3
 8009714:	f7f8 fc69 	bl	8001fea <_write>
 8009718:	1c43      	adds	r3, r0, #1
 800971a:	d102      	bne.n	8009722 <_write_r+0x1e>
 800971c:	682b      	ldr	r3, [r5, #0]
 800971e:	b103      	cbz	r3, 8009722 <_write_r+0x1e>
 8009720:	6023      	str	r3, [r4, #0]
 8009722:	bd38      	pop	{r3, r4, r5, pc}
 8009724:	20000554 	.word	0x20000554

08009728 <__errno>:
 8009728:	4b01      	ldr	r3, [pc, #4]	@ (8009730 <__errno+0x8>)
 800972a:	6818      	ldr	r0, [r3, #0]
 800972c:	4770      	bx	lr
 800972e:	bf00      	nop
 8009730:	2000002c 	.word	0x2000002c

08009734 <__libc_init_array>:
 8009734:	b570      	push	{r4, r5, r6, lr}
 8009736:	4d0d      	ldr	r5, [pc, #52]	@ (800976c <__libc_init_array+0x38>)
 8009738:	2600      	movs	r6, #0
 800973a:	4c0d      	ldr	r4, [pc, #52]	@ (8009770 <__libc_init_array+0x3c>)
 800973c:	1b64      	subs	r4, r4, r5
 800973e:	10a4      	asrs	r4, r4, #2
 8009740:	42a6      	cmp	r6, r4
 8009742:	d109      	bne.n	8009758 <__libc_init_array+0x24>
 8009744:	4d0b      	ldr	r5, [pc, #44]	@ (8009774 <__libc_init_array+0x40>)
 8009746:	2600      	movs	r6, #0
 8009748:	4c0b      	ldr	r4, [pc, #44]	@ (8009778 <__libc_init_array+0x44>)
 800974a:	f000 fee7 	bl	800a51c <_init>
 800974e:	1b64      	subs	r4, r4, r5
 8009750:	10a4      	asrs	r4, r4, #2
 8009752:	42a6      	cmp	r6, r4
 8009754:	d105      	bne.n	8009762 <__libc_init_array+0x2e>
 8009756:	bd70      	pop	{r4, r5, r6, pc}
 8009758:	f855 3b04 	ldr.w	r3, [r5], #4
 800975c:	3601      	adds	r6, #1
 800975e:	4798      	blx	r3
 8009760:	e7ee      	b.n	8009740 <__libc_init_array+0xc>
 8009762:	f855 3b04 	ldr.w	r3, [r5], #4
 8009766:	3601      	adds	r6, #1
 8009768:	4798      	blx	r3
 800976a:	e7f2      	b.n	8009752 <__libc_init_array+0x1e>
 800976c:	0802165c 	.word	0x0802165c
 8009770:	0802165c 	.word	0x0802165c
 8009774:	0802165c 	.word	0x0802165c
 8009778:	08021660 	.word	0x08021660

0800977c <__retarget_lock_init_recursive>:
 800977c:	4770      	bx	lr

0800977e <__retarget_lock_acquire_recursive>:
 800977e:	4770      	bx	lr

08009780 <__retarget_lock_release_recursive>:
 8009780:	4770      	bx	lr

08009782 <memcpy>:
 8009782:	440a      	add	r2, r1
 8009784:	1e43      	subs	r3, r0, #1
 8009786:	4291      	cmp	r1, r2
 8009788:	d100      	bne.n	800978c <memcpy+0xa>
 800978a:	4770      	bx	lr
 800978c:	b510      	push	{r4, lr}
 800978e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009792:	4291      	cmp	r1, r2
 8009794:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009798:	d1f9      	bne.n	800978e <memcpy+0xc>
 800979a:	bd10      	pop	{r4, pc}

0800979c <_free_r>:
 800979c:	b538      	push	{r3, r4, r5, lr}
 800979e:	4605      	mov	r5, r0
 80097a0:	2900      	cmp	r1, #0
 80097a2:	d041      	beq.n	8009828 <_free_r+0x8c>
 80097a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097a8:	1f0c      	subs	r4, r1, #4
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	bfb8      	it	lt
 80097ae:	18e4      	addlt	r4, r4, r3
 80097b0:	f000 f8e0 	bl	8009974 <__malloc_lock>
 80097b4:	4a1d      	ldr	r2, [pc, #116]	@ (800982c <_free_r+0x90>)
 80097b6:	6813      	ldr	r3, [r2, #0]
 80097b8:	b933      	cbnz	r3, 80097c8 <_free_r+0x2c>
 80097ba:	6063      	str	r3, [r4, #4]
 80097bc:	6014      	str	r4, [r2, #0]
 80097be:	4628      	mov	r0, r5
 80097c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80097c4:	f000 b8dc 	b.w	8009980 <__malloc_unlock>
 80097c8:	42a3      	cmp	r3, r4
 80097ca:	d908      	bls.n	80097de <_free_r+0x42>
 80097cc:	6820      	ldr	r0, [r4, #0]
 80097ce:	1821      	adds	r1, r4, r0
 80097d0:	428b      	cmp	r3, r1
 80097d2:	bf01      	itttt	eq
 80097d4:	6819      	ldreq	r1, [r3, #0]
 80097d6:	685b      	ldreq	r3, [r3, #4]
 80097d8:	1809      	addeq	r1, r1, r0
 80097da:	6021      	streq	r1, [r4, #0]
 80097dc:	e7ed      	b.n	80097ba <_free_r+0x1e>
 80097de:	461a      	mov	r2, r3
 80097e0:	685b      	ldr	r3, [r3, #4]
 80097e2:	b10b      	cbz	r3, 80097e8 <_free_r+0x4c>
 80097e4:	42a3      	cmp	r3, r4
 80097e6:	d9fa      	bls.n	80097de <_free_r+0x42>
 80097e8:	6811      	ldr	r1, [r2, #0]
 80097ea:	1850      	adds	r0, r2, r1
 80097ec:	42a0      	cmp	r0, r4
 80097ee:	d10b      	bne.n	8009808 <_free_r+0x6c>
 80097f0:	6820      	ldr	r0, [r4, #0]
 80097f2:	4401      	add	r1, r0
 80097f4:	1850      	adds	r0, r2, r1
 80097f6:	6011      	str	r1, [r2, #0]
 80097f8:	4283      	cmp	r3, r0
 80097fa:	d1e0      	bne.n	80097be <_free_r+0x22>
 80097fc:	6818      	ldr	r0, [r3, #0]
 80097fe:	685b      	ldr	r3, [r3, #4]
 8009800:	4408      	add	r0, r1
 8009802:	6053      	str	r3, [r2, #4]
 8009804:	6010      	str	r0, [r2, #0]
 8009806:	e7da      	b.n	80097be <_free_r+0x22>
 8009808:	d902      	bls.n	8009810 <_free_r+0x74>
 800980a:	230c      	movs	r3, #12
 800980c:	602b      	str	r3, [r5, #0]
 800980e:	e7d6      	b.n	80097be <_free_r+0x22>
 8009810:	6820      	ldr	r0, [r4, #0]
 8009812:	1821      	adds	r1, r4, r0
 8009814:	428b      	cmp	r3, r1
 8009816:	bf02      	ittt	eq
 8009818:	6819      	ldreq	r1, [r3, #0]
 800981a:	685b      	ldreq	r3, [r3, #4]
 800981c:	1809      	addeq	r1, r1, r0
 800981e:	6063      	str	r3, [r4, #4]
 8009820:	bf08      	it	eq
 8009822:	6021      	streq	r1, [r4, #0]
 8009824:	6054      	str	r4, [r2, #4]
 8009826:	e7ca      	b.n	80097be <_free_r+0x22>
 8009828:	bd38      	pop	{r3, r4, r5, pc}
 800982a:	bf00      	nop
 800982c:	20000560 	.word	0x20000560

08009830 <sbrk_aligned>:
 8009830:	b570      	push	{r4, r5, r6, lr}
 8009832:	4e0f      	ldr	r6, [pc, #60]	@ (8009870 <sbrk_aligned+0x40>)
 8009834:	460c      	mov	r4, r1
 8009836:	4605      	mov	r5, r0
 8009838:	6831      	ldr	r1, [r6, #0]
 800983a:	b911      	cbnz	r1, 8009842 <sbrk_aligned+0x12>
 800983c:	f000 fe1a 	bl	800a474 <_sbrk_r>
 8009840:	6030      	str	r0, [r6, #0]
 8009842:	4621      	mov	r1, r4
 8009844:	4628      	mov	r0, r5
 8009846:	f000 fe15 	bl	800a474 <_sbrk_r>
 800984a:	1c43      	adds	r3, r0, #1
 800984c:	d103      	bne.n	8009856 <sbrk_aligned+0x26>
 800984e:	f04f 34ff 	mov.w	r4, #4294967295
 8009852:	4620      	mov	r0, r4
 8009854:	bd70      	pop	{r4, r5, r6, pc}
 8009856:	1cc4      	adds	r4, r0, #3
 8009858:	f024 0403 	bic.w	r4, r4, #3
 800985c:	42a0      	cmp	r0, r4
 800985e:	d0f8      	beq.n	8009852 <sbrk_aligned+0x22>
 8009860:	1a21      	subs	r1, r4, r0
 8009862:	4628      	mov	r0, r5
 8009864:	f000 fe06 	bl	800a474 <_sbrk_r>
 8009868:	3001      	adds	r0, #1
 800986a:	d1f2      	bne.n	8009852 <sbrk_aligned+0x22>
 800986c:	e7ef      	b.n	800984e <sbrk_aligned+0x1e>
 800986e:	bf00      	nop
 8009870:	2000055c 	.word	0x2000055c

08009874 <_malloc_r>:
 8009874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009878:	1ccd      	adds	r5, r1, #3
 800987a:	4606      	mov	r6, r0
 800987c:	f025 0503 	bic.w	r5, r5, #3
 8009880:	3508      	adds	r5, #8
 8009882:	2d0c      	cmp	r5, #12
 8009884:	bf38      	it	cc
 8009886:	250c      	movcc	r5, #12
 8009888:	2d00      	cmp	r5, #0
 800988a:	db01      	blt.n	8009890 <_malloc_r+0x1c>
 800988c:	42a9      	cmp	r1, r5
 800988e:	d904      	bls.n	800989a <_malloc_r+0x26>
 8009890:	230c      	movs	r3, #12
 8009892:	6033      	str	r3, [r6, #0]
 8009894:	2000      	movs	r0, #0
 8009896:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800989a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009970 <_malloc_r+0xfc>
 800989e:	f000 f869 	bl	8009974 <__malloc_lock>
 80098a2:	f8d8 3000 	ldr.w	r3, [r8]
 80098a6:	461c      	mov	r4, r3
 80098a8:	bb44      	cbnz	r4, 80098fc <_malloc_r+0x88>
 80098aa:	4629      	mov	r1, r5
 80098ac:	4630      	mov	r0, r6
 80098ae:	f7ff ffbf 	bl	8009830 <sbrk_aligned>
 80098b2:	1c43      	adds	r3, r0, #1
 80098b4:	4604      	mov	r4, r0
 80098b6:	d158      	bne.n	800996a <_malloc_r+0xf6>
 80098b8:	f8d8 4000 	ldr.w	r4, [r8]
 80098bc:	4627      	mov	r7, r4
 80098be:	2f00      	cmp	r7, #0
 80098c0:	d143      	bne.n	800994a <_malloc_r+0xd6>
 80098c2:	2c00      	cmp	r4, #0
 80098c4:	d04b      	beq.n	800995e <_malloc_r+0xea>
 80098c6:	6823      	ldr	r3, [r4, #0]
 80098c8:	4639      	mov	r1, r7
 80098ca:	4630      	mov	r0, r6
 80098cc:	eb04 0903 	add.w	r9, r4, r3
 80098d0:	f000 fdd0 	bl	800a474 <_sbrk_r>
 80098d4:	4581      	cmp	r9, r0
 80098d6:	d142      	bne.n	800995e <_malloc_r+0xea>
 80098d8:	6821      	ldr	r1, [r4, #0]
 80098da:	4630      	mov	r0, r6
 80098dc:	1a6d      	subs	r5, r5, r1
 80098de:	4629      	mov	r1, r5
 80098e0:	f7ff ffa6 	bl	8009830 <sbrk_aligned>
 80098e4:	3001      	adds	r0, #1
 80098e6:	d03a      	beq.n	800995e <_malloc_r+0xea>
 80098e8:	6823      	ldr	r3, [r4, #0]
 80098ea:	442b      	add	r3, r5
 80098ec:	6023      	str	r3, [r4, #0]
 80098ee:	f8d8 3000 	ldr.w	r3, [r8]
 80098f2:	685a      	ldr	r2, [r3, #4]
 80098f4:	bb62      	cbnz	r2, 8009950 <_malloc_r+0xdc>
 80098f6:	f8c8 7000 	str.w	r7, [r8]
 80098fa:	e00f      	b.n	800991c <_malloc_r+0xa8>
 80098fc:	6822      	ldr	r2, [r4, #0]
 80098fe:	1b52      	subs	r2, r2, r5
 8009900:	d420      	bmi.n	8009944 <_malloc_r+0xd0>
 8009902:	2a0b      	cmp	r2, #11
 8009904:	d917      	bls.n	8009936 <_malloc_r+0xc2>
 8009906:	1961      	adds	r1, r4, r5
 8009908:	42a3      	cmp	r3, r4
 800990a:	6025      	str	r5, [r4, #0]
 800990c:	bf18      	it	ne
 800990e:	6059      	strne	r1, [r3, #4]
 8009910:	6863      	ldr	r3, [r4, #4]
 8009912:	bf08      	it	eq
 8009914:	f8c8 1000 	streq.w	r1, [r8]
 8009918:	5162      	str	r2, [r4, r5]
 800991a:	604b      	str	r3, [r1, #4]
 800991c:	4630      	mov	r0, r6
 800991e:	f000 f82f 	bl	8009980 <__malloc_unlock>
 8009922:	f104 000b 	add.w	r0, r4, #11
 8009926:	1d23      	adds	r3, r4, #4
 8009928:	f020 0007 	bic.w	r0, r0, #7
 800992c:	1ac2      	subs	r2, r0, r3
 800992e:	bf1c      	itt	ne
 8009930:	1a1b      	subne	r3, r3, r0
 8009932:	50a3      	strne	r3, [r4, r2]
 8009934:	e7af      	b.n	8009896 <_malloc_r+0x22>
 8009936:	6862      	ldr	r2, [r4, #4]
 8009938:	42a3      	cmp	r3, r4
 800993a:	bf0c      	ite	eq
 800993c:	f8c8 2000 	streq.w	r2, [r8]
 8009940:	605a      	strne	r2, [r3, #4]
 8009942:	e7eb      	b.n	800991c <_malloc_r+0xa8>
 8009944:	4623      	mov	r3, r4
 8009946:	6864      	ldr	r4, [r4, #4]
 8009948:	e7ae      	b.n	80098a8 <_malloc_r+0x34>
 800994a:	463c      	mov	r4, r7
 800994c:	687f      	ldr	r7, [r7, #4]
 800994e:	e7b6      	b.n	80098be <_malloc_r+0x4a>
 8009950:	461a      	mov	r2, r3
 8009952:	685b      	ldr	r3, [r3, #4]
 8009954:	42a3      	cmp	r3, r4
 8009956:	d1fb      	bne.n	8009950 <_malloc_r+0xdc>
 8009958:	2300      	movs	r3, #0
 800995a:	6053      	str	r3, [r2, #4]
 800995c:	e7de      	b.n	800991c <_malloc_r+0xa8>
 800995e:	230c      	movs	r3, #12
 8009960:	4630      	mov	r0, r6
 8009962:	6033      	str	r3, [r6, #0]
 8009964:	f000 f80c 	bl	8009980 <__malloc_unlock>
 8009968:	e794      	b.n	8009894 <_malloc_r+0x20>
 800996a:	6005      	str	r5, [r0, #0]
 800996c:	e7d6      	b.n	800991c <_malloc_r+0xa8>
 800996e:	bf00      	nop
 8009970:	20000560 	.word	0x20000560

08009974 <__malloc_lock>:
 8009974:	4801      	ldr	r0, [pc, #4]	@ (800997c <__malloc_lock+0x8>)
 8009976:	f7ff bf02 	b.w	800977e <__retarget_lock_acquire_recursive>
 800997a:	bf00      	nop
 800997c:	20000558 	.word	0x20000558

08009980 <__malloc_unlock>:
 8009980:	4801      	ldr	r0, [pc, #4]	@ (8009988 <__malloc_unlock+0x8>)
 8009982:	f7ff befd 	b.w	8009780 <__retarget_lock_release_recursive>
 8009986:	bf00      	nop
 8009988:	20000558 	.word	0x20000558

0800998c <__ssputs_r>:
 800998c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009990:	461f      	mov	r7, r3
 8009992:	688e      	ldr	r6, [r1, #8]
 8009994:	4682      	mov	sl, r0
 8009996:	460c      	mov	r4, r1
 8009998:	42be      	cmp	r6, r7
 800999a:	4690      	mov	r8, r2
 800999c:	680b      	ldr	r3, [r1, #0]
 800999e:	d82d      	bhi.n	80099fc <__ssputs_r+0x70>
 80099a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80099a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80099a8:	d026      	beq.n	80099f8 <__ssputs_r+0x6c>
 80099aa:	6965      	ldr	r5, [r4, #20]
 80099ac:	6909      	ldr	r1, [r1, #16]
 80099ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80099b2:	eba3 0901 	sub.w	r9, r3, r1
 80099b6:	1c7b      	adds	r3, r7, #1
 80099b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80099bc:	444b      	add	r3, r9
 80099be:	106d      	asrs	r5, r5, #1
 80099c0:	429d      	cmp	r5, r3
 80099c2:	bf38      	it	cc
 80099c4:	461d      	movcc	r5, r3
 80099c6:	0553      	lsls	r3, r2, #21
 80099c8:	d527      	bpl.n	8009a1a <__ssputs_r+0x8e>
 80099ca:	4629      	mov	r1, r5
 80099cc:	f7ff ff52 	bl	8009874 <_malloc_r>
 80099d0:	4606      	mov	r6, r0
 80099d2:	b360      	cbz	r0, 8009a2e <__ssputs_r+0xa2>
 80099d4:	464a      	mov	r2, r9
 80099d6:	6921      	ldr	r1, [r4, #16]
 80099d8:	f7ff fed3 	bl	8009782 <memcpy>
 80099dc:	89a3      	ldrh	r3, [r4, #12]
 80099de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80099e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099e6:	81a3      	strh	r3, [r4, #12]
 80099e8:	6126      	str	r6, [r4, #16]
 80099ea:	444e      	add	r6, r9
 80099ec:	6165      	str	r5, [r4, #20]
 80099ee:	eba5 0509 	sub.w	r5, r5, r9
 80099f2:	6026      	str	r6, [r4, #0]
 80099f4:	463e      	mov	r6, r7
 80099f6:	60a5      	str	r5, [r4, #8]
 80099f8:	42be      	cmp	r6, r7
 80099fa:	d900      	bls.n	80099fe <__ssputs_r+0x72>
 80099fc:	463e      	mov	r6, r7
 80099fe:	4632      	mov	r2, r6
 8009a00:	4641      	mov	r1, r8
 8009a02:	6820      	ldr	r0, [r4, #0]
 8009a04:	f000 fcf9 	bl	800a3fa <memmove>
 8009a08:	68a3      	ldr	r3, [r4, #8]
 8009a0a:	2000      	movs	r0, #0
 8009a0c:	1b9b      	subs	r3, r3, r6
 8009a0e:	60a3      	str	r3, [r4, #8]
 8009a10:	6823      	ldr	r3, [r4, #0]
 8009a12:	4433      	add	r3, r6
 8009a14:	6023      	str	r3, [r4, #0]
 8009a16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a1a:	462a      	mov	r2, r5
 8009a1c:	f000 fd48 	bl	800a4b0 <_realloc_r>
 8009a20:	4606      	mov	r6, r0
 8009a22:	2800      	cmp	r0, #0
 8009a24:	d1e0      	bne.n	80099e8 <__ssputs_r+0x5c>
 8009a26:	6921      	ldr	r1, [r4, #16]
 8009a28:	4650      	mov	r0, sl
 8009a2a:	f7ff feb7 	bl	800979c <_free_r>
 8009a2e:	230c      	movs	r3, #12
 8009a30:	f04f 30ff 	mov.w	r0, #4294967295
 8009a34:	f8ca 3000 	str.w	r3, [sl]
 8009a38:	89a3      	ldrh	r3, [r4, #12]
 8009a3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a3e:	81a3      	strh	r3, [r4, #12]
 8009a40:	e7e9      	b.n	8009a16 <__ssputs_r+0x8a>
	...

08009a44 <_svfiprintf_r>:
 8009a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a48:	4698      	mov	r8, r3
 8009a4a:	898b      	ldrh	r3, [r1, #12]
 8009a4c:	b09d      	sub	sp, #116	@ 0x74
 8009a4e:	4607      	mov	r7, r0
 8009a50:	061b      	lsls	r3, r3, #24
 8009a52:	460d      	mov	r5, r1
 8009a54:	4614      	mov	r4, r2
 8009a56:	d510      	bpl.n	8009a7a <_svfiprintf_r+0x36>
 8009a58:	690b      	ldr	r3, [r1, #16]
 8009a5a:	b973      	cbnz	r3, 8009a7a <_svfiprintf_r+0x36>
 8009a5c:	2140      	movs	r1, #64	@ 0x40
 8009a5e:	f7ff ff09 	bl	8009874 <_malloc_r>
 8009a62:	6028      	str	r0, [r5, #0]
 8009a64:	6128      	str	r0, [r5, #16]
 8009a66:	b930      	cbnz	r0, 8009a76 <_svfiprintf_r+0x32>
 8009a68:	230c      	movs	r3, #12
 8009a6a:	603b      	str	r3, [r7, #0]
 8009a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a70:	b01d      	add	sp, #116	@ 0x74
 8009a72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a76:	2340      	movs	r3, #64	@ 0x40
 8009a78:	616b      	str	r3, [r5, #20]
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a80:	f04f 0901 	mov.w	r9, #1
 8009a84:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 8009c28 <_svfiprintf_r+0x1e4>
 8009a88:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a8a:	2320      	movs	r3, #32
 8009a8c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009a90:	2330      	movs	r3, #48	@ 0x30
 8009a92:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009a96:	4623      	mov	r3, r4
 8009a98:	469a      	mov	sl, r3
 8009a9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a9e:	b10a      	cbz	r2, 8009aa4 <_svfiprintf_r+0x60>
 8009aa0:	2a25      	cmp	r2, #37	@ 0x25
 8009aa2:	d1f9      	bne.n	8009a98 <_svfiprintf_r+0x54>
 8009aa4:	ebba 0b04 	subs.w	fp, sl, r4
 8009aa8:	d00b      	beq.n	8009ac2 <_svfiprintf_r+0x7e>
 8009aaa:	465b      	mov	r3, fp
 8009aac:	4622      	mov	r2, r4
 8009aae:	4629      	mov	r1, r5
 8009ab0:	4638      	mov	r0, r7
 8009ab2:	f7ff ff6b 	bl	800998c <__ssputs_r>
 8009ab6:	3001      	adds	r0, #1
 8009ab8:	f000 80a7 	beq.w	8009c0a <_svfiprintf_r+0x1c6>
 8009abc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009abe:	445a      	add	r2, fp
 8009ac0:	9209      	str	r2, [sp, #36]	@ 0x24
 8009ac2:	f89a 3000 	ldrb.w	r3, [sl]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	f000 809f 	beq.w	8009c0a <_svfiprintf_r+0x1c6>
 8009acc:	2300      	movs	r3, #0
 8009ace:	f04f 32ff 	mov.w	r2, #4294967295
 8009ad2:	f10a 0a01 	add.w	sl, sl, #1
 8009ad6:	9304      	str	r3, [sp, #16]
 8009ad8:	9307      	str	r3, [sp, #28]
 8009ada:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009ade:	931a      	str	r3, [sp, #104]	@ 0x68
 8009ae0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ae4:	4654      	mov	r4, sl
 8009ae6:	2205      	movs	r2, #5
 8009ae8:	484f      	ldr	r0, [pc, #316]	@ (8009c28 <_svfiprintf_r+0x1e4>)
 8009aea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009aee:	f000 fcd1 	bl	800a494 <memchr>
 8009af2:	9a04      	ldr	r2, [sp, #16]
 8009af4:	b9d8      	cbnz	r0, 8009b2e <_svfiprintf_r+0xea>
 8009af6:	06d0      	lsls	r0, r2, #27
 8009af8:	bf44      	itt	mi
 8009afa:	2320      	movmi	r3, #32
 8009afc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b00:	0711      	lsls	r1, r2, #28
 8009b02:	bf44      	itt	mi
 8009b04:	232b      	movmi	r3, #43	@ 0x2b
 8009b06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b0a:	f89a 3000 	ldrb.w	r3, [sl]
 8009b0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b10:	d015      	beq.n	8009b3e <_svfiprintf_r+0xfa>
 8009b12:	9a07      	ldr	r2, [sp, #28]
 8009b14:	4654      	mov	r4, sl
 8009b16:	2000      	movs	r0, #0
 8009b18:	f04f 0c0a 	mov.w	ip, #10
 8009b1c:	4621      	mov	r1, r4
 8009b1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b22:	3b30      	subs	r3, #48	@ 0x30
 8009b24:	2b09      	cmp	r3, #9
 8009b26:	d94b      	bls.n	8009bc0 <_svfiprintf_r+0x17c>
 8009b28:	b1b0      	cbz	r0, 8009b58 <_svfiprintf_r+0x114>
 8009b2a:	9207      	str	r2, [sp, #28]
 8009b2c:	e014      	b.n	8009b58 <_svfiprintf_r+0x114>
 8009b2e:	eba0 0308 	sub.w	r3, r0, r8
 8009b32:	46a2      	mov	sl, r4
 8009b34:	fa09 f303 	lsl.w	r3, r9, r3
 8009b38:	4313      	orrs	r3, r2
 8009b3a:	9304      	str	r3, [sp, #16]
 8009b3c:	e7d2      	b.n	8009ae4 <_svfiprintf_r+0xa0>
 8009b3e:	9b03      	ldr	r3, [sp, #12]
 8009b40:	1d19      	adds	r1, r3, #4
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	9103      	str	r1, [sp, #12]
 8009b48:	bfbb      	ittet	lt
 8009b4a:	425b      	neglt	r3, r3
 8009b4c:	f042 0202 	orrlt.w	r2, r2, #2
 8009b50:	9307      	strge	r3, [sp, #28]
 8009b52:	9307      	strlt	r3, [sp, #28]
 8009b54:	bfb8      	it	lt
 8009b56:	9204      	strlt	r2, [sp, #16]
 8009b58:	7823      	ldrb	r3, [r4, #0]
 8009b5a:	2b2e      	cmp	r3, #46	@ 0x2e
 8009b5c:	d10a      	bne.n	8009b74 <_svfiprintf_r+0x130>
 8009b5e:	7863      	ldrb	r3, [r4, #1]
 8009b60:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b62:	d132      	bne.n	8009bca <_svfiprintf_r+0x186>
 8009b64:	9b03      	ldr	r3, [sp, #12]
 8009b66:	3402      	adds	r4, #2
 8009b68:	1d1a      	adds	r2, r3, #4
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009b70:	9203      	str	r2, [sp, #12]
 8009b72:	9305      	str	r3, [sp, #20]
 8009b74:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009c38 <_svfiprintf_r+0x1f4>
 8009b78:	2203      	movs	r2, #3
 8009b7a:	7821      	ldrb	r1, [r4, #0]
 8009b7c:	4650      	mov	r0, sl
 8009b7e:	f000 fc89 	bl	800a494 <memchr>
 8009b82:	b138      	cbz	r0, 8009b94 <_svfiprintf_r+0x150>
 8009b84:	eba0 000a 	sub.w	r0, r0, sl
 8009b88:	2240      	movs	r2, #64	@ 0x40
 8009b8a:	9b04      	ldr	r3, [sp, #16]
 8009b8c:	3401      	adds	r4, #1
 8009b8e:	4082      	lsls	r2, r0
 8009b90:	4313      	orrs	r3, r2
 8009b92:	9304      	str	r3, [sp, #16]
 8009b94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b98:	2206      	movs	r2, #6
 8009b9a:	4824      	ldr	r0, [pc, #144]	@ (8009c2c <_svfiprintf_r+0x1e8>)
 8009b9c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009ba0:	f000 fc78 	bl	800a494 <memchr>
 8009ba4:	2800      	cmp	r0, #0
 8009ba6:	d036      	beq.n	8009c16 <_svfiprintf_r+0x1d2>
 8009ba8:	4b21      	ldr	r3, [pc, #132]	@ (8009c30 <_svfiprintf_r+0x1ec>)
 8009baa:	bb1b      	cbnz	r3, 8009bf4 <_svfiprintf_r+0x1b0>
 8009bac:	9b03      	ldr	r3, [sp, #12]
 8009bae:	3307      	adds	r3, #7
 8009bb0:	f023 0307 	bic.w	r3, r3, #7
 8009bb4:	3308      	adds	r3, #8
 8009bb6:	9303      	str	r3, [sp, #12]
 8009bb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bba:	4433      	add	r3, r6
 8009bbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8009bbe:	e76a      	b.n	8009a96 <_svfiprintf_r+0x52>
 8009bc0:	fb0c 3202 	mla	r2, ip, r2, r3
 8009bc4:	460c      	mov	r4, r1
 8009bc6:	2001      	movs	r0, #1
 8009bc8:	e7a8      	b.n	8009b1c <_svfiprintf_r+0xd8>
 8009bca:	2300      	movs	r3, #0
 8009bcc:	3401      	adds	r4, #1
 8009bce:	f04f 0c0a 	mov.w	ip, #10
 8009bd2:	4619      	mov	r1, r3
 8009bd4:	9305      	str	r3, [sp, #20]
 8009bd6:	4620      	mov	r0, r4
 8009bd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009bdc:	3a30      	subs	r2, #48	@ 0x30
 8009bde:	2a09      	cmp	r2, #9
 8009be0:	d903      	bls.n	8009bea <_svfiprintf_r+0x1a6>
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d0c6      	beq.n	8009b74 <_svfiprintf_r+0x130>
 8009be6:	9105      	str	r1, [sp, #20]
 8009be8:	e7c4      	b.n	8009b74 <_svfiprintf_r+0x130>
 8009bea:	fb0c 2101 	mla	r1, ip, r1, r2
 8009bee:	4604      	mov	r4, r0
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	e7f0      	b.n	8009bd6 <_svfiprintf_r+0x192>
 8009bf4:	ab03      	add	r3, sp, #12
 8009bf6:	462a      	mov	r2, r5
 8009bf8:	a904      	add	r1, sp, #16
 8009bfa:	4638      	mov	r0, r7
 8009bfc:	9300      	str	r3, [sp, #0]
 8009bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8009c34 <_svfiprintf_r+0x1f0>)
 8009c00:	f3af 8000 	nop.w
 8009c04:	1c42      	adds	r2, r0, #1
 8009c06:	4606      	mov	r6, r0
 8009c08:	d1d6      	bne.n	8009bb8 <_svfiprintf_r+0x174>
 8009c0a:	89ab      	ldrh	r3, [r5, #12]
 8009c0c:	065b      	lsls	r3, r3, #25
 8009c0e:	f53f af2d 	bmi.w	8009a6c <_svfiprintf_r+0x28>
 8009c12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009c14:	e72c      	b.n	8009a70 <_svfiprintf_r+0x2c>
 8009c16:	ab03      	add	r3, sp, #12
 8009c18:	462a      	mov	r2, r5
 8009c1a:	a904      	add	r1, sp, #16
 8009c1c:	4638      	mov	r0, r7
 8009c1e:	9300      	str	r3, [sp, #0]
 8009c20:	4b04      	ldr	r3, [pc, #16]	@ (8009c34 <_svfiprintf_r+0x1f0>)
 8009c22:	f000 f9bf 	bl	8009fa4 <_printf_i>
 8009c26:	e7ed      	b.n	8009c04 <_svfiprintf_r+0x1c0>
 8009c28:	08021620 	.word	0x08021620
 8009c2c:	0802162a 	.word	0x0802162a
 8009c30:	00000000 	.word	0x00000000
 8009c34:	0800998d 	.word	0x0800998d
 8009c38:	08021626 	.word	0x08021626

08009c3c <__sfputc_r>:
 8009c3c:	6893      	ldr	r3, [r2, #8]
 8009c3e:	3b01      	subs	r3, #1
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	b410      	push	{r4}
 8009c44:	6093      	str	r3, [r2, #8]
 8009c46:	da08      	bge.n	8009c5a <__sfputc_r+0x1e>
 8009c48:	6994      	ldr	r4, [r2, #24]
 8009c4a:	42a3      	cmp	r3, r4
 8009c4c:	db01      	blt.n	8009c52 <__sfputc_r+0x16>
 8009c4e:	290a      	cmp	r1, #10
 8009c50:	d103      	bne.n	8009c5a <__sfputc_r+0x1e>
 8009c52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c56:	f7ff bc84 	b.w	8009562 <__swbuf_r>
 8009c5a:	6813      	ldr	r3, [r2, #0]
 8009c5c:	1c58      	adds	r0, r3, #1
 8009c5e:	6010      	str	r0, [r2, #0]
 8009c60:	4608      	mov	r0, r1
 8009c62:	7019      	strb	r1, [r3, #0]
 8009c64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c68:	4770      	bx	lr

08009c6a <__sfputs_r>:
 8009c6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c6c:	4606      	mov	r6, r0
 8009c6e:	460f      	mov	r7, r1
 8009c70:	4614      	mov	r4, r2
 8009c72:	18d5      	adds	r5, r2, r3
 8009c74:	42ac      	cmp	r4, r5
 8009c76:	d101      	bne.n	8009c7c <__sfputs_r+0x12>
 8009c78:	2000      	movs	r0, #0
 8009c7a:	e007      	b.n	8009c8c <__sfputs_r+0x22>
 8009c7c:	463a      	mov	r2, r7
 8009c7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c82:	4630      	mov	r0, r6
 8009c84:	f7ff ffda 	bl	8009c3c <__sfputc_r>
 8009c88:	1c43      	adds	r3, r0, #1
 8009c8a:	d1f3      	bne.n	8009c74 <__sfputs_r+0xa>
 8009c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009c90 <_vfiprintf_r>:
 8009c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c94:	460d      	mov	r5, r1
 8009c96:	b09d      	sub	sp, #116	@ 0x74
 8009c98:	4614      	mov	r4, r2
 8009c9a:	4698      	mov	r8, r3
 8009c9c:	4606      	mov	r6, r0
 8009c9e:	b118      	cbz	r0, 8009ca8 <_vfiprintf_r+0x18>
 8009ca0:	6a03      	ldr	r3, [r0, #32]
 8009ca2:	b90b      	cbnz	r3, 8009ca8 <_vfiprintf_r+0x18>
 8009ca4:	f7ff fb3e 	bl	8009324 <__sinit>
 8009ca8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009caa:	07d9      	lsls	r1, r3, #31
 8009cac:	d405      	bmi.n	8009cba <_vfiprintf_r+0x2a>
 8009cae:	89ab      	ldrh	r3, [r5, #12]
 8009cb0:	059a      	lsls	r2, r3, #22
 8009cb2:	d402      	bmi.n	8009cba <_vfiprintf_r+0x2a>
 8009cb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009cb6:	f7ff fd62 	bl	800977e <__retarget_lock_acquire_recursive>
 8009cba:	89ab      	ldrh	r3, [r5, #12]
 8009cbc:	071b      	lsls	r3, r3, #28
 8009cbe:	d501      	bpl.n	8009cc4 <_vfiprintf_r+0x34>
 8009cc0:	692b      	ldr	r3, [r5, #16]
 8009cc2:	b99b      	cbnz	r3, 8009cec <_vfiprintf_r+0x5c>
 8009cc4:	4629      	mov	r1, r5
 8009cc6:	4630      	mov	r0, r6
 8009cc8:	f7ff fc8a 	bl	80095e0 <__swsetup_r>
 8009ccc:	b170      	cbz	r0, 8009cec <_vfiprintf_r+0x5c>
 8009cce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009cd0:	07dc      	lsls	r4, r3, #31
 8009cd2:	d504      	bpl.n	8009cde <_vfiprintf_r+0x4e>
 8009cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8009cd8:	b01d      	add	sp, #116	@ 0x74
 8009cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cde:	89ab      	ldrh	r3, [r5, #12]
 8009ce0:	0598      	lsls	r0, r3, #22
 8009ce2:	d4f7      	bmi.n	8009cd4 <_vfiprintf_r+0x44>
 8009ce4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009ce6:	f7ff fd4b 	bl	8009780 <__retarget_lock_release_recursive>
 8009cea:	e7f3      	b.n	8009cd4 <_vfiprintf_r+0x44>
 8009cec:	2300      	movs	r3, #0
 8009cee:	f8cd 800c 	str.w	r8, [sp, #12]
 8009cf2:	f04f 0901 	mov.w	r9, #1
 8009cf6:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8009eac <_vfiprintf_r+0x21c>
 8009cfa:	9309      	str	r3, [sp, #36]	@ 0x24
 8009cfc:	2320      	movs	r3, #32
 8009cfe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009d02:	2330      	movs	r3, #48	@ 0x30
 8009d04:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009d08:	4623      	mov	r3, r4
 8009d0a:	469a      	mov	sl, r3
 8009d0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d10:	b10a      	cbz	r2, 8009d16 <_vfiprintf_r+0x86>
 8009d12:	2a25      	cmp	r2, #37	@ 0x25
 8009d14:	d1f9      	bne.n	8009d0a <_vfiprintf_r+0x7a>
 8009d16:	ebba 0b04 	subs.w	fp, sl, r4
 8009d1a:	d00b      	beq.n	8009d34 <_vfiprintf_r+0xa4>
 8009d1c:	465b      	mov	r3, fp
 8009d1e:	4622      	mov	r2, r4
 8009d20:	4629      	mov	r1, r5
 8009d22:	4630      	mov	r0, r6
 8009d24:	f7ff ffa1 	bl	8009c6a <__sfputs_r>
 8009d28:	3001      	adds	r0, #1
 8009d2a:	f000 80a7 	beq.w	8009e7c <_vfiprintf_r+0x1ec>
 8009d2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d30:	445a      	add	r2, fp
 8009d32:	9209      	str	r2, [sp, #36]	@ 0x24
 8009d34:	f89a 3000 	ldrb.w	r3, [sl]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	f000 809f 	beq.w	8009e7c <_vfiprintf_r+0x1ec>
 8009d3e:	2300      	movs	r3, #0
 8009d40:	f04f 32ff 	mov.w	r2, #4294967295
 8009d44:	f10a 0a01 	add.w	sl, sl, #1
 8009d48:	9304      	str	r3, [sp, #16]
 8009d4a:	9307      	str	r3, [sp, #28]
 8009d4c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009d50:	931a      	str	r3, [sp, #104]	@ 0x68
 8009d52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d56:	4654      	mov	r4, sl
 8009d58:	2205      	movs	r2, #5
 8009d5a:	4854      	ldr	r0, [pc, #336]	@ (8009eac <_vfiprintf_r+0x21c>)
 8009d5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d60:	f000 fb98 	bl	800a494 <memchr>
 8009d64:	9a04      	ldr	r2, [sp, #16]
 8009d66:	b9d8      	cbnz	r0, 8009da0 <_vfiprintf_r+0x110>
 8009d68:	06d1      	lsls	r1, r2, #27
 8009d6a:	bf44      	itt	mi
 8009d6c:	2320      	movmi	r3, #32
 8009d6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009d72:	0713      	lsls	r3, r2, #28
 8009d74:	bf44      	itt	mi
 8009d76:	232b      	movmi	r3, #43	@ 0x2b
 8009d78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009d7c:	f89a 3000 	ldrb.w	r3, [sl]
 8009d80:	2b2a      	cmp	r3, #42	@ 0x2a
 8009d82:	d015      	beq.n	8009db0 <_vfiprintf_r+0x120>
 8009d84:	9a07      	ldr	r2, [sp, #28]
 8009d86:	4654      	mov	r4, sl
 8009d88:	2000      	movs	r0, #0
 8009d8a:	f04f 0c0a 	mov.w	ip, #10
 8009d8e:	4621      	mov	r1, r4
 8009d90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d94:	3b30      	subs	r3, #48	@ 0x30
 8009d96:	2b09      	cmp	r3, #9
 8009d98:	d94b      	bls.n	8009e32 <_vfiprintf_r+0x1a2>
 8009d9a:	b1b0      	cbz	r0, 8009dca <_vfiprintf_r+0x13a>
 8009d9c:	9207      	str	r2, [sp, #28]
 8009d9e:	e014      	b.n	8009dca <_vfiprintf_r+0x13a>
 8009da0:	eba0 0308 	sub.w	r3, r0, r8
 8009da4:	46a2      	mov	sl, r4
 8009da6:	fa09 f303 	lsl.w	r3, r9, r3
 8009daa:	4313      	orrs	r3, r2
 8009dac:	9304      	str	r3, [sp, #16]
 8009dae:	e7d2      	b.n	8009d56 <_vfiprintf_r+0xc6>
 8009db0:	9b03      	ldr	r3, [sp, #12]
 8009db2:	1d19      	adds	r1, r3, #4
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	9103      	str	r1, [sp, #12]
 8009dba:	bfbb      	ittet	lt
 8009dbc:	425b      	neglt	r3, r3
 8009dbe:	f042 0202 	orrlt.w	r2, r2, #2
 8009dc2:	9307      	strge	r3, [sp, #28]
 8009dc4:	9307      	strlt	r3, [sp, #28]
 8009dc6:	bfb8      	it	lt
 8009dc8:	9204      	strlt	r2, [sp, #16]
 8009dca:	7823      	ldrb	r3, [r4, #0]
 8009dcc:	2b2e      	cmp	r3, #46	@ 0x2e
 8009dce:	d10a      	bne.n	8009de6 <_vfiprintf_r+0x156>
 8009dd0:	7863      	ldrb	r3, [r4, #1]
 8009dd2:	2b2a      	cmp	r3, #42	@ 0x2a
 8009dd4:	d132      	bne.n	8009e3c <_vfiprintf_r+0x1ac>
 8009dd6:	9b03      	ldr	r3, [sp, #12]
 8009dd8:	3402      	adds	r4, #2
 8009dda:	1d1a      	adds	r2, r3, #4
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009de2:	9203      	str	r2, [sp, #12]
 8009de4:	9305      	str	r3, [sp, #20]
 8009de6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009ebc <_vfiprintf_r+0x22c>
 8009dea:	2203      	movs	r2, #3
 8009dec:	7821      	ldrb	r1, [r4, #0]
 8009dee:	4650      	mov	r0, sl
 8009df0:	f000 fb50 	bl	800a494 <memchr>
 8009df4:	b138      	cbz	r0, 8009e06 <_vfiprintf_r+0x176>
 8009df6:	eba0 000a 	sub.w	r0, r0, sl
 8009dfa:	2240      	movs	r2, #64	@ 0x40
 8009dfc:	9b04      	ldr	r3, [sp, #16]
 8009dfe:	3401      	adds	r4, #1
 8009e00:	4082      	lsls	r2, r0
 8009e02:	4313      	orrs	r3, r2
 8009e04:	9304      	str	r3, [sp, #16]
 8009e06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e0a:	2206      	movs	r2, #6
 8009e0c:	4828      	ldr	r0, [pc, #160]	@ (8009eb0 <_vfiprintf_r+0x220>)
 8009e0e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009e12:	f000 fb3f 	bl	800a494 <memchr>
 8009e16:	2800      	cmp	r0, #0
 8009e18:	d03f      	beq.n	8009e9a <_vfiprintf_r+0x20a>
 8009e1a:	4b26      	ldr	r3, [pc, #152]	@ (8009eb4 <_vfiprintf_r+0x224>)
 8009e1c:	bb1b      	cbnz	r3, 8009e66 <_vfiprintf_r+0x1d6>
 8009e1e:	9b03      	ldr	r3, [sp, #12]
 8009e20:	3307      	adds	r3, #7
 8009e22:	f023 0307 	bic.w	r3, r3, #7
 8009e26:	3308      	adds	r3, #8
 8009e28:	9303      	str	r3, [sp, #12]
 8009e2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e2c:	443b      	add	r3, r7
 8009e2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e30:	e76a      	b.n	8009d08 <_vfiprintf_r+0x78>
 8009e32:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e36:	460c      	mov	r4, r1
 8009e38:	2001      	movs	r0, #1
 8009e3a:	e7a8      	b.n	8009d8e <_vfiprintf_r+0xfe>
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	3401      	adds	r4, #1
 8009e40:	f04f 0c0a 	mov.w	ip, #10
 8009e44:	4619      	mov	r1, r3
 8009e46:	9305      	str	r3, [sp, #20]
 8009e48:	4620      	mov	r0, r4
 8009e4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e4e:	3a30      	subs	r2, #48	@ 0x30
 8009e50:	2a09      	cmp	r2, #9
 8009e52:	d903      	bls.n	8009e5c <_vfiprintf_r+0x1cc>
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d0c6      	beq.n	8009de6 <_vfiprintf_r+0x156>
 8009e58:	9105      	str	r1, [sp, #20]
 8009e5a:	e7c4      	b.n	8009de6 <_vfiprintf_r+0x156>
 8009e5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e60:	4604      	mov	r4, r0
 8009e62:	2301      	movs	r3, #1
 8009e64:	e7f0      	b.n	8009e48 <_vfiprintf_r+0x1b8>
 8009e66:	ab03      	add	r3, sp, #12
 8009e68:	462a      	mov	r2, r5
 8009e6a:	a904      	add	r1, sp, #16
 8009e6c:	4630      	mov	r0, r6
 8009e6e:	9300      	str	r3, [sp, #0]
 8009e70:	4b11      	ldr	r3, [pc, #68]	@ (8009eb8 <_vfiprintf_r+0x228>)
 8009e72:	f3af 8000 	nop.w
 8009e76:	4607      	mov	r7, r0
 8009e78:	1c78      	adds	r0, r7, #1
 8009e7a:	d1d6      	bne.n	8009e2a <_vfiprintf_r+0x19a>
 8009e7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009e7e:	07d9      	lsls	r1, r3, #31
 8009e80:	d405      	bmi.n	8009e8e <_vfiprintf_r+0x1fe>
 8009e82:	89ab      	ldrh	r3, [r5, #12]
 8009e84:	059a      	lsls	r2, r3, #22
 8009e86:	d402      	bmi.n	8009e8e <_vfiprintf_r+0x1fe>
 8009e88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009e8a:	f7ff fc79 	bl	8009780 <__retarget_lock_release_recursive>
 8009e8e:	89ab      	ldrh	r3, [r5, #12]
 8009e90:	065b      	lsls	r3, r3, #25
 8009e92:	f53f af1f 	bmi.w	8009cd4 <_vfiprintf_r+0x44>
 8009e96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009e98:	e71e      	b.n	8009cd8 <_vfiprintf_r+0x48>
 8009e9a:	ab03      	add	r3, sp, #12
 8009e9c:	462a      	mov	r2, r5
 8009e9e:	a904      	add	r1, sp, #16
 8009ea0:	4630      	mov	r0, r6
 8009ea2:	9300      	str	r3, [sp, #0]
 8009ea4:	4b04      	ldr	r3, [pc, #16]	@ (8009eb8 <_vfiprintf_r+0x228>)
 8009ea6:	f000 f87d 	bl	8009fa4 <_printf_i>
 8009eaa:	e7e4      	b.n	8009e76 <_vfiprintf_r+0x1e6>
 8009eac:	08021620 	.word	0x08021620
 8009eb0:	0802162a 	.word	0x0802162a
 8009eb4:	00000000 	.word	0x00000000
 8009eb8:	08009c6b 	.word	0x08009c6b
 8009ebc:	08021626 	.word	0x08021626

08009ec0 <_printf_common>:
 8009ec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ec4:	4616      	mov	r6, r2
 8009ec6:	4698      	mov	r8, r3
 8009ec8:	688a      	ldr	r2, [r1, #8]
 8009eca:	4607      	mov	r7, r0
 8009ecc:	690b      	ldr	r3, [r1, #16]
 8009ece:	460c      	mov	r4, r1
 8009ed0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	bfb8      	it	lt
 8009ed8:	4613      	movlt	r3, r2
 8009eda:	6033      	str	r3, [r6, #0]
 8009edc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009ee0:	b10a      	cbz	r2, 8009ee6 <_printf_common+0x26>
 8009ee2:	3301      	adds	r3, #1
 8009ee4:	6033      	str	r3, [r6, #0]
 8009ee6:	6823      	ldr	r3, [r4, #0]
 8009ee8:	0699      	lsls	r1, r3, #26
 8009eea:	bf42      	ittt	mi
 8009eec:	6833      	ldrmi	r3, [r6, #0]
 8009eee:	3302      	addmi	r3, #2
 8009ef0:	6033      	strmi	r3, [r6, #0]
 8009ef2:	6825      	ldr	r5, [r4, #0]
 8009ef4:	f015 0506 	ands.w	r5, r5, #6
 8009ef8:	d106      	bne.n	8009f08 <_printf_common+0x48>
 8009efa:	f104 0a19 	add.w	sl, r4, #25
 8009efe:	68e3      	ldr	r3, [r4, #12]
 8009f00:	6832      	ldr	r2, [r6, #0]
 8009f02:	1a9b      	subs	r3, r3, r2
 8009f04:	42ab      	cmp	r3, r5
 8009f06:	dc2b      	bgt.n	8009f60 <_printf_common+0xa0>
 8009f08:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009f0c:	6822      	ldr	r2, [r4, #0]
 8009f0e:	3b00      	subs	r3, #0
 8009f10:	bf18      	it	ne
 8009f12:	2301      	movne	r3, #1
 8009f14:	0692      	lsls	r2, r2, #26
 8009f16:	d430      	bmi.n	8009f7a <_printf_common+0xba>
 8009f18:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009f1c:	4641      	mov	r1, r8
 8009f1e:	4638      	mov	r0, r7
 8009f20:	47c8      	blx	r9
 8009f22:	3001      	adds	r0, #1
 8009f24:	d023      	beq.n	8009f6e <_printf_common+0xae>
 8009f26:	6823      	ldr	r3, [r4, #0]
 8009f28:	341a      	adds	r4, #26
 8009f2a:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8009f2e:	f003 0306 	and.w	r3, r3, #6
 8009f32:	2b04      	cmp	r3, #4
 8009f34:	bf0a      	itet	eq
 8009f36:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8009f3a:	2500      	movne	r5, #0
 8009f3c:	6833      	ldreq	r3, [r6, #0]
 8009f3e:	f04f 0600 	mov.w	r6, #0
 8009f42:	bf08      	it	eq
 8009f44:	1aed      	subeq	r5, r5, r3
 8009f46:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009f4a:	bf08      	it	eq
 8009f4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f50:	4293      	cmp	r3, r2
 8009f52:	bfc4      	itt	gt
 8009f54:	1a9b      	subgt	r3, r3, r2
 8009f56:	18ed      	addgt	r5, r5, r3
 8009f58:	42b5      	cmp	r5, r6
 8009f5a:	d11a      	bne.n	8009f92 <_printf_common+0xd2>
 8009f5c:	2000      	movs	r0, #0
 8009f5e:	e008      	b.n	8009f72 <_printf_common+0xb2>
 8009f60:	2301      	movs	r3, #1
 8009f62:	4652      	mov	r2, sl
 8009f64:	4641      	mov	r1, r8
 8009f66:	4638      	mov	r0, r7
 8009f68:	47c8      	blx	r9
 8009f6a:	3001      	adds	r0, #1
 8009f6c:	d103      	bne.n	8009f76 <_printf_common+0xb6>
 8009f6e:	f04f 30ff 	mov.w	r0, #4294967295
 8009f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f76:	3501      	adds	r5, #1
 8009f78:	e7c1      	b.n	8009efe <_printf_common+0x3e>
 8009f7a:	18e1      	adds	r1, r4, r3
 8009f7c:	1c5a      	adds	r2, r3, #1
 8009f7e:	2030      	movs	r0, #48	@ 0x30
 8009f80:	3302      	adds	r3, #2
 8009f82:	4422      	add	r2, r4
 8009f84:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009f88:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009f8c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009f90:	e7c2      	b.n	8009f18 <_printf_common+0x58>
 8009f92:	2301      	movs	r3, #1
 8009f94:	4622      	mov	r2, r4
 8009f96:	4641      	mov	r1, r8
 8009f98:	4638      	mov	r0, r7
 8009f9a:	47c8      	blx	r9
 8009f9c:	3001      	adds	r0, #1
 8009f9e:	d0e6      	beq.n	8009f6e <_printf_common+0xae>
 8009fa0:	3601      	adds	r6, #1
 8009fa2:	e7d9      	b.n	8009f58 <_printf_common+0x98>

08009fa4 <_printf_i>:
 8009fa4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009fa8:	7e0f      	ldrb	r7, [r1, #24]
 8009faa:	4691      	mov	r9, r2
 8009fac:	4680      	mov	r8, r0
 8009fae:	460c      	mov	r4, r1
 8009fb0:	2f78      	cmp	r7, #120	@ 0x78
 8009fb2:	469a      	mov	sl, r3
 8009fb4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009fb6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009fba:	d807      	bhi.n	8009fcc <_printf_i+0x28>
 8009fbc:	2f62      	cmp	r7, #98	@ 0x62
 8009fbe:	d80a      	bhi.n	8009fd6 <_printf_i+0x32>
 8009fc0:	2f00      	cmp	r7, #0
 8009fc2:	f000 80d1 	beq.w	800a168 <_printf_i+0x1c4>
 8009fc6:	2f58      	cmp	r7, #88	@ 0x58
 8009fc8:	f000 80b8 	beq.w	800a13c <_printf_i+0x198>
 8009fcc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009fd0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009fd4:	e03a      	b.n	800a04c <_printf_i+0xa8>
 8009fd6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009fda:	2b15      	cmp	r3, #21
 8009fdc:	d8f6      	bhi.n	8009fcc <_printf_i+0x28>
 8009fde:	a101      	add	r1, pc, #4	@ (adr r1, 8009fe4 <_printf_i+0x40>)
 8009fe0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009fe4:	0800a03d 	.word	0x0800a03d
 8009fe8:	0800a051 	.word	0x0800a051
 8009fec:	08009fcd 	.word	0x08009fcd
 8009ff0:	08009fcd 	.word	0x08009fcd
 8009ff4:	08009fcd 	.word	0x08009fcd
 8009ff8:	08009fcd 	.word	0x08009fcd
 8009ffc:	0800a051 	.word	0x0800a051
 800a000:	08009fcd 	.word	0x08009fcd
 800a004:	08009fcd 	.word	0x08009fcd
 800a008:	08009fcd 	.word	0x08009fcd
 800a00c:	08009fcd 	.word	0x08009fcd
 800a010:	0800a14f 	.word	0x0800a14f
 800a014:	0800a07b 	.word	0x0800a07b
 800a018:	0800a109 	.word	0x0800a109
 800a01c:	08009fcd 	.word	0x08009fcd
 800a020:	08009fcd 	.word	0x08009fcd
 800a024:	0800a171 	.word	0x0800a171
 800a028:	08009fcd 	.word	0x08009fcd
 800a02c:	0800a07b 	.word	0x0800a07b
 800a030:	08009fcd 	.word	0x08009fcd
 800a034:	08009fcd 	.word	0x08009fcd
 800a038:	0800a111 	.word	0x0800a111
 800a03c:	6833      	ldr	r3, [r6, #0]
 800a03e:	1d1a      	adds	r2, r3, #4
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	6032      	str	r2, [r6, #0]
 800a044:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a048:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a04c:	2301      	movs	r3, #1
 800a04e:	e09c      	b.n	800a18a <_printf_i+0x1e6>
 800a050:	6833      	ldr	r3, [r6, #0]
 800a052:	6820      	ldr	r0, [r4, #0]
 800a054:	1d19      	adds	r1, r3, #4
 800a056:	6031      	str	r1, [r6, #0]
 800a058:	0606      	lsls	r6, r0, #24
 800a05a:	d501      	bpl.n	800a060 <_printf_i+0xbc>
 800a05c:	681d      	ldr	r5, [r3, #0]
 800a05e:	e003      	b.n	800a068 <_printf_i+0xc4>
 800a060:	0645      	lsls	r5, r0, #25
 800a062:	d5fb      	bpl.n	800a05c <_printf_i+0xb8>
 800a064:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a068:	2d00      	cmp	r5, #0
 800a06a:	da03      	bge.n	800a074 <_printf_i+0xd0>
 800a06c:	232d      	movs	r3, #45	@ 0x2d
 800a06e:	426d      	negs	r5, r5
 800a070:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a074:	4858      	ldr	r0, [pc, #352]	@ (800a1d8 <_printf_i+0x234>)
 800a076:	230a      	movs	r3, #10
 800a078:	e011      	b.n	800a09e <_printf_i+0xfa>
 800a07a:	6821      	ldr	r1, [r4, #0]
 800a07c:	6833      	ldr	r3, [r6, #0]
 800a07e:	0608      	lsls	r0, r1, #24
 800a080:	f853 5b04 	ldr.w	r5, [r3], #4
 800a084:	d402      	bmi.n	800a08c <_printf_i+0xe8>
 800a086:	0649      	lsls	r1, r1, #25
 800a088:	bf48      	it	mi
 800a08a:	b2ad      	uxthmi	r5, r5
 800a08c:	2f6f      	cmp	r7, #111	@ 0x6f
 800a08e:	6033      	str	r3, [r6, #0]
 800a090:	4851      	ldr	r0, [pc, #324]	@ (800a1d8 <_printf_i+0x234>)
 800a092:	bf14      	ite	ne
 800a094:	230a      	movne	r3, #10
 800a096:	2308      	moveq	r3, #8
 800a098:	2100      	movs	r1, #0
 800a09a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a09e:	6866      	ldr	r6, [r4, #4]
 800a0a0:	2e00      	cmp	r6, #0
 800a0a2:	60a6      	str	r6, [r4, #8]
 800a0a4:	db05      	blt.n	800a0b2 <_printf_i+0x10e>
 800a0a6:	6821      	ldr	r1, [r4, #0]
 800a0a8:	432e      	orrs	r6, r5
 800a0aa:	f021 0104 	bic.w	r1, r1, #4
 800a0ae:	6021      	str	r1, [r4, #0]
 800a0b0:	d04b      	beq.n	800a14a <_printf_i+0x1a6>
 800a0b2:	4616      	mov	r6, r2
 800a0b4:	fbb5 f1f3 	udiv	r1, r5, r3
 800a0b8:	fb03 5711 	mls	r7, r3, r1, r5
 800a0bc:	5dc7      	ldrb	r7, [r0, r7]
 800a0be:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a0c2:	462f      	mov	r7, r5
 800a0c4:	460d      	mov	r5, r1
 800a0c6:	42bb      	cmp	r3, r7
 800a0c8:	d9f4      	bls.n	800a0b4 <_printf_i+0x110>
 800a0ca:	2b08      	cmp	r3, #8
 800a0cc:	d10b      	bne.n	800a0e6 <_printf_i+0x142>
 800a0ce:	6823      	ldr	r3, [r4, #0]
 800a0d0:	07df      	lsls	r7, r3, #31
 800a0d2:	d508      	bpl.n	800a0e6 <_printf_i+0x142>
 800a0d4:	6923      	ldr	r3, [r4, #16]
 800a0d6:	6861      	ldr	r1, [r4, #4]
 800a0d8:	4299      	cmp	r1, r3
 800a0da:	bfde      	ittt	le
 800a0dc:	2330      	movle	r3, #48	@ 0x30
 800a0de:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a0e2:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a0e6:	1b92      	subs	r2, r2, r6
 800a0e8:	6122      	str	r2, [r4, #16]
 800a0ea:	464b      	mov	r3, r9
 800a0ec:	aa03      	add	r2, sp, #12
 800a0ee:	4621      	mov	r1, r4
 800a0f0:	4640      	mov	r0, r8
 800a0f2:	f8cd a000 	str.w	sl, [sp]
 800a0f6:	f7ff fee3 	bl	8009ec0 <_printf_common>
 800a0fa:	3001      	adds	r0, #1
 800a0fc:	d14a      	bne.n	800a194 <_printf_i+0x1f0>
 800a0fe:	f04f 30ff 	mov.w	r0, #4294967295
 800a102:	b004      	add	sp, #16
 800a104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a108:	6823      	ldr	r3, [r4, #0]
 800a10a:	f043 0320 	orr.w	r3, r3, #32
 800a10e:	6023      	str	r3, [r4, #0]
 800a110:	2778      	movs	r7, #120	@ 0x78
 800a112:	4832      	ldr	r0, [pc, #200]	@ (800a1dc <_printf_i+0x238>)
 800a114:	6823      	ldr	r3, [r4, #0]
 800a116:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a11a:	061f      	lsls	r7, r3, #24
 800a11c:	6831      	ldr	r1, [r6, #0]
 800a11e:	f851 5b04 	ldr.w	r5, [r1], #4
 800a122:	d402      	bmi.n	800a12a <_printf_i+0x186>
 800a124:	065f      	lsls	r7, r3, #25
 800a126:	bf48      	it	mi
 800a128:	b2ad      	uxthmi	r5, r5
 800a12a:	6031      	str	r1, [r6, #0]
 800a12c:	07d9      	lsls	r1, r3, #31
 800a12e:	bf44      	itt	mi
 800a130:	f043 0320 	orrmi.w	r3, r3, #32
 800a134:	6023      	strmi	r3, [r4, #0]
 800a136:	b11d      	cbz	r5, 800a140 <_printf_i+0x19c>
 800a138:	2310      	movs	r3, #16
 800a13a:	e7ad      	b.n	800a098 <_printf_i+0xf4>
 800a13c:	4826      	ldr	r0, [pc, #152]	@ (800a1d8 <_printf_i+0x234>)
 800a13e:	e7e9      	b.n	800a114 <_printf_i+0x170>
 800a140:	6823      	ldr	r3, [r4, #0]
 800a142:	f023 0320 	bic.w	r3, r3, #32
 800a146:	6023      	str	r3, [r4, #0]
 800a148:	e7f6      	b.n	800a138 <_printf_i+0x194>
 800a14a:	4616      	mov	r6, r2
 800a14c:	e7bd      	b.n	800a0ca <_printf_i+0x126>
 800a14e:	6833      	ldr	r3, [r6, #0]
 800a150:	6825      	ldr	r5, [r4, #0]
 800a152:	1d18      	adds	r0, r3, #4
 800a154:	6961      	ldr	r1, [r4, #20]
 800a156:	6030      	str	r0, [r6, #0]
 800a158:	062e      	lsls	r6, r5, #24
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	d501      	bpl.n	800a162 <_printf_i+0x1be>
 800a15e:	6019      	str	r1, [r3, #0]
 800a160:	e002      	b.n	800a168 <_printf_i+0x1c4>
 800a162:	0668      	lsls	r0, r5, #25
 800a164:	d5fb      	bpl.n	800a15e <_printf_i+0x1ba>
 800a166:	8019      	strh	r1, [r3, #0]
 800a168:	2300      	movs	r3, #0
 800a16a:	4616      	mov	r6, r2
 800a16c:	6123      	str	r3, [r4, #16]
 800a16e:	e7bc      	b.n	800a0ea <_printf_i+0x146>
 800a170:	6833      	ldr	r3, [r6, #0]
 800a172:	2100      	movs	r1, #0
 800a174:	1d1a      	adds	r2, r3, #4
 800a176:	6032      	str	r2, [r6, #0]
 800a178:	681e      	ldr	r6, [r3, #0]
 800a17a:	6862      	ldr	r2, [r4, #4]
 800a17c:	4630      	mov	r0, r6
 800a17e:	f000 f989 	bl	800a494 <memchr>
 800a182:	b108      	cbz	r0, 800a188 <_printf_i+0x1e4>
 800a184:	1b80      	subs	r0, r0, r6
 800a186:	6060      	str	r0, [r4, #4]
 800a188:	6863      	ldr	r3, [r4, #4]
 800a18a:	6123      	str	r3, [r4, #16]
 800a18c:	2300      	movs	r3, #0
 800a18e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a192:	e7aa      	b.n	800a0ea <_printf_i+0x146>
 800a194:	6923      	ldr	r3, [r4, #16]
 800a196:	4632      	mov	r2, r6
 800a198:	4649      	mov	r1, r9
 800a19a:	4640      	mov	r0, r8
 800a19c:	47d0      	blx	sl
 800a19e:	3001      	adds	r0, #1
 800a1a0:	d0ad      	beq.n	800a0fe <_printf_i+0x15a>
 800a1a2:	6823      	ldr	r3, [r4, #0]
 800a1a4:	079b      	lsls	r3, r3, #30
 800a1a6:	d413      	bmi.n	800a1d0 <_printf_i+0x22c>
 800a1a8:	68e0      	ldr	r0, [r4, #12]
 800a1aa:	9b03      	ldr	r3, [sp, #12]
 800a1ac:	4298      	cmp	r0, r3
 800a1ae:	bfb8      	it	lt
 800a1b0:	4618      	movlt	r0, r3
 800a1b2:	e7a6      	b.n	800a102 <_printf_i+0x15e>
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	4632      	mov	r2, r6
 800a1b8:	4649      	mov	r1, r9
 800a1ba:	4640      	mov	r0, r8
 800a1bc:	47d0      	blx	sl
 800a1be:	3001      	adds	r0, #1
 800a1c0:	d09d      	beq.n	800a0fe <_printf_i+0x15a>
 800a1c2:	3501      	adds	r5, #1
 800a1c4:	68e3      	ldr	r3, [r4, #12]
 800a1c6:	9903      	ldr	r1, [sp, #12]
 800a1c8:	1a5b      	subs	r3, r3, r1
 800a1ca:	42ab      	cmp	r3, r5
 800a1cc:	dcf2      	bgt.n	800a1b4 <_printf_i+0x210>
 800a1ce:	e7eb      	b.n	800a1a8 <_printf_i+0x204>
 800a1d0:	2500      	movs	r5, #0
 800a1d2:	f104 0619 	add.w	r6, r4, #25
 800a1d6:	e7f5      	b.n	800a1c4 <_printf_i+0x220>
 800a1d8:	08021631 	.word	0x08021631
 800a1dc:	08021642 	.word	0x08021642

0800a1e0 <__sflush_r>:
 800a1e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a1e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1e8:	0716      	lsls	r6, r2, #28
 800a1ea:	4605      	mov	r5, r0
 800a1ec:	460c      	mov	r4, r1
 800a1ee:	d454      	bmi.n	800a29a <__sflush_r+0xba>
 800a1f0:	684b      	ldr	r3, [r1, #4]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	dc02      	bgt.n	800a1fc <__sflush_r+0x1c>
 800a1f6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	dd48      	ble.n	800a28e <__sflush_r+0xae>
 800a1fc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a1fe:	2e00      	cmp	r6, #0
 800a200:	d045      	beq.n	800a28e <__sflush_r+0xae>
 800a202:	2300      	movs	r3, #0
 800a204:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a208:	682f      	ldr	r7, [r5, #0]
 800a20a:	6a21      	ldr	r1, [r4, #32]
 800a20c:	602b      	str	r3, [r5, #0]
 800a20e:	d030      	beq.n	800a272 <__sflush_r+0x92>
 800a210:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a212:	89a3      	ldrh	r3, [r4, #12]
 800a214:	0759      	lsls	r1, r3, #29
 800a216:	d505      	bpl.n	800a224 <__sflush_r+0x44>
 800a218:	6863      	ldr	r3, [r4, #4]
 800a21a:	1ad2      	subs	r2, r2, r3
 800a21c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a21e:	b10b      	cbz	r3, 800a224 <__sflush_r+0x44>
 800a220:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a222:	1ad2      	subs	r2, r2, r3
 800a224:	2300      	movs	r3, #0
 800a226:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a228:	6a21      	ldr	r1, [r4, #32]
 800a22a:	4628      	mov	r0, r5
 800a22c:	47b0      	blx	r6
 800a22e:	1c43      	adds	r3, r0, #1
 800a230:	89a3      	ldrh	r3, [r4, #12]
 800a232:	d106      	bne.n	800a242 <__sflush_r+0x62>
 800a234:	6829      	ldr	r1, [r5, #0]
 800a236:	291d      	cmp	r1, #29
 800a238:	d82b      	bhi.n	800a292 <__sflush_r+0xb2>
 800a23a:	4a2a      	ldr	r2, [pc, #168]	@ (800a2e4 <__sflush_r+0x104>)
 800a23c:	40ca      	lsrs	r2, r1
 800a23e:	07d6      	lsls	r6, r2, #31
 800a240:	d527      	bpl.n	800a292 <__sflush_r+0xb2>
 800a242:	2200      	movs	r2, #0
 800a244:	04d9      	lsls	r1, r3, #19
 800a246:	6062      	str	r2, [r4, #4]
 800a248:	6922      	ldr	r2, [r4, #16]
 800a24a:	6022      	str	r2, [r4, #0]
 800a24c:	d504      	bpl.n	800a258 <__sflush_r+0x78>
 800a24e:	1c42      	adds	r2, r0, #1
 800a250:	d101      	bne.n	800a256 <__sflush_r+0x76>
 800a252:	682b      	ldr	r3, [r5, #0]
 800a254:	b903      	cbnz	r3, 800a258 <__sflush_r+0x78>
 800a256:	6560      	str	r0, [r4, #84]	@ 0x54
 800a258:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a25a:	602f      	str	r7, [r5, #0]
 800a25c:	b1b9      	cbz	r1, 800a28e <__sflush_r+0xae>
 800a25e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a262:	4299      	cmp	r1, r3
 800a264:	d002      	beq.n	800a26c <__sflush_r+0x8c>
 800a266:	4628      	mov	r0, r5
 800a268:	f7ff fa98 	bl	800979c <_free_r>
 800a26c:	2300      	movs	r3, #0
 800a26e:	6363      	str	r3, [r4, #52]	@ 0x34
 800a270:	e00d      	b.n	800a28e <__sflush_r+0xae>
 800a272:	2301      	movs	r3, #1
 800a274:	4628      	mov	r0, r5
 800a276:	47b0      	blx	r6
 800a278:	4602      	mov	r2, r0
 800a27a:	1c50      	adds	r0, r2, #1
 800a27c:	d1c9      	bne.n	800a212 <__sflush_r+0x32>
 800a27e:	682b      	ldr	r3, [r5, #0]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d0c6      	beq.n	800a212 <__sflush_r+0x32>
 800a284:	2b1d      	cmp	r3, #29
 800a286:	d001      	beq.n	800a28c <__sflush_r+0xac>
 800a288:	2b16      	cmp	r3, #22
 800a28a:	d11d      	bne.n	800a2c8 <__sflush_r+0xe8>
 800a28c:	602f      	str	r7, [r5, #0]
 800a28e:	2000      	movs	r0, #0
 800a290:	e021      	b.n	800a2d6 <__sflush_r+0xf6>
 800a292:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a296:	b21b      	sxth	r3, r3
 800a298:	e01a      	b.n	800a2d0 <__sflush_r+0xf0>
 800a29a:	690f      	ldr	r7, [r1, #16]
 800a29c:	2f00      	cmp	r7, #0
 800a29e:	d0f6      	beq.n	800a28e <__sflush_r+0xae>
 800a2a0:	0793      	lsls	r3, r2, #30
 800a2a2:	680e      	ldr	r6, [r1, #0]
 800a2a4:	600f      	str	r7, [r1, #0]
 800a2a6:	bf0c      	ite	eq
 800a2a8:	694b      	ldreq	r3, [r1, #20]
 800a2aa:	2300      	movne	r3, #0
 800a2ac:	eba6 0807 	sub.w	r8, r6, r7
 800a2b0:	608b      	str	r3, [r1, #8]
 800a2b2:	f1b8 0f00 	cmp.w	r8, #0
 800a2b6:	ddea      	ble.n	800a28e <__sflush_r+0xae>
 800a2b8:	4643      	mov	r3, r8
 800a2ba:	463a      	mov	r2, r7
 800a2bc:	6a21      	ldr	r1, [r4, #32]
 800a2be:	4628      	mov	r0, r5
 800a2c0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a2c2:	47b0      	blx	r6
 800a2c4:	2800      	cmp	r0, #0
 800a2c6:	dc08      	bgt.n	800a2da <__sflush_r+0xfa>
 800a2c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a2d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a2d4:	81a3      	strh	r3, [r4, #12]
 800a2d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2da:	4407      	add	r7, r0
 800a2dc:	eba8 0800 	sub.w	r8, r8, r0
 800a2e0:	e7e7      	b.n	800a2b2 <__sflush_r+0xd2>
 800a2e2:	bf00      	nop
 800a2e4:	20400001 	.word	0x20400001

0800a2e8 <_fflush_r>:
 800a2e8:	b538      	push	{r3, r4, r5, lr}
 800a2ea:	690b      	ldr	r3, [r1, #16]
 800a2ec:	4605      	mov	r5, r0
 800a2ee:	460c      	mov	r4, r1
 800a2f0:	b913      	cbnz	r3, 800a2f8 <_fflush_r+0x10>
 800a2f2:	2500      	movs	r5, #0
 800a2f4:	4628      	mov	r0, r5
 800a2f6:	bd38      	pop	{r3, r4, r5, pc}
 800a2f8:	b118      	cbz	r0, 800a302 <_fflush_r+0x1a>
 800a2fa:	6a03      	ldr	r3, [r0, #32]
 800a2fc:	b90b      	cbnz	r3, 800a302 <_fflush_r+0x1a>
 800a2fe:	f7ff f811 	bl	8009324 <__sinit>
 800a302:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d0f3      	beq.n	800a2f2 <_fflush_r+0xa>
 800a30a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a30c:	07d0      	lsls	r0, r2, #31
 800a30e:	d404      	bmi.n	800a31a <_fflush_r+0x32>
 800a310:	0599      	lsls	r1, r3, #22
 800a312:	d402      	bmi.n	800a31a <_fflush_r+0x32>
 800a314:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a316:	f7ff fa32 	bl	800977e <__retarget_lock_acquire_recursive>
 800a31a:	4628      	mov	r0, r5
 800a31c:	4621      	mov	r1, r4
 800a31e:	f7ff ff5f 	bl	800a1e0 <__sflush_r>
 800a322:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a324:	4605      	mov	r5, r0
 800a326:	07da      	lsls	r2, r3, #31
 800a328:	d4e4      	bmi.n	800a2f4 <_fflush_r+0xc>
 800a32a:	89a3      	ldrh	r3, [r4, #12]
 800a32c:	059b      	lsls	r3, r3, #22
 800a32e:	d4e1      	bmi.n	800a2f4 <_fflush_r+0xc>
 800a330:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a332:	f7ff fa25 	bl	8009780 <__retarget_lock_release_recursive>
 800a336:	e7dd      	b.n	800a2f4 <_fflush_r+0xc>

0800a338 <__swhatbuf_r>:
 800a338:	b570      	push	{r4, r5, r6, lr}
 800a33a:	460c      	mov	r4, r1
 800a33c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a340:	b096      	sub	sp, #88	@ 0x58
 800a342:	4615      	mov	r5, r2
 800a344:	2900      	cmp	r1, #0
 800a346:	461e      	mov	r6, r3
 800a348:	da0c      	bge.n	800a364 <__swhatbuf_r+0x2c>
 800a34a:	89a3      	ldrh	r3, [r4, #12]
 800a34c:	2100      	movs	r1, #0
 800a34e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a352:	bf14      	ite	ne
 800a354:	2340      	movne	r3, #64	@ 0x40
 800a356:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a35a:	2000      	movs	r0, #0
 800a35c:	6031      	str	r1, [r6, #0]
 800a35e:	602b      	str	r3, [r5, #0]
 800a360:	b016      	add	sp, #88	@ 0x58
 800a362:	bd70      	pop	{r4, r5, r6, pc}
 800a364:	466a      	mov	r2, sp
 800a366:	f000 f863 	bl	800a430 <_fstat_r>
 800a36a:	2800      	cmp	r0, #0
 800a36c:	dbed      	blt.n	800a34a <__swhatbuf_r+0x12>
 800a36e:	9901      	ldr	r1, [sp, #4]
 800a370:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a374:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a378:	4259      	negs	r1, r3
 800a37a:	4159      	adcs	r1, r3
 800a37c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a380:	e7eb      	b.n	800a35a <__swhatbuf_r+0x22>

0800a382 <__smakebuf_r>:
 800a382:	898b      	ldrh	r3, [r1, #12]
 800a384:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a386:	079d      	lsls	r5, r3, #30
 800a388:	4606      	mov	r6, r0
 800a38a:	460c      	mov	r4, r1
 800a38c:	d507      	bpl.n	800a39e <__smakebuf_r+0x1c>
 800a38e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a392:	6023      	str	r3, [r4, #0]
 800a394:	6123      	str	r3, [r4, #16]
 800a396:	2301      	movs	r3, #1
 800a398:	6163      	str	r3, [r4, #20]
 800a39a:	b003      	add	sp, #12
 800a39c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a39e:	ab01      	add	r3, sp, #4
 800a3a0:	466a      	mov	r2, sp
 800a3a2:	f7ff ffc9 	bl	800a338 <__swhatbuf_r>
 800a3a6:	9f00      	ldr	r7, [sp, #0]
 800a3a8:	4605      	mov	r5, r0
 800a3aa:	4630      	mov	r0, r6
 800a3ac:	4639      	mov	r1, r7
 800a3ae:	f7ff fa61 	bl	8009874 <_malloc_r>
 800a3b2:	b948      	cbnz	r0, 800a3c8 <__smakebuf_r+0x46>
 800a3b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3b8:	059a      	lsls	r2, r3, #22
 800a3ba:	d4ee      	bmi.n	800a39a <__smakebuf_r+0x18>
 800a3bc:	f023 0303 	bic.w	r3, r3, #3
 800a3c0:	f043 0302 	orr.w	r3, r3, #2
 800a3c4:	81a3      	strh	r3, [r4, #12]
 800a3c6:	e7e2      	b.n	800a38e <__smakebuf_r+0xc>
 800a3c8:	89a3      	ldrh	r3, [r4, #12]
 800a3ca:	6020      	str	r0, [r4, #0]
 800a3cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a3d0:	81a3      	strh	r3, [r4, #12]
 800a3d2:	9b01      	ldr	r3, [sp, #4]
 800a3d4:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a3d8:	b15b      	cbz	r3, 800a3f2 <__smakebuf_r+0x70>
 800a3da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a3de:	4630      	mov	r0, r6
 800a3e0:	f000 f838 	bl	800a454 <_isatty_r>
 800a3e4:	b128      	cbz	r0, 800a3f2 <__smakebuf_r+0x70>
 800a3e6:	89a3      	ldrh	r3, [r4, #12]
 800a3e8:	f023 0303 	bic.w	r3, r3, #3
 800a3ec:	f043 0301 	orr.w	r3, r3, #1
 800a3f0:	81a3      	strh	r3, [r4, #12]
 800a3f2:	89a3      	ldrh	r3, [r4, #12]
 800a3f4:	431d      	orrs	r5, r3
 800a3f6:	81a5      	strh	r5, [r4, #12]
 800a3f8:	e7cf      	b.n	800a39a <__smakebuf_r+0x18>

0800a3fa <memmove>:
 800a3fa:	4288      	cmp	r0, r1
 800a3fc:	b510      	push	{r4, lr}
 800a3fe:	eb01 0402 	add.w	r4, r1, r2
 800a402:	d902      	bls.n	800a40a <memmove+0x10>
 800a404:	4284      	cmp	r4, r0
 800a406:	4623      	mov	r3, r4
 800a408:	d807      	bhi.n	800a41a <memmove+0x20>
 800a40a:	1e43      	subs	r3, r0, #1
 800a40c:	42a1      	cmp	r1, r4
 800a40e:	d008      	beq.n	800a422 <memmove+0x28>
 800a410:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a414:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a418:	e7f8      	b.n	800a40c <memmove+0x12>
 800a41a:	4402      	add	r2, r0
 800a41c:	4601      	mov	r1, r0
 800a41e:	428a      	cmp	r2, r1
 800a420:	d100      	bne.n	800a424 <memmove+0x2a>
 800a422:	bd10      	pop	{r4, pc}
 800a424:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a428:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a42c:	e7f7      	b.n	800a41e <memmove+0x24>
	...

0800a430 <_fstat_r>:
 800a430:	b538      	push	{r3, r4, r5, lr}
 800a432:	2300      	movs	r3, #0
 800a434:	4d06      	ldr	r5, [pc, #24]	@ (800a450 <_fstat_r+0x20>)
 800a436:	4604      	mov	r4, r0
 800a438:	4608      	mov	r0, r1
 800a43a:	4611      	mov	r1, r2
 800a43c:	602b      	str	r3, [r5, #0]
 800a43e:	f7f7 fdfc 	bl	800203a <_fstat>
 800a442:	1c43      	adds	r3, r0, #1
 800a444:	d102      	bne.n	800a44c <_fstat_r+0x1c>
 800a446:	682b      	ldr	r3, [r5, #0]
 800a448:	b103      	cbz	r3, 800a44c <_fstat_r+0x1c>
 800a44a:	6023      	str	r3, [r4, #0]
 800a44c:	bd38      	pop	{r3, r4, r5, pc}
 800a44e:	bf00      	nop
 800a450:	20000554 	.word	0x20000554

0800a454 <_isatty_r>:
 800a454:	b538      	push	{r3, r4, r5, lr}
 800a456:	2300      	movs	r3, #0
 800a458:	4d05      	ldr	r5, [pc, #20]	@ (800a470 <_isatty_r+0x1c>)
 800a45a:	4604      	mov	r4, r0
 800a45c:	4608      	mov	r0, r1
 800a45e:	602b      	str	r3, [r5, #0]
 800a460:	f7f7 fdfb 	bl	800205a <_isatty>
 800a464:	1c43      	adds	r3, r0, #1
 800a466:	d102      	bne.n	800a46e <_isatty_r+0x1a>
 800a468:	682b      	ldr	r3, [r5, #0]
 800a46a:	b103      	cbz	r3, 800a46e <_isatty_r+0x1a>
 800a46c:	6023      	str	r3, [r4, #0]
 800a46e:	bd38      	pop	{r3, r4, r5, pc}
 800a470:	20000554 	.word	0x20000554

0800a474 <_sbrk_r>:
 800a474:	b538      	push	{r3, r4, r5, lr}
 800a476:	2300      	movs	r3, #0
 800a478:	4d05      	ldr	r5, [pc, #20]	@ (800a490 <_sbrk_r+0x1c>)
 800a47a:	4604      	mov	r4, r0
 800a47c:	4608      	mov	r0, r1
 800a47e:	602b      	str	r3, [r5, #0]
 800a480:	f7f7 fe04 	bl	800208c <_sbrk>
 800a484:	1c43      	adds	r3, r0, #1
 800a486:	d102      	bne.n	800a48e <_sbrk_r+0x1a>
 800a488:	682b      	ldr	r3, [r5, #0]
 800a48a:	b103      	cbz	r3, 800a48e <_sbrk_r+0x1a>
 800a48c:	6023      	str	r3, [r4, #0]
 800a48e:	bd38      	pop	{r3, r4, r5, pc}
 800a490:	20000554 	.word	0x20000554

0800a494 <memchr>:
 800a494:	b2c9      	uxtb	r1, r1
 800a496:	4603      	mov	r3, r0
 800a498:	4402      	add	r2, r0
 800a49a:	b510      	push	{r4, lr}
 800a49c:	4293      	cmp	r3, r2
 800a49e:	4618      	mov	r0, r3
 800a4a0:	d101      	bne.n	800a4a6 <memchr+0x12>
 800a4a2:	2000      	movs	r0, #0
 800a4a4:	e003      	b.n	800a4ae <memchr+0x1a>
 800a4a6:	7804      	ldrb	r4, [r0, #0]
 800a4a8:	3301      	adds	r3, #1
 800a4aa:	428c      	cmp	r4, r1
 800a4ac:	d1f6      	bne.n	800a49c <memchr+0x8>
 800a4ae:	bd10      	pop	{r4, pc}

0800a4b0 <_realloc_r>:
 800a4b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4b4:	4607      	mov	r7, r0
 800a4b6:	4614      	mov	r4, r2
 800a4b8:	460d      	mov	r5, r1
 800a4ba:	b921      	cbnz	r1, 800a4c6 <_realloc_r+0x16>
 800a4bc:	4611      	mov	r1, r2
 800a4be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a4c2:	f7ff b9d7 	b.w	8009874 <_malloc_r>
 800a4c6:	b92a      	cbnz	r2, 800a4d4 <_realloc_r+0x24>
 800a4c8:	4625      	mov	r5, r4
 800a4ca:	f7ff f967 	bl	800979c <_free_r>
 800a4ce:	4628      	mov	r0, r5
 800a4d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4d4:	f000 f81a 	bl	800a50c <_malloc_usable_size_r>
 800a4d8:	4284      	cmp	r4, r0
 800a4da:	4606      	mov	r6, r0
 800a4dc:	d802      	bhi.n	800a4e4 <_realloc_r+0x34>
 800a4de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a4e2:	d8f4      	bhi.n	800a4ce <_realloc_r+0x1e>
 800a4e4:	4621      	mov	r1, r4
 800a4e6:	4638      	mov	r0, r7
 800a4e8:	f7ff f9c4 	bl	8009874 <_malloc_r>
 800a4ec:	4680      	mov	r8, r0
 800a4ee:	b908      	cbnz	r0, 800a4f4 <_realloc_r+0x44>
 800a4f0:	4645      	mov	r5, r8
 800a4f2:	e7ec      	b.n	800a4ce <_realloc_r+0x1e>
 800a4f4:	42b4      	cmp	r4, r6
 800a4f6:	4622      	mov	r2, r4
 800a4f8:	4629      	mov	r1, r5
 800a4fa:	bf28      	it	cs
 800a4fc:	4632      	movcs	r2, r6
 800a4fe:	f7ff f940 	bl	8009782 <memcpy>
 800a502:	4629      	mov	r1, r5
 800a504:	4638      	mov	r0, r7
 800a506:	f7ff f949 	bl	800979c <_free_r>
 800a50a:	e7f1      	b.n	800a4f0 <_realloc_r+0x40>

0800a50c <_malloc_usable_size_r>:
 800a50c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a510:	1f18      	subs	r0, r3, #4
 800a512:	2b00      	cmp	r3, #0
 800a514:	bfbc      	itt	lt
 800a516:	580b      	ldrlt	r3, [r1, r0]
 800a518:	18c0      	addlt	r0, r0, r3
 800a51a:	4770      	bx	lr

0800a51c <_init>:
 800a51c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a51e:	bf00      	nop
 800a520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a522:	bc08      	pop	{r3}
 800a524:	469e      	mov	lr, r3
 800a526:	4770      	bx	lr

0800a528 <_fini>:
 800a528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a52a:	bf00      	nop
 800a52c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a52e:	bc08      	pop	{r3}
 800a530:	469e      	mov	lr, r3
 800a532:	4770      	bx	lr
