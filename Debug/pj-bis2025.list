
pj-bis2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ab4  08000234  08000234  00001234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a8  08006ce8  08006ce8  00007ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007090  08007090  00009078  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007090  08007090  00008090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007098  08007098  00009078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007098  08007098  00008098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800709c  0800709c  0000809c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  080070a0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000398  20000078  08007118  00009078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000410  08007118  00009410  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00009078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001caa3  00000000  00000000  000090ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034ff  00000000  00000000  00025b51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001528  00000000  00000000  00029050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0002fd16  00000000  00000000  0002a578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001a25a  00000000  00000000  0005a28e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0012a97a  00000000  00000000  000744e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0019ee62  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 0000104c  00000000  00000000  0019eea5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000061c0  00000000  00000000  0019fef4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  001a60b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000234 <__do_global_dtors_aux>:
 8000234:	b510      	push	{r4, lr}
 8000236:	4c05      	ldr	r4, [pc, #20]	@ (800024c <__do_global_dtors_aux+0x18>)
 8000238:	7823      	ldrb	r3, [r4, #0]
 800023a:	b933      	cbnz	r3, 800024a <__do_global_dtors_aux+0x16>
 800023c:	4b04      	ldr	r3, [pc, #16]	@ (8000250 <__do_global_dtors_aux+0x1c>)
 800023e:	b113      	cbz	r3, 8000246 <__do_global_dtors_aux+0x12>
 8000240:	4804      	ldr	r0, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x20>)
 8000242:	f3af 8000 	nop.w
 8000246:	2301      	movs	r3, #1
 8000248:	7023      	strb	r3, [r4, #0]
 800024a:	bd10      	pop	{r4, pc}
 800024c:	20000078 	.word	0x20000078
 8000250:	00000000 	.word	0x00000000
 8000254:	08006cd0 	.word	0x08006cd0

08000258 <frame_dummy>:
 8000258:	b508      	push	{r3, lr}
 800025a:	4b03      	ldr	r3, [pc, #12]	@ (8000268 <frame_dummy+0x10>)
 800025c:	b11b      	cbz	r3, 8000266 <frame_dummy+0xe>
 800025e:	4903      	ldr	r1, [pc, #12]	@ (800026c <frame_dummy+0x14>)
 8000260:	4803      	ldr	r0, [pc, #12]	@ (8000270 <frame_dummy+0x18>)
 8000262:	f3af 8000 	nop.w
 8000266:	bd08      	pop	{r3, pc}
 8000268:	00000000 	.word	0x00000000
 800026c:	2000007c 	.word	0x2000007c
 8000270:	08006cd0 	.word	0x08006cd0

08000274 <strlen>:
 8000274:	4603      	mov	r3, r0
 8000276:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027a:	2a00      	cmp	r2, #0
 800027c:	d1fb      	bne.n	8000276 <strlen+0x2>
 800027e:	1a18      	subs	r0, r3, r0
 8000280:	3801      	subs	r0, #1
 8000282:	4770      	bx	lr

08000284 <__aeabi_uldivmod>:
 8000284:	b953      	cbnz	r3, 800029c <__aeabi_uldivmod+0x18>
 8000286:	b94a      	cbnz	r2, 800029c <__aeabi_uldivmod+0x18>
 8000288:	2900      	cmp	r1, #0
 800028a:	bf08      	it	eq
 800028c:	2800      	cmpeq	r0, #0
 800028e:	bf1c      	itt	ne
 8000290:	f04f 31ff 	movne.w	r1, #4294967295
 8000294:	f04f 30ff 	movne.w	r0, #4294967295
 8000298:	f000 b9b0 	b.w	80005fc <__aeabi_idiv0>
 800029c:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a4:	f000 f806 	bl	80002b4 <__udivmoddi4>
 80002a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b0:	b004      	add	sp, #16
 80002b2:	4770      	bx	lr

080002b4 <__udivmoddi4>:
 80002b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002b8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ba:	4688      	mov	r8, r1
 80002bc:	4604      	mov	r4, r0
 80002be:	468e      	mov	lr, r1
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d14a      	bne.n	800035a <__udivmoddi4+0xa6>
 80002c4:	428a      	cmp	r2, r1
 80002c6:	4617      	mov	r7, r2
 80002c8:	d95f      	bls.n	800038a <__udivmoddi4+0xd6>
 80002ca:	fab2 f682 	clz	r6, r2
 80002ce:	b14e      	cbz	r6, 80002e4 <__udivmoddi4+0x30>
 80002d0:	f1c6 0320 	rsb	r3, r6, #32
 80002d4:	fa01 fe06 	lsl.w	lr, r1, r6
 80002d8:	40b7      	lsls	r7, r6
 80002da:	40b4      	lsls	r4, r6
 80002dc:	fa20 f303 	lsr.w	r3, r0, r3
 80002e0:	ea43 0e0e 	orr.w	lr, r3, lr
 80002e4:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e8:	fa1f fc87 	uxth.w	ip, r7
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fbbe f1f8 	udiv	r1, lr, r8
 80002f2:	fb08 ee11 	mls	lr, r8, r1, lr
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80002fe:	429a      	cmp	r2, r3
 8000300:	d907      	bls.n	8000312 <__udivmoddi4+0x5e>
 8000302:	18fb      	adds	r3, r7, r3
 8000304:	f101 30ff 	add.w	r0, r1, #4294967295
 8000308:	d202      	bcs.n	8000310 <__udivmoddi4+0x5c>
 800030a:	429a      	cmp	r2, r3
 800030c:	f200 8154 	bhi.w	80005b8 <__udivmoddi4+0x304>
 8000310:	4601      	mov	r1, r0
 8000312:	1a9b      	subs	r3, r3, r2
 8000314:	b2a2      	uxth	r2, r4
 8000316:	fbb3 f0f8 	udiv	r0, r3, r8
 800031a:	fb08 3310 	mls	r3, r8, r0, r3
 800031e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000322:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8000326:	4594      	cmp	ip, r2
 8000328:	d90b      	bls.n	8000342 <__udivmoddi4+0x8e>
 800032a:	18ba      	adds	r2, r7, r2
 800032c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000330:	bf2c      	ite	cs
 8000332:	2401      	movcs	r4, #1
 8000334:	2400      	movcc	r4, #0
 8000336:	4594      	cmp	ip, r2
 8000338:	d902      	bls.n	8000340 <__udivmoddi4+0x8c>
 800033a:	2c00      	cmp	r4, #0
 800033c:	f000 813f 	beq.w	80005be <__udivmoddi4+0x30a>
 8000340:	4618      	mov	r0, r3
 8000342:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000346:	eba2 020c 	sub.w	r2, r2, ip
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa2>
 800034e:	40f2      	lsrs	r2, r6
 8000350:	2300      	movs	r3, #0
 8000352:	e9c5 2300 	strd	r2, r3, [r5]
 8000356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xb6>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb0>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa2>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d14e      	bne.n	8000410 <__udivmoddi4+0x15c>
 8000372:	4543      	cmp	r3, r8
 8000374:	f0c0 8112 	bcc.w	800059c <__udivmoddi4+0x2e8>
 8000378:	4282      	cmp	r2, r0
 800037a:	f240 810f 	bls.w	800059c <__udivmoddi4+0x2e8>
 800037e:	4608      	mov	r0, r1
 8000380:	2d00      	cmp	r5, #0
 8000382:	d0e8      	beq.n	8000356 <__udivmoddi4+0xa2>
 8000384:	e9c5 4e00 	strd	r4, lr, [r5]
 8000388:	e7e5      	b.n	8000356 <__udivmoddi4+0xa2>
 800038a:	2a00      	cmp	r2, #0
 800038c:	f000 80ac 	beq.w	80004e8 <__udivmoddi4+0x234>
 8000390:	fab2 f682 	clz	r6, r2
 8000394:	2e00      	cmp	r6, #0
 8000396:	f040 80bb 	bne.w	8000510 <__udivmoddi4+0x25c>
 800039a:	1a8b      	subs	r3, r1, r2
 800039c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80003a0:	b2bc      	uxth	r4, r7
 80003a2:	2101      	movs	r1, #1
 80003a4:	0c02      	lsrs	r2, r0, #16
 80003a6:	b280      	uxth	r0, r0
 80003a8:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ac:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b0:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80003b4:	fb04 f20c 	mul.w	r2, r4, ip
 80003b8:	429a      	cmp	r2, r3
 80003ba:	d90e      	bls.n	80003da <__udivmoddi4+0x126>
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c2:	bf2c      	ite	cs
 80003c4:	f04f 0901 	movcs.w	r9, #1
 80003c8:	f04f 0900 	movcc.w	r9, #0
 80003cc:	429a      	cmp	r2, r3
 80003ce:	d903      	bls.n	80003d8 <__udivmoddi4+0x124>
 80003d0:	f1b9 0f00 	cmp.w	r9, #0
 80003d4:	f000 80ec 	beq.w	80005b0 <__udivmoddi4+0x2fc>
 80003d8:	46c4      	mov	ip, r8
 80003da:	1a9b      	subs	r3, r3, r2
 80003dc:	fbb3 f8fe 	udiv	r8, r3, lr
 80003e0:	fb0e 3318 	mls	r3, lr, r8, r3
 80003e4:	fb04 f408 	mul.w	r4, r4, r8
 80003e8:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 80003ec:	4294      	cmp	r4, r2
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x154>
 80003f0:	18ba      	adds	r2, r7, r2
 80003f2:	f108 33ff 	add.w	r3, r8, #4294967295
 80003f6:	bf2c      	ite	cs
 80003f8:	2001      	movcs	r0, #1
 80003fa:	2000      	movcc	r0, #0
 80003fc:	4294      	cmp	r4, r2
 80003fe:	d902      	bls.n	8000406 <__udivmoddi4+0x152>
 8000400:	2800      	cmp	r0, #0
 8000402:	f000 80d1 	beq.w	80005a8 <__udivmoddi4+0x2f4>
 8000406:	4698      	mov	r8, r3
 8000408:	1b12      	subs	r2, r2, r4
 800040a:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 800040e:	e79d      	b.n	800034c <__udivmoddi4+0x98>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa08 f401 	lsl.w	r4, r8, r1
 800041a:	fa00 f901 	lsl.w	r9, r0, r1
 800041e:	fa22 f706 	lsr.w	r7, r2, r6
 8000422:	fa28 f806 	lsr.w	r8, r8, r6
 8000426:	408a      	lsls	r2, r1
 8000428:	431f      	orrs	r7, r3
 800042a:	fa20 f306 	lsr.w	r3, r0, r6
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	4323      	orrs	r3, r4
 8000432:	fa1f fc87 	uxth.w	ip, r7
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fbb8 fef0 	udiv	lr, r8, r0
 800043c:	fb00 881e 	mls	r8, r0, lr, r8
 8000440:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000444:	fb0e f80c 	mul.w	r8, lr, ip
 8000448:	45a0      	cmp	r8, r4
 800044a:	d90e      	bls.n	800046a <__udivmoddi4+0x1b6>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000452:	bf2c      	ite	cs
 8000454:	f04f 0b01 	movcs.w	fp, #1
 8000458:	f04f 0b00 	movcc.w	fp, #0
 800045c:	45a0      	cmp	r8, r4
 800045e:	d903      	bls.n	8000468 <__udivmoddi4+0x1b4>
 8000460:	f1bb 0f00 	cmp.w	fp, #0
 8000464:	f000 80b8 	beq.w	80005d8 <__udivmoddi4+0x324>
 8000468:	46d6      	mov	lr, sl
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fa1f f883 	uxth.w	r8, r3
 8000472:	fbb4 f3f0 	udiv	r3, r4, r0
 8000476:	fb00 4413 	mls	r4, r0, r3, r4
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000482:	45a4      	cmp	ip, r4
 8000484:	d90e      	bls.n	80004a4 <__udivmoddi4+0x1f0>
 8000486:	193c      	adds	r4, r7, r4
 8000488:	f103 30ff 	add.w	r0, r3, #4294967295
 800048c:	bf2c      	ite	cs
 800048e:	f04f 0801 	movcs.w	r8, #1
 8000492:	f04f 0800 	movcc.w	r8, #0
 8000496:	45a4      	cmp	ip, r4
 8000498:	d903      	bls.n	80004a2 <__udivmoddi4+0x1ee>
 800049a:	f1b8 0f00 	cmp.w	r8, #0
 800049e:	f000 809f 	beq.w	80005e0 <__udivmoddi4+0x32c>
 80004a2:	4603      	mov	r3, r0
 80004a4:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a8:	eba4 040c 	sub.w	r4, r4, ip
 80004ac:	fba0 ec02 	umull	lr, ip, r0, r2
 80004b0:	4564      	cmp	r4, ip
 80004b2:	4673      	mov	r3, lr
 80004b4:	46e0      	mov	r8, ip
 80004b6:	d302      	bcc.n	80004be <__udivmoddi4+0x20a>
 80004b8:	d107      	bne.n	80004ca <__udivmoddi4+0x216>
 80004ba:	45f1      	cmp	r9, lr
 80004bc:	d205      	bcs.n	80004ca <__udivmoddi4+0x216>
 80004be:	ebbe 0302 	subs.w	r3, lr, r2
 80004c2:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	46e0      	mov	r8, ip
 80004ca:	b15d      	cbz	r5, 80004e4 <__udivmoddi4+0x230>
 80004cc:	ebb9 0203 	subs.w	r2, r9, r3
 80004d0:	eb64 0408 	sbc.w	r4, r4, r8
 80004d4:	fa04 f606 	lsl.w	r6, r4, r6
 80004d8:	fa22 f301 	lsr.w	r3, r2, r1
 80004dc:	40cc      	lsrs	r4, r1
 80004de:	431e      	orrs	r6, r3
 80004e0:	e9c5 6400 	strd	r6, r4, [r5]
 80004e4:	2100      	movs	r1, #0
 80004e6:	e736      	b.n	8000356 <__udivmoddi4+0xa2>
 80004e8:	fbb1 fcf2 	udiv	ip, r1, r2
 80004ec:	0c01      	lsrs	r1, r0, #16
 80004ee:	4614      	mov	r4, r2
 80004f0:	b280      	uxth	r0, r0
 80004f2:	4696      	mov	lr, r2
 80004f4:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80004f8:	2620      	movs	r6, #32
 80004fa:	4690      	mov	r8, r2
 80004fc:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8000500:	4610      	mov	r0, r2
 8000502:	fbb1 f1f2 	udiv	r1, r1, r2
 8000506:	eba3 0308 	sub.w	r3, r3, r8
 800050a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050e:	e74b      	b.n	80003a8 <__udivmoddi4+0xf4>
 8000510:	40b7      	lsls	r7, r6
 8000512:	f1c6 0320 	rsb	r3, r6, #32
 8000516:	fa01 f206 	lsl.w	r2, r1, r6
 800051a:	fa21 f803 	lsr.w	r8, r1, r3
 800051e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000522:	fa20 f303 	lsr.w	r3, r0, r3
 8000526:	b2bc      	uxth	r4, r7
 8000528:	40b0      	lsls	r0, r6
 800052a:	4313      	orrs	r3, r2
 800052c:	0c02      	lsrs	r2, r0, #16
 800052e:	0c19      	lsrs	r1, r3, #16
 8000530:	b280      	uxth	r0, r0
 8000532:	fbb8 f9fe 	udiv	r9, r8, lr
 8000536:	fb0e 8819 	mls	r8, lr, r9, r8
 800053a:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	4588      	cmp	r8, r1
 8000544:	d951      	bls.n	80005ea <__udivmoddi4+0x336>
 8000546:	1879      	adds	r1, r7, r1
 8000548:	f109 3cff 	add.w	ip, r9, #4294967295
 800054c:	bf2c      	ite	cs
 800054e:	f04f 0a01 	movcs.w	sl, #1
 8000552:	f04f 0a00 	movcc.w	sl, #0
 8000556:	4588      	cmp	r8, r1
 8000558:	d902      	bls.n	8000560 <__udivmoddi4+0x2ac>
 800055a:	f1ba 0f00 	cmp.w	sl, #0
 800055e:	d031      	beq.n	80005c4 <__udivmoddi4+0x310>
 8000560:	eba1 0108 	sub.w	r1, r1, r8
 8000564:	fbb1 f9fe 	udiv	r9, r1, lr
 8000568:	fb09 f804 	mul.w	r8, r9, r4
 800056c:	fb0e 1119 	mls	r1, lr, r9, r1
 8000570:	b29b      	uxth	r3, r3
 8000572:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000576:	4543      	cmp	r3, r8
 8000578:	d235      	bcs.n	80005e6 <__udivmoddi4+0x332>
 800057a:	18fb      	adds	r3, r7, r3
 800057c:	f109 31ff 	add.w	r1, r9, #4294967295
 8000580:	bf2c      	ite	cs
 8000582:	f04f 0a01 	movcs.w	sl, #1
 8000586:	f04f 0a00 	movcc.w	sl, #0
 800058a:	4543      	cmp	r3, r8
 800058c:	d2bb      	bcs.n	8000506 <__udivmoddi4+0x252>
 800058e:	f1ba 0f00 	cmp.w	sl, #0
 8000592:	d1b8      	bne.n	8000506 <__udivmoddi4+0x252>
 8000594:	f1a9 0102 	sub.w	r1, r9, #2
 8000598:	443b      	add	r3, r7
 800059a:	e7b4      	b.n	8000506 <__udivmoddi4+0x252>
 800059c:	1a84      	subs	r4, r0, r2
 800059e:	eb68 0203 	sbc.w	r2, r8, r3
 80005a2:	2001      	movs	r0, #1
 80005a4:	4696      	mov	lr, r2
 80005a6:	e6eb      	b.n	8000380 <__udivmoddi4+0xcc>
 80005a8:	443a      	add	r2, r7
 80005aa:	f1a8 0802 	sub.w	r8, r8, #2
 80005ae:	e72b      	b.n	8000408 <__udivmoddi4+0x154>
 80005b0:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b4:	443b      	add	r3, r7
 80005b6:	e710      	b.n	80003da <__udivmoddi4+0x126>
 80005b8:	3902      	subs	r1, #2
 80005ba:	443b      	add	r3, r7
 80005bc:	e6a9      	b.n	8000312 <__udivmoddi4+0x5e>
 80005be:	443a      	add	r2, r7
 80005c0:	3802      	subs	r0, #2
 80005c2:	e6be      	b.n	8000342 <__udivmoddi4+0x8e>
 80005c4:	eba7 0808 	sub.w	r8, r7, r8
 80005c8:	f1a9 0c02 	sub.w	ip, r9, #2
 80005cc:	4441      	add	r1, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c9      	b.n	800056c <__udivmoddi4+0x2b8>
 80005d8:	f1ae 0e02 	sub.w	lr, lr, #2
 80005dc:	443c      	add	r4, r7
 80005de:	e744      	b.n	800046a <__udivmoddi4+0x1b6>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	443c      	add	r4, r7
 80005e4:	e75e      	b.n	80004a4 <__udivmoddi4+0x1f0>
 80005e6:	4649      	mov	r1, r9
 80005e8:	e78d      	b.n	8000506 <__udivmoddi4+0x252>
 80005ea:	eba1 0108 	sub.w	r1, r1, r8
 80005ee:	46cc      	mov	ip, r9
 80005f0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005f4:	fb09 f804 	mul.w	r8, r9, r4
 80005f8:	e7b8      	b.n	800056c <__udivmoddi4+0x2b8>
 80005fa:	bf00      	nop

080005fc <__aeabi_idiv0>:
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop

08000600 <LCD_SELECT>:
#define LCD_DISP_GPIO_Port GPIOC
#define LCD_DISP_Pin       GPIO_PIN_10
#define HDR4BIT   0x24

/* 内部ヘルパ */
static inline void LCD_SELECT  (void){ HAL_GPIO_WritePin(LCD_CS_GPIO_Port,  LCD_CS_Pin, GPIO_PIN_SET); }
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
 8000604:	2201      	movs	r2, #1
 8000606:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800060a:	4802      	ldr	r0, [pc, #8]	@ (8000614 <LCD_SELECT+0x14>)
 800060c:	f001 fd36 	bl	800207c <HAL_GPIO_WritePin>
 8000610:	bf00      	nop
 8000612:	bd80      	pop	{r7, pc}
 8000614:	42020800 	.word	0x42020800

08000618 <LCD_UNSELECT>:
static inline void LCD_UNSELECT(void){ HAL_GPIO_WritePin(LCD_CS_GPIO_Port,  LCD_CS_Pin, GPIO_PIN_RESET);   }
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
 800061c:	2200      	movs	r2, #0
 800061e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000622:	4802      	ldr	r0, [pc, #8]	@ (800062c <LCD_UNSELECT+0x14>)
 8000624:	f001 fd2a 	bl	800207c <HAL_GPIO_WritePin>
 8000628:	bf00      	nop
 800062a:	bd80      	pop	{r7, pc}
 800062c:	42020800 	.word	0x42020800

08000630 <lcd_tx>:
static inline void lcd_tx(const uint8_t *p, size_t len){
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
 8000638:	6039      	str	r1, [r7, #0]
    HAL_SPI_Transmit(&hspi1, (uint8_t*)p, len, HAL_MAX_DELAY);
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	b29a      	uxth	r2, r3
 800063e:	f04f 33ff 	mov.w	r3, #4294967295
 8000642:	6879      	ldr	r1, [r7, #4]
 8000644:	4803      	ldr	r0, [pc, #12]	@ (8000654 <lcd_tx+0x24>)
 8000646:	f003 fb2d 	bl	8003ca4 <HAL_SPI_Transmit>
}
 800064a:	bf00      	nop
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	200000a8 	.word	0x200000a8

08000658 <LCD_Init>:

/* --- Public API ------------------------------------------------- */
void LCD_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
    /* ハードリセット相当 */
    HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_RESET);
 800065c:	2200      	movs	r2, #0
 800065e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000662:	4809      	ldr	r0, [pc, #36]	@ (8000688 <LCD_Init+0x30>)
 8000664:	f001 fd0a 	bl	800207c <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000668:	2001      	movs	r0, #1
 800066a:	f001 f97b 	bl	8001964 <HAL_Delay>
    HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 800066e:	2201      	movs	r2, #1
 8000670:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000674:	4804      	ldr	r0, [pc, #16]	@ (8000688 <LCD_Init+0x30>)
 8000676:	f001 fd01 	bl	800207c <HAL_GPIO_WritePin>
    HAL_Delay(10);
 800067a:	200a      	movs	r0, #10
 800067c:	f001 f972 	bl	8001964 <HAL_Delay>

    LCD_AllClear();                      /* メモリ全消去 (CMD 0x20) */
 8000680:	f000 f804 	bl	800068c <LCD_AllClear>
}
 8000684:	bf00      	nop
 8000686:	bd80      	pop	{r7, pc}
 8000688:	42020800 	.word	0x42020800

0800068c <LCD_AllClear>:

void LCD_AllClear(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
    const uint8_t cmd = 0x20;            /* ALL CLEAR */
 8000692:	2320      	movs	r3, #32
 8000694:	71fb      	strb	r3, [r7, #7]
    LCD_SELECT();
 8000696:	f7ff ffb3 	bl	8000600 <LCD_SELECT>
    lcd_tx(&cmd, 1);
 800069a:	1dfb      	adds	r3, r7, #7
 800069c:	2101      	movs	r1, #1
 800069e:	4618      	mov	r0, r3
 80006a0:	f7ff ffc6 	bl	8000630 <lcd_tx>
    LCD_UNSELECT();
 80006a4:	f7ff ffb8 	bl	8000618 <LCD_UNSELECT>
}
 80006a8:	bf00      	nop
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <LCD_SendLine4bit>:

void LCD_SendLine4bit(uint16_t y, const uint8_t *buf)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b09a      	sub	sp, #104	@ 0x68
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4603      	mov	r3, r0
 80006b8:	6039      	str	r1, [r7, #0]
 80006ba:	80fb      	strh	r3, [r7, #6]
    uint16_t hdr = (HDR4BIT << 10) | (y & 0x03FF);   /* 16‑bit ヘッダ */
 80006bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80006c4:	b21a      	sxth	r2, r3
 80006c6:	4b16      	ldr	r3, [pc, #88]	@ (8000720 <LCD_SendLine4bit+0x70>)
 80006c8:	4313      	orrs	r3, r2
 80006ca:	b21b      	sxth	r3, r3
 80006cc:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
    uint8_t  tx[2 + 88 + 2];                         /* hdr + data + 2B dummy */

    tx[0] = hdr >> 8;         /* MSB first */
 80006d0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80006d4:	0a1b      	lsrs	r3, r3, #8
 80006d6:	b29b      	uxth	r3, r3
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	723b      	strb	r3, [r7, #8]
    tx[1] = hdr & 0xFF;
 80006dc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	727b      	strb	r3, [r7, #9]
    memcpy(&tx[2], buf, 88);
 80006e4:	f107 0308 	add.w	r3, r7, #8
 80006e8:	3302      	adds	r3, #2
 80006ea:	2258      	movs	r2, #88	@ 0x58
 80006ec:	6839      	ldr	r1, [r7, #0]
 80006ee:	4618      	mov	r0, r3
 80006f0:	f005 fd35 	bl	800615e <memcpy>
    tx[90] = tx[91] = 0x00;   /* 16clk transfer period */
 80006f4:	2300      	movs	r3, #0
 80006f6:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
 80006fa:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 80006fe:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62

    LCD_SELECT();             /* ★ CS = High (SCS=H がアクティブ) */
 8000702:	f7ff ff7d 	bl	8000600 <LCD_SELECT>
    lcd_tx(tx, sizeof tx);    /* SPI 8‑bit, ≒20 MHz, MSB first */
 8000706:	f107 0308 	add.w	r3, r7, #8
 800070a:	215c      	movs	r1, #92	@ 0x5c
 800070c:	4618      	mov	r0, r3
 800070e:	f7ff ff8f 	bl	8000630 <lcd_tx>
    LCD_UNSELECT();           /* CS = Low */
 8000712:	f7ff ff81 	bl	8000618 <LCD_UNSELECT>
}
 8000716:	bf00      	nop
 8000718:	3768      	adds	r7, #104	@ 0x68
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	ffff9000 	.word	0xffff9000

08000724 <LCD_DrawString4bit>:
#define PIX_ON   0b1110   /* RGB=111, D=0 → 白 */
#define PIX_OFF  0b0000   /* 黒 */

/* 文字列を y0 行から 8 行ぶん描画（4‑bit data mode） */
void LCD_DrawString4bit(uint16_t y0, const char *str)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b09c      	sub	sp, #112	@ 0x70
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	6039      	str	r1, [r7, #0]
 800072e:	80fb      	strh	r3, [r7, #6]
    const uint16_t len   = strlen(str);
 8000730:	6838      	ldr	r0, [r7, #0]
 8000732:	f7ff fd9f 	bl	8000274 <strlen>
 8000736:	4603      	mov	r3, r0
 8000738:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
    const uint16_t xmax  = len * 8;          /* 文字幅(ピクセル) */
 800073c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8000740:	00db      	lsls	r3, r3, #3
 8000742:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
    uint8_t rowbuf[88];                      /* 176px ÷2 = 88B */

    for (uint8_t font_row = 0; font_row < 8; ++font_row) {
 8000746:	2300      	movs	r3, #0
 8000748:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 800074c:	e07f      	b.n	800084e <LCD_DrawString4bit+0x12a>
        /* 1 行分ゼロクリア */
        memset(rowbuf, 0, sizeof rowbuf);
 800074e:	f107 0308 	add.w	r3, r7, #8
 8000752:	2258      	movs	r2, #88	@ 0x58
 8000754:	2100      	movs	r1, #0
 8000756:	4618      	mov	r0, r3
 8000758:	f005 fc85 	bl	8006066 <memset>

        /* 文字→ピクセル→4‑bit パック */
        for (uint16_t x = 0; x < xmax; ++x) {
 800075c:	2300      	movs	r3, #0
 800075e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8000762:	e05d      	b.n	8000820 <LCD_DrawString4bit+0xfc>
            uint8_t ch   = str[x / 8] - 32;      /* ASCII32=space 基点 */
 8000764:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8000768:	08db      	lsrs	r3, r3, #3
 800076a:	b29b      	uxth	r3, r3
 800076c:	461a      	mov	r2, r3
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	4413      	add	r3, r2
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	3b20      	subs	r3, #32
 8000776:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
            uint8_t bit  = (font8x8_basic[ch][font_row] >> (x % 8)) & 1;
 800077a:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 800077e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000782:	4938      	ldr	r1, [pc, #224]	@ (8000864 <LCD_DrawString4bit+0x140>)
 8000784:	00d2      	lsls	r2, r2, #3
 8000786:	440a      	add	r2, r1
 8000788:	4413      	add	r3, r2
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	461a      	mov	r2, r3
 800078e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8000792:	f003 0307 	and.w	r3, r3, #7
 8000796:	fa42 f303 	asr.w	r3, r2, r3
 800079a:	b2db      	uxtb	r3, r3
 800079c:	f003 0301 	and.w	r3, r3, #1
 80007a0:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
            uint8_t pix4 = bit ? PIX_ON : PIX_OFF;
 80007a4:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <LCD_DrawString4bit+0x8c>
 80007ac:	230e      	movs	r3, #14
 80007ae:	e000      	b.n	80007b2 <LCD_DrawString4bit+0x8e>
 80007b0:	2300      	movs	r3, #0
 80007b2:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

            /* 2 ピクセルで 1 byte：偶数 x を上位 4bit、奇数 x を下位 4bit に */
            uint16_t byte_idx = x / 2;
 80007b6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80007ba:	085b      	lsrs	r3, r3, #1
 80007bc:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
            if (x & 1)
 80007c0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80007c4:	f003 0301 	and.w	r3, r3, #1
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d010      	beq.n	80007ee <LCD_DrawString4bit+0xca>
                rowbuf[byte_idx]  |= pix4;           /* 下位 nibble */
 80007cc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80007d0:	3370      	adds	r3, #112	@ 0x70
 80007d2:	443b      	add	r3, r7
 80007d4:	f813 1c68 	ldrb.w	r1, [r3, #-104]
 80007d8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80007dc:	f897 2065 	ldrb.w	r2, [r7, #101]	@ 0x65
 80007e0:	430a      	orrs	r2, r1
 80007e2:	b2d2      	uxtb	r2, r2
 80007e4:	3370      	adds	r3, #112	@ 0x70
 80007e6:	443b      	add	r3, r7
 80007e8:	f803 2c68 	strb.w	r2, [r3, #-104]
 80007ec:	e013      	b.n	8000816 <LCD_DrawString4bit+0xf2>
            else
                rowbuf[byte_idx]  |= pix4 << 4;      /* 上位 nibble */
 80007ee:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80007f2:	3370      	adds	r3, #112	@ 0x70
 80007f4:	443b      	add	r3, r7
 80007f6:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 80007fa:	b25a      	sxtb	r2, r3
 80007fc:	f997 3065 	ldrsb.w	r3, [r7, #101]	@ 0x65
 8000800:	011b      	lsls	r3, r3, #4
 8000802:	b25b      	sxtb	r3, r3
 8000804:	4313      	orrs	r3, r2
 8000806:	b25a      	sxtb	r2, r3
 8000808:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800080c:	b2d2      	uxtb	r2, r2
 800080e:	3370      	adds	r3, #112	@ 0x70
 8000810:	443b      	add	r3, r7
 8000812:	f803 2c68 	strb.w	r2, [r3, #-104]
        for (uint16_t x = 0; x < xmax; ++x) {
 8000816:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800081a:	3301      	adds	r3, #1
 800081c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8000820:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8000824:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8000828:	429a      	cmp	r2, r3
 800082a:	d39b      	bcc.n	8000764 <LCD_DrawString4bit+0x40>
        }
        /* 画面に送る（4‑bit data mode ヘッダ + dummy 16clk は関数側で付加）*/
        LCD_SendLine4bit(y0 + font_row, rowbuf);
 800082c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000830:	b29a      	uxth	r2, r3
 8000832:	88fb      	ldrh	r3, [r7, #6]
 8000834:	4413      	add	r3, r2
 8000836:	b29b      	uxth	r3, r3
 8000838:	f107 0208 	add.w	r2, r7, #8
 800083c:	4611      	mov	r1, r2
 800083e:	4618      	mov	r0, r3
 8000840:	f7ff ff36 	bl	80006b0 <LCD_SendLine4bit>
    for (uint8_t font_row = 0; font_row < 8; ++font_row) {
 8000844:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000848:	3301      	adds	r3, #1
 800084a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 800084e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000852:	2b07      	cmp	r3, #7
 8000854:	f67f af7b 	bls.w	800074e <LCD_DrawString4bit+0x2a>
    }
}
 8000858:	bf00      	nop
 800085a:	bf00      	nop
 800085c:	3770      	adds	r7, #112	@ 0x70
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	08006d18 	.word	0x08006d18

08000868 <LCD_ScrollText>:

/* 横スクロールアニメーション */
void LCD_ScrollText(uint16_t y0, const char *str, uint16_t scroll_offset)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b09e      	sub	sp, #120	@ 0x78
 800086c:	af00      	add	r7, sp, #0
 800086e:	4603      	mov	r3, r0
 8000870:	6039      	str	r1, [r7, #0]
 8000872:	80fb      	strh	r3, [r7, #6]
 8000874:	4613      	mov	r3, r2
 8000876:	80bb      	strh	r3, [r7, #4]
    const uint16_t len = strlen(str);
 8000878:	6838      	ldr	r0, [r7, #0]
 800087a:	f7ff fcfb 	bl	8000274 <strlen>
 800087e:	4603      	mov	r3, r0
 8000880:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70
    const uint16_t text_width = len * 8;    /* 文字列の総幅（ピクセル） */
 8000884:	f8b7 3070 	ldrh.w	r3, [r7, #112]	@ 0x70
 8000888:	00db      	lsls	r3, r3, #3
 800088a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
    const uint16_t screen_width = 176;      /* 画面幅 */
 800088e:	23b0      	movs	r3, #176	@ 0xb0
 8000890:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    uint8_t rowbuf[88];                     /* 176px ÷2 = 88B */

    for (uint8_t font_row = 0; font_row < 8; ++font_row) {
 8000894:	2300      	movs	r3, #0
 8000896:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800089a:	e09f      	b.n	80009dc <LCD_ScrollText+0x174>
        /* 1 行分ゼロクリア */
        memset(rowbuf, 0, sizeof rowbuf);
 800089c:	f107 030c 	add.w	r3, r7, #12
 80008a0:	2258      	movs	r2, #88	@ 0x58
 80008a2:	2100      	movs	r1, #0
 80008a4:	4618      	mov	r0, r3
 80008a6:	f005 fbde 	bl	8006066 <memset>

        /* 画面の各ピクセル位置について */
        for (uint16_t screen_x = 0; screen_x < screen_width; ++screen_x) {
 80008aa:	2300      	movs	r3, #0
 80008ac:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
 80008b0:	e07c      	b.n	80009ac <LCD_ScrollText+0x144>
            /* スクロールオフセットを考慮した文字列内の位置 */
            int16_t text_x = screen_x + scroll_offset;
 80008b2:	f8b7 2074 	ldrh.w	r2, [r7, #116]	@ 0x74
 80008b6:	88bb      	ldrh	r3, [r7, #4]
 80008b8:	4413      	add	r3, r2
 80008ba:	b29b      	uxth	r3, r3
 80008bc:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
            
            uint8_t pix4 = PIX_OFF;  /* デフォルトは黒 */
 80008c0:	2300      	movs	r3, #0
 80008c2:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
            
            /* 文字列の範囲内かチェック */
            if (text_x >= 0 && text_x < text_width) {
 80008c6:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	@ 0x6a
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	db39      	blt.n	8000942 <LCD_ScrollText+0xda>
 80008ce:	f9b7 206a 	ldrsh.w	r2, [r7, #106]	@ 0x6a
 80008d2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80008d6:	429a      	cmp	r2, r3
 80008d8:	da33      	bge.n	8000942 <LCD_ScrollText+0xda>
                uint8_t ch = str[text_x / 8] - 32;      /* ASCII32=space 基点 */
 80008da:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	@ 0x6a
 80008de:	2b00      	cmp	r3, #0
 80008e0:	da00      	bge.n	80008e4 <LCD_ScrollText+0x7c>
 80008e2:	3307      	adds	r3, #7
 80008e4:	10db      	asrs	r3, r3, #3
 80008e6:	b21b      	sxth	r3, r3
 80008e8:	461a      	mov	r2, r3
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	4413      	add	r3, r2
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	3b20      	subs	r3, #32
 80008f2:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
                uint8_t bit = (font8x8_basic[ch][font_row] >> (7 - (text_x % 8))) & 1;
 80008f6:	f897 2069 	ldrb.w	r2, [r7, #105]	@ 0x69
 80008fa:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80008fe:	493c      	ldr	r1, [pc, #240]	@ (80009f0 <LCD_ScrollText+0x188>)
 8000900:	00d2      	lsls	r2, r2, #3
 8000902:	440a      	add	r2, r1
 8000904:	4413      	add	r3, r2
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	4619      	mov	r1, r3
 800090a:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	@ 0x6a
 800090e:	425a      	negs	r2, r3
 8000910:	f003 0307 	and.w	r3, r3, #7
 8000914:	f002 0207 	and.w	r2, r2, #7
 8000918:	bf58      	it	pl
 800091a:	4253      	negpl	r3, r2
 800091c:	b21b      	sxth	r3, r3
 800091e:	f1c3 0307 	rsb	r3, r3, #7
 8000922:	fa41 f303 	asr.w	r3, r1, r3
 8000926:	b2db      	uxtb	r3, r3
 8000928:	f003 0301 	and.w	r3, r3, #1
 800092c:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                pix4 = bit ? PIX_ON : PIX_OFF;
 8000930:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <LCD_ScrollText+0xd4>
 8000938:	230e      	movs	r3, #14
 800093a:	e000      	b.n	800093e <LCD_ScrollText+0xd6>
 800093c:	2300      	movs	r3, #0
 800093e:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
            }

            /* 2 ピクセルで 1 byte：偶数 x を上位 4bit、奇数 x を下位 4bit に */
            uint16_t byte_idx = screen_x / 2;
 8000942:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8000946:	085b      	lsrs	r3, r3, #1
 8000948:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
            if (screen_x & 1)
 800094c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8000950:	f003 0301 	and.w	r3, r3, #1
 8000954:	2b00      	cmp	r3, #0
 8000956:	d010      	beq.n	800097a <LCD_ScrollText+0x112>
                rowbuf[byte_idx] |= pix4;           /* 下位 nibble */
 8000958:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800095c:	3378      	adds	r3, #120	@ 0x78
 800095e:	443b      	add	r3, r7
 8000960:	f813 1c6c 	ldrb.w	r1, [r3, #-108]
 8000964:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8000968:	f897 2073 	ldrb.w	r2, [r7, #115]	@ 0x73
 800096c:	430a      	orrs	r2, r1
 800096e:	b2d2      	uxtb	r2, r2
 8000970:	3378      	adds	r3, #120	@ 0x78
 8000972:	443b      	add	r3, r7
 8000974:	f803 2c6c 	strb.w	r2, [r3, #-108]
 8000978:	e013      	b.n	80009a2 <LCD_ScrollText+0x13a>
            else
                rowbuf[byte_idx] |= pix4 << 4;      /* 上位 nibble */
 800097a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800097e:	3378      	adds	r3, #120	@ 0x78
 8000980:	443b      	add	r3, r7
 8000982:	f813 3c6c 	ldrb.w	r3, [r3, #-108]
 8000986:	b25a      	sxtb	r2, r3
 8000988:	f997 3073 	ldrsb.w	r3, [r7, #115]	@ 0x73
 800098c:	011b      	lsls	r3, r3, #4
 800098e:	b25b      	sxtb	r3, r3
 8000990:	4313      	orrs	r3, r2
 8000992:	b25a      	sxtb	r2, r3
 8000994:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8000998:	b2d2      	uxtb	r2, r2
 800099a:	3378      	adds	r3, #120	@ 0x78
 800099c:	443b      	add	r3, r7
 800099e:	f803 2c6c 	strb.w	r2, [r3, #-108]
        for (uint16_t screen_x = 0; screen_x < screen_width; ++screen_x) {
 80009a2:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 80009a6:	3301      	adds	r3, #1
 80009a8:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
 80009ac:	f8b7 2074 	ldrh.w	r2, [r7, #116]	@ 0x74
 80009b0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80009b4:	429a      	cmp	r2, r3
 80009b6:	f4ff af7c 	bcc.w	80008b2 <LCD_ScrollText+0x4a>
        }
        /* 画面に送る */
        LCD_SendLine4bit(y0 + font_row, rowbuf);
 80009ba:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80009be:	b29a      	uxth	r2, r3
 80009c0:	88fb      	ldrh	r3, [r7, #6]
 80009c2:	4413      	add	r3, r2
 80009c4:	b29b      	uxth	r3, r3
 80009c6:	f107 020c 	add.w	r2, r7, #12
 80009ca:	4611      	mov	r1, r2
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff fe6f 	bl	80006b0 <LCD_SendLine4bit>
    for (uint8_t font_row = 0; font_row < 8; ++font_row) {
 80009d2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80009d6:	3301      	adds	r3, #1
 80009d8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80009dc:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80009e0:	2b07      	cmp	r3, #7
 80009e2:	f67f af5b 	bls.w	800089c <LCD_ScrollText+0x34>
    }
}
 80009e6:	bf00      	nop
 80009e8:	bf00      	nop
 80009ea:	3778      	adds	r7, #120	@ 0x78
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	08006d18 	.word	0x08006d18

080009f4 <LCD_BounceText>:

/* 上下バウンスアニメーション */
void LCD_BounceText(const char *str, uint16_t bounce_y)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	460b      	mov	r3, r1
 80009fe:	807b      	strh	r3, [r7, #2]
	LCD_AllClear();
 8000a00:	f7ff fe44 	bl	800068c <LCD_AllClear>
    /* 指定されたY位置に文字列を描画 */
    LCD_DrawString4bit(bounce_y, str);
 8000a04:	887b      	ldrh	r3, [r7, #2]
 8000a06:	6879      	ldr	r1, [r7, #4]
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f7ff fe8b 	bl	8000724 <LCD_DrawString4bit>
}
 8000a0e:	bf00      	nop
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
	...

08000a18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a1e:	f000 fee3 	bl	80017e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a22:	f000 f87b 	bl	8000b1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a26:	f000 fa0f 	bl	8000e48 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000a2a:	f000 f8d7 	bl	8000bdc <MX_SPI1_Init>
  MX_UART5_Init();
 8000a2e:	f000 f9bf 	bl	8000db0 <MX_UART5_Init>
  MX_TIM3_Init();
 8000a32:	f000 f943 	bl	8000cbc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* 1) EXTCOMIN (PC8) の 1 Hz PWM 出力を開始 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000a36:	2108      	movs	r1, #8
 8000a38:	4832      	ldr	r0, [pc, #200]	@ (8000b04 <main+0xec>)
 8000a3a:	f003 fd17 	bl	800446c <HAL_TIM_PWM_Start>

  /* 2) LCD_DISP (PC10) で LCD をリセット解除 */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);   // Low: Reset
 8000a3e:	2200      	movs	r2, #0
 8000a40:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a44:	4830      	ldr	r0, [pc, #192]	@ (8000b08 <main+0xf0>)
 8000a46:	f001 fb19 	bl	800207c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000a4a:	2001      	movs	r0, #1
 8000a4c:	f000 ff8a 	bl	8001964 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);     // High: Run
 8000a50:	2201      	movs	r2, #1
 8000a52:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a56:	482c      	ldr	r0, [pc, #176]	@ (8000b08 <main+0xf0>)
 8000a58:	f001 fb10 	bl	800207c <HAL_GPIO_WritePin>

  /* 3) LCD ドライバ初期化（ALL CLEAR コマンドなど） */
  LCD_Init();
 8000a5c:	f7ff fdfc 	bl	8000658 <LCD_Init>

  /* 4) 画面をクリア */
  LCD_AllClear();
 8000a60:	f7ff fe14 	bl	800068c <LCD_AllClear>

  /* 5) 固定文字列を描画 */
  for (uint16_t offset = 0; offset < 176 + strlen("HELLO WORLD") * 8; offset++) {
 8000a64:	2300      	movs	r3, #0
 8000a66:	81fb      	strh	r3, [r7, #14]
 8000a68:	e00c      	b.n	8000a84 <main+0x6c>
      LCD_ScrollText(16, "HELLO WORLD", -offset);
 8000a6a:	89fb      	ldrh	r3, [r7, #14]
 8000a6c:	425b      	negs	r3, r3
 8000a6e:	461a      	mov	r2, r3
 8000a70:	4926      	ldr	r1, [pc, #152]	@ (8000b0c <main+0xf4>)
 8000a72:	2010      	movs	r0, #16
 8000a74:	f7ff fef8 	bl	8000868 <LCD_ScrollText>
      HAL_Delay(20); // 20ms待つ（速度調整）
 8000a78:	2014      	movs	r0, #20
 8000a7a:	f000 ff73 	bl	8001964 <HAL_Delay>
  for (uint16_t offset = 0; offset < 176 + strlen("HELLO WORLD") * 8; offset++) {
 8000a7e:	89fb      	ldrh	r3, [r7, #14]
 8000a80:	3301      	adds	r3, #1
 8000a82:	81fb      	strh	r3, [r7, #14]
 8000a84:	89fb      	ldrh	r3, [r7, #14]
 8000a86:	f5b3 7f84 	cmp.w	r3, #264	@ 0x108
 8000a8a:	d3ee      	bcc.n	8000a6a <main+0x52>
  }
  const char *msg = "BOUNCE!";
 8000a8c:	4b20      	ldr	r3, [pc, #128]	@ (8000b10 <main+0xf8>)
 8000a8e:	603b      	str	r3, [r7, #0]
  int y = 0;
 8000a90:	2300      	movs	r3, #0
 8000a92:	60bb      	str	r3, [r7, #8]
  int dy = 5; // 移動量
 8000a94:	2305      	movs	r3, #5
 8000a96:	607b      	str	r3, [r7, #4]


  /* USER CODE END 2 */

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000a98:	2101      	movs	r1, #1
 8000a9a:	2000      	movs	r0, #0
 8000a9c:	f000 fd36 	bl	800150c <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000aa0:	4b1c      	ldr	r3, [pc, #112]	@ (8000b14 <main+0xfc>)
 8000aa2:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000aa6:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000aa8:	4b1a      	ldr	r3, [pc, #104]	@ (8000b14 <main+0xfc>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000aae:	4b19      	ldr	r3, [pc, #100]	@ (8000b14 <main+0xfc>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000ab4:	4b17      	ldr	r3, [pc, #92]	@ (8000b14 <main+0xfc>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000aba:	4b16      	ldr	r3, [pc, #88]	@ (8000b14 <main+0xfc>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000ac0:	4914      	ldr	r1, [pc, #80]	@ (8000b14 <main+0xfc>)
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	f000 fdb0 	bl	8001628 <BSP_COM_Init>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <main+0xba>
  {
    Error_Handler();
 8000ace:	f000 fa33 	bl	8000f38 <Error_Handler>
  }

  /* USER CODE BEGIN BSP */

  /* -- Sample board code to send message over COM1 port ---- */
  printf("Welcome to STM32 world !\n\r");
 8000ad2:	4811      	ldr	r0, [pc, #68]	@ (8000b18 <main+0x100>)
 8000ad4:	f005 fa72 	bl	8005fbc <iprintf>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  LCD_BounceText(msg, y);
 8000ad8:	68b9      	ldr	r1, [r7, #8]
 8000ada:	6838      	ldr	r0, [r7, #0]
 8000adc:	f7ff ff8a 	bl	80009f4 <LCD_BounceText>
	      HAL_Delay(30); // 30ms待つ
 8000ae0:	201e      	movs	r0, #30
 8000ae2:	f000 ff3f 	bl	8001964 <HAL_Delay>

	      y += dy;
 8000ae6:	68ba      	ldr	r2, [r7, #8]
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	4413      	add	r3, r2
 8000aec:	60bb      	str	r3, [r7, #8]
	      if (y <= 0 || y >= (176 - 8)) { // 画面端で反転（8は文字高さ）
 8000aee:	68bb      	ldr	r3, [r7, #8]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	dd02      	ble.n	8000afa <main+0xe2>
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	2ba7      	cmp	r3, #167	@ 0xa7
 8000af8:	ddee      	ble.n	8000ad8 <main+0xc0>
	          dy = -dy;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	425b      	negs	r3, r3
 8000afe:	607b      	str	r3, [r7, #4]
  {
 8000b00:	e7ea      	b.n	8000ad8 <main+0xc0>
 8000b02:	bf00      	nop
 8000b04:	20000138 	.word	0x20000138
 8000b08:	42020800 	.word	0x42020800
 8000b0c:	08006ce8 	.word	0x08006ce8
 8000b10:	08006cf4 	.word	0x08006cf4
 8000b14:	20000094 	.word	0x20000094
 8000b18:	08006cfc 	.word	0x08006cfc

08000b1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b094      	sub	sp, #80	@ 0x50
 8000b20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b22:	f107 0318 	add.w	r3, r7, #24
 8000b26:	2238      	movs	r2, #56	@ 0x38
 8000b28:	2100      	movs	r1, #0
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f005 fa9b 	bl	8006066 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b30:	463b      	mov	r3, r7
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	605a      	str	r2, [r3, #4]
 8000b38:	609a      	str	r2, [r3, #8]
 8000b3a:	60da      	str	r2, [r3, #12]
 8000b3c:	611a      	str	r2, [r3, #16]
 8000b3e:	615a      	str	r2, [r3, #20]

  /** Enable Epod Booster
  */
  if (HAL_RCCEx_EpodBoosterClkConfig(RCC_EPODBOOSTER_SOURCE_MSIS, RCC_EPODBOOSTER_DIV1) != HAL_OK)
 8000b40:	2100      	movs	r1, #0
 8000b42:	2001      	movs	r0, #1
 8000b44:	f002 ff7a 	bl	8003a3c <HAL_RCCEx_EpodBoosterClkConfig>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000b4e:	f000 f9f3 	bl	8000f38 <Error_Handler>
  }
  if (HAL_PWREx_EnableEpodBooster() != HAL_OK)
 8000b52:	f001 fae9 	bl	8002128 <HAL_PWREx_EnableEpodBooster>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <SystemClock_Config+0x44>
  {
    Error_Handler();
 8000b5c:	f000 f9ec 	bl	8000f38 <Error_Handler>
  }

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b60:	2001      	movs	r0, #1
 8000b62:	f001 faa3 	bl	80020ac <HAL_PWREx_ControlVoltageScaling>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000b6c:	f000 f9e4 	bl	8000f38 <Error_Handler>
  }

  /** Set Flash latency before increasing MSIS
  */
  __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_2);
 8000b70:	4b19      	ldr	r3, [pc, #100]	@ (8000bd8 <SystemClock_Config+0xbc>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f023 030f 	bic.w	r3, r3, #15
 8000b78:	4a17      	ldr	r2, [pc, #92]	@ (8000bd8 <SystemClock_Config+0xbc>)
 8000b7a:	f043 0302 	orr.w	r3, r3, #2
 8000b7e:	6013      	str	r3, [r2, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSIS;
 8000b80:	2320      	movs	r3, #32
 8000b82:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSISState = RCC_MSI_ON;
 8000b84:	2301      	movs	r3, #1
 8000b86:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSISSource = RCC_MSI_RC0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.MSISDiv = RCC_MSI_DIV1;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b90:	f107 0318 	add.w	r3, r7, #24
 8000b94:	4618      	mov	r0, r3
 8000b96:	f001 faf3 	bl	8002180 <HAL_RCC_OscConfig>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000ba0:	f000 f9ca 	bl	8000f38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ba4:	231f      	movs	r3, #31
 8000ba6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSIS;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bac:	2300      	movs	r3, #0
 8000bae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bbc:	463b      	mov	r3, r7
 8000bbe:	2102      	movs	r1, #2
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f001 fe33 	bl	800282c <HAL_RCC_ClockConfig>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000bcc:	f000 f9b4 	bl	8000f38 <Error_Handler>
  }
}
 8000bd0:	bf00      	nop
 8000bd2:	3750      	adds	r7, #80	@ 0x50
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40022000 	.word	0x40022000

08000bdc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000bec:	4b31      	ldr	r3, [pc, #196]	@ (8000cb4 <MX_SPI1_Init+0xd8>)
 8000bee:	4a32      	ldr	r2, [pc, #200]	@ (8000cb8 <MX_SPI1_Init+0xdc>)
 8000bf0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bf2:	4b30      	ldr	r3, [pc, #192]	@ (8000cb4 <MX_SPI1_Init+0xd8>)
 8000bf4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000bf8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8000bfa:	4b2e      	ldr	r3, [pc, #184]	@ (8000cb4 <MX_SPI1_Init+0xd8>)
 8000bfc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000c00:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c02:	4b2c      	ldr	r3, [pc, #176]	@ (8000cb4 <MX_SPI1_Init+0xd8>)
 8000c04:	2207      	movs	r2, #7
 8000c06:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c08:	4b2a      	ldr	r3, [pc, #168]	@ (8000cb4 <MX_SPI1_Init+0xd8>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c0e:	4b29      	ldr	r3, [pc, #164]	@ (8000cb4 <MX_SPI1_Init+0xd8>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c14:	4b27      	ldr	r3, [pc, #156]	@ (8000cb4 <MX_SPI1_Init+0xd8>)
 8000c16:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000c1a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000c1c:	4b25      	ldr	r3, [pc, #148]	@ (8000cb4 <MX_SPI1_Init+0xd8>)
 8000c1e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000c22:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c24:	4b23      	ldr	r3, [pc, #140]	@ (8000cb4 <MX_SPI1_Init+0xd8>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c2a:	4b22      	ldr	r3, [pc, #136]	@ (8000cb4 <MX_SPI1_Init+0xd8>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c30:	4b20      	ldr	r3, [pc, #128]	@ (8000cb4 <MX_SPI1_Init+0xd8>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8000c36:	4b1f      	ldr	r3, [pc, #124]	@ (8000cb4 <MX_SPI1_Init+0xd8>)
 8000c38:	2207      	movs	r2, #7
 8000c3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c3c:	4b1d      	ldr	r3, [pc, #116]	@ (8000cb4 <MX_SPI1_Init+0xd8>)
 8000c3e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c42:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000c44:	4b1b      	ldr	r3, [pc, #108]	@ (8000cb4 <MX_SPI1_Init+0xd8>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000c4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb4 <MX_SPI1_Init+0xd8>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000c50:	4b18      	ldr	r3, [pc, #96]	@ (8000cb4 <MX_SPI1_Init+0xd8>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000c56:	4b17      	ldr	r3, [pc, #92]	@ (8000cb4 <MX_SPI1_Init+0xd8>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000c5c:	4b15      	ldr	r3, [pc, #84]	@ (8000cb4 <MX_SPI1_Init+0xd8>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000c62:	4b14      	ldr	r3, [pc, #80]	@ (8000cb4 <MX_SPI1_Init+0xd8>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000c68:	4b12      	ldr	r3, [pc, #72]	@ (8000cb4 <MX_SPI1_Init+0xd8>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000c6e:	4b11      	ldr	r3, [pc, #68]	@ (8000cb4 <MX_SPI1_Init+0xd8>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000c74:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb4 <MX_SPI1_Init+0xd8>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c7a:	480e      	ldr	r0, [pc, #56]	@ (8000cb4 <MX_SPI1_Init+0xd8>)
 8000c7c:	f002 ff22 	bl	8003ac4 <HAL_SPI_Init>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_SPI1_Init+0xae>
  {
    Error_Handler();
 8000c86:	f000 f957 	bl	8000f38 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8000c8e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000c92:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8000c94:	2300      	movs	r3, #0
 8000c96:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8000c98:	1d3b      	adds	r3, r7, #4
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4805      	ldr	r0, [pc, #20]	@ (8000cb4 <MX_SPI1_Init+0xd8>)
 8000c9e:	f003 faec 	bl	800427a <HAL_SPIEx_SetConfigAutonomousMode>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_SPI1_Init+0xd0>
  {
    Error_Handler();
 8000ca8:	f000 f946 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000cac:	bf00      	nop
 8000cae:	3710      	adds	r7, #16
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	200000a8 	.word	0x200000a8
 8000cb8:	40013000 	.word	0x40013000

08000cbc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08e      	sub	sp, #56	@ 0x38
 8000cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cc2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]
 8000ccc:	609a      	str	r2, [r3, #8]
 8000cce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cd0:	f107 031c 	add.w	r3, r7, #28
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cdc:	463b      	mov	r3, r7
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	605a      	str	r2, [r3, #4]
 8000ce4:	609a      	str	r2, [r3, #8]
 8000ce6:	60da      	str	r2, [r3, #12]
 8000ce8:	611a      	str	r2, [r3, #16]
 8000cea:	615a      	str	r2, [r3, #20]
 8000cec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cee:	4b2e      	ldr	r3, [pc, #184]	@ (8000da8 <MX_TIM3_Init+0xec>)
 8000cf0:	4a2e      	ldr	r2, [pc, #184]	@ (8000dac <MX_TIM3_Init+0xf0>)
 8000cf2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 191;
 8000cf4:	4b2c      	ldr	r3, [pc, #176]	@ (8000da8 <MX_TIM3_Init+0xec>)
 8000cf6:	22bf      	movs	r2, #191	@ 0xbf
 8000cf8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cfa:	4b2b      	ldr	r3, [pc, #172]	@ (8000da8 <MX_TIM3_Init+0xec>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8000d00:	4b29      	ldr	r3, [pc, #164]	@ (8000da8 <MX_TIM3_Init+0xec>)
 8000d02:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000d06:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000d08:	4b27      	ldr	r3, [pc, #156]	@ (8000da8 <MX_TIM3_Init+0xec>)
 8000d0a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d0e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d10:	4b25      	ldr	r3, [pc, #148]	@ (8000da8 <MX_TIM3_Init+0xec>)
 8000d12:	2280      	movs	r2, #128	@ 0x80
 8000d14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d16:	4824      	ldr	r0, [pc, #144]	@ (8000da8 <MX_TIM3_Init+0xec>)
 8000d18:	f003 faf0 	bl	80042fc <HAL_TIM_Base_Init>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8000d22:	f000 f909 	bl	8000f38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d26:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d2c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d30:	4619      	mov	r1, r3
 8000d32:	481d      	ldr	r0, [pc, #116]	@ (8000da8 <MX_TIM3_Init+0xec>)
 8000d34:	f003 fda2 	bl	800487c <HAL_TIM_ConfigClockSource>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000d3e:	f000 f8fb 	bl	8000f38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d42:	4819      	ldr	r0, [pc, #100]	@ (8000da8 <MX_TIM3_Init+0xec>)
 8000d44:	f003 fb31 	bl	80043aa <HAL_TIM_PWM_Init>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000d4e:	f000 f8f3 	bl	8000f38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d52:	2300      	movs	r3, #0
 8000d54:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d56:	2300      	movs	r3, #0
 8000d58:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d5a:	f107 031c 	add.w	r3, r7, #28
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4811      	ldr	r0, [pc, #68]	@ (8000da8 <MX_TIM3_Init+0xec>)
 8000d62:	f004 fa7f 	bl	8005264 <HAL_TIMEx_MasterConfigSynchronization>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000d6c:	f000 f8e4 	bl	8000f38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d70:	2360      	movs	r3, #96	@ 0x60
 8000d72:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 5000;
 8000d74:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000d78:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d82:	463b      	mov	r3, r7
 8000d84:	2208      	movs	r2, #8
 8000d86:	4619      	mov	r1, r3
 8000d88:	4807      	ldr	r0, [pc, #28]	@ (8000da8 <MX_TIM3_Init+0xec>)
 8000d8a:	f003 fc63 	bl	8004654 <HAL_TIM_PWM_ConfigChannel>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_TIM3_Init+0xdc>
  {
    Error_Handler();
 8000d94:	f000 f8d0 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000d98:	4803      	ldr	r0, [pc, #12]	@ (8000da8 <MX_TIM3_Init+0xec>)
 8000d9a:	f000 f973 	bl	8001084 <HAL_TIM_MspPostInit>

}
 8000d9e:	bf00      	nop
 8000da0:	3738      	adds	r7, #56	@ 0x38
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	20000138 	.word	0x20000138
 8000dac:	40000400 	.word	0x40000400

08000db0 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000db4:	4b22      	ldr	r3, [pc, #136]	@ (8000e40 <MX_UART5_Init+0x90>)
 8000db6:	4a23      	ldr	r2, [pc, #140]	@ (8000e44 <MX_UART5_Init+0x94>)
 8000db8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000dba:	4b21      	ldr	r3, [pc, #132]	@ (8000e40 <MX_UART5_Init+0x90>)
 8000dbc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000dc0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000dc2:	4b1f      	ldr	r3, [pc, #124]	@ (8000e40 <MX_UART5_Init+0x90>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000dc8:	4b1d      	ldr	r3, [pc, #116]	@ (8000e40 <MX_UART5_Init+0x90>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000dce:	4b1c      	ldr	r3, [pc, #112]	@ (8000e40 <MX_UART5_Init+0x90>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000dd4:	4b1a      	ldr	r3, [pc, #104]	@ (8000e40 <MX_UART5_Init+0x90>)
 8000dd6:	220c      	movs	r2, #12
 8000dd8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dda:	4b19      	ldr	r3, [pc, #100]	@ (8000e40 <MX_UART5_Init+0x90>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000de0:	4b17      	ldr	r3, [pc, #92]	@ (8000e40 <MX_UART5_Init+0x90>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000de6:	4b16      	ldr	r3, [pc, #88]	@ (8000e40 <MX_UART5_Init+0x90>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000dec:	4b14      	ldr	r3, [pc, #80]	@ (8000e40 <MX_UART5_Init+0x90>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000df2:	4b13      	ldr	r3, [pc, #76]	@ (8000e40 <MX_UART5_Init+0x90>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000df8:	4811      	ldr	r0, [pc, #68]	@ (8000e40 <MX_UART5_Init+0x90>)
 8000dfa:	f004 faa9 	bl	8005350 <HAL_UART_Init>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8000e04:	f000 f898 	bl	8000f38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e08:	2100      	movs	r1, #0
 8000e0a:	480d      	ldr	r0, [pc, #52]	@ (8000e40 <MX_UART5_Init+0x90>)
 8000e0c:	f004 ff4a 	bl	8005ca4 <HAL_UARTEx_SetTxFifoThreshold>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8000e16:	f000 f88f 	bl	8000f38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	4808      	ldr	r0, [pc, #32]	@ (8000e40 <MX_UART5_Init+0x90>)
 8000e1e:	f004 ff7f 	bl	8005d20 <HAL_UARTEx_SetRxFifoThreshold>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8000e28:	f000 f886 	bl	8000f38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8000e2c:	4804      	ldr	r0, [pc, #16]	@ (8000e40 <MX_UART5_Init+0x90>)
 8000e2e:	f004 ff00 	bl	8005c32 <HAL_UARTEx_DisableFifoMode>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8000e38:	f000 f87e 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000e3c:	bf00      	nop
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	20000184 	.word	0x20000184
 8000e44:	40005000 	.word	0x40005000

08000e48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08a      	sub	sp, #40	@ 0x28
 8000e4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4e:	f107 0314 	add.w	r3, r7, #20
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	605a      	str	r2, [r3, #4]
 8000e58:	609a      	str	r2, [r3, #8]
 8000e5a:	60da      	str	r2, [r3, #12]
 8000e5c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e5e:	4b2a      	ldr	r3, [pc, #168]	@ (8000f08 <MX_GPIO_Init+0xc0>)
 8000e60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e64:	4a28      	ldr	r2, [pc, #160]	@ (8000f08 <MX_GPIO_Init+0xc0>)
 8000e66:	f043 0304 	orr.w	r3, r3, #4
 8000e6a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e6e:	4b26      	ldr	r3, [pc, #152]	@ (8000f08 <MX_GPIO_Init+0xc0>)
 8000e70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e74:	f003 0304 	and.w	r3, r3, #4
 8000e78:	613b      	str	r3, [r7, #16]
 8000e7a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7c:	4b22      	ldr	r3, [pc, #136]	@ (8000f08 <MX_GPIO_Init+0xc0>)
 8000e7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e82:	4a21      	ldr	r2, [pc, #132]	@ (8000f08 <MX_GPIO_Init+0xc0>)
 8000e84:	f043 0301 	orr.w	r3, r3, #1
 8000e88:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e8c:	4b1e      	ldr	r3, [pc, #120]	@ (8000f08 <MX_GPIO_Init+0xc0>)
 8000e8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e9a:	4b1b      	ldr	r3, [pc, #108]	@ (8000f08 <MX_GPIO_Init+0xc0>)
 8000e9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ea0:	4a19      	ldr	r2, [pc, #100]	@ (8000f08 <MX_GPIO_Init+0xc0>)
 8000ea2:	f043 0308 	orr.w	r3, r3, #8
 8000ea6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000eaa:	4b17      	ldr	r3, [pc, #92]	@ (8000f08 <MX_GPIO_Init+0xc0>)
 8000eac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000eb0:	f003 0308 	and.w	r3, r3, #8
 8000eb4:	60bb      	str	r3, [r7, #8]
 8000eb6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb8:	4b13      	ldr	r3, [pc, #76]	@ (8000f08 <MX_GPIO_Init+0xc0>)
 8000eba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ebe:	4a12      	ldr	r2, [pc, #72]	@ (8000f08 <MX_GPIO_Init+0xc0>)
 8000ec0:	f043 0302 	orr.w	r3, r3, #2
 8000ec4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ec8:	4b0f      	ldr	r3, [pc, #60]	@ (8000f08 <MX_GPIO_Init+0xc0>)
 8000eca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ece:	f003 0302 	and.w	r3, r3, #2
 8000ed2:	607b      	str	r3, [r7, #4]
 8000ed4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_CS_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8000edc:	480b      	ldr	r0, [pc, #44]	@ (8000f0c <MX_GPIO_Init+0xc4>)
 8000ede:	f001 f8cd 	bl	800207c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_CS_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_DISP_Pin;
 8000ee2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000ee6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4804      	ldr	r0, [pc, #16]	@ (8000f0c <MX_GPIO_Init+0xc4>)
 8000efc:	f000 ff34 	bl	8001d68 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000f00:	bf00      	nop
 8000f02:	3728      	adds	r7, #40	@ 0x28
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40030c00 	.word	0x40030c00
 8000f0c:	42020800 	.word	0x42020800

08000f10 <BSP_PB_Callback>:
  * @brief BSP Push Button callback
  * @param Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d102      	bne.n	8000f26 <BSP_PB_Callback+0x16>
  {
    BspButtonState = BUTTON_PRESSED;
 8000f20:	4b04      	ldr	r3, [pc, #16]	@ (8000f34 <BSP_PB_Callback+0x24>)
 8000f22:	2201      	movs	r2, #1
 8000f24:	601a      	str	r2, [r3, #0]
  }
}
 8000f26:	bf00      	nop
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	200000a4 	.word	0x200000a4

08000f38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f3c:	b672      	cpsid	i
}
 8000f3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f40:	bf00      	nop
 8000f42:	e7fd      	b.n	8000f40 <Error_Handler+0x8>

08000f44 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f74 <HAL_MspInit+0x30>)
 8000f4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f50:	4a08      	ldr	r2, [pc, #32]	@ (8000f74 <HAL_MspInit+0x30>)
 8000f52:	f043 0304 	orr.w	r3, r3, #4
 8000f56:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000f5a:	4b06      	ldr	r3, [pc, #24]	@ (8000f74 <HAL_MspInit+0x30>)
 8000f5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f60:	f003 0304 	and.w	r3, r3, #4
 8000f64:	607b      	str	r3, [r7, #4]
 8000f66:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f68:	bf00      	nop
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	40030c00 	.word	0x40030c00

08000f78 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b0a8      	sub	sp, #160	@ 0xa0
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f80:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f90:	f107 0314 	add.w	r3, r7, #20
 8000f94:	2278      	movs	r2, #120	@ 0x78
 8000f96:	2100      	movs	r1, #0
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f005 f864 	bl	8006066 <memset>
  if(hspi->Instance==SPI1)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a24      	ldr	r2, [pc, #144]	@ (8001034 <HAL_SPI_MspInit+0xbc>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d141      	bne.n	800102c <HAL_SPI_MspInit+0xb4>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000fa8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fac:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PCLK2;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fb2:	f107 0314 	add.w	r3, r7, #20
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f001 fdf8 	bl	8002bac <HAL_RCCEx_PeriphCLKConfig>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8000fc2:	f7ff ffb9 	bl	8000f38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fc6:	4b1c      	ldr	r3, [pc, #112]	@ (8001038 <HAL_SPI_MspInit+0xc0>)
 8000fc8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000fcc:	4a1a      	ldr	r2, [pc, #104]	@ (8001038 <HAL_SPI_MspInit+0xc0>)
 8000fce:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000fd2:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000fd6:	4b18      	ldr	r3, [pc, #96]	@ (8001038 <HAL_SPI_MspInit+0xc0>)
 8000fd8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000fdc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000fe0:	613b      	str	r3, [r7, #16]
 8000fe2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe4:	4b14      	ldr	r3, [pc, #80]	@ (8001038 <HAL_SPI_MspInit+0xc0>)
 8000fe6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fea:	4a13      	ldr	r2, [pc, #76]	@ (8001038 <HAL_SPI_MspInit+0xc0>)
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ff4:	4b10      	ldr	r3, [pc, #64]	@ (8001038 <HAL_SPI_MspInit+0xc0>)
 8000ff6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001002:	23a0      	movs	r3, #160	@ 0xa0
 8001004:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001008:	2302      	movs	r3, #2
 800100a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001014:	2300      	movs	r3, #0
 8001016:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800101a:	2305      	movs	r3, #5
 800101c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001020:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001024:	4619      	mov	r1, r3
 8001026:	4805      	ldr	r0, [pc, #20]	@ (800103c <HAL_SPI_MspInit+0xc4>)
 8001028:	f000 fe9e 	bl	8001d68 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800102c:	bf00      	nop
 800102e:	37a0      	adds	r7, #160	@ 0xa0
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40013000 	.word	0x40013000
 8001038:	40030c00 	.word	0x40030c00
 800103c:	42020000 	.word	0x42020000

08001040 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a0b      	ldr	r2, [pc, #44]	@ (800107c <HAL_TIM_Base_MspInit+0x3c>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d10e      	bne.n	8001070 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001052:	4b0b      	ldr	r3, [pc, #44]	@ (8001080 <HAL_TIM_Base_MspInit+0x40>)
 8001054:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001058:	4a09      	ldr	r2, [pc, #36]	@ (8001080 <HAL_TIM_Base_MspInit+0x40>)
 800105a:	f043 0302 	orr.w	r3, r3, #2
 800105e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001062:	4b07      	ldr	r3, [pc, #28]	@ (8001080 <HAL_TIM_Base_MspInit+0x40>)
 8001064:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001068:	f003 0302 	and.w	r3, r3, #2
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001070:	bf00      	nop
 8001072:	3714      	adds	r7, #20
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	40000400 	.word	0x40000400
 8001080:	40030c00 	.word	0x40030c00

08001084 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b088      	sub	sp, #32
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108c:	f107 030c 	add.w	r3, r7, #12
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a13      	ldr	r2, [pc, #76]	@ (80010f0 <HAL_TIM_MspPostInit+0x6c>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d11f      	bne.n	80010e6 <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a6:	4b13      	ldr	r3, [pc, #76]	@ (80010f4 <HAL_TIM_MspPostInit+0x70>)
 80010a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010ac:	4a11      	ldr	r2, [pc, #68]	@ (80010f4 <HAL_TIM_MspPostInit+0x70>)
 80010ae:	f043 0304 	orr.w	r3, r3, #4
 80010b2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80010b6:	4b0f      	ldr	r3, [pc, #60]	@ (80010f4 <HAL_TIM_MspPostInit+0x70>)
 80010b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010bc:	f003 0304 	and.w	r3, r3, #4
 80010c0:	60bb      	str	r3, [r7, #8]
 80010c2:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = LCD_EXTCOMIN_Pin;
 80010c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010c8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ca:	2302      	movs	r3, #2
 80010cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d2:	2300      	movs	r3, #0
 80010d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80010d6:	2302      	movs	r3, #2
 80010d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LCD_EXTCOMIN_GPIO_Port, &GPIO_InitStruct);
 80010da:	f107 030c 	add.w	r3, r7, #12
 80010de:	4619      	mov	r1, r3
 80010e0:	4805      	ldr	r0, [pc, #20]	@ (80010f8 <HAL_TIM_MspPostInit+0x74>)
 80010e2:	f000 fe41 	bl	8001d68 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80010e6:	bf00      	nop
 80010e8:	3720      	adds	r7, #32
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40000400 	.word	0x40000400
 80010f4:	40030c00 	.word	0x40030c00
 80010f8:	42020800 	.word	0x42020800

080010fc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b0a8      	sub	sp, #160	@ 0xa0
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001104:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001114:	f107 0314 	add.w	r3, r7, #20
 8001118:	2278      	movs	r2, #120	@ 0x78
 800111a:	2100      	movs	r1, #0
 800111c:	4618      	mov	r0, r3
 800111e:	f004 ffa2 	bl	8006066 <memset>
  if(huart->Instance==UART5)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a36      	ldr	r2, [pc, #216]	@ (8001200 <HAL_UART_MspInit+0x104>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d165      	bne.n	80011f8 <HAL_UART_MspInit+0xfc>

    /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 800112c:	2308      	movs	r3, #8
 800112e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001130:	2300      	movs	r3, #0
 8001132:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	4618      	mov	r0, r3
 800113a:	f001 fd37 	bl	8002bac <HAL_RCCEx_PeriphCLKConfig>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001144:	f7ff fef8 	bl	8000f38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001148:	4b2e      	ldr	r3, [pc, #184]	@ (8001204 <HAL_UART_MspInit+0x108>)
 800114a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800114e:	4a2d      	ldr	r2, [pc, #180]	@ (8001204 <HAL_UART_MspInit+0x108>)
 8001150:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001154:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001158:	4b2a      	ldr	r3, [pc, #168]	@ (8001204 <HAL_UART_MspInit+0x108>)
 800115a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800115e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001162:	613b      	str	r3, [r7, #16]
 8001164:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001166:	4b27      	ldr	r3, [pc, #156]	@ (8001204 <HAL_UART_MspInit+0x108>)
 8001168:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800116c:	4a25      	ldr	r2, [pc, #148]	@ (8001204 <HAL_UART_MspInit+0x108>)
 800116e:	f043 0304 	orr.w	r3, r3, #4
 8001172:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001176:	4b23      	ldr	r3, [pc, #140]	@ (8001204 <HAL_UART_MspInit+0x108>)
 8001178:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800117c:	f003 0304 	and.w	r3, r3, #4
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001184:	4b1f      	ldr	r3, [pc, #124]	@ (8001204 <HAL_UART_MspInit+0x108>)
 8001186:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800118a:	4a1e      	ldr	r2, [pc, #120]	@ (8001204 <HAL_UART_MspInit+0x108>)
 800118c:	f043 0308 	orr.w	r3, r3, #8
 8001190:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001194:	4b1b      	ldr	r3, [pc, #108]	@ (8001204 <HAL_UART_MspInit+0x108>)
 8001196:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800119a:	f003 0308 	and.w	r3, r3, #8
 800119e:	60bb      	str	r3, [r7, #8]
 80011a0:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80011a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011aa:	2302      	movs	r3, #2
 80011ac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b6:	2300      	movs	r3, #0
 80011b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80011bc:	2308      	movs	r3, #8
 80011be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011c2:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80011c6:	4619      	mov	r1, r3
 80011c8:	480f      	ldr	r0, [pc, #60]	@ (8001208 <HAL_UART_MspInit+0x10c>)
 80011ca:	f000 fdcd 	bl	8001d68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011ce:	2304      	movs	r3, #4
 80011d0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d4:	2302      	movs	r3, #2
 80011d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011da:	2300      	movs	r3, #0
 80011dc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e0:	2300      	movs	r3, #0
 80011e2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80011e6:	2308      	movs	r3, #8
 80011e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011ec:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80011f0:	4619      	mov	r1, r3
 80011f2:	4806      	ldr	r0, [pc, #24]	@ (800120c <HAL_UART_MspInit+0x110>)
 80011f4:	f000 fdb8 	bl	8001d68 <HAL_GPIO_Init>

    /* USER CODE END UART5_MspInit 1 */

  }

}
 80011f8:	bf00      	nop
 80011fa:	37a0      	adds	r7, #160	@ 0xa0
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40005000 	.word	0x40005000
 8001204:	40030c00 	.word	0x40030c00
 8001208:	42020800 	.word	0x42020800
 800120c:	42020c00 	.word	0x42020c00

08001210 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001214:	bf00      	nop
 8001216:	e7fd      	b.n	8001214 <NMI_Handler+0x4>

08001218 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800121c:	bf00      	nop
 800121e:	e7fd      	b.n	800121c <HardFault_Handler+0x4>

08001220 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001224:	bf00      	nop
 8001226:	e7fd      	b.n	8001224 <MemManage_Handler+0x4>

08001228 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800122c:	bf00      	nop
 800122e:	e7fd      	b.n	800122c <BusFault_Handler+0x4>

08001230 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001234:	bf00      	nop
 8001236:	e7fd      	b.n	8001234 <UsageFault_Handler+0x4>

08001238 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr

08001246 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001246:	b480      	push	{r7}
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001266:	f000 fb5d 	bl	8001924 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}

0800126e <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8001272:	2000      	movs	r0, #0
 8001274:	f000 f9c2 	bl	80015fc <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8001278:	bf00      	nop
 800127a:	bd80      	pop	{r7, pc}

0800127c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b086      	sub	sp, #24
 8001280:	af00      	add	r7, sp, #0
 8001282:	60f8      	str	r0, [r7, #12]
 8001284:	60b9      	str	r1, [r7, #8]
 8001286:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001288:	2300      	movs	r3, #0
 800128a:	617b      	str	r3, [r7, #20]
 800128c:	e00a      	b.n	80012a4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800128e:	f3af 8000 	nop.w
 8001292:	4601      	mov	r1, r0
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	1c5a      	adds	r2, r3, #1
 8001298:	60ba      	str	r2, [r7, #8]
 800129a:	b2ca      	uxtb	r2, r1
 800129c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	3301      	adds	r3, #1
 80012a2:	617b      	str	r3, [r7, #20]
 80012a4:	697a      	ldr	r2, [r7, #20]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	dbf0      	blt.n	800128e <_read+0x12>
  }

  return len;
 80012ac:	687b      	ldr	r3, [r7, #4]
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3718      	adds	r7, #24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b086      	sub	sp, #24
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	60f8      	str	r0, [r7, #12]
 80012be:	60b9      	str	r1, [r7, #8]
 80012c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012c2:	2300      	movs	r3, #0
 80012c4:	617b      	str	r3, [r7, #20]
 80012c6:	e009      	b.n	80012dc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	1c5a      	adds	r2, r3, #1
 80012cc:	60ba      	str	r2, [r7, #8]
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f000 fa0d 	bl	80016f0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	3301      	adds	r3, #1
 80012da:	617b      	str	r3, [r7, #20]
 80012dc:	697a      	ldr	r2, [r7, #20]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	dbf1      	blt.n	80012c8 <_write+0x12>
  }
  return len;
 80012e4:	687b      	ldr	r3, [r7, #4]
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3718      	adds	r7, #24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <_close>:

int _close(int file)
{
 80012ee:	b480      	push	{r7}
 80012f0:	b083      	sub	sp, #12
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr

08001306 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001306:	b480      	push	{r7}
 8001308:	b083      	sub	sp, #12
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
 800130e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001316:	605a      	str	r2, [r3, #4]
  return 0;
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr

08001326 <_isatty>:

int _isatty(int file)
{
 8001326:	b480      	push	{r7}
 8001328:	b083      	sub	sp, #12
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800132e:	2301      	movs	r3, #1
}
 8001330:	4618      	mov	r0, r3
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	3714      	adds	r7, #20
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
	...

08001358 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001360:	4a14      	ldr	r2, [pc, #80]	@ (80013b4 <_sbrk+0x5c>)
 8001362:	4b15      	ldr	r3, [pc, #84]	@ (80013b8 <_sbrk+0x60>)
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800136c:	4b13      	ldr	r3, [pc, #76]	@ (80013bc <_sbrk+0x64>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d102      	bne.n	800137a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001374:	4b11      	ldr	r3, [pc, #68]	@ (80013bc <_sbrk+0x64>)
 8001376:	4a12      	ldr	r2, [pc, #72]	@ (80013c0 <_sbrk+0x68>)
 8001378:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800137a:	4b10      	ldr	r3, [pc, #64]	@ (80013bc <_sbrk+0x64>)
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4413      	add	r3, r2
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	429a      	cmp	r2, r3
 8001386:	d207      	bcs.n	8001398 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001388:	f004 febc 	bl	8006104 <__errno>
 800138c:	4603      	mov	r3, r0
 800138e:	220c      	movs	r2, #12
 8001390:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001392:	f04f 33ff 	mov.w	r3, #4294967295
 8001396:	e009      	b.n	80013ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001398:	4b08      	ldr	r3, [pc, #32]	@ (80013bc <_sbrk+0x64>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800139e:	4b07      	ldr	r3, [pc, #28]	@ (80013bc <_sbrk+0x64>)
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4413      	add	r3, r2
 80013a6:	4a05      	ldr	r2, [pc, #20]	@ (80013bc <_sbrk+0x64>)
 80013a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013aa:	68fb      	ldr	r3, [r7, #12]
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3718      	adds	r7, #24
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	20030000 	.word	0x20030000
 80013b8:	00000400 	.word	0x00000400
 80013bc:	20000218 	.word	0x20000218
 80013c0:	20000410 	.word	0x20000410

080013c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80013c8:	4b06      	ldr	r3, [pc, #24]	@ (80013e4 <SystemInit+0x20>)
 80013ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013ce:	4a05      	ldr	r2, [pc, #20]	@ (80013e4 <SystemInit+0x20>)
 80013d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	e000ed00 	.word	0xe000ed00

080013e8 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR1 & RCC_CFGR1_SWS)
 80013ee:	4b2c      	ldr	r3, [pc, #176]	@ (80014a0 <SystemCoreClockUpdate+0xb8>)
 80013f0:	69db      	ldr	r3, [r3, #28]
 80013f2:	f003 030c 	and.w	r3, r3, #12
 80013f6:	2b08      	cmp	r3, #8
 80013f8:	d034      	beq.n	8001464 <SystemCoreClockUpdate+0x7c>
 80013fa:	2b08      	cmp	r3, #8
 80013fc:	d836      	bhi.n	800146c <SystemCoreClockUpdate+0x84>
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d002      	beq.n	8001408 <SystemCoreClockUpdate+0x20>
 8001402:	2b04      	cmp	r3, #4
 8001404:	d02a      	beq.n	800145c <SystemCoreClockUpdate+0x74>
 8001406:	e031      	b.n	800146c <SystemCoreClockUpdate+0x84>
  {
  case 0x00:  /* MSIS used as system clock source */
    /* Read RCC ICSR1 register */
    tmp = RCC->ICSCR1;
 8001408:	4b25      	ldr	r3, [pc, #148]	@ (80014a0 <SystemCoreClockUpdate+0xb8>)
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	603b      	str	r3, [r7, #0]
    /* Check which MSIS Range is selected */
    if ((tmp & RCC_ICSCR1_MSIRGSEL) != 0x00u)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d00f      	beq.n	8001438 <SystemCoreClockUpdate+0x50>
    {
      /* Check which MSIRCx is selected as MSIS source */
      if ((tmp & RCC_ICSCR1_MSISSEL) != 0x00u)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	2b00      	cmp	r3, #0
 800141c:	da03      	bge.n	8001426 <SystemCoreClockUpdate+0x3e>
      {
        /* MSI RC1 is selected */
        SystemCoreClock = MSIRC1_VALUE;
 800141e:	4b21      	ldr	r3, [pc, #132]	@ (80014a4 <SystemCoreClockUpdate+0xbc>)
 8001420:	4a21      	ldr	r2, [pc, #132]	@ (80014a8 <SystemCoreClockUpdate+0xc0>)
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	e002      	b.n	800142c <SystemCoreClockUpdate+0x44>
      }
      else
      {
        /* MSI RC0 is selected */
        SystemCoreClock = MSIRC0_VALUE;
 8001426:	4b1f      	ldr	r3, [pc, #124]	@ (80014a4 <SystemCoreClockUpdate+0xbc>)
 8001428:	4a20      	ldr	r2, [pc, #128]	@ (80014ac <SystemCoreClockUpdate+0xc4>)
 800142a:	601a      	str	r2, [r3, #0]
      }

      /* Get MSIS range */
      msirange = (tmp & RCC_ICSCR1_MSISDIV) >> RCC_ICSCR1_MSISDIV_Pos;
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	0f5b      	lsrs	r3, r3, #29
 8001430:	f003 0303 	and.w	r3, r3, #3
 8001434:	607b      	str	r3, [r7, #4]
 8001436:	e009      	b.n	800144c <SystemCoreClockUpdate+0x64>
    }
    else
    {
      /* MSI RC1 is selected */
      SystemCoreClock = MSIRC1_VALUE;
 8001438:	4b1a      	ldr	r3, [pc, #104]	@ (80014a4 <SystemCoreClockUpdate+0xbc>)
 800143a:	4a1b      	ldr	r2, [pc, #108]	@ (80014a8 <SystemCoreClockUpdate+0xc0>)
 800143c:	601a      	str	r2, [r3, #0]

      /* Get MSIS range */
      msirange = (RCC->CSR & (RCC_CSR_MSISDIVS_1 | RCC_CSR_MSISDIVS_0)) >> RCC_CSR_MSISDIVS_Pos;
 800143e:	4b18      	ldr	r3, [pc, #96]	@ (80014a0 <SystemCoreClockUpdate+0xb8>)
 8001440:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8001444:	0b1b      	lsrs	r3, r3, #12
 8001446:	f003 0303 	and.w	r3, r3, #3
 800144a:	607b      	str	r3, [r7, #4]
    }

    /*MSIS frequency in HZ*/
    SystemCoreClock >>= msirange;
 800144c:	4b15      	ldr	r3, [pc, #84]	@ (80014a4 <SystemCoreClockUpdate+0xbc>)
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	fa22 f303 	lsr.w	r3, r2, r3
 8001456:	4a13      	ldr	r2, [pc, #76]	@ (80014a4 <SystemCoreClockUpdate+0xbc>)
 8001458:	6013      	str	r3, [r2, #0]
    break;
 800145a:	e00c      	b.n	8001476 <SystemCoreClockUpdate+0x8e>

  case RCC_CFGR1_SWS_0:  /* HSI used as system clock source */
    SystemCoreClock = HSI_VALUE;
 800145c:	4b11      	ldr	r3, [pc, #68]	@ (80014a4 <SystemCoreClockUpdate+0xbc>)
 800145e:	4a14      	ldr	r2, [pc, #80]	@ (80014b0 <SystemCoreClockUpdate+0xc8>)
 8001460:	601a      	str	r2, [r3, #0]
    break;
 8001462:	e008      	b.n	8001476 <SystemCoreClockUpdate+0x8e>

  case RCC_CFGR1_SWS_1:  /* HSE used as system clock source */
    SystemCoreClock = HSE_VALUE;
 8001464:	4b0f      	ldr	r3, [pc, #60]	@ (80014a4 <SystemCoreClockUpdate+0xbc>)
 8001466:	4a12      	ldr	r2, [pc, #72]	@ (80014b0 <SystemCoreClockUpdate+0xc8>)
 8001468:	601a      	str	r2, [r3, #0]
    break;
 800146a:	e004      	b.n	8001476 <SystemCoreClockUpdate+0x8e>

  default:
    SystemCoreClock = 0xFFFFFFFFu;
 800146c:	4b0d      	ldr	r3, [pc, #52]	@ (80014a4 <SystemCoreClockUpdate+0xbc>)
 800146e:	f04f 32ff 	mov.w	r2, #4294967295
 8001472:	601a      	str	r2, [r3, #0]
    break;
 8001474:	bf00      	nop
  }

  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos)];
 8001476:	4b0a      	ldr	r3, [pc, #40]	@ (80014a0 <SystemCoreClockUpdate+0xb8>)
 8001478:	6a1b      	ldr	r3, [r3, #32]
 800147a:	f003 030f 	and.w	r3, r3, #15
 800147e:	4a0d      	ldr	r2, [pc, #52]	@ (80014b4 <SystemCoreClockUpdate+0xcc>)
 8001480:	5cd3      	ldrb	r3, [r2, r3]
 8001482:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8001484:	4b07      	ldr	r3, [pc, #28]	@ (80014a4 <SystemCoreClockUpdate+0xbc>)
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	fa22 f303 	lsr.w	r3, r2, r3
 800148e:	4a05      	ldr	r2, [pc, #20]	@ (80014a4 <SystemCoreClockUpdate+0xbc>)
 8001490:	6013      	str	r3, [r2, #0]
}
 8001492:	bf00      	nop
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	40030c00 	.word	0x40030c00
 80014a4:	20000000 	.word	0x20000000
 80014a8:	016e3600 	.word	0x016e3600
 80014ac:	05b8d800 	.word	0x05b8d800
 80014b0:	00f42400 	.word	0x00f42400
 80014b4:	08007018 	.word	0x08007018

080014b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80014b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014f0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80014bc:	f7ff ff82 	bl	80013c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80014c0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80014c2:	e003      	b.n	80014cc <LoopCopyDataInit>

080014c4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80014c4:	4b0b      	ldr	r3, [pc, #44]	@ (80014f4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80014c6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80014c8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80014ca:	3104      	adds	r1, #4

080014cc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80014cc:	480a      	ldr	r0, [pc, #40]	@ (80014f8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80014ce:	4b0b      	ldr	r3, [pc, #44]	@ (80014fc <LoopForever+0xe>)
	adds	r2, r0, r1
 80014d0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80014d2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80014d4:	d3f6      	bcc.n	80014c4 <CopyDataInit>
	ldr	r2, =_sbss
 80014d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001500 <LoopForever+0x12>)
	b	LoopFillZerobss
 80014d8:	e002      	b.n	80014e0 <LoopFillZerobss>

080014da <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80014da:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80014dc:	f842 3b04 	str.w	r3, [r2], #4

080014e0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80014e0:	4b08      	ldr	r3, [pc, #32]	@ (8001504 <LoopForever+0x16>)
	cmp	r2, r3
 80014e2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80014e4:	d3f9      	bcc.n	80014da <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80014e6:	f004 fe13 	bl	8006110 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014ea:	f7ff fa95 	bl	8000a18 <main>

080014ee <LoopForever>:

LoopForever:
    b LoopForever
 80014ee:	e7fe      	b.n	80014ee <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80014f0:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 80014f4:	080070a0 	.word	0x080070a0
	ldr	r0, =_sdata
 80014f8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80014fc:	20000078 	.word	0x20000078
	ldr	r2, =_sbss
 8001500:	20000078 	.word	0x20000078
	ldr	r3, = _ebss
 8001504:	20000410 	.word	0x20000410

08001508 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001508:	e7fe      	b.n	8001508 <ADC1_IRQHandler>
	...

0800150c <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b088      	sub	sp, #32
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	460a      	mov	r2, r1
 8001516:	71fb      	strb	r3, [r7, #7]
 8001518:	4613      	mov	r3, r2
 800151a:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 800151c:	4b31      	ldr	r3, [pc, #196]	@ (80015e4 <BSP_PB_Init+0xd8>)
 800151e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001522:	4a30      	ldr	r2, [pc, #192]	@ (80015e4 <BSP_PB_Init+0xd8>)
 8001524:	f043 0304 	orr.w	r3, r3, #4
 8001528:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800152c:	4b2d      	ldr	r3, [pc, #180]	@ (80015e4 <BSP_PB_Init+0xd8>)
 800152e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001532:	f003 0304 	and.w	r3, r3, #4
 8001536:	60bb      	str	r3, [r7, #8]
 8001538:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 800153a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800153e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001540:	2302      	movs	r3, #2
 8001542:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001544:	2302      	movs	r3, #2
 8001546:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8001548:	79bb      	ldrb	r3, [r7, #6]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d10c      	bne.n	8001568 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800154e:	2300      	movs	r3, #0
 8001550:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	4a24      	ldr	r2, [pc, #144]	@ (80015e8 <BSP_PB_Init+0xdc>)
 8001556:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800155a:	f107 020c 	add.w	r2, r7, #12
 800155e:	4611      	mov	r1, r2
 8001560:	4618      	mov	r0, r3
 8001562:	f000 fc01 	bl	8001d68 <HAL_GPIO_Init>
 8001566:	e037      	b.n	80015d8 <BSP_PB_Init+0xcc>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001568:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800156c:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	4a1d      	ldr	r2, [pc, #116]	@ (80015e8 <BSP_PB_Init+0xdc>)
 8001572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001576:	f107 020c 	add.w	r2, r7, #12
 800157a:	4611      	mov	r1, r2
 800157c:	4618      	mov	r0, r3
 800157e:	f000 fbf3 	bl	8001d68 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001582:	79fa      	ldrb	r2, [r7, #7]
 8001584:	4613      	mov	r3, r2
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	4413      	add	r3, r2
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	4a17      	ldr	r2, [pc, #92]	@ (80015ec <BSP_PB_Init+0xe0>)
 800158e:	441a      	add	r2, r3
 8001590:	79fb      	ldrb	r3, [r7, #7]
 8001592:	4917      	ldr	r1, [pc, #92]	@ (80015f0 <BSP_PB_Init+0xe4>)
 8001594:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001598:	4619      	mov	r1, r3
 800159a:	4610      	mov	r0, r2
 800159c:	f000 fb8c 	bl	8001cb8 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80015a0:	79fa      	ldrb	r2, [r7, #7]
 80015a2:	4613      	mov	r3, r2
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	4413      	add	r3, r2
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	4a10      	ldr	r2, [pc, #64]	@ (80015ec <BSP_PB_Init+0xe0>)
 80015ac:	1898      	adds	r0, r3, r2
 80015ae:	79fb      	ldrb	r3, [r7, #7]
 80015b0:	4a10      	ldr	r2, [pc, #64]	@ (80015f4 <BSP_PB_Init+0xe8>)
 80015b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015b6:	461a      	mov	r2, r3
 80015b8:	2100      	movs	r1, #0
 80015ba:	f000 fb51 	bl	8001c60 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80015be:	2018      	movs	r0, #24
 80015c0:	79fb      	ldrb	r3, [r7, #7]
 80015c2:	4a0d      	ldr	r2, [pc, #52]	@ (80015f8 <BSP_PB_Init+0xec>)
 80015c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015c8:	2200      	movs	r2, #0
 80015ca:	4619      	mov	r1, r3
 80015cc:	f000 faa6 	bl	8001b1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80015d0:	2318      	movs	r3, #24
 80015d2:	4618      	mov	r0, r3
 80015d4:	f000 fabc 	bl	8001b50 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3720      	adds	r7, #32
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40030c00 	.word	0x40030c00
 80015e8:	20000008 	.word	0x20000008
 80015ec:	2000021c 	.word	0x2000021c
 80015f0:	08007030 	.word	0x08007030
 80015f4:	2000000c 	.word	0x2000000c
 80015f8:	20000010 	.word	0x20000010

080015fc <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001606:	79fa      	ldrb	r2, [r7, #7]
 8001608:	4613      	mov	r3, r2
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	4413      	add	r3, r2
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	4a04      	ldr	r2, [pc, #16]	@ (8001624 <BSP_PB_IRQHandler+0x28>)
 8001612:	4413      	add	r3, r2
 8001614:	4618      	mov	r0, r3
 8001616:	f000 fb63 	bl	8001ce0 <HAL_EXTI_IRQHandler>
}
 800161a:	bf00      	nop
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	2000021c 	.word	0x2000021c

08001628 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a COM_InitTypeDef structure that contains the
  *                configuration information for the specified COM peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	6039      	str	r1, [r7, #0]
 8001632:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001634:	2300      	movs	r3, #0
 8001636:	60fb      	str	r3, [r7, #12]

  if (COM >= COMn)
 8001638:	79fb      	ldrb	r3, [r7, #7]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d003      	beq.n	8001646 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800163e:	f06f 0301 	mvn.w	r3, #1
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	e018      	b.n	8001678 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001646:	79fb      	ldrb	r3, [r7, #7]
 8001648:	2294      	movs	r2, #148	@ 0x94
 800164a:	fb02 f303 	mul.w	r3, r2, r3
 800164e:	4a0d      	ldr	r2, [pc, #52]	@ (8001684 <BSP_COM_Init+0x5c>)
 8001650:	4413      	add	r3, r2
 8001652:	4618      	mov	r0, r3
 8001654:	f000 f870 	bl	8001738 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001658:	79fb      	ldrb	r3, [r7, #7]
 800165a:	2294      	movs	r2, #148	@ 0x94
 800165c:	fb02 f303 	mul.w	r3, r2, r3
 8001660:	4a08      	ldr	r2, [pc, #32]	@ (8001684 <BSP_COM_Init+0x5c>)
 8001662:	4413      	add	r3, r2
 8001664:	6839      	ldr	r1, [r7, #0]
 8001666:	4618      	mov	r0, r3
 8001668:	f000 f80e 	bl	8001688 <MX_USART1_Init>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d002      	beq.n	8001678 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001672:	f06f 0303 	mvn.w	r3, #3
 8001676:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001678:	68fb      	ldr	r3, [r7, #12]
}
 800167a:	4618      	mov	r0, r3
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20000228 	.word	0x20000228

08001688 <MX_USART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 8001692:	4b16      	ldr	r3, [pc, #88]	@ (80016ec <MX_USART1_Init+0x64>)
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	220c      	movs	r2, #12
 80016a6:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	895b      	ldrh	r3, [r3, #10]
 80016ac:	461a      	mov	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685a      	ldr	r2, [r3, #4]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	891b      	ldrh	r3, [r3, #8]
 80016be:	461a      	mov	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	899b      	ldrh	r3, [r3, #12]
 80016c8:	461a      	mov	r2, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80016d4:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2200      	movs	r2, #0
 80016da:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f003 fe37 	bl	8005350 <HAL_UART_Init>
 80016e2:	4603      	mov	r3, r0
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3708      	adds	r7, #8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	20000004 	.word	0x20000004

080016f0 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 80016f8:	4b09      	ldr	r3, [pc, #36]	@ (8001720 <__io_putchar+0x30>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	461a      	mov	r2, r3
 80016fe:	2394      	movs	r3, #148	@ 0x94
 8001700:	fb02 f303 	mul.w	r3, r2, r3
 8001704:	4a07      	ldr	r2, [pc, #28]	@ (8001724 <__io_putchar+0x34>)
 8001706:	1898      	adds	r0, r3, r2
 8001708:	1d39      	adds	r1, r7, #4
 800170a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800170e:	2201      	movs	r2, #1
 8001710:	f003 fe6e 	bl	80053f0 <HAL_UART_Transmit>
  return ch;
 8001714:	687b      	ldr	r3, [r7, #4]
}
 8001716:	4618      	mov	r0, r3
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	200002bc 	.word	0x200002bc
 8001724:	20000228 	.word	0x20000228

08001728 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 800172c:	2000      	movs	r0, #0
 800172e:	f7ff fbef 	bl	8000f10 <BSP_PB_Callback>
}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
	...

08001738 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b08a      	sub	sp, #40	@ 0x28
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001740:	4b27      	ldr	r3, [pc, #156]	@ (80017e0 <COM1_MspInit+0xa8>)
 8001742:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001746:	4a26      	ldr	r2, [pc, #152]	@ (80017e0 <COM1_MspInit+0xa8>)
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001750:	4b23      	ldr	r3, [pc, #140]	@ (80017e0 <COM1_MspInit+0xa8>)
 8001752:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	613b      	str	r3, [r7, #16]
 800175c:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 800175e:	4b20      	ldr	r3, [pc, #128]	@ (80017e0 <COM1_MspInit+0xa8>)
 8001760:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001764:	4a1e      	ldr	r2, [pc, #120]	@ (80017e0 <COM1_MspInit+0xa8>)
 8001766:	f043 0301 	orr.w	r3, r3, #1
 800176a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800176e:	4b1c      	ldr	r3, [pc, #112]	@ (80017e0 <COM1_MspInit+0xa8>)
 8001770:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001774:	f003 0301 	and.w	r3, r3, #1
 8001778:	60fb      	str	r3, [r7, #12]
 800177a:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 800177c:	4b18      	ldr	r3, [pc, #96]	@ (80017e0 <COM1_MspInit+0xa8>)
 800177e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001782:	4a17      	ldr	r2, [pc, #92]	@ (80017e0 <COM1_MspInit+0xa8>)
 8001784:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001788:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800178c:	4b14      	ldr	r3, [pc, #80]	@ (80017e0 <COM1_MspInit+0xa8>)
 800178e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001792:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001796:	60bb      	str	r3, [r7, #8]
 8001798:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 800179a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800179e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80017a0:	2302      	movs	r3, #2
 80017a2:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80017a4:	2302      	movs	r3, #2
 80017a6:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80017a8:	2301      	movs	r3, #1
 80017aa:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 80017ac:	2307      	movs	r3, #7
 80017ae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 80017b0:	f107 0314 	add.w	r3, r7, #20
 80017b4:	4619      	mov	r1, r3
 80017b6:	480b      	ldr	r0, [pc, #44]	@ (80017e4 <COM1_MspInit+0xac>)
 80017b8:	f000 fad6 	bl	8001d68 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 80017bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017c0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80017c2:	2302      	movs	r3, #2
 80017c4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 80017c6:	2307      	movs	r3, #7
 80017c8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 80017ca:	f107 0314 	add.w	r3, r7, #20
 80017ce:	4619      	mov	r1, r3
 80017d0:	4804      	ldr	r0, [pc, #16]	@ (80017e4 <COM1_MspInit+0xac>)
 80017d2:	f000 fac9 	bl	8001d68 <HAL_GPIO_Init>
}
 80017d6:	bf00      	nop
 80017d8:	3728      	adds	r7, #40	@ 0x28
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40030c00 	.word	0x40030c00
 80017e4:	42020000 	.word	0x42020000

080017e8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001824 <HAL_Init+0x3c>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a0c      	ldr	r2, [pc, #48]	@ (8001824 <HAL_Init+0x3c>)
 80017f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017f8:	2003      	movs	r0, #3
 80017fa:	f000 f984 	bl	8001b06 <HAL_NVIC_SetPriorityGrouping>

  /* Ensure time base clock coherency */
  SystemCoreClockUpdate();
 80017fe:	f7ff fdf3 	bl	80013e8 <SystemCoreClockUpdate>

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001802:	2004      	movs	r0, #4
 8001804:	f000 f9d4 	bl	8001bb0 <HAL_SYSTICK_CLKSourceConfig>

  /* Initialize 1ms tick time base (default SysTick based on MSI clock after Reset) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001808:	200f      	movs	r0, #15
 800180a:	f000 f80d 	bl	8001828 <HAL_InitTick>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <HAL_Init+0x30>
  {
    return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e002      	b.n	800181e <HAL_Init+0x36>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001818:	f7ff fb94 	bl	8000f44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40022000 	.word	0x40022000

08001828 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8001830:	2300      	movs	r3, #0
 8001832:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001834:	4b36      	ldr	r3, [pc, #216]	@ (8001910 <HAL_InitTick+0xe8>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d101      	bne.n	8001840 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e062      	b.n	8001906 <HAL_InitTick+0xde>
  }

  /* Check Clock source to calculate the tickNumber */
  if(READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8001840:	4b34      	ldr	r3, [pc, #208]	@ (8001914 <HAL_InitTick+0xec>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0304 	and.w	r3, r3, #4
 8001848:	2b04      	cmp	r3, #4
 800184a:	d10c      	bne.n	8001866 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 800184c:	4b32      	ldr	r3, [pc, #200]	@ (8001918 <HAL_InitTick+0xf0>)
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	4b2f      	ldr	r3, [pc, #188]	@ (8001910 <HAL_InitTick+0xe8>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	4619      	mov	r1, r3
 8001856:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800185a:	fbb3 f3f1 	udiv	r3, r3, r1
 800185e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	e03d      	b.n	80018e2 <HAL_InitTick+0xba>
  }
  else
  {
    systicksel = __HAL_RCC_GET_SYSTICK_SOURCE();
 8001866:	4b2d      	ldr	r3, [pc, #180]	@ (800191c <HAL_InitTick+0xf4>)
 8001868:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800186c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8001870:	60bb      	str	r3, [r7, #8]
    switch (systicksel)
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001878:	d025      	beq.n	80018c6 <HAL_InitTick+0x9e>
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001880:	d82e      	bhi.n	80018e0 <HAL_InitTick+0xb8>
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d004      	beq.n	8001892 <HAL_InitTick+0x6a>
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800188e:	d00d      	beq.n	80018ac <HAL_InitTick+0x84>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;

      default:
        /* Nothing to do */
        break;
 8001890:	e026      	b.n	80018e0 <HAL_InitTick+0xb8>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8001892:	4b21      	ldr	r3, [pc, #132]	@ (8001918 <HAL_InitTick+0xf0>)
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	4b1e      	ldr	r3, [pc, #120]	@ (8001910 <HAL_InitTick+0xe8>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	4619      	mov	r1, r3
 800189c:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80018a0:	fbb3 f3f1 	udiv	r3, r3, r1
 80018a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a8:	60fb      	str	r3, [r7, #12]
        break;
 80018aa:	e01a      	b.n	80018e2 <HAL_InitTick+0xba>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80018ac:	4b18      	ldr	r3, [pc, #96]	@ (8001910 <HAL_InitTick+0xe8>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	461a      	mov	r2, r3
 80018b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80018ba:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80018be:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c2:	60fb      	str	r3, [r7, #12]
        break;
 80018c4:	e00d      	b.n	80018e2 <HAL_InitTick+0xba>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80018c6:	4b12      	ldr	r3, [pc, #72]	@ (8001910 <HAL_InitTick+0xe8>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	461a      	mov	r2, r3
 80018cc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80018d4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80018d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018dc:	60fb      	str	r3, [r7, #12]
        break;
 80018de:	e000      	b.n	80018e2 <HAL_InitTick+0xba>
        break;
 80018e0:	bf00      	nop
    }
  }

  /* Configure the SysTick */
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 80018e2:	68f8      	ldr	r0, [r7, #12]
 80018e4:	f000 f942 	bl	8001b6c <HAL_SYSTICK_Config>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <HAL_InitTick+0xca>
  {
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e009      	b.n	8001906 <HAL_InitTick+0xde>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018f2:	2200      	movs	r2, #0
 80018f4:	6879      	ldr	r1, [r7, #4]
 80018f6:	f04f 30ff 	mov.w	r0, #4294967295
 80018fa:	f000 f90f 	bl	8001b1c <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 80018fe:	4a08      	ldr	r2, [pc, #32]	@ (8001920 <HAL_InitTick+0xf8>)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3710      	adds	r7, #16
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20000018 	.word	0x20000018
 8001914:	e000e010 	.word	0xe000e010
 8001918:	20000000 	.word	0x20000000
 800191c:	40030c00 	.word	0x40030c00
 8001920:	20000014 	.word	0x20000014

08001924 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001928:	4b06      	ldr	r3, [pc, #24]	@ (8001944 <HAL_IncTick+0x20>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	461a      	mov	r2, r3
 800192e:	4b06      	ldr	r3, [pc, #24]	@ (8001948 <HAL_IncTick+0x24>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4413      	add	r3, r2
 8001934:	4a04      	ldr	r2, [pc, #16]	@ (8001948 <HAL_IncTick+0x24>)
 8001936:	6013      	str	r3, [r2, #0]
}
 8001938:	bf00      	nop
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	20000018 	.word	0x20000018
 8001948:	200002c0 	.word	0x200002c0

0800194c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  return uwTick;
 8001950:	4b03      	ldr	r3, [pc, #12]	@ (8001960 <HAL_GetTick+0x14>)
 8001952:	681b      	ldr	r3, [r3, #0]
}
 8001954:	4618      	mov	r0, r3
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	200002c0 	.word	0x200002c0

08001964 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800196c:	f7ff ffee 	bl	800194c <HAL_GetTick>
 8001970:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800197c:	d005      	beq.n	800198a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800197e:	4b0a      	ldr	r3, [pc, #40]	@ (80019a8 <HAL_Delay+0x44>)
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	461a      	mov	r2, r3
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	4413      	add	r3, r2
 8001988:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800198a:	bf00      	nop
 800198c:	f7ff ffde 	bl	800194c <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	68fa      	ldr	r2, [r7, #12]
 8001998:	429a      	cmp	r2, r3
 800199a:	d8f7      	bhi.n	800198c <HAL_Delay+0x28>
  {
  }
}
 800199c:	bf00      	nop
 800199e:	bf00      	nop
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20000018 	.word	0x20000018

080019ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f003 0307 	and.w	r3, r3, #7
 80019ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019bc:	4b0c      	ldr	r3, [pc, #48]	@ (80019f0 <__NVIC_SetPriorityGrouping+0x44>)
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019c2:	68ba      	ldr	r2, [r7, #8]
 80019c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019c8:	4013      	ands	r3, r2
 80019ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019de:	4a04      	ldr	r2, [pc, #16]	@ (80019f0 <__NVIC_SetPriorityGrouping+0x44>)
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	60d3      	str	r3, [r2, #12]
}
 80019e4:	bf00      	nop
 80019e6:	3714      	adds	r7, #20
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	e000ed00 	.word	0xe000ed00

080019f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019f8:	4b04      	ldr	r3, [pc, #16]	@ (8001a0c <__NVIC_GetPriorityGrouping+0x18>)
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	0a1b      	lsrs	r3, r3, #8
 80019fe:	f003 0307 	and.w	r3, r3, #7
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	e000ed00 	.word	0xe000ed00

08001a10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	db0b      	blt.n	8001a3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a22:	79fb      	ldrb	r3, [r7, #7]
 8001a24:	f003 021f 	and.w	r2, r3, #31
 8001a28:	4907      	ldr	r1, [pc, #28]	@ (8001a48 <__NVIC_EnableIRQ+0x38>)
 8001a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2e:	095b      	lsrs	r3, r3, #5
 8001a30:	2001      	movs	r0, #1
 8001a32:	fa00 f202 	lsl.w	r2, r0, r2
 8001a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a3a:	bf00      	nop
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	e000e100 	.word	0xe000e100

08001a4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	4603      	mov	r3, r0
 8001a54:	6039      	str	r1, [r7, #0]
 8001a56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	db0a      	blt.n	8001a76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	b2da      	uxtb	r2, r3
 8001a64:	490c      	ldr	r1, [pc, #48]	@ (8001a98 <__NVIC_SetPriority+0x4c>)
 8001a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6a:	0112      	lsls	r2, r2, #4
 8001a6c:	b2d2      	uxtb	r2, r2
 8001a6e:	440b      	add	r3, r1
 8001a70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a74:	e00a      	b.n	8001a8c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	b2da      	uxtb	r2, r3
 8001a7a:	4908      	ldr	r1, [pc, #32]	@ (8001a9c <__NVIC_SetPriority+0x50>)
 8001a7c:	79fb      	ldrb	r3, [r7, #7]
 8001a7e:	f003 030f 	and.w	r3, r3, #15
 8001a82:	3b04      	subs	r3, #4
 8001a84:	0112      	lsls	r2, r2, #4
 8001a86:	b2d2      	uxtb	r2, r2
 8001a88:	440b      	add	r3, r1
 8001a8a:	761a      	strb	r2, [r3, #24]
}
 8001a8c:	bf00      	nop
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr
 8001a98:	e000e100 	.word	0xe000e100
 8001a9c:	e000ed00 	.word	0xe000ed00

08001aa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b089      	sub	sp, #36	@ 0x24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f003 0307 	and.w	r3, r3, #7
 8001ab2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	f1c3 0307 	rsb	r3, r3, #7
 8001aba:	2b04      	cmp	r3, #4
 8001abc:	bf28      	it	cs
 8001abe:	2304      	movcs	r3, #4
 8001ac0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	3304      	adds	r3, #4
 8001ac6:	2b06      	cmp	r3, #6
 8001ac8:	d902      	bls.n	8001ad0 <NVIC_EncodePriority+0x30>
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	3b03      	subs	r3, #3
 8001ace:	e000      	b.n	8001ad2 <NVIC_EncodePriority+0x32>
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	43da      	mvns	r2, r3
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	401a      	ands	r2, r3
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ae8:	f04f 31ff 	mov.w	r1, #4294967295
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	fa01 f303 	lsl.w	r3, r1, r3
 8001af2:	43d9      	mvns	r1, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af8:	4313      	orrs	r3, r2
         );
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3724      	adds	r7, #36	@ 0x24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b082      	sub	sp, #8
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f7ff ff4c 	bl	80019ac <__NVIC_SetPriorityGrouping>
}
 8001b14:	bf00      	nop
 8001b16:	3708      	adds	r7, #8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b086      	sub	sp, #24
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4603      	mov	r3, r0
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	607a      	str	r2, [r7, #4]
 8001b28:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_PRIO_INTERRUPT(IRQn));
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b2a:	f7ff ff63 	bl	80019f4 <__NVIC_GetPriorityGrouping>
 8001b2e:	6178      	str	r0, [r7, #20]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority, prioritygroup));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority, prioritygroup));

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	68b9      	ldr	r1, [r7, #8]
 8001b34:	6978      	ldr	r0, [r7, #20]
 8001b36:	f7ff ffb3 	bl	8001aa0 <NVIC_EncodePriority>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b40:	4611      	mov	r1, r2
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff ff82 	bl	8001a4c <__NVIC_SetPriority>
}
 8001b48:	bf00      	nop
 8001b4a:	3718      	adds	r7, #24
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *         to the appropriate CMSIS device file (stm32u3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	4603      	mov	r3, r0
 8001b58:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff ff56 	bl	8001a10 <__NVIC_EnableIRQ>
}
 8001b64:	bf00      	nop
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	3b01      	subs	r3, #1
 8001b78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b7c:	d301      	bcc.n	8001b82 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e00d      	b.n	8001b9e <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8001b82:	4a0a      	ldr	r2, [pc, #40]	@ (8001bac <HAL_SYSTICK_Config+0x40>)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3b01      	subs	r3, #1
 8001b88:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8001b8a:	4b08      	ldr	r3, [pc, #32]	@ (8001bac <HAL_SYSTICK_Config+0x40>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8001b90:	4b06      	ldr	r3, [pc, #24]	@ (8001bac <HAL_SYSTICK_Config+0x40>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a05      	ldr	r2, [pc, #20]	@ (8001bac <HAL_SYSTICK_Config+0x40>)
 8001b96:	f043 0303 	orr.w	r3, r3, #3
 8001b9a:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	e000e010 	.word	0xe000e010

08001bb0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8 AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2b04      	cmp	r3, #4
 8001bbc:	d844      	bhi.n	8001c48 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001bbe:	a201      	add	r2, pc, #4	@ (adr r2, 8001bc4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bc4:	08001be7 	.word	0x08001be7
 8001bc8:	08001c05 	.word	0x08001c05
 8001bcc:	08001c27 	.word	0x08001c27
 8001bd0:	08001c49 	.word	0x08001c49
 8001bd4:	08001bd9 	.word	0x08001bd9
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001bd8:	4b1f      	ldr	r3, [pc, #124]	@ (8001c58 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a1e      	ldr	r2, [pc, #120]	@ (8001c58 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001bde:	f043 0304 	orr.w	r3, r3, #4
 8001be2:	6013      	str	r3, [r2, #0]
      break;
 8001be4:	e031      	b.n	8001c4a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001be6:	4b1c      	ldr	r3, [pc, #112]	@ (8001c58 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a1b      	ldr	r2, [pc, #108]	@ (8001c58 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001bec:	f023 0304 	bic.w	r3, r3, #4
 8001bf0:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8001bf2:	4b1a      	ldr	r3, [pc, #104]	@ (8001c5c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001bf4:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8001bf8:	4a18      	ldr	r2, [pc, #96]	@ (8001c5c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001bfa:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001bfe:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
      break;
 8001c02:	e022      	b.n	8001c4a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001c04:	4b14      	ldr	r3, [pc, #80]	@ (8001c58 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a13      	ldr	r2, [pc, #76]	@ (8001c58 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001c0a:	f023 0304 	bic.w	r3, r3, #4
 8001c0e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8001c10:	4b12      	ldr	r3, [pc, #72]	@ (8001c5c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001c12:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8001c16:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001c1a:	4a10      	ldr	r2, [pc, #64]	@ (8001c5c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001c1c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001c20:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
      break;
 8001c24:	e011      	b.n	8001c4a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001c26:	4b0c      	ldr	r3, [pc, #48]	@ (8001c58 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a0b      	ldr	r2, [pc, #44]	@ (8001c58 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001c2c:	f023 0304 	bic.w	r3, r3, #4
 8001c30:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8001c32:	4b0a      	ldr	r3, [pc, #40]	@ (8001c5c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001c34:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8001c38:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001c3c:	4a07      	ldr	r2, [pc, #28]	@ (8001c5c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001c3e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001c42:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
      break;
 8001c46:	e000      	b.n	8001c4a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001c48:	bf00      	nop
  }
}
 8001c4a:	bf00      	nop
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	e000e010 	.word	0xe000e010
 8001c5c:	40030c00 	.word	0x40030c00

08001c60 <HAL_EXTI_RegisterCallback>:
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti,
                                            EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8001c60:	b480      	push	{r7}
 8001c62:	b087      	sub	sp, #28
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	460b      	mov	r3, r1
 8001c6a:	607a      	str	r2, [r7, #4]
 8001c6c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8001c72:	7afb      	ldrb	r3, [r7, #11]
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d011      	beq.n	8001c9c <HAL_EXTI_RegisterCallback+0x3c>
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	dc13      	bgt.n	8001ca4 <HAL_EXTI_RegisterCallback+0x44>
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d002      	beq.n	8001c86 <HAL_EXTI_RegisterCallback+0x26>
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d007      	beq.n	8001c94 <HAL_EXTI_RegisterCallback+0x34>
 8001c84:	e00e      	b.n	8001ca4 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	609a      	str	r2, [r3, #8]
      break;
 8001c92:	e00a      	b.n	8001caa <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	605a      	str	r2, [r3, #4]
      break;
 8001c9a:	e006      	b.n	8001caa <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	609a      	str	r2, [r3, #8]
      break;
 8001ca2:	e002      	b.n	8001caa <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	75fb      	strb	r3, [r7, #23]
      break;
 8001ca8:	bf00      	nop
  }

  return status;
 8001caa:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	371c      	adds	r7, #28
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d101      	bne.n	8001ccc <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e003      	b.n	8001cd4 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	683a      	ldr	r2, [r7, #0]
 8001cd0:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001cd2:	2300      	movs	r3, #0
  }
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001ce8:	2300      	movs	r3, #0
 8001cea:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 031f 	and.w	r3, r3, #31
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	015a      	lsls	r2, r3, #5
 8001d00:	4b17      	ldr	r3, [pc, #92]	@ (8001d60 <HAL_EXTI_IRQHandler+0x80>)
 8001d02:	4413      	add	r3, r2
 8001d04:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d009      	beq.n	8001d2a <HAL_EXTI_IRQHandler+0x4a>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	693a      	ldr	r2, [r7, #16]
 8001d1a:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d002      	beq.n	8001d2a <HAL_EXTI_IRQHandler+0x4a>
    {
      hexti->RisingCallback();
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	015a      	lsls	r2, r3, #5
 8001d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8001d64 <HAL_EXTI_IRQHandler+0x84>)
 8001d30:	4413      	add	r3, r2
 8001d32:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	693a      	ldr	r2, [r7, #16]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d009      	beq.n	8001d58 <HAL_EXTI_IRQHandler+0x78>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d002      	beq.n	8001d58 <HAL_EXTI_IRQHandler+0x78>
    {
      hexti->FallingCallback();
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	4798      	blx	r3
    }
  }
}
 8001d58:	bf00      	nop
 8001d5a:	3718      	adds	r7, #24
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	4003200c 	.word	0x4003200c
 8001d64:	40032010 	.word	0x40032010

08001d68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b087      	sub	sp, #28
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d72:	2300      	movs	r3, #0
 8001d74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d76:	e162      	b.n	800203e <HAL_GPIO_Init+0x2d6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	2101      	movs	r1, #1
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	fa01 f303 	lsl.w	r3, r1, r3
 8001d84:	4013      	ands	r3, r2
 8001d86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	f000 8154 	beq.w	8002038 <HAL_GPIO_Init+0x2d0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f003 0303 	and.w	r3, r3, #3
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d005      	beq.n	8001da8 <HAL_GPIO_Init+0x40>
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f003 0303 	and.w	r3, r3, #3
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d130      	bne.n	8001e0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	2203      	movs	r2, #3
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	43db      	mvns	r3, r3
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	68da      	ldr	r2, [r3, #12]
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	693a      	ldr	r2, [r7, #16]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001dde:	2201      	movs	r2, #1
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	43db      	mvns	r3, r3
 8001de8:	693a      	ldr	r2, [r7, #16]
 8001dea:	4013      	ands	r3, r2
 8001dec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	091b      	lsrs	r3, r3, #4
 8001df4:	f003 0201 	and.w	r2, r3, #1
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	605a      	str	r2, [r3, #4]
      }

      if (((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) ||
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f003 0303 	and.w	r3, r3, #3
 8001e12:	2b03      	cmp	r3, #3
 8001e14:	d109      	bne.n	8001e2a <HAL_GPIO_Init+0xc2>
         (((GPIO_Init->Mode & GPIO_MODE) == MODE_ANALOG) && (GPIO_Init->Pull != GPIO_PULLUP)))
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) ||
 8001e1e:	2b03      	cmp	r3, #3
 8001e20:	d11b      	bne.n	8001e5a <HAL_GPIO_Init+0xf2>
         (((GPIO_Init->Mode & GPIO_MODE) == MODE_ANALOG) && (GPIO_Init->Pull != GPIO_PULLUP)))
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d017      	beq.n	8001e5a <HAL_GPIO_Init+0xf2>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	2203      	movs	r2, #3
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	43db      	mvns	r3, r3
 8001e3c:	693a      	ldr	r2, [r7, #16]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	689a      	ldr	r2, [r3, #8]
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f003 0303 	and.w	r3, r3, #3
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d123      	bne.n	8001eae <HAL_GPIO_Init+0x146>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	08da      	lsrs	r2, r3, #3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	3208      	adds	r2, #8
 8001e6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	f003 0307 	and.w	r3, r3, #7
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	220f      	movs	r2, #15
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e82:	43db      	mvns	r3, r3
 8001e84:	693a      	ldr	r2, [r7, #16]
 8001e86:	4013      	ands	r3, r2
 8001e88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	691a      	ldr	r2, [r3, #16]
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	f003 0307 	and.w	r3, r3, #7
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	08da      	lsrs	r2, r3, #3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3208      	adds	r2, #8
 8001ea8:	6939      	ldr	r1, [r7, #16]
 8001eaa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	2203      	movs	r2, #3
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	43db      	mvns	r3, r3
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f003 0203 	and.w	r2, r3, #3
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	693a      	ldr	r2, [r7, #16]
 8001ee0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f000 80a4 	beq.w	8002038 <HAL_GPIO_Init+0x2d0>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8001ef0:	4a5a      	ldr	r2, [pc, #360]	@ (800205c <HAL_GPIO_Init+0x2f4>)
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	089b      	lsrs	r3, r3, #2
 8001ef6:	3318      	adds	r3, #24
 8001ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001efc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	f003 0303 	and.w	r3, r3, #3
 8001f04:	00db      	lsls	r3, r3, #3
 8001f06:	220f      	movs	r2, #15
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	4013      	ands	r3, r2
 8001f12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4a52      	ldr	r2, [pc, #328]	@ (8002060 <HAL_GPIO_Init+0x2f8>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d025      	beq.n	8001f68 <HAL_GPIO_Init+0x200>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4a51      	ldr	r2, [pc, #324]	@ (8002064 <HAL_GPIO_Init+0x2fc>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d01f      	beq.n	8001f64 <HAL_GPIO_Init+0x1fc>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4a50      	ldr	r2, [pc, #320]	@ (8002068 <HAL_GPIO_Init+0x300>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d019      	beq.n	8001f60 <HAL_GPIO_Init+0x1f8>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4a4f      	ldr	r2, [pc, #316]	@ (800206c <HAL_GPIO_Init+0x304>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d013      	beq.n	8001f5c <HAL_GPIO_Init+0x1f4>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4a4e      	ldr	r2, [pc, #312]	@ (8002070 <HAL_GPIO_Init+0x308>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d00d      	beq.n	8001f58 <HAL_GPIO_Init+0x1f0>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4a4d      	ldr	r2, [pc, #308]	@ (8002074 <HAL_GPIO_Init+0x30c>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d007      	beq.n	8001f54 <HAL_GPIO_Init+0x1ec>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4a4c      	ldr	r2, [pc, #304]	@ (8002078 <HAL_GPIO_Init+0x310>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d101      	bne.n	8001f50 <HAL_GPIO_Init+0x1e8>
 8001f4c:	2307      	movs	r3, #7
 8001f4e:	e00c      	b.n	8001f6a <HAL_GPIO_Init+0x202>
 8001f50:	2310      	movs	r3, #16
 8001f52:	e00a      	b.n	8001f6a <HAL_GPIO_Init+0x202>
 8001f54:	2306      	movs	r3, #6
 8001f56:	e008      	b.n	8001f6a <HAL_GPIO_Init+0x202>
 8001f58:	2304      	movs	r3, #4
 8001f5a:	e006      	b.n	8001f6a <HAL_GPIO_Init+0x202>
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e004      	b.n	8001f6a <HAL_GPIO_Init+0x202>
 8001f60:	2302      	movs	r3, #2
 8001f62:	e002      	b.n	8001f6a <HAL_GPIO_Init+0x202>
 8001f64:	2301      	movs	r3, #1
 8001f66:	e000      	b.n	8001f6a <HAL_GPIO_Init+0x202>
 8001f68:	2300      	movs	r3, #0
 8001f6a:	697a      	ldr	r2, [r7, #20]
 8001f6c:	f002 0203 	and.w	r2, r2, #3
 8001f70:	00d2      	lsls	r2, r2, #3
 8001f72:	4093      	lsls	r3, r2
 8001f74:	693a      	ldr	r2, [r7, #16]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8001f7a:	4938      	ldr	r1, [pc, #224]	@ (800205c <HAL_GPIO_Init+0x2f4>)
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	089b      	lsrs	r3, r3, #2
 8001f80:	3318      	adds	r3, #24
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001f88:	4b34      	ldr	r3, [pc, #208]	@ (800205c <HAL_GPIO_Init+0x2f4>)
 8001f8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	43db      	mvns	r3, r3
 8001f94:	693a      	ldr	r2, [r7, #16]
 8001f96:	4013      	ands	r3, r2
 8001f98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d003      	beq.n	8001fae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001fae:	4a2b      	ldr	r2, [pc, #172]	@ (800205c <HAL_GPIO_Init+0x2f4>)
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8001fb6:	4b29      	ldr	r3, [pc, #164]	@ (800205c <HAL_GPIO_Init+0x2f4>)
 8001fb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d003      	beq.n	8001fdc <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001fdc:	4a1f      	ldr	r2, [pc, #124]	@ (800205c <HAL_GPIO_Init+0x2f4>)
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fe4:	4b1d      	ldr	r3, [pc, #116]	@ (800205c <HAL_GPIO_Init+0x2f4>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	43db      	mvns	r3, r3
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d003      	beq.n	8002008 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8002000:	693a      	ldr	r2, [r7, #16]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	4313      	orrs	r3, r2
 8002006:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002008:	4a14      	ldr	r2, [pc, #80]	@ (800205c <HAL_GPIO_Init+0x2f4>)
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800200e:	4b13      	ldr	r3, [pc, #76]	@ (800205c <HAL_GPIO_Init+0x2f4>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	43db      	mvns	r3, r3
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	4013      	ands	r3, r2
 800201c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d003      	beq.n	8002032 <HAL_GPIO_Init+0x2ca>
        {
          temp |= iocurrent;
 800202a:	693a      	ldr	r2, [r7, #16]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	4313      	orrs	r3, r2
 8002030:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002032:	4a0a      	ldr	r2, [pc, #40]	@ (800205c <HAL_GPIO_Init+0x2f4>)
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	3301      	adds	r3, #1
 800203c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	fa22 f303 	lsr.w	r3, r2, r3
 8002048:	2b00      	cmp	r3, #0
 800204a:	f47f ae95 	bne.w	8001d78 <HAL_GPIO_Init+0x10>
  }
}
 800204e:	bf00      	nop
 8002050:	bf00      	nop
 8002052:	371c      	adds	r7, #28
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr
 800205c:	40032000 	.word	0x40032000
 8002060:	42020000 	.word	0x42020000
 8002064:	42020400 	.word	0x42020400
 8002068:	42020800 	.word	0x42020800
 800206c:	42020c00 	.word	0x42020c00
 8002070:	42021000 	.word	0x42021000
 8002074:	42021800 	.word	0x42021800
 8002078:	42021c00 	.word	0x42021c00

0800207c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	460b      	mov	r3, r1
 8002086:	807b      	strh	r3, [r7, #2]
 8002088:	4613      	mov	r3, r2
 800208a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800208c:	787b      	ldrb	r3, [r7, #1]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d003      	beq.n	800209a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002092:	887a      	ldrh	r2, [r7, #2]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002098:	e002      	b.n	80020a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800209a:	887a      	ldrh	r2, [r7, #2]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <HAL_PWREx_ControlVoltageScaling>:
  * @note   Before moving to voltage scaling 2, it is mandatory to ensure that
  *         the system frequency is equal or below 16 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Set voltage scaling level */
  vosr = (PWR->VOSR & ~(PWR_VOSR_R2EN | PWR_VOSR_R1EN));
 80020b4:	4b19      	ldr	r3, [pc, #100]	@ (800211c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	f023 0303 	bic.w	r3, r3, #3
 80020bc:	60bb      	str	r3, [r7, #8]
  vosr |= VoltageScaling;
 80020be:	68ba      	ldr	r2, [r7, #8]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	60bb      	str	r3, [r7, #8]
  PWR->VOSR = vosr;
 80020c6:	4a15      	ldr	r2, [pc, #84]	@ (800211c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	60d3      	str	r3, [r2, #12]

  /* Wait until VOSRDY is set */
  timeout = ((PWR_VOSF_SETTING_DELAY_VALUE * SystemCoreClock) / 1000000U) + 1U;
 80020cc:	4b14      	ldr	r3, [pc, #80]	@ (8002120 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2232      	movs	r2, #50	@ 0x32
 80020d2:	fb02 f303 	mul.w	r3, r2, r3
 80020d6:	4a13      	ldr	r2, [pc, #76]	@ (8002124 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80020d8:	fba2 2303 	umull	r2, r3, r2, r3
 80020dc:	0c9b      	lsrs	r3, r3, #18
 80020de:	3301      	adds	r3, #1
 80020e0:	60fb      	str	r3, [r7, #12]

  /* store expected ready flag */
  vosr = (VoltageScaling << (PWR_VOSR_R1RDY_Pos - PWR_VOSR_R1EN_Pos));
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	041b      	lsls	r3, r3, #16
 80020e6:	60bb      	str	r3, [r7, #8]

  while (((PWR->VOSR & vosr) != vosr) && (timeout != 0U))
 80020e8:	e002      	b.n	80020f0 <HAL_PWREx_ControlVoltageScaling+0x44>
  {
    timeout--;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	3b01      	subs	r3, #1
 80020ee:	60fb      	str	r3, [r7, #12]
  while (((PWR->VOSR & vosr) != vosr) && (timeout != 0U))
 80020f0:	4b0a      	ldr	r3, [pc, #40]	@ (800211c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80020f2:	68da      	ldr	r2, [r3, #12]
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	4013      	ands	r3, r2
 80020f8:	68ba      	ldr	r2, [r7, #8]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d002      	beq.n	8002104 <HAL_PWREx_ControlVoltageScaling+0x58>
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d1f2      	bne.n	80020ea <HAL_PWREx_ControlVoltageScaling+0x3e>
  }

  /* Check time out */
  if (timeout == 0U)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <HAL_PWREx_ControlVoltageScaling+0x62>
  {
    return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e000      	b.n	8002110 <HAL_PWREx_ControlVoltageScaling+0x64>
  }
  else
  {
    return HAL_OK;
 800210e:	2300      	movs	r3, #0
  }
}
 8002110:	4618      	mov	r0, r3
 8002112:	3714      	adds	r7, #20
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr
 800211c:	40030800 	.word	0x40030800
 8002120:	20000000 	.word	0x20000000
 8002124:	431bde83 	.word	0x431bde83

08002128 <HAL_PWREx_EnableEpodBooster>:
  * @note   EPOD booster shall be enabled prior to increase system frequency above 24 MHz in all ranges.
  * @note   EPOD Booster clock source and divider shall be configured through RCC before calling this function.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_EnableEpodBooster(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Set EPOD booster bit */
  PWR->VOSR |= PWR_VOSR_BOOSTEN;
 800212e:	4b13      	ldr	r3, [pc, #76]	@ (800217c <HAL_PWREx_EnableEpodBooster+0x54>)
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	4a12      	ldr	r2, [pc, #72]	@ (800217c <HAL_PWREx_EnableEpodBooster+0x54>)
 8002134:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002138:	60d3      	str	r3, [r2, #12]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800213a:	f7ff fc07 	bl	800194c <HAL_GetTick>
 800213e:	6078      	str	r0, [r7, #4]

  /* Wait till boster ready bit is set */
  while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) != PWR_VOSR_BOOSTRDY)
 8002140:	e00f      	b.n	8002162 <HAL_PWREx_EnableEpodBooster+0x3a>
  {
    if ((HAL_GetTick() - tickstart) > BOOSTER_TIMEOUT_VALUE)
 8002142:	f7ff fc03 	bl	800194c <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	2b01      	cmp	r3, #1
 800214e:	d908      	bls.n	8002162 <HAL_PWREx_EnableEpodBooster+0x3a>
    {
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) != PWR_VOSR_BOOSTRDY)
 8002150:	4b0a      	ldr	r3, [pc, #40]	@ (800217c <HAL_PWREx_EnableEpodBooster+0x54>)
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002158:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800215c:	d001      	beq.n	8002162 <HAL_PWREx_EnableEpodBooster+0x3a>
      {
        return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e007      	b.n	8002172 <HAL_PWREx_EnableEpodBooster+0x4a>
  while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) != PWR_VOSR_BOOSTRDY)
 8002162:	4b06      	ldr	r3, [pc, #24]	@ (800217c <HAL_PWREx_EnableEpodBooster+0x54>)
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800216a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800216e:	d1e8      	bne.n	8002142 <HAL_PWREx_EnableEpodBooster+0x1a>
      }
    }
  }

  /* Booster is enabled and ready */
  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	40030800 	.word	0x40030800

08002180 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef *RCC_OscInitStruct)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b088      	sub	sp, #32
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t sysclksrc;
  uint32_t tmpreg1;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d101      	bne.n	8002192 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e340      	b.n	8002814 <HAL_RCC_OscConfig+0x694>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002192:	4b98      	ldr	r3, [pc, #608]	@ (80023f4 <HAL_RCC_OscConfig+0x274>)
 8002194:	69db      	ldr	r3, [r3, #28]
 8002196:	f003 030c 	and.w	r3, r3, #12
 800219a:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) != 0x00u)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	f000 80ad 	beq.w	8002304 <HAL_RCC_OscConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock source, it is not allowed to be disabled */
    if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	2b08      	cmp	r3, #8
 80021ae:	d106      	bne.n	80021be <HAL_RCC_OscConfig+0x3e>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	f040 80a5 	bne.w	8002304 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e32a      	b.n	8002814 <HAL_RCC_OscConfig+0x694>
      }
    }
    else
    {
      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d04f      	beq.n	8002266 <HAL_RCC_OscConfig+0xe6>
      {
        /* Set the new HSE configuration ---------------------------------------*/
        __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021ce:	d106      	bne.n	80021de <HAL_RCC_OscConfig+0x5e>
 80021d0:	4b88      	ldr	r3, [pc, #544]	@ (80023f4 <HAL_RCC_OscConfig+0x274>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a87      	ldr	r2, [pc, #540]	@ (80023f4 <HAL_RCC_OscConfig+0x274>)
 80021d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021da:	6013      	str	r3, [r2, #0]
 80021dc:	e02f      	b.n	800223e <HAL_RCC_OscConfig+0xbe>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80021e6:	d10c      	bne.n	8002202 <HAL_RCC_OscConfig+0x82>
 80021e8:	4b82      	ldr	r3, [pc, #520]	@ (80023f4 <HAL_RCC_OscConfig+0x274>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a81      	ldr	r2, [pc, #516]	@ (80023f4 <HAL_RCC_OscConfig+0x274>)
 80021ee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021f2:	6013      	str	r3, [r2, #0]
 80021f4:	4b7f      	ldr	r3, [pc, #508]	@ (80023f4 <HAL_RCC_OscConfig+0x274>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a7e      	ldr	r2, [pc, #504]	@ (80023f4 <HAL_RCC_OscConfig+0x274>)
 80021fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021fe:	6013      	str	r3, [r2, #0]
 8002200:	e01d      	b.n	800223e <HAL_RCC_OscConfig+0xbe>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800220a:	d10c      	bne.n	8002226 <HAL_RCC_OscConfig+0xa6>
 800220c:	4b79      	ldr	r3, [pc, #484]	@ (80023f4 <HAL_RCC_OscConfig+0x274>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a78      	ldr	r2, [pc, #480]	@ (80023f4 <HAL_RCC_OscConfig+0x274>)
 8002212:	f443 13a0 	orr.w	r3, r3, #1310720	@ 0x140000
 8002216:	6013      	str	r3, [r2, #0]
 8002218:	4b76      	ldr	r3, [pc, #472]	@ (80023f4 <HAL_RCC_OscConfig+0x274>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a75      	ldr	r2, [pc, #468]	@ (80023f4 <HAL_RCC_OscConfig+0x274>)
 800221e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002222:	6013      	str	r3, [r2, #0]
 8002224:	e00b      	b.n	800223e <HAL_RCC_OscConfig+0xbe>
 8002226:	4b73      	ldr	r3, [pc, #460]	@ (80023f4 <HAL_RCC_OscConfig+0x274>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a72      	ldr	r2, [pc, #456]	@ (80023f4 <HAL_RCC_OscConfig+0x274>)
 800222c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002230:	6013      	str	r3, [r2, #0]
 8002232:	4b70      	ldr	r3, [pc, #448]	@ (80023f4 <HAL_RCC_OscConfig+0x274>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a6f      	ldr	r2, [pc, #444]	@ (80023f4 <HAL_RCC_OscConfig+0x274>)
 8002238:	f423 13a0 	bic.w	r3, r3, #1310720	@ 0x140000
 800223c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800223e:	f7ff fb85 	bl	800194c <HAL_GetTick>
 8002242:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002244:	e008      	b.n	8002258 <HAL_RCC_OscConfig+0xd8>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002246:	f7ff fb81 	bl	800194c <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b64      	cmp	r3, #100	@ 0x64
 8002252:	d901      	bls.n	8002258 <HAL_RCC_OscConfig+0xd8>
          {
            return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e2dd      	b.n	8002814 <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002258:	4b66      	ldr	r3, [pc, #408]	@ (80023f4 <HAL_RCC_OscConfig+0x274>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d0f0      	beq.n	8002246 <HAL_RCC_OscConfig+0xc6>
 8002264:	e04e      	b.n	8002304 <HAL_RCC_OscConfig+0x184>
        }
      }
      else
      {
        /* Set the new HSE configuration ---------------------------------------*/
        __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800226e:	d106      	bne.n	800227e <HAL_RCC_OscConfig+0xfe>
 8002270:	4b60      	ldr	r3, [pc, #384]	@ (80023f4 <HAL_RCC_OscConfig+0x274>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a5f      	ldr	r2, [pc, #380]	@ (80023f4 <HAL_RCC_OscConfig+0x274>)
 8002276:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800227a:	6013      	str	r3, [r2, #0]
 800227c:	e02f      	b.n	80022de <HAL_RCC_OscConfig+0x15e>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002286:	d10c      	bne.n	80022a2 <HAL_RCC_OscConfig+0x122>
 8002288:	4b5a      	ldr	r3, [pc, #360]	@ (80023f4 <HAL_RCC_OscConfig+0x274>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a59      	ldr	r2, [pc, #356]	@ (80023f4 <HAL_RCC_OscConfig+0x274>)
 800228e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002292:	6013      	str	r3, [r2, #0]
 8002294:	4b57      	ldr	r3, [pc, #348]	@ (80023f4 <HAL_RCC_OscConfig+0x274>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a56      	ldr	r2, [pc, #344]	@ (80023f4 <HAL_RCC_OscConfig+0x274>)
 800229a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800229e:	6013      	str	r3, [r2, #0]
 80022a0:	e01d      	b.n	80022de <HAL_RCC_OscConfig+0x15e>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80022aa:	d10c      	bne.n	80022c6 <HAL_RCC_OscConfig+0x146>
 80022ac:	4b51      	ldr	r3, [pc, #324]	@ (80023f4 <HAL_RCC_OscConfig+0x274>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a50      	ldr	r2, [pc, #320]	@ (80023f4 <HAL_RCC_OscConfig+0x274>)
 80022b2:	f443 13a0 	orr.w	r3, r3, #1310720	@ 0x140000
 80022b6:	6013      	str	r3, [r2, #0]
 80022b8:	4b4e      	ldr	r3, [pc, #312]	@ (80023f4 <HAL_RCC_OscConfig+0x274>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a4d      	ldr	r2, [pc, #308]	@ (80023f4 <HAL_RCC_OscConfig+0x274>)
 80022be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022c2:	6013      	str	r3, [r2, #0]
 80022c4:	e00b      	b.n	80022de <HAL_RCC_OscConfig+0x15e>
 80022c6:	4b4b      	ldr	r3, [pc, #300]	@ (80023f4 <HAL_RCC_OscConfig+0x274>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a4a      	ldr	r2, [pc, #296]	@ (80023f4 <HAL_RCC_OscConfig+0x274>)
 80022cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022d0:	6013      	str	r3, [r2, #0]
 80022d2:	4b48      	ldr	r3, [pc, #288]	@ (80023f4 <HAL_RCC_OscConfig+0x274>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a47      	ldr	r2, [pc, #284]	@ (80023f4 <HAL_RCC_OscConfig+0x274>)
 80022d8:	f423 13a0 	bic.w	r3, r3, #1310720	@ 0x140000
 80022dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022de:	f7ff fb35 	bl	800194c <HAL_GetTick>
 80022e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022e4:	e008      	b.n	80022f8 <HAL_RCC_OscConfig+0x178>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022e6:	f7ff fb31 	bl	800194c <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	2b64      	cmp	r3, #100	@ 0x64
 80022f2:	d901      	bls.n	80022f8 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e28d      	b.n	8002814 <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022f8:	4b3e      	ldr	r3, [pc, #248]	@ (80023f4 <HAL_RCC_OscConfig+0x274>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d1f0      	bne.n	80022e6 <HAL_RCC_OscConfig+0x166>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) != 0x00u)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0302 	and.w	r3, r3, #2
 800230c:	2b00      	cmp	r3, #0
 800230e:	d054      	beq.n	80023ba <HAL_RCC_OscConfig+0x23a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock */
    if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	2b04      	cmp	r3, #4
 8002314:	d110      	bne.n	8002338 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d101      	bne.n	8002322 <HAL_RCC_OscConfig+0x1a2>
      {
        return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e278      	b.n	8002814 <HAL_RCC_OscConfig+0x694>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002322:	4b34      	ldr	r3, [pc, #208]	@ (80023f4 <HAL_RCC_OscConfig+0x274>)
 8002324:	691b      	ldr	r3, [r3, #16]
 8002326:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	041b      	lsls	r3, r3, #16
 8002330:	4930      	ldr	r1, [pc, #192]	@ (80023f4 <HAL_RCC_OscConfig+0x274>)
 8002332:	4313      	orrs	r3, r2
 8002334:	610b      	str	r3, [r1, #16]
 8002336:	e040      	b.n	80023ba <HAL_RCC_OscConfig+0x23a>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d023      	beq.n	8002388 <HAL_RCC_OscConfig+0x208>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002340:	4b2c      	ldr	r3, [pc, #176]	@ (80023f4 <HAL_RCC_OscConfig+0x274>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a2b      	ldr	r2, [pc, #172]	@ (80023f4 <HAL_RCC_OscConfig+0x274>)
 8002346:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800234a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800234c:	f7ff fafe 	bl	800194c <HAL_GetTick>
 8002350:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002352:	e008      	b.n	8002366 <HAL_RCC_OscConfig+0x1e6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002354:	f7ff fafa 	bl	800194c <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b02      	cmp	r3, #2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e256      	b.n	8002814 <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002366:	4b23      	ldr	r3, [pc, #140]	@ (80023f4 <HAL_RCC_OscConfig+0x274>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d0f0      	beq.n	8002354 <HAL_RCC_OscConfig+0x1d4>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002372:	4b20      	ldr	r3, [pc, #128]	@ (80023f4 <HAL_RCC_OscConfig+0x274>)
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	041b      	lsls	r3, r3, #16
 8002380:	491c      	ldr	r1, [pc, #112]	@ (80023f4 <HAL_RCC_OscConfig+0x274>)
 8002382:	4313      	orrs	r3, r2
 8002384:	610b      	str	r3, [r1, #16]
 8002386:	e018      	b.n	80023ba <HAL_RCC_OscConfig+0x23a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002388:	4b1a      	ldr	r3, [pc, #104]	@ (80023f4 <HAL_RCC_OscConfig+0x274>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a19      	ldr	r2, [pc, #100]	@ (80023f4 <HAL_RCC_OscConfig+0x274>)
 800238e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002392:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002394:	f7ff fada 	bl	800194c <HAL_GetTick>
 8002398:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800239a:	e008      	b.n	80023ae <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800239c:	f7ff fad6 	bl	800194c <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e232      	b.n	8002814 <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023ae:	4b11      	ldr	r3, [pc, #68]	@ (80023f4 <HAL_RCC_OscConfig+0x274>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1f0      	bne.n	800239c <HAL_RCC_OscConfig+0x21c>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) != 0x00u)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0310 	and.w	r3, r3, #16
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d038      	beq.n	8002438 <HAL_RCC_OscConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d01b      	beq.n	8002406 <HAL_RCC_OscConfig+0x286>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80023ce:	4b09      	ldr	r3, [pc, #36]	@ (80023f4 <HAL_RCC_OscConfig+0x274>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a08      	ldr	r2, [pc, #32]	@ (80023f4 <HAL_RCC_OscConfig+0x274>)
 80023d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023d8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023da:	f7ff fab7 	bl	800194c <HAL_GetTick>
 80023de:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80023e0:	e00a      	b.n	80023f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023e2:	f7ff fab3 	bl	800194c <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d903      	bls.n	80023f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e20f      	b.n	8002814 <HAL_RCC_OscConfig+0x694>
 80023f4:	40030c00 	.word	0x40030c00
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80023f8:	4ba0      	ldr	r3, [pc, #640]	@ (800267c <HAL_RCC_OscConfig+0x4fc>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d0ee      	beq.n	80023e2 <HAL_RCC_OscConfig+0x262>
 8002404:	e018      	b.n	8002438 <HAL_RCC_OscConfig+0x2b8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002406:	4b9d      	ldr	r3, [pc, #628]	@ (800267c <HAL_RCC_OscConfig+0x4fc>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a9c      	ldr	r2, [pc, #624]	@ (800267c <HAL_RCC_OscConfig+0x4fc>)
 800240c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002410:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002412:	f7ff fa9b 	bl	800194c <HAL_GetTick>
 8002416:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002418:	e008      	b.n	800242c <HAL_RCC_OscConfig+0x2ac>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800241a:	f7ff fa97 	bl	800194c <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	2b02      	cmp	r3, #2
 8002426:	d901      	bls.n	800242c <HAL_RCC_OscConfig+0x2ac>
        {
          return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e1f3      	b.n	8002814 <HAL_RCC_OscConfig+0x694>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800242c:	4b93      	ldr	r3, [pc, #588]	@ (800267c <HAL_RCC_OscConfig+0x4fc>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d1f0      	bne.n	800241a <HAL_RCC_OscConfig+0x29a>
    }
  }


  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) != 0x00u)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0304 	and.w	r3, r3, #4
 8002440:	2b00      	cmp	r3, #0
 8002442:	f000 80a7 	beq.w	8002594 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002446:	2300      	movs	r3, #0
 8002448:	76fb      	strb	r3, [r7, #27]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_ENABLED() != 0x01)
 800244a:	4b8c      	ldr	r3, [pc, #560]	@ (800267c <HAL_RCC_OscConfig+0x4fc>)
 800244c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002450:	f003 0304 	and.w	r3, r3, #4
 8002454:	2b00      	cmp	r3, #0
 8002456:	d110      	bne.n	800247a <HAL_RCC_OscConfig+0x2fa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002458:	4b88      	ldr	r3, [pc, #544]	@ (800267c <HAL_RCC_OscConfig+0x4fc>)
 800245a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800245e:	4a87      	ldr	r2, [pc, #540]	@ (800267c <HAL_RCC_OscConfig+0x4fc>)
 8002460:	f043 0304 	orr.w	r3, r3, #4
 8002464:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002468:	4b84      	ldr	r3, [pc, #528]	@ (800267c <HAL_RCC_OscConfig+0x4fc>)
 800246a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800246e:	f003 0304 	and.w	r3, r3, #4
 8002472:	60fb      	str	r3, [r7, #12]
 8002474:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002476:	2301      	movs	r3, #1
 8002478:	76fb      	strb	r3, [r7, #27]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800247a:	4b81      	ldr	r3, [pc, #516]	@ (8002680 <HAL_RCC_OscConfig+0x500>)
 800247c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800247e:	4a80      	ldr	r2, [pc, #512]	@ (8002680 <HAL_RCC_OscConfig+0x500>)
 8002480:	f043 0301 	orr.w	r3, r3, #1
 8002484:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Set the new LSE configuration -----------------------------------------*/
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d051      	beq.n	8002532 <HAL_RCC_OscConfig+0x3b2>
    {
      /* If LSE is already on or in bypass mode, only LSE system can be modified */
      tmpreg1 = (RCC->BDCR & ~RCC_BDCR_LSESYSEN);
 800248e:	4b7b      	ldr	r3, [pc, #492]	@ (800267c <HAL_RCC_OscConfig+0x4fc>)
 8002490:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8002494:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002498:	61fb      	str	r3, [r7, #28]
      tmpreg1 |= RCC_OscInitStruct->LSEState;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	69fa      	ldr	r2, [r7, #28]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	61fb      	str	r3, [r7, #28]
      RCC->BDCR = tmpreg1;
 80024a4:	4a75      	ldr	r2, [pc, #468]	@ (800267c <HAL_RCC_OscConfig+0x4fc>)
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ac:	f7ff fa4e 	bl	800194c <HAL_GetTick>
 80024b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024b2:	e00a      	b.n	80024ca <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024b4:	f7ff fa4a 	bl	800194c <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e1a4      	b.n	8002814 <HAL_RCC_OscConfig+0x694>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024ca:	4b6c      	ldr	r3, [pc, #432]	@ (800267c <HAL_RCC_OscConfig+0x4fc>)
 80024cc:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80024d0:	f003 0302 	and.w	r3, r3, #2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d0ed      	beq.n	80024b4 <HAL_RCC_OscConfig+0x334>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	695b      	ldr	r3, [r3, #20]
 80024dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d01e      	beq.n	8002522 <HAL_RCC_OscConfig+0x3a2>
      {
        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80024e4:	e00a      	b.n	80024fc <HAL_RCC_OscConfig+0x37c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024e6:	f7ff fa31 	bl	800194c <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d901      	bls.n	80024fc <HAL_RCC_OscConfig+0x37c>
          {
            return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e18b      	b.n	8002814 <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80024fc:	4b5f      	ldr	r3, [pc, #380]	@ (800267c <HAL_RCC_OscConfig+0x4fc>)
 80024fe:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8002502:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002506:	2b00      	cmp	r3, #0
 8002508:	d0ed      	beq.n	80024e6 <HAL_RCC_OscConfig+0x366>
 800250a:	e038      	b.n	800257e <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800250c:	f7ff fa1e 	bl	800194c <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	f241 3288 	movw	r2, #5000	@ 0x1388
 800251a:	4293      	cmp	r3, r2
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e178      	b.n	8002814 <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002522:	4b56      	ldr	r3, [pc, #344]	@ (800267c <HAL_RCC_OscConfig+0x4fc>)
 8002524:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8002528:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800252c:	2b00      	cmp	r3, #0
 800252e:	d1ed      	bne.n	800250c <HAL_RCC_OscConfig+0x38c>
 8002530:	e025      	b.n	800257e <HAL_RCC_OscConfig+0x3fe>
        }
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, (RCC_BDCR_LSEON | RCC_BDCR_LSESYSEN));
 8002532:	4b52      	ldr	r3, [pc, #328]	@ (800267c <HAL_RCC_OscConfig+0x4fc>)
 8002534:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8002538:	4a50      	ldr	r2, [pc, #320]	@ (800267c <HAL_RCC_OscConfig+0x4fc>)
 800253a:	f023 0381 	bic.w	r3, r3, #129	@ 0x81
 800253e:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002542:	4b4e      	ldr	r3, [pc, #312]	@ (800267c <HAL_RCC_OscConfig+0x4fc>)
 8002544:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8002548:	4a4c      	ldr	r2, [pc, #304]	@ (800267c <HAL_RCC_OscConfig+0x4fc>)
 800254a:	f023 0304 	bic.w	r3, r3, #4
 800254e:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002552:	f7ff f9fb 	bl	800194c <HAL_GetTick>
 8002556:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002558:	e00a      	b.n	8002570 <HAL_RCC_OscConfig+0x3f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800255a:	f7ff f9f7 	bl	800194c <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002568:	4293      	cmp	r3, r2
 800256a:	d901      	bls.n	8002570 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e151      	b.n	8002814 <HAL_RCC_OscConfig+0x694>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002570:	4b42      	ldr	r3, [pc, #264]	@ (800267c <HAL_RCC_OscConfig+0x4fc>)
 8002572:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d1ed      	bne.n	800255a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800257e:	7efb      	ldrb	r3, [r7, #27]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d107      	bne.n	8002594 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002584:	4b3d      	ldr	r3, [pc, #244]	@ (800267c <HAL_RCC_OscConfig+0x4fc>)
 8002586:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800258a:	4a3c      	ldr	r2, [pc, #240]	@ (800267c <HAL_RCC_OscConfig+0x4fc>)
 800258c:	f023 0304 	bic.w	r3, r3, #4
 8002590:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) != 0x00u)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0308 	and.w	r3, r3, #8
 800259c:	2b00      	cmp	r3, #0
 800259e:	d078      	beq.n	8002692 <HAL_RCC_OscConfig+0x512>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Get CSR register value */
    tmpreg1 = RCC->CSR;
 80025a0:	4b36      	ldr	r3, [pc, #216]	@ (800267c <HAL_RCC_OscConfig+0x4fc>)
 80025a2:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80025a6:	61fb      	str	r3, [r7, #28]

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d050      	beq.n	8002652 <HAL_RCC_OscConfig+0x4d2>
    {
      /* Check LSI division factor */
      assert_param(IS_RCC_LSI_DIV(RCC_OscInitStruct->LSIDiv));

      /* Check is LSIDiv is requested to be changed and LSI is already ON */
      if ((RCC_OscInitStruct->LSIDiv != (tmpreg1 & RCC_CSR_LSIPREDIV)) && ((tmpreg1 & RCC_CSR_LSIRDY) != 0x00u))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	69da      	ldr	r2, [r3, #28]
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	f003 0304 	and.w	r3, r3, #4
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d023      	beq.n	8002606 <HAL_RCC_OscConfig+0x486>
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	f003 0302 	and.w	r3, r3, #2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d01e      	beq.n	8002606 <HAL_RCC_OscConfig+0x486>
      {
        /* Disable LSI (end clear ready bit from tmpreg to avoid its propagation below) */
        tmpreg1 &= ~(RCC_CSR_LSION | RCC_CSR_LSIRDY);
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	f023 0303 	bic.w	r3, r3, #3
 80025ce:	61fb      	str	r3, [r7, #28]
        RCC->CSR = tmpreg1;
 80025d0:	4a2a      	ldr	r2, [pc, #168]	@ (800267c <HAL_RCC_OscConfig+0x4fc>)
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d8:	f7ff f9b8 	bl	800194c <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0x00u)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0x472>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025e0:	f7ff f9b4 	bl	800194c <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b14      	cmp	r3, #20
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x472>
          {
            /* LSI may be forced ON by IWDG */
            return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e110      	b.n	8002814 <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0x00u)
 80025f2:	4b22      	ldr	r3, [pc, #136]	@ (800267c <HAL_RCC_OscConfig+0x4fc>)
 80025f4:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80025f8:	f003 0302 	and.w	r3, r3, #2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d1ef      	bne.n	80025e0 <HAL_RCC_OscConfig+0x460>
          }
        }
        /* Wait at least a half of LSI clock period before applying the new LSI prediv value */
        HAL_Delay(1);
 8002600:	2001      	movs	r0, #1
 8002602:	f7ff f9af 	bl	8001964 <HAL_Delay>
      }

      /* Set LSI division factor */
      tmpreg1 &= ~RCC_CSR_LSIPREDIV;
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	f023 0304 	bic.w	r3, r3, #4
 800260c:	61fb      	str	r3, [r7, #28]
      tmpreg1 |= RCC_OscInitStruct->LSIDiv;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	69db      	ldr	r3, [r3, #28]
 8002612:	69fa      	ldr	r2, [r7, #28]
 8002614:	4313      	orrs	r3, r2
 8002616:	61fb      	str	r3, [r7, #28]

      /* Enable  LSI */
      tmpreg1 |= RCC_CSR_LSION;
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	f043 0301 	orr.w	r3, r3, #1
 800261e:	61fb      	str	r3, [r7, #28]
      RCC->CSR = tmpreg1;
 8002620:	4a16      	ldr	r2, [pc, #88]	@ (800267c <HAL_RCC_OscConfig+0x4fc>)
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002628:	f7ff f990 	bl	800194c <HAL_GetTick>
 800262c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0x00u)
 800262e:	e008      	b.n	8002642 <HAL_RCC_OscConfig+0x4c2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002630:	f7ff f98c 	bl	800194c <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b14      	cmp	r3, #20
 800263c:	d901      	bls.n	8002642 <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e0e8      	b.n	8002814 <HAL_RCC_OscConfig+0x694>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0x00u)
 8002642:	4b0e      	ldr	r3, [pc, #56]	@ (800267c <HAL_RCC_OscConfig+0x4fc>)
 8002644:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8002648:	f003 0302 	and.w	r3, r3, #2
 800264c:	2b00      	cmp	r3, #0
 800264e:	d0ef      	beq.n	8002630 <HAL_RCC_OscConfig+0x4b0>
 8002650:	e01f      	b.n	8002692 <HAL_RCC_OscConfig+0x512>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator */
      tmpreg1 &= ~RCC_CSR_LSION;
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	f023 0301 	bic.w	r3, r3, #1
 8002658:	61fb      	str	r3, [r7, #28]
      RCC->CSR = tmpreg1;
 800265a:	4a08      	ldr	r2, [pc, #32]	@ (800267c <HAL_RCC_OscConfig+0x4fc>)
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002662:	f7ff f973 	bl	800194c <HAL_GetTick>
 8002666:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0x00u)
 8002668:	e00c      	b.n	8002684 <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800266a:	f7ff f96f 	bl	800194c <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	2b14      	cmp	r3, #20
 8002676:	d905      	bls.n	8002684 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e0cb      	b.n	8002814 <HAL_RCC_OscConfig+0x694>
 800267c:	40030c00 	.word	0x40030c00
 8002680:	40030800 	.word	0x40030800
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0x00u)
 8002684:	4b65      	ldr	r3, [pc, #404]	@ (800281c <HAL_RCC_OscConfig+0x69c>)
 8002686:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1eb      	bne.n	800266a <HAL_RCC_OscConfig+0x4ea>
      }
    }
  }

  /*------------------------------ MSIS Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIS) != 0x00u)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0320 	and.w	r3, r3, #32
 800269a:	2b00      	cmp	r3, #0
 800269c:	d068      	beq.n	8002770 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSISState));

    /* Check if MSIS is asked to be turn off */
    if (RCC_OscInitStruct->MSISState == RCC_MSI_OFF)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a1b      	ldr	r3, [r3, #32]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d10d      	bne.n	80026c2 <HAL_RCC_OscConfig+0x542>
    {
      /* When MSIS is used as system clock it will not be disabled */
      if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSIS)
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d101      	bne.n	80026b0 <HAL_RCC_OscConfig+0x530>
      {
        return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e0b1      	b.n	8002814 <HAL_RCC_OscConfig+0x694>
      }
      else
      {
        /* Disable the MSIS */
        __HAL_RCC_MSIS_DISABLE();
 80026b0:	4b5a      	ldr	r3, [pc, #360]	@ (800281c <HAL_RCC_OscConfig+0x69c>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a59      	ldr	r2, [pc, #356]	@ (800281c <HAL_RCC_OscConfig+0x69c>)
 80026b6:	f023 0301 	bic.w	r3, r3, #1
 80026ba:	6013      	str	r3, [r2, #0]

        /* Store ready bit value for timeout */
        tmpreg1 = 0x00u;
 80026bc:	2300      	movs	r3, #0
 80026be:	61fb      	str	r3, [r7, #28]
 80026c0:	e03b      	b.n	800273a <HAL_RCC_OscConfig+0x5ba>
      /* Otherwise, turn it ON or if already ON, changing source and range is allowed */
      assert_param(IS_RCC_MSI_SOURCE(RCC_OscInitStruct->MSISSource));
      assert_param(IS_RCC_MSI_DIV(RCC_OscInitStruct->MSISDiv));

      /* Changing source and range is not possible when osnillator is ON but not Ready */
      if ((RCC->CR & (RCC_CR_MSISON | RCC_CR_MSISRDY)) == RCC_CR_MSISON)
 80026c2:	4b56      	ldr	r3, [pc, #344]	@ (800281c <HAL_RCC_OscConfig+0x69c>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0305 	and.w	r3, r3, #5
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d101      	bne.n	80026d2 <HAL_RCC_OscConfig+0x552>
      {
        return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e0a0      	b.n	8002814 <HAL_RCC_OscConfig+0x694>
      }
      else
      {
        /* Adjusts the MSIS source and divider, and force MSI selection to ICSCR1 */
        tmpreg1 = RCC->ICSCR1 & ~(RCC_ICSCR1_MSISSEL | RCC_ICSCR1_MSISDIV);
 80026d2:	4b52      	ldr	r3, [pc, #328]	@ (800281c <HAL_RCC_OscConfig+0x69c>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 80026da:	61fb      	str	r3, [r7, #28]
        tmpreg1 |= (RCC_ICSCR1_MSIRGSEL | RCC_OscInitStruct->MSISSource | RCC_OscInitStruct->MSISDiv);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026e4:	431a      	orrs	r2, r3
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80026ee:	61fb      	str	r3, [r7, #28]
        RCC->ICSCR1 = tmpreg1;
 80026f0:	4a4a      	ldr	r2, [pc, #296]	@ (800281c <HAL_RCC_OscConfig+0x69c>)
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	6093      	str	r3, [r2, #8]

        /* If MSIS is already selected as system clock, update Systick */
        if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSIS)
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d116      	bne.n	800272a <HAL_RCC_OscConfig+0x5aa>
        {
          /* Update the SystemCoreClock global variable */
          SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80026fc:	f000 f982 	bl	8002a04 <HAL_RCC_GetSysClockFreq>
 8002700:	4602      	mov	r2, r0
 8002702:	4b46      	ldr	r3, [pc, #280]	@ (800281c <HAL_RCC_OscConfig+0x69c>)
 8002704:	6a1b      	ldr	r3, [r3, #32]
 8002706:	f003 030f 	and.w	r3, r3, #15
 800270a:	4945      	ldr	r1, [pc, #276]	@ (8002820 <HAL_RCC_OscConfig+0x6a0>)
 800270c:	5ccb      	ldrb	r3, [r1, r3]
 800270e:	fa22 f303 	lsr.w	r3, r2, r3
 8002712:	4a44      	ldr	r2, [pc, #272]	@ (8002824 <HAL_RCC_OscConfig+0x6a4>)
 8002714:	6013      	str	r3, [r2, #0]

          /* Configure the source of time base considering new system clocks settings*/
          if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002716:	4b44      	ldr	r3, [pc, #272]	@ (8002828 <HAL_RCC_OscConfig+0x6a8>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4618      	mov	r0, r3
 800271c:	f7ff f884 	bl	8001828 <HAL_InitTick>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d007      	beq.n	8002736 <HAL_RCC_OscConfig+0x5b6>
          {
            return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e074      	b.n	8002814 <HAL_RCC_OscConfig+0x694>
          }
        }
        else
        {
          /* Enable the MSIS */
          __HAL_RCC_MSIS_ENABLE();
 800272a:	4b3c      	ldr	r3, [pc, #240]	@ (800281c <HAL_RCC_OscConfig+0x69c>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a3b      	ldr	r2, [pc, #236]	@ (800281c <HAL_RCC_OscConfig+0x69c>)
 8002730:	f043 0301 	orr.w	r3, r3, #1
 8002734:	6013      	str	r3, [r2, #0]
        }

        /* Store ready bit value for timeout */
        tmpreg1 = RCC_CR_MSISRDY;
 8002736:	2304      	movs	r3, #4
 8002738:	61fb      	str	r3, [r7, #28]
      }
    }

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800273a:	f7ff f907 	bl	800194c <HAL_GetTick>
 800273e:	6138      	str	r0, [r7, #16]

    /* Wait till HSI48 is disabled */
    while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != tmpreg1)
 8002740:	e00f      	b.n	8002762 <HAL_RCC_OscConfig+0x5e2>
    {
      if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002742:	f7ff f903 	bl	800194c <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b02      	cmp	r3, #2
 800274e:	d908      	bls.n	8002762 <HAL_RCC_OscConfig+0x5e2>
      {
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != tmpreg1)
 8002750:	4b32      	ldr	r3, [pc, #200]	@ (800281c <HAL_RCC_OscConfig+0x69c>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0304 	and.w	r3, r3, #4
 8002758:	69fa      	ldr	r2, [r7, #28]
 800275a:	429a      	cmp	r2, r3
 800275c:	d001      	beq.n	8002762 <HAL_RCC_OscConfig+0x5e2>
        {
          return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e058      	b.n	8002814 <HAL_RCC_OscConfig+0x694>
    while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != tmpreg1)
 8002762:	4b2e      	ldr	r3, [pc, #184]	@ (800281c <HAL_RCC_OscConfig+0x69c>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0304 	and.w	r3, r3, #4
 800276a:	69fa      	ldr	r2, [r7, #28]
 800276c:	429a      	cmp	r2, r3
 800276e:	d1e8      	bne.n	8002742 <HAL_RCC_OscConfig+0x5c2>
      }
    }
  }

  /*------------------------------ MSIK Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) != 0x00u)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002778:	2b00      	cmp	r3, #0
 800277a:	d04a      	beq.n	8002812 <HAL_RCC_OscConfig+0x692>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIKState));

    /* Check if MSIK is asked to be turn off */
    if (RCC_OscInitStruct->MSIKState == RCC_MSI_OFF)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002780:	2b00      	cmp	r3, #0
 8002782:	d108      	bne.n	8002796 <HAL_RCC_OscConfig+0x616>
    {
      /* Disable the MSIK */
      __HAL_RCC_MSIK_DISABLE();
 8002784:	4b25      	ldr	r3, [pc, #148]	@ (800281c <HAL_RCC_OscConfig+0x69c>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a24      	ldr	r2, [pc, #144]	@ (800281c <HAL_RCC_OscConfig+0x69c>)
 800278a:	f023 0308 	bic.w	r3, r3, #8
 800278e:	6013      	str	r3, [r2, #0]

      /* Store ready bit value for timeout */
      tmpreg1 = 0x00u;
 8002790:	2300      	movs	r3, #0
 8002792:	61fb      	str	r3, [r7, #28]
 8002794:	e022      	b.n	80027dc <HAL_RCC_OscConfig+0x65c>
      /* Otherwise, turn it ON or if already ON, changing source and range is allowed */
      assert_param(IS_RCC_MSI_SOURCE(RCC_OscInitStruct->MSIKSource));
      assert_param(IS_RCC_MSI_DIV(RCC_OscInitStruct->MSIKDiv));

      /* Changing source and range is not possible when osnillator is ON but not Ready */
      if ((RCC->CR & (RCC_CR_MSIKON | RCC_CR_MSIKRDY)) == RCC_CR_MSIKON)
 8002796:	4b21      	ldr	r3, [pc, #132]	@ (800281c <HAL_RCC_OscConfig+0x69c>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0318 	and.w	r3, r3, #24
 800279e:	2b08      	cmp	r3, #8
 80027a0:	d101      	bne.n	80027a6 <HAL_RCC_OscConfig+0x626>
      {
        return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e036      	b.n	8002814 <HAL_RCC_OscConfig+0x694>
      }
      else
      {
        /* Adjusts the MSIK source and divider, and force MSI selection to ICSCR1 */
        tmpreg1 = RCC->ICSCR1 & ~(RCC_ICSCR1_MSIKSEL | RCC_ICSCR1_MSIKDIV);
 80027a6:	4b1d      	ldr	r3, [pc, #116]	@ (800281c <HAL_RCC_OscConfig+0x69c>)
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f023 53e0 	bic.w	r3, r3, #469762048	@ 0x1c000000
 80027ae:	61fb      	str	r3, [r7, #28]
        tmpreg1 |= (RCC_ICSCR1_MSIRGSEL | ((RCC_OscInitStruct->MSIKSource | RCC_OscInitStruct->MSIKDiv) >> (RCC_ICSCR1_MSISSEL_Pos - RCC_ICSCR1_MSIKSEL_Pos)));
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027b8:	4313      	orrs	r3, r2
 80027ba:	08da      	lsrs	r2, r3, #3
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	4313      	orrs	r3, r2
 80027c0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80027c4:	61fb      	str	r3, [r7, #28]
        RCC->ICSCR1 = tmpreg1;
 80027c6:	4a15      	ldr	r2, [pc, #84]	@ (800281c <HAL_RCC_OscConfig+0x69c>)
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	6093      	str	r3, [r2, #8]

        /* Enable the MSIK */
        __HAL_RCC_MSIK_ENABLE();
 80027cc:	4b13      	ldr	r3, [pc, #76]	@ (800281c <HAL_RCC_OscConfig+0x69c>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a12      	ldr	r2, [pc, #72]	@ (800281c <HAL_RCC_OscConfig+0x69c>)
 80027d2:	f043 0308 	orr.w	r3, r3, #8
 80027d6:	6013      	str	r3, [r2, #0]

        /* Store ready bit value for timeout */
        tmpreg1 = RCC_CR_MSIKRDY;
 80027d8:	2310      	movs	r3, #16
 80027da:	61fb      	str	r3, [r7, #28]
      }
    }

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027dc:	f7ff f8b6 	bl	800194c <HAL_GetTick>
 80027e0:	6138      	str	r0, [r7, #16]

    /* Wait till HSI48 is disabled */
    while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != tmpreg1)
 80027e2:	e00f      	b.n	8002804 <HAL_RCC_OscConfig+0x684>
    {
      if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027e4:	f7ff f8b2 	bl	800194c <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d908      	bls.n	8002804 <HAL_RCC_OscConfig+0x684>
      {
        if (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != tmpreg1)
 80027f2:	4b0a      	ldr	r3, [pc, #40]	@ (800281c <HAL_RCC_OscConfig+0x69c>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0310 	and.w	r3, r3, #16
 80027fa:	69fa      	ldr	r2, [r7, #28]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d001      	beq.n	8002804 <HAL_RCC_OscConfig+0x684>
        {
          return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e007      	b.n	8002814 <HAL_RCC_OscConfig+0x694>
    while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != tmpreg1)
 8002804:	4b05      	ldr	r3, [pc, #20]	@ (800281c <HAL_RCC_OscConfig+0x69c>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0310 	and.w	r3, r3, #16
 800280c:	69fa      	ldr	r2, [r7, #28]
 800280e:	429a      	cmp	r2, r3
 8002810:	d1e8      	bne.n	80027e4 <HAL_RCC_OscConfig+0x664>
        }
      }
    }
  }

  return HAL_OK;
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	3720      	adds	r7, #32
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	40030c00 	.word	0x40030c00
 8002820:	08007018 	.word	0x08007018
 8002824:	20000000 	.word	0x20000000
 8002828:	20000014 	.word	0x20000014

0800282c <HAL_RCC_ClockConfig>:
  * @note   You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval None
  */
HAL_StatusTypeDef  HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef *RCC_ClkInitStruct, uint32_t FLatency)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b086      	sub	sp, #24
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;
  uint32_t update;
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d101      	bne.n	8002840 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e0d2      	b.n	80029e6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002840:	4b6b      	ldr	r3, [pc, #428]	@ (80029f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 030f 	and.w	r3, r3, #15
 8002848:	683a      	ldr	r2, [r7, #0]
 800284a:	429a      	cmp	r2, r3
 800284c:	d910      	bls.n	8002870 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800284e:	4b68      	ldr	r3, [pc, #416]	@ (80029f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f023 020f 	bic.w	r2, r3, #15
 8002856:	4966      	ldr	r1, [pc, #408]	@ (80029f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	4313      	orrs	r3, r2
 800285c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800285e:	4b64      	ldr	r3, [pc, #400]	@ (80029f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 030f 	and.w	r3, r3, #15
 8002866:	683a      	ldr	r2, [r7, #0]
 8002868:	429a      	cmp	r2, r3
 800286a:	d001      	beq.n	8002870 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e0ba      	b.n	80029e6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0301 	and.w	r3, r3, #1
 8002878:	2b00      	cmp	r3, #0
 800287a:	d040      	beq.n	80028fe <HAL_RCC_ClockConfig+0xd2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* Read CR register */
    tmpreg1 = RCC->CR;
 800287c:	4b5d      	ldr	r3, [pc, #372]	@ (80029f4 <HAL_RCC_ClockConfig+0x1c8>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	617b      	str	r3, [r7, #20]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	2b02      	cmp	r3, #2
 8002888:	d106      	bne.n	8002898 <HAL_RCC_ClockConfig+0x6c>
    {
      /* Check the HSE ready flag */
      if ((tmpreg1 & RCC_CR_HSERDY) == 0U)
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d113      	bne.n	80028bc <HAL_RCC_ClockConfig+0x90>
      {
        return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e0a6      	b.n	80029e6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	2b01      	cmp	r3, #1
 800289e:	d106      	bne.n	80028ae <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSI ready flag */
      if ((tmpreg1 & RCC_CR_HSIRDY) == 0U)
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d108      	bne.n	80028bc <HAL_RCC_ClockConfig+0x90>
      {
        return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e09b      	b.n	80029e6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* MSIS is selected as System Clock Source */
    else
    {
      /* Check the MSIS ready flag */
      if ((tmpreg1 & RCC_CR_MSISRDY) == 0U)
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	f003 0304 	and.w	r3, r3, #4
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d101      	bne.n	80028bc <HAL_RCC_ClockConfig+0x90>
      {
        return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e094      	b.n	80029e6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    /* Switch System clock source */
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, RCC_ClkInitStruct->SYSCLKSource);
 80028bc:	4b4d      	ldr	r3, [pc, #308]	@ (80029f4 <HAL_RCC_ClockConfig+0x1c8>)
 80028be:	69db      	ldr	r3, [r3, #28]
 80028c0:	f023 0203 	bic.w	r2, r3, #3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	494a      	ldr	r1, [pc, #296]	@ (80029f4 <HAL_RCC_ClockConfig+0x1c8>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028ce:	f7ff f83d 	bl	800194c <HAL_GetTick>
 80028d2:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR1_SWS_Pos))
 80028d4:	e00a      	b.n	80028ec <HAL_RCC_ClockConfig+0xc0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028d6:	f7ff f839 	bl	800194c <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d901      	bls.n	80028ec <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e07c      	b.n	80029e6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR1_SWS_Pos))
 80028ec:	4b41      	ldr	r3, [pc, #260]	@ (80029f4 <HAL_RCC_ClockConfig+0x1c8>)
 80028ee:	69db      	ldr	r3, [r3, #28]
 80028f0:	f003 020c 	and.w	r2, r3, #12
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d1eb      	bne.n	80028d6 <HAL_RCC_ClockConfig+0xaa>
      }
    }
  }

  /* Get CFGR2 content value, and reset update variable */
  tmpreg1 = RCC->CFGR2;
 80028fe:	4b3d      	ldr	r3, [pc, #244]	@ (80029f4 <HAL_RCC_ClockConfig+0x1c8>)
 8002900:	6a1b      	ldr	r3, [r3, #32]
 8002902:	617b      	str	r3, [r7, #20]
  update = 0x00u;
 8002904:	2300      	movs	r3, #0
 8002906:	613b      	str	r3, [r7, #16]

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0302 	and.w	r3, r3, #2
 8002910:	2b00      	cmp	r3, #0
 8002912:	d00a      	beq.n	800292a <HAL_RCC_ClockConfig+0xfe>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    /* update HCLK1 divider and notify register is required */
    tmpreg1 &= ~RCC_CFGR2_HPRE;
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	f023 030f 	bic.w	r3, r3, #15
 800291a:	617b      	str	r3, [r7, #20]
    tmpreg1 |= RCC_ClkInitStruct->AHBCLKDivider;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	697a      	ldr	r2, [r7, #20]
 8002922:	4313      	orrs	r3, r2
 8002924:	617b      	str	r3, [r7, #20]
    update = 0x01u;
 8002926:	2301      	movs	r3, #1
 8002928:	613b      	str	r3, [r7, #16]
  }


  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0304 	and.w	r3, r3, #4
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00a      	beq.n	800294c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));

    /* update PCLK1 divider and notify register is required */
    tmpreg1 &= ~RCC_CFGR2_PPRE1;
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800293c:	617b      	str	r3, [r7, #20]
    tmpreg1 |= RCC_ClkInitStruct->APB1CLKDivider;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	4313      	orrs	r3, r2
 8002946:	617b      	str	r3, [r7, #20]
    update = 0x01u;
 8002948:	2301      	movs	r3, #1
 800294a:	613b      	str	r3, [r7, #16]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0308 	and.w	r3, r3, #8
 8002954:	2b00      	cmp	r3, #0
 8002956:	d00b      	beq.n	8002970 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));

    /* update PCLK2 divider and notify register is required */
    tmpreg1 &= ~RCC_CFGR2_PPRE2;
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800295e:	617b      	str	r3, [r7, #20]
    tmpreg1 |= (RCC_ClkInitStruct->APB2CLKDivider << (RCC_CFGR2_PPRE2_Pos - RCC_CFGR2_PPRE1_Pos));
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	011b      	lsls	r3, r3, #4
 8002966:	697a      	ldr	r2, [r7, #20]
 8002968:	4313      	orrs	r3, r2
 800296a:	617b      	str	r3, [r7, #20]
    update = 0x01u;
 800296c:	2301      	movs	r3, #1
 800296e:	613b      	str	r3, [r7, #16]
  }

  /* update CFGR2 if required */
  if (update != 0x00u)
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d002      	beq.n	800297c <HAL_RCC_ClockConfig+0x150>
  {
    RCC->CFGR2 = tmpreg1;
 8002976:	4a1f      	ldr	r2, [pc, #124]	@ (80029f4 <HAL_RCC_ClockConfig+0x1c8>)
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	6213      	str	r3, [r2, #32]
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0310 	and.w	r3, r3, #16
 8002984:	2b00      	cmp	r3, #0
 8002986:	d003      	beq.n	8002990 <HAL_RCC_ClockConfig+0x164>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB3CLKDivider));
    WRITE_REG(RCC->CFGR3, RCC_ClkInitStruct->APB3CLKDivider);
 8002988:	4a1a      	ldr	r2, [pc, #104]	@ (80029f4 <HAL_RCC_ClockConfig+0x1c8>)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002990:	4b17      	ldr	r3, [pc, #92]	@ (80029f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 030f 	and.w	r3, r3, #15
 8002998:	683a      	ldr	r2, [r7, #0]
 800299a:	429a      	cmp	r2, r3
 800299c:	d210      	bcs.n	80029c0 <HAL_RCC_ClockConfig+0x194>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800299e:	4b14      	ldr	r3, [pc, #80]	@ (80029f0 <HAL_RCC_ClockConfig+0x1c4>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f023 020f 	bic.w	r2, r3, #15
 80029a6:	4912      	ldr	r1, [pc, #72]	@ (80029f0 <HAL_RCC_ClockConfig+0x1c4>)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ae:	4b10      	ldr	r3, [pc, #64]	@ (80029f0 <HAL_RCC_ClockConfig+0x1c4>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 030f 	and.w	r3, r3, #15
 80029b6:	683a      	ldr	r2, [r7, #0]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d001      	beq.n	80029c0 <HAL_RCC_ClockConfig+0x194>
    {
      return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e012      	b.n	80029e6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80029c0:	f000 f820 	bl	8002a04 <HAL_RCC_GetSysClockFreq>
 80029c4:	4602      	mov	r2, r0
 80029c6:	4b0b      	ldr	r3, [pc, #44]	@ (80029f4 <HAL_RCC_ClockConfig+0x1c8>)
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	f003 030f 	and.w	r3, r3, #15
 80029ce:	490a      	ldr	r1, [pc, #40]	@ (80029f8 <HAL_RCC_ClockConfig+0x1cc>)
 80029d0:	5ccb      	ldrb	r3, [r1, r3]
 80029d2:	fa22 f303 	lsr.w	r3, r2, r3
 80029d6:	4a09      	ldr	r2, [pc, #36]	@ (80029fc <HAL_RCC_ClockConfig+0x1d0>)
 80029d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80029da:	4b09      	ldr	r3, [pc, #36]	@ (8002a00 <HAL_RCC_ClockConfig+0x1d4>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4618      	mov	r0, r3
 80029e0:	f7fe ff22 	bl	8001828 <HAL_InitTick>
 80029e4:	4603      	mov	r3, r0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3718      	adds	r7, #24
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	40022000 	.word	0x40022000
 80029f4:	40030c00 	.word	0x40030c00
 80029f8:	08007018 	.word	0x08007018
 80029fc:	20000000 	.word	0x20000000
 8002a00:	20000014 	.word	0x20000014

08002a04 <HAL_RCC_GetSysClockFreq>:
  * @note   This function can be used by the user application to compute the
  *         baudrate for the communication peripherals or configure other parameters.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
  uint32_t tmpcfgr;
  uint32_t sysclk;

  /* Get SYSCLK source */
  tmpcfgr = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a0a:	4b1e      	ldr	r3, [pc, #120]	@ (8002a84 <HAL_RCC_GetSysClockFreq+0x80>)
 8002a0c:	69db      	ldr	r3, [r3, #28]
 8002a0e:	f003 030c 	and.w	r3, r3, #12
 8002a12:	607b      	str	r3, [r7, #4]

  if (tmpcfgr == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2b08      	cmp	r3, #8
 8002a18:	d102      	bne.n	8002a20 <HAL_RCC_GetSysClockFreq+0x1c>
  {
    /* HSE used as system clock source */
    sysclk = HSE_VALUE;
 8002a1a:	4b1b      	ldr	r3, [pc, #108]	@ (8002a88 <HAL_RCC_GetSysClockFreq+0x84>)
 8002a1c:	603b      	str	r3, [r7, #0]
 8002a1e:	e029      	b.n	8002a74 <HAL_RCC_GetSysClockFreq+0x70>
  }
  else if (tmpcfgr == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2b04      	cmp	r3, #4
 8002a24:	d102      	bne.n	8002a2c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* HSI used as system clock source */
    sysclk = HSI_VALUE;
 8002a26:	4b18      	ldr	r3, [pc, #96]	@ (8002a88 <HAL_RCC_GetSysClockFreq+0x84>)
 8002a28:	603b      	str	r3, [r7, #0]
 8002a2a:	e023      	b.n	8002a74 <HAL_RCC_GetSysClockFreq+0x70>
  }
  else
  {
    /* MSIS used as system clock source. Read ICSR1 register */
    tmpcfgr = RCC->ICSCR1;
 8002a2c:	4b15      	ldr	r3, [pc, #84]	@ (8002a84 <HAL_RCC_GetSysClockFreq+0x80>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	607b      	str	r3, [r7, #4]

    /* Check which MSIS Range is selected */
    if ((tmpcfgr & RCC_ICSCR1_MSIRGSEL) != 0x00u)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d00d      	beq.n	8002a58 <HAL_RCC_GetSysClockFreq+0x54>
    {
      /* Check which MSIRCx is selected as MSIS source */
      if ((tmpcfgr & RCC_ICSCR1_MSISSEL) != 0x00u)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	da02      	bge.n	8002a48 <HAL_RCC_GetSysClockFreq+0x44>
      {
        /* MSI RC1 is selected */
        sysclk = MSIRC1_VALUE;
 8002a42:	4b12      	ldr	r3, [pc, #72]	@ (8002a8c <HAL_RCC_GetSysClockFreq+0x88>)
 8002a44:	603b      	str	r3, [r7, #0]
 8002a46:	e001      	b.n	8002a4c <HAL_RCC_GetSysClockFreq+0x48>
      }
      else
      {
        /* MSI RC0 is selected */
        sysclk = MSIRC0_VALUE;
 8002a48:	4b11      	ldr	r3, [pc, #68]	@ (8002a90 <HAL_RCC_GetSysClockFreq+0x8c>)
 8002a4a:	603b      	str	r3, [r7, #0]
      }

      /* Get MSIS range */
      tmpcfgr = (tmpcfgr & RCC_ICSCR1_MSISDIV) >> RCC_ICSCR1_MSISDIV_Pos;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	0f5b      	lsrs	r3, r3, #29
 8002a50:	f003 0303 	and.w	r3, r3, #3
 8002a54:	607b      	str	r3, [r7, #4]
 8002a56:	e008      	b.n	8002a6a <HAL_RCC_GetSysClockFreq+0x66>
    }
    else
    {
      /* MSI RC1 is selected */
      sysclk = MSIRC1_VALUE;
 8002a58:	4b0c      	ldr	r3, [pc, #48]	@ (8002a8c <HAL_RCC_GetSysClockFreq+0x88>)
 8002a5a:	603b      	str	r3, [r7, #0]

      /* Get MSIS range */
      tmpcfgr = (RCC->CSR & (RCC_CSR_MSISDIVS_1 | RCC_CSR_MSISDIVS_0)) >> RCC_CSR_MSISDIVS_Pos;
 8002a5c:	4b09      	ldr	r3, [pc, #36]	@ (8002a84 <HAL_RCC_GetSysClockFreq+0x80>)
 8002a5e:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8002a62:	0b1b      	lsrs	r3, r3, #12
 8002a64:	f003 0303 	and.w	r3, r3, #3
 8002a68:	607b      	str	r3, [r7, #4]
    }

    /* MSIS frequency in HZ*/
    sysclk >>= tmpcfgr;
 8002a6a:	683a      	ldr	r2, [r7, #0]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a72:	603b      	str	r3, [r7, #0]
  }

  return sysclk;
 8002a74:	683b      	ldr	r3, [r7, #0]
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	40030c00 	.word	0x40030c00
 8002a88:	00f42400 	.word	0x00f42400
 8002a8c:	016e3600 	.word	0x016e3600
 8002a90:	05b8d800 	.word	0x05b8d800

08002a94 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002a98:	f7ff ffb4 	bl	8002a04 <HAL_RCC_GetSysClockFreq>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	4b07      	ldr	r3, [pc, #28]	@ (8002abc <HAL_RCC_GetHCLKFreq+0x28>)
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
 8002aa2:	f003 030f 	and.w	r3, r3, #15
 8002aa6:	4906      	ldr	r1, [pc, #24]	@ (8002ac0 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002aa8:	5ccb      	ldrb	r3, [r1, r3]
 8002aaa:	fa22 f303 	lsr.w	r3, r2, r3
 8002aae:	4a05      	ldr	r2, [pc, #20]	@ (8002ac4 <HAL_RCC_GetHCLKFreq+0x30>)
 8002ab0:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8002ab2:	4b04      	ldr	r3, [pc, #16]	@ (8002ac4 <HAL_RCC_GetHCLKFreq+0x30>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	40030c00 	.word	0x40030c00
 8002ac0:	08007018 	.word	0x08007018
 8002ac4:	20000000 	.word	0x20000000

08002ac8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8002acc:	f7ff ffe2 	bl	8002a94 <HAL_RCC_GetHCLKFreq>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	4b05      	ldr	r3, [pc, #20]	@ (8002ae8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ad4:	6a1b      	ldr	r3, [r3, #32]
 8002ad6:	091b      	lsrs	r3, r3, #4
 8002ad8:	f003 0307 	and.w	r3, r3, #7
 8002adc:	4903      	ldr	r1, [pc, #12]	@ (8002aec <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ade:	5ccb      	ldrb	r3, [r1, r3]
 8002ae0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	40030c00 	.word	0x40030c00
 8002aec:	08007028 	.word	0x08007028

08002af0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8002af4:	f7ff ffce 	bl	8002a94 <HAL_RCC_GetHCLKFreq>
 8002af8:	4602      	mov	r2, r0
 8002afa:	4b05      	ldr	r3, [pc, #20]	@ (8002b10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002afc:	6a1b      	ldr	r3, [r3, #32]
 8002afe:	0a1b      	lsrs	r3, r3, #8
 8002b00:	f003 0307 	and.w	r3, r3, #7
 8002b04:	4903      	ldr	r1, [pc, #12]	@ (8002b14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b06:	5ccb      	ldrb	r3, [r1, r3]
 8002b08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	40030c00 	.word	0x40030c00
 8002b14:	08007028 	.word	0x08007028

08002b18 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8002b1c:	f7ff ffba 	bl	8002a94 <HAL_RCC_GetHCLKFreq>
 8002b20:	4602      	mov	r2, r0
 8002b22:	4b05      	ldr	r3, [pc, #20]	@ (8002b38 <HAL_RCC_GetPCLK3Freq+0x20>)
 8002b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b26:	091b      	lsrs	r3, r3, #4
 8002b28:	f003 0307 	and.w	r3, r3, #7
 8002b2c:	4903      	ldr	r1, [pc, #12]	@ (8002b3c <HAL_RCC_GetPCLK3Freq+0x24>)
 8002b2e:	5ccb      	ldrb	r3, [r1, r3]
 8002b30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	40030c00 	.word	0x40030c00
 8002b3c:	08007028 	.word	0x08007028

08002b40 <HAL_RCC_GetMSIKFreq>:
/**
  * @brief  Return the MSIK frequency.
  * @retval MSIK frequency in Hz
  */
uint32_t HAL_RCC_GetMSIKFreq(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
  uint32_t tmp;
  uint32_t msirange;

  /* Compute MSIK frequency ------------------------------------------------*/
  /* Read RCC ICSR1 register */
  tmp = RCC->ICSCR1;
 8002b46:	4b16      	ldr	r3, [pc, #88]	@ (8002ba0 <HAL_RCC_GetMSIKFreq+0x60>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	607b      	str	r3, [r7, #4]

  /* Check which MSIK Range is selected */
  if ((tmp & RCC_ICSCR1_MSIRGSEL) != 0x00u)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00f      	beq.n	8002b76 <HAL_RCC_GetMSIKFreq+0x36>
  {
    /* Get MSIK range */
    msirange = (tmp & RCC_ICSCR1_MSIKDIV) >> RCC_ICSCR1_MSIKDIV_Pos;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	0e9b      	lsrs	r3, r3, #26
 8002b5a:	f003 0303 	and.w	r3, r3, #3
 8002b5e:	603b      	str	r3, [r7, #0]

    /* Check which MSIRCx is selected as MSIK source */
    if ((tmp & RCC_ICSCR1_MSIKSEL) != 0x00u)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d002      	beq.n	8002b70 <HAL_RCC_GetMSIKFreq+0x30>
    {
      /* MSI RC1 is selected */
      tmp = MSIRC1_VALUE;
 8002b6a:	4b0e      	ldr	r3, [pc, #56]	@ (8002ba4 <HAL_RCC_GetMSIKFreq+0x64>)
 8002b6c:	607b      	str	r3, [r7, #4]
 8002b6e:	e00b      	b.n	8002b88 <HAL_RCC_GetMSIKFreq+0x48>
    }
    else
    {
      /* MSI RC0 is selected */
      tmp = MSIRC0_VALUE;
 8002b70:	4b0d      	ldr	r3, [pc, #52]	@ (8002ba8 <HAL_RCC_GetMSIKFreq+0x68>)
 8002b72:	607b      	str	r3, [r7, #4]
 8002b74:	e008      	b.n	8002b88 <HAL_RCC_GetMSIKFreq+0x48>
    }
  }
  else
  {
    /* MSI RC1 is selected */
    tmp = MSIRC1_VALUE;
 8002b76:	4b0b      	ldr	r3, [pc, #44]	@ (8002ba4 <HAL_RCC_GetMSIKFreq+0x64>)
 8002b78:	607b      	str	r3, [r7, #4]

    /* Get MSIK range */
    msirange = (RCC->CSR & (RCC_CSR_MSIKDIVS_1 | RCC_CSR_MSIKDIVS_0)) >> RCC_CSR_MSIKDIVS_Pos;
 8002b7a:	4b09      	ldr	r3, [pc, #36]	@ (8002ba0 <HAL_RCC_GetMSIKFreq+0x60>)
 8002b7c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8002b80:	0a1b      	lsrs	r3, r3, #8
 8002b82:	f003 0303 	and.w	r3, r3, #3
 8002b86:	603b      	str	r3, [r7, #0]
  }

  /*MSIK frequency in HZ*/
  tmp >>= msirange;
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b90:	607b      	str	r3, [r7, #4]

  return tmp;
 8002b92:	687b      	ldr	r3, [r7, #4]
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr
 8002ba0:	40030c00 	.word	0x40030c00
 8002ba4:	016e3600 	.word	0x016e3600
 8002ba8:	05b8d800 	.word	0x05b8d800

08002bac <HAL_RCCEx_PeriphCLKConfig>:
  * @note   Care must be taken when HAL_RCCEx_PeriphCLKConfig() is used to select
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef *PeriphClkInit)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b088      	sub	sp, #32
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0301 	and.w	r3, r3, #1
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d00a      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002bc0:	4bad      	ldr	r3, [pc, #692]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002bc2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002bc6:	f023 0201 	bic.w	r2, r3, #1
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	49aa      	ldr	r1, [pc, #680]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00a      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002be2:	4ba5      	ldr	r3, [pc, #660]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002be4:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002be8:	f023 0204 	bic.w	r2, r3, #4
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	49a1      	ldr	r1, [pc, #644]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- UART4 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0304 	and.w	r3, r3, #4
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d00a      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c04:	4b9c      	ldr	r3, [pc, #624]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002c06:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002c0a:	f023 0210 	bic.w	r2, r3, #16
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	4999      	ldr	r1, [pc, #612]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- UART5 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0308 	and.w	r3, r3, #8
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00a      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c26:	4b94      	ldr	r3, [pc, #592]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002c28:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002c2c:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	691b      	ldr	r3, [r3, #16]
 8002c34:	4990      	ldr	r1, [pc, #576]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0310 	and.w	r3, r3, #16
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00a      	beq.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(PeriphClkInit->I3c1ClockSelection));

    /* Configure the I3C1 clock source */
    __HAL_RCC_I3C1_CONFIG(PeriphClkInit->I3c1ClockSelection);
 8002c48:	4b8b      	ldr	r3, [pc, #556]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002c4a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002c4e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	4988      	ldr	r1, [pc, #544]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0320 	and.w	r3, r3, #32
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00a      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c6a:	4b83      	ldr	r3, [pc, #524]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002c6c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002c70:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	497f      	ldr	r1, [pc, #508]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

#if defined(I2C2)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d00a      	beq.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0xf6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c8c:	4b7a      	ldr	r3, [pc, #488]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002c8e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002c92:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	69db      	ldr	r3, [r3, #28]
 8002c9a:	4977      	ldr	r1, [pc, #476]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }
#endif /* I2C2 */

#if defined(I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d00a      	beq.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(PeriphClkInit->I3c2ClockSelection));

    /* Configure the I3C2 clock source */
    __HAL_RCC_I3C2_CONFIG(PeriphClkInit->I3c2ClockSelection);
 8002cae:	4b72      	ldr	r3, [pc, #456]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002cb0:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002cb4:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a1b      	ldr	r3, [r3, #32]
 8002cbc:	496e      	ldr	r1, [pc, #440]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }
#endif /* I3C2 */

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d00a      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(PeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(PeriphClkInit->Spi2ClockSelection);
 8002cd0:	4b69      	ldr	r3, [pc, #420]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002cd2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002cd6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cde:	4966      	ldr	r1, [pc, #408]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d00a      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002cf2:	4b61      	ldr	r3, [pc, #388]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002cf4:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002cf8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d00:	495d      	ldr	r1, [pc, #372]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d00a      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x17e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(PeriphClkInit->Spi1ClockSelection);
 8002d14:	4b58      	ldr	r3, [pc, #352]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002d16:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002d1a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d22:	4955      	ldr	r1, [pc, #340]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- SYSTICK clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SYSTICK) == RCC_PERIPHCLK_SYSTICK)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00a      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SYSTICKCLKSOURCE(PeriphClkInit->SystickClockSelection));

    /* Configure the SYSTICK clock source */
    __HAL_RCC_SYSTICK_CONFIG(PeriphClkInit->SystickClockSelection);
 8002d36:	4b50      	ldr	r3, [pc, #320]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002d38:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002d3c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d44:	494c      	ldr	r1, [pc, #304]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d00a      	beq.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN1 clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002d58:	4b47      	ldr	r3, [pc, #284]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002d5a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002d5e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d66:	4944      	ldr	r1, [pc, #272]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }
#endif /* FDCAN1 */

  /*-------------------------- ICLK clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00a      	beq.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(PeriphClkInit->IclkClockSelection));

    /* Set the source of ICLK clock*/
    __HAL_RCC_ICLK_CONFIG(PeriphClkInit->IclkClockSelection);
 8002d7a:	4b3f      	ldr	r3, [pc, #252]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002d7c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002d80:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d88:	493b      	ldr	r1, [pc, #236]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- USB1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB1) == RCC_PERIPHCLK_USB1)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d00a      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USB1CLKSOURCE(PeriphClkInit->Usb1ClockSelection));

    /* Set the source of USB1 clock*/
    __HAL_RCC_USB1_CONFIG(PeriphClkInit->Usb1ClockSelection);
 8002d9c:	4b36      	ldr	r3, [pc, #216]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002d9e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002da2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002daa:	4933      	ldr	r1, [pc, #204]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- TIMIC clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIMIC) == RCC_PERIPHCLK_TIMIC)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00a      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMICCLKSOURCE(PeriphClkInit->TimIcClockSelection));

    /* Configure the TIMIC clock source */
    __HAL_RCC_TIMIC_CONFIG(PeriphClkInit->TimIcClockSelection);
 8002dbe:	4b2e      	ldr	r3, [pc, #184]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002dc0:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002dc4:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dcc:	492a      	ldr	r1, [pc, #168]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

#if defined(ADF1)
  /*-------------------------- ADF1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d00a      	beq.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(PeriphClkInit->Adf1ClockSelection));

    /* Set the source of ADF1 clock*/
    __HAL_RCC_ADF1_CONFIG(PeriphClkInit->Adf1ClockSelection);
 8002de0:	4b25      	ldr	r3, [pc, #148]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002de2:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8002de6:	f023 0203 	bic.w	r2, r3, #3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dee:	4922      	ldr	r1, [pc, #136]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }
#endif /* ADF1 */

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00a      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(PeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(PeriphClkInit->Spi3ClockSelection);
 8002e02:	4b1d      	ldr	r3, [pc, #116]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002e04:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8002e08:	f023 0208 	bic.w	r2, r3, #8
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e10:	4919      	ldr	r1, [pc, #100]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d00a      	beq.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Set the source of SAI1 clock*/
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e24:	4b14      	ldr	r3, [pc, #80]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002e26:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8002e2a:	f023 0260 	bic.w	r2, r3, #96	@ 0x60
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e32:	4911      	ldr	r1, [pc, #68]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }
#endif /* SAI1 */

  /*-------------------------- RNG clock source configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00a      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Set the source of RNG clock*/
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e46:	4b0c      	ldr	r3, [pc, #48]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002e48:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8002e4c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e54:	4908      	ldr	r1, [pc, #32]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d019      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(PeriphClkInit->AdcDacClockSelection));
    assert_param(IS_RCC_ADCDAC_DIV(PeriphClkInit->AdcDacClockDivider));

    /* Configure the ADC12 and DAC1 interface clock source */
    __HAL_RCC_ADCDAC_CONFIG(PeriphClkInit->AdcDacClockSelection);
 8002e68:	4b03      	ldr	r3, [pc, #12]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002e6a:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8002e6e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	e002      	b.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8002e76:	bf00      	nop
 8002e78:	40030c00 	.word	0x40030c00
 8002e7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e7e:	4980      	ldr	r1, [pc, #512]	@ (8003080 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104

    /* Configure the ADC12 and DAC1 interface clock divider */
    __HAL_RCC_ADCDAC_DIV_CONFIG(PeriphClkInit->AdcDacClockDivider);
 8002e86:	4b7e      	ldr	r3, [pc, #504]	@ (8003080 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002e88:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8002e8c:	f423 4270 	bic.w	r2, r3, #61440	@ 0xf000
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e94:	497a      	ldr	r1, [pc, #488]	@ (8003080 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }

  /*-------------------------- DAC1SH clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1SH) == RCC_PERIPHCLK_DAC1SH)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d00a      	beq.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DAC1SHCLKSOURCE(PeriphClkInit->Dac1SampleHoldClockSelection));

    /* Configure the DAC1 sample and hold interface clock source */
    __HAL_RCC_DAC1SH_CONFIG(PeriphClkInit->Dac1SampleHoldClockSelection);
 8002ea8:	4b75      	ldr	r3, [pc, #468]	@ (8003080 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002eaa:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8002eae:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eb6:	4972      	ldr	r1, [pc, #456]	@ (8003080 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }

  /*-------------------------- OCTOSPI1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OCTOSPI1) == RCC_PERIPHCLK_OCTOSPI1)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00a      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OCTOSPICLKSOURCE(PeriphClkInit->Octospi1ClockSelection));

    /* Configure the OCTOSPI1 clock source */
    __HAL_RCC_OCTOSPI_CONFIG(PeriphClkInit->Octospi1ClockSelection);
 8002eca:	4b6d      	ldr	r3, [pc, #436]	@ (8003080 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002ecc:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8002ed0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ed8:	4969      	ldr	r1, [pc, #420]	@ (8003080 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d00a      	beq.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x356>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002eec:	4b64      	ldr	r3, [pc, #400]	@ (8003080 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002eee:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002ef2:	f023 0203 	bic.w	r2, r3, #3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002efa:	4961      	ldr	r1, [pc, #388]	@ (8003080 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00a      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x378>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f0e:	4b5c      	ldr	r3, [pc, #368]	@ (8003080 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002f10:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002f14:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002f1c:	4958      	ldr	r1, [pc, #352]	@ (8003080 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d00a      	beq.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x39a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM34CLKSOURCE(PeriphClkInit->Lptim34ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_LPTIM34_CONFIG(PeriphClkInit->Lptim34ClockSelection);
 8002f30:	4b53      	ldr	r3, [pc, #332]	@ (8003080 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002f32:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002f36:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f3e:	4950      	ldr	r1, [pc, #320]	@ (8003080 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d00a      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f52:	4b4b      	ldr	r3, [pc, #300]	@ (8003080 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002f54:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002f58:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f60:	4947      	ldr	r1, [pc, #284]	@ (8003080 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
    __HAL_RCC_SPI4_CONFIG(PeriphClkInit->Spi4ClockSelection);
  }
#endif /* SPI4 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	f280 8082 	bge.w	8003076 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Reset the Backup domain only if the RTC Clock source selection is different then axisting one */
    tmpreg1 = RCC->BDCR;
 8002f72:	4b43      	ldr	r3, [pc, #268]	@ (8003080 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002f74:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8002f78:	61fb      	str	r3, [r7, #28]
    tmpreg2 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f7a:	4b41      	ldr	r3, [pc, #260]	@ (8003080 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002f7c:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8002f80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f84:	617b      	str	r3, [r7, #20]

    /* Check if RTC clock source needs to be changed */
    if (tmpreg2 != PeriphClkInit->RTCClockSelection)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f8a:	697a      	ldr	r2, [r7, #20]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d072      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      FlagStatus       pwrclkchanged = RESET;
 8002f90:	2300      	movs	r3, #0
 8002f92:	76fb      	strb	r3, [r7, #27]

      /* Enable Power Clock */
      if (__HAL_RCC_PWR_IS_CLK_ENABLED() != 0x01u)
 8002f94:	4b3a      	ldr	r3, [pc, #232]	@ (8003080 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002f96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f9a:	f003 0304 	and.w	r3, r3, #4
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d110      	bne.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x418>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002fa2:	4b37      	ldr	r3, [pc, #220]	@ (8003080 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002fa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fa8:	4a35      	ldr	r2, [pc, #212]	@ (8003080 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002faa:	f043 0304 	orr.w	r3, r3, #4
 8002fae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002fb2:	4b33      	ldr	r3, [pc, #204]	@ (8003080 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002fb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fb8:	f003 0304 	and.w	r3, r3, #4
 8002fbc:	60fb      	str	r3, [r7, #12]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	76fb      	strb	r3, [r7, #27]
      }

      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002fc4:	4b2f      	ldr	r3, [pc, #188]	@ (8003084 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 8002fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fc8:	4a2e      	ldr	r2, [pc, #184]	@ (8003084 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 8002fca:	f043 0301 	orr.w	r3, r3, #1
 8002fce:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Check if a backup domain reset is required */
      if (tmpreg2 != RCC_RTCCLKSOURCE_DISABLE)
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00f      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002fd6:	4b2a      	ldr	r3, [pc, #168]	@ (8003080 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002fd8:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8002fdc:	4a28      	ldr	r2, [pc, #160]	@ (8003080 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002fde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fe2:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002fe6:	4b26      	ldr	r3, [pc, #152]	@ (8003080 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002fe8:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8002fec:	4a24      	ldr	r2, [pc, #144]	@ (8003080 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002fee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ff2:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
      }

      /* Apply new RTC clock source selection */
      tmpreg1 &= ~(RCC_BDCR_RTCSEL | RCC_BDCR_RTCEN);
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002ffc:	61fb      	str	r3, [r7, #28]

      /* Check is RTC disable is asked */
      if (PeriphClkInit->RTCClockSelection != RCC_RTCCLKSOURCE_DISABLE)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003002:	2b00      	cmp	r3, #0
 8003004:	d006      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x468>
      {
        tmpreg1 |= (RCC_BDCR_RTCEN | PeriphClkInit->RTCClockSelection);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	4313      	orrs	r3, r2
 800300e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003012:	61fb      	str	r3, [r7, #28]
      }
      RCC->BDCR = tmpreg1;
 8003014:	4a1a      	ldr	r2, [pc, #104]	@ (8003080 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110

      /* Check if an oscillator was enable */
      if ((tmpreg1 & RCC_BDCR_LSEON) != 0x00u)
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	2b00      	cmp	r3, #0
 8003024:	d01c      	beq.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x4b4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003026:	f7fe fc91 	bl	800194c <HAL_GetTick>
 800302a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0x00u)
 800302c:	e011      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800302e:	f7fe fc8d 	bl	800194c <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	f241 3288 	movw	r2, #5000	@ 0x1388
 800303c:	4293      	cmp	r3, r2
 800303e:	d908      	bls.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
          {
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0x00u)
 8003040:	4b0f      	ldr	r3, [pc, #60]	@ (8003080 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003042:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
            {
              return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e012      	b.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0x00u)
 8003052:	4b0b      	ldr	r3, [pc, #44]	@ (8003080 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003054:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8003058:	f003 0302 	and.w	r3, r3, #2
 800305c:	2b00      	cmp	r3, #0
 800305e:	d0e6      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x482>
            }
          }
        }
      }
      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003060:	7efb      	ldrb	r3, [r7, #27]
 8003062:	2b01      	cmp	r3, #1
 8003064:	d107      	bne.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003066:	4b06      	ldr	r3, [pc, #24]	@ (8003080 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003068:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800306c:	4a04      	ldr	r2, [pc, #16]	@ (8003080 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800306e:	f023 0304 	bic.w	r3, r3, #4
 8003072:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }
    }
  }

  return HAL_OK;
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	3720      	adds	r7, #32
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	40030c00 	.word	0x40030c00
 8003084:	40030800 	.word	0x40030800

08003088 <HAL_RCCEx_GetPeriphCLKFreq>:
  *
  *            (*) value not defined in all devices.
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0;
 8003090:	2300      	movs	r3, #0
 8003092:	60fb      	str	r3, [r7, #12]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800309a:	f000 8469 	beq.w	8003970 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80030a4:	f200 84a0 	bhi.w	80039e8 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80030ae:	f000 8420 	beq.w	80038f2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80030b8:	f200 8496 	bhi.w	80039e8 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80030c2:	f000 83d3 	beq.w	800386c <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80030cc:	f200 848c 	bhi.w	80039e8 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030d6:	f000 83b8 	beq.w	800384a <HAL_RCCEx_GetPeriphCLKFreq+0x7c2>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030e0:	f200 8482 	bhi.w	80039e8 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80030ea:	f000 8378 	beq.w	80037de <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80030f4:	f200 8478 	bhi.w	80039e8 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80030fe:	f000 835d 	beq.w	80037bc <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003108:	f200 846e 	bhi.w	80039e8 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003112:	f000 8326 	beq.w	8003762 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800311c:	f200 8464 	bhi.w	80039e8 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003126:	f000 82db 	beq.w	80036e0 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003130:	f200 845a 	bhi.w	80039e8 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800313a:	f000 82b9 	beq.w	80036b0 <HAL_RCCEx_GetPeriphCLKFreq+0x628>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003144:	f200 8450 	bhi.w	80039e8 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800314e:	f000 828c 	beq.w	800366a <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003158:	f200 8446 	bhi.w	80039e8 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003162:	f000 8271 	beq.w	8003648 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800316c:	f200 843c 	bhi.w	80039e8 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003176:	f000 8246 	beq.w	8003606 <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003180:	f200 8432 	bhi.w	80039e8 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800318a:	f000 8228 	beq.w	80035de <HAL_RCCEx_GetPeriphCLKFreq+0x556>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003194:	f200 8428 	bhi.w	80039e8 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800319e:	f000 81ef 	beq.w	8003580 <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031a8:	f200 841e 	bhi.w	80039e8 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031b2:	f000 81ce 	beq.w	8003552 <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031bc:	f200 8414 	bhi.w	80039e8 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80031c6:	f000 8189 	beq.w	80034dc <HAL_RCCEx_GetPeriphCLKFreq+0x454>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80031d0:	f200 840a 	bhi.w	80039e8 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031da:	f000 816e 	beq.w	80034ba <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031e4:	f200 8400 	bhi.w	80039e8 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031ee:	f000 8121 	beq.w	8003434 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031f8:	f200 83f6 	bhi.w	80039e8 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003202:	f000 8106 	beq.w	8003412 <HAL_RCCEx_GetPeriphCLKFreq+0x38a>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800320c:	f200 83ec 	bhi.w	80039e8 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2b80      	cmp	r3, #128	@ 0x80
 8003214:	f000 80ec 	beq.w	80033f0 <HAL_RCCEx_GetPeriphCLKFreq+0x368>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2b80      	cmp	r3, #128	@ 0x80
 800321c:	f200 83e4 	bhi.w	80039e8 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2b20      	cmp	r3, #32
 8003224:	d84c      	bhi.n	80032c0 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2b00      	cmp	r3, #0
 800322a:	f000 83dd 	beq.w	80039e8 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	3b01      	subs	r3, #1
 8003232:	2b1f      	cmp	r3, #31
 8003234:	f200 83d8 	bhi.w	80039e8 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8003238:	a201      	add	r2, pc, #4	@ (adr r2, 8003240 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 800323a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800323e:	bf00      	nop
 8003240:	080032cb 	.word	0x080032cb
 8003244:	080032fb 	.word	0x080032fb
 8003248:	080039e9 	.word	0x080039e9
 800324c:	0800332b 	.word	0x0800332b
 8003250:	080039e9 	.word	0x080039e9
 8003254:	080039e9 	.word	0x080039e9
 8003258:	080039e9 	.word	0x080039e9
 800325c:	0800335b 	.word	0x0800335b
 8003260:	080039e9 	.word	0x080039e9
 8003264:	080039e9 	.word	0x080039e9
 8003268:	080039e9 	.word	0x080039e9
 800326c:	080039e9 	.word	0x080039e9
 8003270:	080039e9 	.word	0x080039e9
 8003274:	080039e9 	.word	0x080039e9
 8003278:	080039e9 	.word	0x080039e9
 800327c:	0800338b 	.word	0x0800338b
 8003280:	080039e9 	.word	0x080039e9
 8003284:	080039e9 	.word	0x080039e9
 8003288:	080039e9 	.word	0x080039e9
 800328c:	080039e9 	.word	0x080039e9
 8003290:	080039e9 	.word	0x080039e9
 8003294:	080039e9 	.word	0x080039e9
 8003298:	080039e9 	.word	0x080039e9
 800329c:	080039e9 	.word	0x080039e9
 80032a0:	080039e9 	.word	0x080039e9
 80032a4:	080039e9 	.word	0x080039e9
 80032a8:	080039e9 	.word	0x080039e9
 80032ac:	080039e9 	.word	0x080039e9
 80032b0:	080039e9 	.word	0x080039e9
 80032b4:	080039e9 	.word	0x080039e9
 80032b8:	080039e9 	.word	0x080039e9
 80032bc:	080033ad 	.word	0x080033ad
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2b40      	cmp	r3, #64	@ 0x40
 80032c4:	f000 8083 	beq.w	80033ce <HAL_RCCEx_GetPeriphCLKFreq+0x346>
      break;

    /* Do nothing for Timer input capture as clock source is selected in timer block */
    case RCC_PERIPHCLK_TIMIC:
    default:
      break;
 80032c8:	e38e      	b.n	80039e8 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
      srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80032ca:	4ba9      	ldr	r3, [pc, #676]	@ (8003570 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80032cc:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80032d0:	f003 0301 	and.w	r3, r3, #1
 80032d4:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d103      	bne.n	80032e4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
        frequency = HAL_RCC_GetPCLK2Freq();
 80032dc:	f7ff fc08 	bl	8002af0 <HAL_RCC_GetPCLK2Freq>
 80032e0:	60f8      	str	r0, [r7, #12]
      break;
 80032e2:	e383      	b.n	80039ec <HAL_RCCEx_GetPeriphCLKFreq+0x964>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80032e4:	4ba2      	ldr	r3, [pc, #648]	@ (8003570 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80032ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032f0:	f040 837c 	bne.w	80039ec <HAL_RCCEx_GetPeriphCLKFreq+0x964>
          frequency = HSI_VALUE;
 80032f4:	4b9f      	ldr	r3, [pc, #636]	@ (8003574 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80032f6:	60fb      	str	r3, [r7, #12]
      break;
 80032f8:	e378      	b.n	80039ec <HAL_RCCEx_GetPeriphCLKFreq+0x964>
      srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80032fa:	4b9d      	ldr	r3, [pc, #628]	@ (8003570 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80032fc:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003300:	f003 0304 	and.w	r3, r3, #4
 8003304:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d103      	bne.n	8003314 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
        frequency = HAL_RCC_GetPCLK1Freq();
 800330c:	f7ff fbdc 	bl	8002ac8 <HAL_RCC_GetPCLK1Freq>
 8003310:	60f8      	str	r0, [r7, #12]
      break;
 8003312:	e36d      	b.n	80039f0 <HAL_RCCEx_GetPeriphCLKFreq+0x968>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003314:	4b96      	ldr	r3, [pc, #600]	@ (8003570 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800331c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003320:	f040 8366 	bne.w	80039f0 <HAL_RCCEx_GetPeriphCLKFreq+0x968>
          frequency = HSI_VALUE;
 8003324:	4b93      	ldr	r3, [pc, #588]	@ (8003574 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8003326:	60fb      	str	r3, [r7, #12]
      break;
 8003328:	e362      	b.n	80039f0 <HAL_RCCEx_GetPeriphCLKFreq+0x968>
      srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800332a:	4b91      	ldr	r3, [pc, #580]	@ (8003570 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800332c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003330:	f003 0310 	and.w	r3, r3, #16
 8003334:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d103      	bne.n	8003344 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
        frequency = HAL_RCC_GetPCLK1Freq();
 800333c:	f7ff fbc4 	bl	8002ac8 <HAL_RCC_GetPCLK1Freq>
 8003340:	60f8      	str	r0, [r7, #12]
      break;
 8003342:	e357      	b.n	80039f4 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003344:	4b8a      	ldr	r3, [pc, #552]	@ (8003570 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800334c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003350:	f040 8350 	bne.w	80039f4 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
          frequency = HSI_VALUE;
 8003354:	4b87      	ldr	r3, [pc, #540]	@ (8003574 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8003356:	60fb      	str	r3, [r7, #12]
      break;
 8003358:	e34c      	b.n	80039f4 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
      srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800335a:	4b85      	ldr	r3, [pc, #532]	@ (8003570 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800335c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003360:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003364:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d103      	bne.n	8003374 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>
        frequency = HAL_RCC_GetPCLK1Freq();
 800336c:	f7ff fbac 	bl	8002ac8 <HAL_RCC_GetPCLK1Freq>
 8003370:	60f8      	str	r0, [r7, #12]
      break;
 8003372:	e341      	b.n	80039f8 <HAL_RCCEx_GetPeriphCLKFreq+0x970>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003374:	4b7e      	ldr	r3, [pc, #504]	@ (8003570 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800337c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003380:	f040 833a 	bne.w	80039f8 <HAL_RCCEx_GetPeriphCLKFreq+0x970>
          frequency = HSI_VALUE;
 8003384:	4b7b      	ldr	r3, [pc, #492]	@ (8003574 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8003386:	60fb      	str	r3, [r7, #12]
      break;
 8003388:	e336      	b.n	80039f8 <HAL_RCCEx_GetPeriphCLKFreq+0x970>
      srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 800338a:	4b79      	ldr	r3, [pc, #484]	@ (8003570 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800338c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003390:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003394:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d103      	bne.n	80033a4 <HAL_RCCEx_GetPeriphCLKFreq+0x31c>
        frequency = HAL_RCC_GetPCLK1Freq();
 800339c:	f7ff fb94 	bl	8002ac8 <HAL_RCC_GetPCLK1Freq>
 80033a0:	60f8      	str	r0, [r7, #12]
      break;
 80033a2:	e340      	b.n	8003a26 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 80033a4:	f7ff fbcc 	bl	8002b40 <HAL_RCC_GetMSIKFreq>
 80033a8:	60f8      	str	r0, [r7, #12]
      break;
 80033aa:	e33c      	b.n	8003a26 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80033ac:	4b70      	ldr	r3, [pc, #448]	@ (8003570 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80033ae:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80033b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033b6:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d103      	bne.n	80033c6 <HAL_RCCEx_GetPeriphCLKFreq+0x33e>
        frequency = HAL_RCC_GetPCLK1Freq();
 80033be:	f7ff fb83 	bl	8002ac8 <HAL_RCC_GetPCLK1Freq>
 80033c2:	60f8      	str	r0, [r7, #12]
      break;
 80033c4:	e32f      	b.n	8003a26 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 80033c6:	f7ff fbbb 	bl	8002b40 <HAL_RCC_GetMSIKFreq>
 80033ca:	60f8      	str	r0, [r7, #12]
      break;
 80033cc:	e32b      	b.n	8003a26 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80033ce:	4b68      	ldr	r3, [pc, #416]	@ (8003570 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80033d0:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80033d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033d8:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d103      	bne.n	80033e8 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        frequency = HAL_RCC_GetPCLK1Freq();
 80033e0:	f7ff fb72 	bl	8002ac8 <HAL_RCC_GetPCLK1Freq>
 80033e4:	60f8      	str	r0, [r7, #12]
      break;
 80033e6:	e31e      	b.n	8003a26 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 80033e8:	f7ff fbaa 	bl	8002b40 <HAL_RCC_GetMSIKFreq>
 80033ec:	60f8      	str	r0, [r7, #12]
      break;
 80033ee:	e31a      	b.n	8003a26 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 80033f0:	4b5f      	ldr	r3, [pc, #380]	@ (8003570 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80033f2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80033f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033fa:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_I3C2CLKSOURCE_PCLK2)
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d103      	bne.n	800340a <HAL_RCCEx_GetPeriphCLKFreq+0x382>
        frequency = HAL_RCC_GetPCLK2Freq();
 8003402:	f7ff fb75 	bl	8002af0 <HAL_RCC_GetPCLK2Freq>
 8003406:	60f8      	str	r0, [r7, #12]
      break;
 8003408:	e30d      	b.n	8003a26 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 800340a:	f7ff fb99 	bl	8002b40 <HAL_RCC_GetMSIKFreq>
 800340e:	60f8      	str	r0, [r7, #12]
      break;
 8003410:	e309      	b.n	8003a26 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8003412:	4b57      	ldr	r3, [pc, #348]	@ (8003570 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8003414:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003418:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800341c:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_SPI2CLKSOURCE_PCLK1)
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d103      	bne.n	800342c <HAL_RCCEx_GetPeriphCLKFreq+0x3a4>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003424:	f7ff fb50 	bl	8002ac8 <HAL_RCC_GetPCLK1Freq>
 8003428:	60f8      	str	r0, [r7, #12]
      break;
 800342a:	e2fc      	b.n	8003a26 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 800342c:	f7ff fb88 	bl	8002b40 <HAL_RCC_GetMSIKFreq>
 8003430:	60f8      	str	r0, [r7, #12]
      break;
 8003432:	e2f8      	b.n	8003a26 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8003434:	4b4e      	ldr	r3, [pc, #312]	@ (8003570 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8003436:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800343a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800343e:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d103      	bne.n	800344e <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003446:	f7ff fb3f 	bl	8002ac8 <HAL_RCC_GetPCLK1Freq>
 800344a:	60f8      	str	r0, [r7, #12]
      break;
 800344c:	e2d6      	b.n	80039fc <HAL_RCCEx_GetPeriphCLKFreq+0x974>
      else if (srcclk == RCC_LPTIM2CLKSOURCE_LSI)
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003454:	d116      	bne.n	8003484 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003456:	4b46      	ldr	r3, [pc, #280]	@ (8003570 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8003458:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800345c:	f003 0302 	and.w	r3, r3, #2
 8003460:	2b02      	cmp	r3, #2
 8003462:	f040 82cb 	bne.w	80039fc <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = LSI_VALUE;
 8003466:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800346a:	60fb      	str	r3, [r7, #12]
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 800346c:	4b40      	ldr	r3, [pc, #256]	@ (8003570 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800346e:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8003472:	f003 0304 	and.w	r3, r3, #4
 8003476:	2b04      	cmp	r3, #4
 8003478:	f040 82c0 	bne.w	80039fc <HAL_RCCEx_GetPeriphCLKFreq+0x974>
            frequency /= 128U;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	09db      	lsrs	r3, r3, #7
 8003480:	60fb      	str	r3, [r7, #12]
      break;
 8003482:	e2bb      	b.n	80039fc <HAL_RCCEx_GetPeriphCLKFreq+0x974>
      else if (srcclk == RCC_LPTIM2CLKSOURCE_HSI)
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800348a:	d10a      	bne.n	80034a2 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800348c:	4b38      	ldr	r3, [pc, #224]	@ (8003570 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003494:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003498:	f040 82b0 	bne.w	80039fc <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = HSI_VALUE;
 800349c:	4b35      	ldr	r3, [pc, #212]	@ (8003574 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800349e:	60fb      	str	r3, [r7, #12]
      break;
 80034a0:	e2ac      	b.n	80039fc <HAL_RCCEx_GetPeriphCLKFreq+0x974>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80034a2:	4b33      	ldr	r3, [pc, #204]	@ (8003570 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80034a4:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80034a8:	f003 0302 	and.w	r3, r3, #2
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	f040 82a5 	bne.w	80039fc <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = LSE_VALUE;
 80034b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034b6:	60fb      	str	r3, [r7, #12]
      break;
 80034b8:	e2a0      	b.n	80039fc <HAL_RCCEx_GetPeriphCLKFreq+0x974>
      srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80034ba:	4b2d      	ldr	r3, [pc, #180]	@ (8003570 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80034bc:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80034c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034c4:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_SPI1CLKSOURCE_PCLK2)
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d103      	bne.n	80034d4 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
        frequency = HAL_RCC_GetPCLK2Freq();
 80034cc:	f7ff fb10 	bl	8002af0 <HAL_RCC_GetPCLK2Freq>
 80034d0:	60f8      	str	r0, [r7, #12]
      break;
 80034d2:	e2a8      	b.n	8003a26 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 80034d4:	f7ff fb34 	bl	8002b40 <HAL_RCC_GetMSIKFreq>
 80034d8:	60f8      	str	r0, [r7, #12]
      break;
 80034da:	e2a4      	b.n	8003a26 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_SYSTICK_SOURCE();
 80034dc:	4b24      	ldr	r3, [pc, #144]	@ (8003570 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80034de:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80034e2:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80034e6:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_SYSTICKCLKSOURCE_HCLK_DIV8)
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d105      	bne.n	80034fa <HAL_RCCEx_GetPeriphCLKFreq+0x472>
        frequency = (HAL_RCC_GetHCLKFreq() / 8u);
 80034ee:	f7ff fad1 	bl	8002a94 <HAL_RCC_GetHCLKFreq>
 80034f2:	4603      	mov	r3, r0
 80034f4:	08db      	lsrs	r3, r3, #3
 80034f6:	60fb      	str	r3, [r7, #12]
      break;
 80034f8:	e282      	b.n	8003a00 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
      else if (srcclk == RCC_SYSTICKCLKSOURCE_LSE)
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003500:	d10b      	bne.n	800351a <HAL_RCCEx_GetPeriphCLKFreq+0x492>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003502:	4b1b      	ldr	r3, [pc, #108]	@ (8003570 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8003504:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	2b02      	cmp	r3, #2
 800350e:	f040 8277 	bne.w	8003a00 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = LSE_VALUE;
 8003512:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003516:	60fb      	str	r3, [r7, #12]
      break;
 8003518:	e272      	b.n	8003a00 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
      else if (srcclk == RCC_SYSTICKCLKSOURCE_LSI)
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003520:	f040 826e 	bne.w	8003a00 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003524:	4b12      	ldr	r3, [pc, #72]	@ (8003570 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8003526:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	2b02      	cmp	r3, #2
 8003530:	f040 8266 	bne.w	8003a00 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = LSI_VALUE;
 8003534:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003538:	60fb      	str	r3, [r7, #12]
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 800353a:	4b0d      	ldr	r3, [pc, #52]	@ (8003570 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800353c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8003540:	f003 0304 	and.w	r3, r3, #4
 8003544:	2b04      	cmp	r3, #4
 8003546:	f040 825b 	bne.w	8003a00 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
            frequency /= 128u;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	09db      	lsrs	r3, r3, #7
 800354e:	60fb      	str	r3, [r7, #12]
      break;
 8003550:	e256      	b.n	8003a00 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
      srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8003552:	4b07      	ldr	r3, [pc, #28]	@ (8003570 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8003554:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003558:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800355c:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_FDCANCLKSOURCE_MSIK)
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003564:	d108      	bne.n	8003578 <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>
        frequency = HAL_RCC_GetMSIKFreq();
 8003566:	f7ff faeb 	bl	8002b40 <HAL_RCC_GetMSIKFreq>
 800356a:	60f8      	str	r0, [r7, #12]
      break;
 800356c:	e25b      	b.n	8003a26 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 800356e:	bf00      	nop
 8003570:	40030c00 	.word	0x40030c00
 8003574:	00f42400 	.word	0x00f42400
        frequency = HAL_RCC_GetSysClockFreq();
 8003578:	f7ff fa44 	bl	8002a04 <HAL_RCC_GetSysClockFreq>
 800357c:	60f8      	str	r0, [r7, #12]
      break;
 800357e:	e252      	b.n	8003a26 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8003580:	4ba4      	ldr	r3, [pc, #656]	@ (8003814 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8003582:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003586:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800358a:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_ICLKCLKSOURCE_HSI48)
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d10a      	bne.n	80035a8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8003592:	4ba0      	ldr	r3, [pc, #640]	@ (8003814 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800359a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800359e:	f040 8231 	bne.w	8003a04 <HAL_RCCEx_GetPeriphCLKFreq+0x97c>
          frequency = HSI48_VALUE;
 80035a2:	4b9d      	ldr	r3, [pc, #628]	@ (8003818 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 80035a4:	60fb      	str	r3, [r7, #12]
      break;
 80035a6:	e22d      	b.n	8003a04 <HAL_RCCEx_GetPeriphCLKFreq+0x97c>
      else if (srcclk == RCC_ICLKCLKSOURCE_MSIK)
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80035ae:	d103      	bne.n	80035b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>
        frequency = HAL_RCC_GetMSIKFreq();
 80035b0:	f7ff fac6 	bl	8002b40 <HAL_RCC_GetMSIKFreq>
 80035b4:	60f8      	str	r0, [r7, #12]
      break;
 80035b6:	e225      	b.n	8003a04 <HAL_RCCEx_GetPeriphCLKFreq+0x97c>
      else if (srcclk == RCC_ICLKCLKSOURCE_HSE)
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80035be:	d10a      	bne.n	80035d6 <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80035c0:	4b94      	ldr	r3, [pc, #592]	@ (8003814 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80035cc:	f040 821a 	bne.w	8003a04 <HAL_RCCEx_GetPeriphCLKFreq+0x97c>
          frequency = HSE_VALUE;
 80035d0:	4b92      	ldr	r3, [pc, #584]	@ (800381c <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 80035d2:	60fb      	str	r3, [r7, #12]
      break;
 80035d4:	e216      	b.n	8003a04 <HAL_RCCEx_GetPeriphCLKFreq+0x97c>
        frequency = HAL_RCC_GetSysClockFreq();
 80035d6:	f7ff fa15 	bl	8002a04 <HAL_RCC_GetSysClockFreq>
 80035da:	60f8      	str	r0, [r7, #12]
      break;
 80035dc:	e212      	b.n	8003a04 <HAL_RCCEx_GetPeriphCLKFreq+0x97c>
      frequency = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ICLK);
 80035de:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80035e2:	f7ff fd51 	bl	8003088 <HAL_RCCEx_GetPeriphCLKFreq>
 80035e6:	60f8      	str	r0, [r7, #12]
      srcclk = __HAL_RCC_GET_USB1_SOURCE();
 80035e8:	4b8a      	ldr	r3, [pc, #552]	@ (8003814 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80035ea:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80035ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035f2:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_USB1CLKSOURCE_ICLK_DIV2)
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80035fa:	f040 8205 	bne.w	8003a08 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
        frequency = (frequency >> 1u);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	085b      	lsrs	r3, r3, #1
 8003602:	60fb      	str	r3, [r7, #12]
      break;
 8003604:	e200      	b.n	8003a08 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8003606:	4b83      	ldr	r3, [pc, #524]	@ (8003814 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8003608:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800360c:	f003 0303 	and.w	r3, r3, #3
 8003610:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_ADF1CLKSOURCE_HCLK)
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d103      	bne.n	8003620 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
        frequency = HAL_RCC_GetHCLKFreq();
 8003618:	f7ff fa3c 	bl	8002a94 <HAL_RCC_GetHCLKFreq>
 800361c:	60f8      	str	r0, [r7, #12]
      break;
 800361e:	e202      	b.n	8003a26 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      else if (srcclk == RCC_ADF1CLKSOURCE_PIN)
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d103      	bne.n	800362e <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8003626:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800362a:	60fb      	str	r3, [r7, #12]
      break;
 800362c:	e1fb      	b.n	8003a26 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      else if (srcclk == RCC_ADF1CLKSOURCE_MSIK)
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	2b02      	cmp	r3, #2
 8003632:	d103      	bne.n	800363c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
        frequency = HAL_RCC_GetMSIKFreq();
 8003634:	f7ff fa84 	bl	8002b40 <HAL_RCC_GetMSIKFreq>
 8003638:	60f8      	str	r0, [r7, #12]
      break;
 800363a:	e1f4      	b.n	8003a26 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800363c:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8003640:	f7ff fd22 	bl	8003088 <HAL_RCCEx_GetPeriphCLKFreq>
 8003644:	60f8      	str	r0, [r7, #12]
      break;
 8003646:	e1ee      	b.n	8003a26 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8003648:	4b72      	ldr	r3, [pc, #456]	@ (8003814 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800364a:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800364e:	f003 0308 	and.w	r3, r3, #8
 8003652:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_SPI3CLKSOURCE_PCLK1)
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d103      	bne.n	8003662 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
        frequency = HAL_RCC_GetPCLK1Freq();
 800365a:	f7ff fa35 	bl	8002ac8 <HAL_RCC_GetPCLK1Freq>
 800365e:	60f8      	str	r0, [r7, #12]
      break;
 8003660:	e1e1      	b.n	8003a26 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 8003662:	f7ff fa6d 	bl	8002b40 <HAL_RCC_GetMSIKFreq>
 8003666:	60f8      	str	r0, [r7, #12]
      break;
 8003668:	e1dd      	b.n	8003a26 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800366a:	4b6a      	ldr	r3, [pc, #424]	@ (8003814 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800366c:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8003670:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8003674:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_SAI1CLKSOURCE_MSIK)
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d103      	bne.n	8003684 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
        frequency = HAL_RCC_GetMSIKFreq();
 800367c:	f7ff fa60 	bl	8002b40 <HAL_RCC_GetMSIKFreq>
 8003680:	60f8      	str	r0, [r7, #12]
      break;
 8003682:	e1c3      	b.n	8003a0c <HAL_RCCEx_GetPeriphCLKFreq+0x984>
      else if (srcclk == RCC_SAI1CLKSOURCE_PIN)
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	2b20      	cmp	r3, #32
 8003688:	d103      	bne.n	8003692 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800368a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800368e:	60fb      	str	r3, [r7, #12]
      break;
 8003690:	e1bc      	b.n	8003a0c <HAL_RCCEx_GetPeriphCLKFreq+0x984>
      else if (srcclk == RCC_SAI1CLKSOURCE_HSE)
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	2b40      	cmp	r3, #64	@ 0x40
 8003696:	f040 81b9 	bne.w	8003a0c <HAL_RCCEx_GetPeriphCLKFreq+0x984>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800369a:	4b5e      	ldr	r3, [pc, #376]	@ (8003814 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80036a6:	f040 81b1 	bne.w	8003a0c <HAL_RCCEx_GetPeriphCLKFreq+0x984>
          frequency = HSE_VALUE;
 80036aa:	4b5c      	ldr	r3, [pc, #368]	@ (800381c <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 80036ac:	60fb      	str	r3, [r7, #12]
      break;
 80036ae:	e1ad      	b.n	8003a0c <HAL_RCCEx_GetPeriphCLKFreq+0x984>
      srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80036b0:	4b58      	ldr	r3, [pc, #352]	@ (8003814 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80036b2:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80036b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036ba:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_RNGCLKSOURCE_HSI48)
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d10a      	bne.n	80036d8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80036c2:	4b54      	ldr	r3, [pc, #336]	@ (8003814 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80036ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036ce:	f040 819f 	bne.w	8003a10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = HSI48_VALUE;
 80036d2:	4b51      	ldr	r3, [pc, #324]	@ (8003818 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 80036d4:	60fb      	str	r3, [r7, #12]
      break;
 80036d6:	e19b      	b.n	8003a10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        frequency = HAL_RCC_GetMSIKFreq();
 80036d8:	f7ff fa32 	bl	8002b40 <HAL_RCC_GetMSIKFreq>
 80036dc:	60f8      	str	r0, [r7, #12]
      break;
 80036de:	e197      	b.n	8003a10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
      srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80036e0:	4b4c      	ldr	r3, [pc, #304]	@ (8003814 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80036e2:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80036e6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80036ea:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d103      	bne.n	80036fa <HAL_RCCEx_GetPeriphCLKFreq+0x672>
        frequency = HAL_RCC_GetHCLKFreq();
 80036f2:	f7ff f9cf 	bl	8002a94 <HAL_RCC_GetHCLKFreq>
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	e014      	b.n	8003724 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
      else if (srcclk == RCC_ADCDACCLKSOURCE_HSE)
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003700:	d109      	bne.n	8003716 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003702:	4b44      	ldr	r3, [pc, #272]	@ (8003814 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800370a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800370e:	d109      	bne.n	8003724 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
          frequency = HSE_VALUE;
 8003710:	4b42      	ldr	r3, [pc, #264]	@ (800381c <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8003712:	60fb      	str	r3, [r7, #12]
 8003714:	e006      	b.n	8003724 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
      else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800371c:	d102      	bne.n	8003724 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
        frequency = HAL_RCC_GetMSIKFreq();
 800371e:	f7ff fa0f 	bl	8002b40 <HAL_RCC_GetMSIKFreq>
 8003722:	60f8      	str	r0, [r7, #12]
      srcclk = __HAL_RCC_GET_ADCDAC_DIV();
 8003724:	4b3b      	ldr	r3, [pc, #236]	@ (8003814 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8003726:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800372a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800372e:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_ADCDACCLK_DIV1)
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d102      	bne.n	800373c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
        srcclk = 0u;
 8003736:	2300      	movs	r3, #0
 8003738:	60bb      	str	r3, [r7, #8]
 800373a:	e00c      	b.n	8003756 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
      else if (srcclk < RCC_CCIPR2_ADCDACPRE_3)
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003742:	d202      	bcs.n	800374a <HAL_RCCEx_GetPeriphCLKFreq+0x6c2>
        srcclk = 1u;
 8003744:	2301      	movs	r3, #1
 8003746:	60bb      	str	r3, [r7, #8]
 8003748:	e005      	b.n	8003756 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        srcclk = ((srcclk & ~RCC_CCIPR2_ADCDACPRE_3) >> RCC_CCIPR2_ADCDACPRE_Pos) + 2u;
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	0b1a      	lsrs	r2, r3, #12
 800374e:	4b34      	ldr	r3, [pc, #208]	@ (8003820 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003750:	4013      	ands	r3, r2
 8003752:	3302      	adds	r3, #2
 8003754:	60bb      	str	r3, [r7, #8]
      frequency = (frequency >> srcclk);
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	fa22 f303 	lsr.w	r3, r2, r3
 800375e:	60fb      	str	r3, [r7, #12]
      break;
 8003760:	e161      	b.n	8003a26 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_DAC1SH_SOURCE();
 8003762:	4b2c      	ldr	r3, [pc, #176]	@ (8003814 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8003764:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8003768:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800376c:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_DAC1SHCLKSOURCE_LSI)
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003774:	d116      	bne.n	80037a4 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003776:	4b27      	ldr	r3, [pc, #156]	@ (8003814 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8003778:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800377c:	f003 0302 	and.w	r3, r3, #2
 8003780:	2b02      	cmp	r3, #2
 8003782:	f040 8147 	bne.w	8003a14 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
          frequency = LSI_VALUE;
 8003786:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800378a:	60fb      	str	r3, [r7, #12]
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 800378c:	4b21      	ldr	r3, [pc, #132]	@ (8003814 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800378e:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8003792:	f003 0304 	and.w	r3, r3, #4
 8003796:	2b04      	cmp	r3, #4
 8003798:	f040 813c 	bne.w	8003a14 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
            frequency /= 128u;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	09db      	lsrs	r3, r3, #7
 80037a0:	60fb      	str	r3, [r7, #12]
      break;
 80037a2:	e137      	b.n	8003a14 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80037a4:	4b1b      	ldr	r3, [pc, #108]	@ (8003814 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80037a6:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80037aa:	f003 0302 	and.w	r3, r3, #2
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	f040 8130 	bne.w	8003a14 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
          frequency = LSE_VALUE;
 80037b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037b8:	60fb      	str	r3, [r7, #12]
      break;
 80037ba:	e12b      	b.n	8003a14 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
      srcclk = __HAL_RCC_GET_OCTOSPI_SOURCE();
 80037bc:	4b15      	ldr	r3, [pc, #84]	@ (8003814 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80037be:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80037c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037c6:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_OCTOSPICLKSOURCE_SYSCLK)
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d103      	bne.n	80037d6 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
        frequency = HAL_RCC_GetSysClockFreq();
 80037ce:	f7ff f919 	bl	8002a04 <HAL_RCC_GetSysClockFreq>
 80037d2:	60f8      	str	r0, [r7, #12]
      break;
 80037d4:	e127      	b.n	8003a26 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 80037d6:	f7ff f9b3 	bl	8002b40 <HAL_RCC_GetMSIKFreq>
 80037da:	60f8      	str	r0, [r7, #12]
      break;
 80037dc:	e123      	b.n	8003a26 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80037de:	4b0d      	ldr	r3, [pc, #52]	@ (8003814 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80037e0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80037e4:	f003 0303 	and.w	r3, r3, #3
 80037e8:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d103      	bne.n	80037f8 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
        frequency = HAL_RCC_GetPCLK3Freq();
 80037f0:	f7ff f992 	bl	8002b18 <HAL_RCC_GetPCLK3Freq>
 80037f4:	60f8      	str	r0, [r7, #12]
      break;
 80037f6:	e10f      	b.n	8003a18 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
      else if (srcclk == RCC_LPUART1CLKSOURCE_HSI)
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d112      	bne.n	8003824 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80037fe:	4b05      	ldr	r3, [pc, #20]	@ (8003814 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003806:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800380a:	f040 8105 	bne.w	8003a18 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
          frequency = HSI_VALUE;
 800380e:	4b03      	ldr	r3, [pc, #12]	@ (800381c <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8003810:	60fb      	str	r3, [r7, #12]
      break;
 8003812:	e101      	b.n	8003a18 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
 8003814:	40030c00 	.word	0x40030c00
 8003818:	02dc6c00 	.word	0x02dc6c00
 800381c:	00f42400 	.word	0x00f42400
 8003820:	000ffff7 	.word	0x000ffff7
      else if (srcclk == RCC_LPUART1CLKSOURCE_LSE)
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	2b02      	cmp	r3, #2
 8003828:	d10b      	bne.n	8003842 <HAL_RCCEx_GetPeriphCLKFreq+0x7ba>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800382a:	4b81      	ldr	r3, [pc, #516]	@ (8003a30 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800382c:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8003830:	f003 0302 	and.w	r3, r3, #2
 8003834:	2b02      	cmp	r3, #2
 8003836:	f040 80ef 	bne.w	8003a18 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
          frequency = LSE_VALUE;
 800383a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800383e:	60fb      	str	r3, [r7, #12]
      break;
 8003840:	e0ea      	b.n	8003a18 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
        frequency = HAL_RCC_GetMSIKFreq();
 8003842:	f7ff f97d 	bl	8002b40 <HAL_RCC_GetMSIKFreq>
 8003846:	60f8      	str	r0, [r7, #12]
      break;
 8003848:	e0e6      	b.n	8003a18 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
      srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800384a:	4b79      	ldr	r3, [pc, #484]	@ (8003a30 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800384c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003850:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003854:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d103      	bne.n	8003864 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
        frequency = HAL_RCC_GetPCLK3Freq();
 800385c:	f7ff f95c 	bl	8002b18 <HAL_RCC_GetPCLK3Freq>
 8003860:	60f8      	str	r0, [r7, #12]
      break;
 8003862:	e0e0      	b.n	8003a26 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 8003864:	f7ff f96c 	bl	8002b40 <HAL_RCC_GetMSIKFreq>
 8003868:	60f8      	str	r0, [r7, #12]
      break;
 800386a:	e0dc      	b.n	8003a26 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800386c:	4b70      	ldr	r3, [pc, #448]	@ (8003a30 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800386e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003872:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003876:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d103      	bne.n	8003886 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
        frequency = HAL_RCC_GetMSIKFreq();
 800387e:	f7ff f95f 	bl	8002b40 <HAL_RCC_GetMSIKFreq>
 8003882:	60f8      	str	r0, [r7, #12]
      break;
 8003884:	e0ca      	b.n	8003a1c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
      else if (srcclk == RCC_LPTIM34CLKSOURCE_LSI)
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800388c:	d116      	bne.n	80038bc <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800388e:	4b68      	ldr	r3, [pc, #416]	@ (8003a30 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8003890:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8003894:	f003 0302 	and.w	r3, r3, #2
 8003898:	2b02      	cmp	r3, #2
 800389a:	f040 80bf 	bne.w	8003a1c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
          frequency = LSI_VALUE;
 800389e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80038a2:	60fb      	str	r3, [r7, #12]
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 80038a4:	4b62      	ldr	r3, [pc, #392]	@ (8003a30 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 80038a6:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80038aa:	f003 0304 	and.w	r3, r3, #4
 80038ae:	2b04      	cmp	r3, #4
 80038b0:	f040 80b4 	bne.w	8003a1c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
            frequency /= 128u;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	09db      	lsrs	r3, r3, #7
 80038b8:	60fb      	str	r3, [r7, #12]
      break;
 80038ba:	e0af      	b.n	8003a1c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
      else if (srcclk == RCC_LPTIM34CLKSOURCE_HSI)
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038c2:	d10a      	bne.n	80038da <HAL_RCCEx_GetPeriphCLKFreq+0x852>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80038c4:	4b5a      	ldr	r3, [pc, #360]	@ (8003a30 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038d0:	f040 80a4 	bne.w	8003a1c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
          frequency = HSI_VALUE;
 80038d4:	4b57      	ldr	r3, [pc, #348]	@ (8003a34 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 80038d6:	60fb      	str	r3, [r7, #12]
      break;
 80038d8:	e0a0      	b.n	8003a1c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80038da:	4b55      	ldr	r3, [pc, #340]	@ (8003a30 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 80038dc:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80038e0:	f003 0302 	and.w	r3, r3, #2
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	f040 8099 	bne.w	8003a1c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
          frequency = LSE_VALUE;
 80038ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80038ee:	60fb      	str	r3, [r7, #12]
      break;
 80038f0:	e094      	b.n	8003a1c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
      srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80038f2:	4b4f      	ldr	r3, [pc, #316]	@ (8003a30 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 80038f4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80038f8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80038fc:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d103      	bne.n	800390c <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        frequency = HAL_RCC_GetMSIKFreq();
 8003904:	f7ff f91c 	bl	8002b40 <HAL_RCC_GetMSIKFreq>
 8003908:	60f8      	str	r0, [r7, #12]
      break;
 800390a:	e089      	b.n	8003a20 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
      else if (srcclk == RCC_LPTIM1CLKSOURCE_LSI)
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003912:	d114      	bne.n	800393e <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003914:	4b46      	ldr	r3, [pc, #280]	@ (8003a30 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8003916:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	2b02      	cmp	r3, #2
 8003920:	d17e      	bne.n	8003a20 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
          frequency = LSI_VALUE;
 8003922:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003926:	60fb      	str	r3, [r7, #12]
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8003928:	4b41      	ldr	r3, [pc, #260]	@ (8003a30 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800392a:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800392e:	f003 0304 	and.w	r3, r3, #4
 8003932:	2b04      	cmp	r3, #4
 8003934:	d174      	bne.n	8003a20 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
            frequency /= 128u;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	09db      	lsrs	r3, r3, #7
 800393a:	60fb      	str	r3, [r7, #12]
      break;
 800393c:	e070      	b.n	8003a20 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
      else if (srcclk == RCC_LPTIM1CLKSOURCE_HSI)
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003944:	d109      	bne.n	800395a <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003946:	4b3a      	ldr	r3, [pc, #232]	@ (8003a30 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800394e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003952:	d165      	bne.n	8003a20 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
          frequency = HSI_VALUE;
 8003954:	4b37      	ldr	r3, [pc, #220]	@ (8003a34 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 8003956:	60fb      	str	r3, [r7, #12]
      break;
 8003958:	e062      	b.n	8003a20 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800395a:	4b35      	ldr	r3, [pc, #212]	@ (8003a30 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800395c:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8003960:	f003 0302 	and.w	r3, r3, #2
 8003964:	2b02      	cmp	r3, #2
 8003966:	d15b      	bne.n	8003a20 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
          frequency = LSE_VALUE;
 8003968:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800396c:	60fb      	str	r3, [r7, #12]
      break;
 800396e:	e057      	b.n	8003a20 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
      srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8003970:	4b2f      	ldr	r3, [pc, #188]	@ (8003a30 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8003972:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8003976:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800397a:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_RTCCLKSOURCE_LSE)
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003982:	d10a      	bne.n	800399a <HAL_RCCEx_GetPeriphCLKFreq+0x912>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003984:	4b2a      	ldr	r3, [pc, #168]	@ (8003a30 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8003986:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800398a:	f003 0302 	and.w	r3, r3, #2
 800398e:	2b02      	cmp	r3, #2
 8003990:	d148      	bne.n	8003a24 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
          frequency = LSE_VALUE;
 8003992:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003996:	60fb      	str	r3, [r7, #12]
      break;
 8003998:	e044      	b.n	8003a24 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
      else if (srcclk == RCC_RTCCLKSOURCE_LSI)
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039a0:	d114      	bne.n	80039cc <HAL_RCCEx_GetPeriphCLKFreq+0x944>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80039a2:	4b23      	ldr	r3, [pc, #140]	@ (8003a30 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 80039a4:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80039a8:	f003 0302 	and.w	r3, r3, #2
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d139      	bne.n	8003a24 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
          frequency = LSI_VALUE;
 80039b0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80039b4:	60fb      	str	r3, [r7, #12]
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 80039b6:	4b1e      	ldr	r3, [pc, #120]	@ (8003a30 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 80039b8:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80039bc:	f003 0304 	and.w	r3, r3, #4
 80039c0:	2b04      	cmp	r3, #4
 80039c2:	d12f      	bne.n	8003a24 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
            frequency /= 128u;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	09db      	lsrs	r3, r3, #7
 80039c8:	60fb      	str	r3, [r7, #12]
      break;
 80039ca:	e02b      	b.n	8003a24 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
      else if (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32)
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80039d2:	d127      	bne.n	8003a24 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80039d4:	4b16      	ldr	r3, [pc, #88]	@ (8003a30 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80039e0:	d120      	bne.n	8003a24 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
          frequency = HSE_VALUE / 32u;
 80039e2:	4b15      	ldr	r3, [pc, #84]	@ (8003a38 <HAL_RCCEx_GetPeriphCLKFreq+0x9b0>)
 80039e4:	60fb      	str	r3, [r7, #12]
      break;
 80039e6:	e01d      	b.n	8003a24 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
      break;
 80039e8:	bf00      	nop
 80039ea:	e01c      	b.n	8003a26 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 80039ec:	bf00      	nop
 80039ee:	e01a      	b.n	8003a26 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 80039f0:	bf00      	nop
 80039f2:	e018      	b.n	8003a26 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 80039f4:	bf00      	nop
 80039f6:	e016      	b.n	8003a26 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 80039f8:	bf00      	nop
 80039fa:	e014      	b.n	8003a26 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 80039fc:	bf00      	nop
 80039fe:	e012      	b.n	8003a26 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8003a00:	bf00      	nop
 8003a02:	e010      	b.n	8003a26 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8003a04:	bf00      	nop
 8003a06:	e00e      	b.n	8003a26 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8003a08:	bf00      	nop
 8003a0a:	e00c      	b.n	8003a26 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8003a0c:	bf00      	nop
 8003a0e:	e00a      	b.n	8003a26 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8003a10:	bf00      	nop
 8003a12:	e008      	b.n	8003a26 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8003a14:	bf00      	nop
 8003a16:	e006      	b.n	8003a26 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8003a18:	bf00      	nop
 8003a1a:	e004      	b.n	8003a26 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8003a1c:	bf00      	nop
 8003a1e:	e002      	b.n	8003a26 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8003a20:	bf00      	nop
 8003a22:	e000      	b.n	8003a26 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8003a24:	bf00      	nop
  }

  return (frequency);
 8003a26:	68fb      	ldr	r3, [r7, #12]
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3710      	adds	r7, #16
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	40030c00 	.word	0x40030c00
 8003a34:	00f42400 	.word	0x00f42400
 8003a38:	0007a120 	.word	0x0007a120

08003a3c <HAL_RCCEx_EpodBoosterClkConfig>:
  *         will be ignored
  * @note   When booster is not user, clock source shall be set to RCC_EPODBOOSTER_SOURCE_NONE to save power.
  * @retval None
  */
HAL_StatusTypeDef HAL_RCCEx_EpodBoosterClkConfig(uint32_t Source, uint32_t Divider)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b085      	sub	sp, #20
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]

  assert_param(IS_RCC_EPODBOOSTER_SOURCE(Source));
  assert_param(IS_RCC_EPODBOOSTER_DIV(Divider));

  /* check if any source is selected and ready */
  tmpreg1 = RCC->CR;
 8003a46:	4b1e      	ldr	r3, [pc, #120]	@ (8003ac0 <HAL_RCCEx_EpodBoosterClkConfig+0x84>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	60bb      	str	r3, [r7, #8]

  /* MSIS is selected as EPOD Booster clock source, check if MSIS is ready */
  if ((Source == RCC_EPODBOOSTER_SOURCE_MSIS) && ((tmpreg1 & RCC_CR_MSISRDY) == 0U))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d107      	bne.n	8003a62 <HAL_RCCEx_EpodBoosterClkConfig+0x26>
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	f003 0304 	and.w	r3, r3, #4
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d102      	bne.n	8003a62 <HAL_RCCEx_EpodBoosterClkConfig+0x26>
  {
    status = HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	73fb      	strb	r3, [r7, #15]
 8003a60:	e027      	b.n	8003ab2 <HAL_RCCEx_EpodBoosterClkConfig+0x76>
  }
  /* HSI is selected as EPOD Booster clock source, check if HSI is ready */
  else if ((Source == RCC_EPODBOOSTER_SOURCE_HSI) && ((tmpreg1 & RCC_CR_HSIRDY) == 0U))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d107      	bne.n	8003a78 <HAL_RCCEx_EpodBoosterClkConfig+0x3c>
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d102      	bne.n	8003a78 <HAL_RCCEx_EpodBoosterClkConfig+0x3c>
  {
    status = HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	73fb      	strb	r3, [r7, #15]
 8003a76:	e01c      	b.n	8003ab2 <HAL_RCCEx_EpodBoosterClkConfig+0x76>
  }
  /* HSE is selected as EPOD Booster clock source, check if HSE is ready */
  else if ((Source == RCC_EPODBOOSTER_SOURCE_HSE) && ((tmpreg1 & RCC_CR_HSERDY) == 0U))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2b03      	cmp	r3, #3
 8003a7c:	d107      	bne.n	8003a8e <HAL_RCCEx_EpodBoosterClkConfig+0x52>
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d102      	bne.n	8003a8e <HAL_RCCEx_EpodBoosterClkConfig+0x52>
  {
    status = HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	73fb      	strb	r3, [r7, #15]
 8003a8c:	e011      	b.n	8003ab2 <HAL_RCCEx_EpodBoosterClkConfig+0x76>
  }
  else
  {
    /* Apply configuration */
    tmpreg1 = (RCC->CFGR4 & ~(RCC_CFGR4_BOOSTDIV | RCC_CFGR4_BOOSTSEL));
 8003a8e:	4b0c      	ldr	r3, [pc, #48]	@ (8003ac0 <HAL_RCCEx_EpodBoosterClkConfig+0x84>)
 8003a90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a92:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003a96:	f023 0303 	bic.w	r3, r3, #3
 8003a9a:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= (Divider | Source);
 8003a9c:	683a      	ldr	r2, [r7, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	68ba      	ldr	r2, [r7, #8]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	60bb      	str	r3, [r7, #8]
    RCC->CFGR4 = tmpreg1;
 8003aa8:	4a05      	ldr	r2, [pc, #20]	@ (8003ac0 <HAL_RCCEx_EpodBoosterClkConfig+0x84>)
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	6293      	str	r3, [r2, #40]	@ 0x28

    /* update status is ok */
    status = HAL_OK;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8003ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3714      	adds	r7, #20
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr
 8003ac0:	40030c00 	.word	0x40030c00

08003ac4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d101      	bne.n	8003ad6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e0dc      	b.n	8003c90 <HAL_SPI_Init+0x1cc>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a6d      	ldr	r2, [pc, #436]	@ (8003c98 <HAL_SPI_Init+0x1d4>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d105      	bne.n	8003af2 <HAL_SPI_Init+0x2e>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	2b0f      	cmp	r3, #15
 8003aec:	d901      	bls.n	8003af2 <HAL_SPI_Init+0x2e>
  {
    return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e0ce      	b.n	8003c90 <HAL_SPI_Init+0x1cc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 fba6 	bl	8004244 <SPI_GetPacketSize>
 8003af8:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a66      	ldr	r2, [pc, #408]	@ (8003c98 <HAL_SPI_Init+0x1d4>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d102      	bne.n	8003b0a <HAL_SPI_Init+0x46>
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2b08      	cmp	r3, #8
 8003b08:	d80c      	bhi.n	8003b24 <HAL_SPI_Init+0x60>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8003b0e:	4a63      	ldr	r2, [pc, #396]	@ (8003c9c <HAL_SPI_Init+0x1d8>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d004      	beq.n	8003b1e <HAL_SPI_Init+0x5a>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a61      	ldr	r2, [pc, #388]	@ (8003ca0 <HAL_SPI_Init+0x1dc>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d104      	bne.n	8003b28 <HAL_SPI_Init+0x64>
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2b10      	cmp	r3, #16
 8003b22:	d901      	bls.n	8003b28 <HAL_SPI_Init+0x64>
  {
    return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e0b3      	b.n	8003c90 <HAL_SPI_Init+0x1cc>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d106      	bne.n	8003b42 <HAL_SPI_Init+0x7e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f7fd fa1b 	bl	8000f78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2202      	movs	r2, #2
 8003b46:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f022 0201 	bic.w	r2, r2, #1
 8003b58:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8003b64:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	699b      	ldr	r3, [r3, #24]
 8003b6a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003b6e:	d119      	bne.n	8003ba4 <HAL_SPI_Init+0xe0>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b78:	d103      	bne.n	8003b82 <HAL_SPI_Init+0xbe>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d008      	beq.n	8003b94 <HAL_SPI_Init+0xd0>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d10c      	bne.n	8003ba4 <HAL_SPI_Init+0xe0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8003b8e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b92:	d107      	bne.n	8003ba4 <HAL_SPI_Init+0xe0>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003ba2:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00f      	beq.n	8003bd0 <HAL_SPI_Init+0x10c>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	2b06      	cmp	r3, #6
 8003bb6:	d90b      	bls.n	8003bd0 <HAL_SPI_Init+0x10c>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	601a      	str	r2, [r3, #0]
 8003bce:	e007      	b.n	8003be0 <HAL_SPI_Init+0x11c>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003bde:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	69da      	ldr	r2, [r3, #28]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003be8:	431a      	orrs	r2, r3
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	431a      	orrs	r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bf2:	ea42 0103 	orr.w	r1, r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	68da      	ldr	r2, [r3, #12]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c0a:	431a      	orrs	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c10:	431a      	orrs	r2, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	431a      	orrs	r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	691b      	ldr	r3, [r3, #16]
 8003c1c:	431a      	orrs	r2, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	431a      	orrs	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6a1b      	ldr	r3, [r3, #32]
 8003c28:	431a      	orrs	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	431a      	orrs	r2, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c34:	431a      	orrs	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	431a      	orrs	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c40:	431a      	orrs	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c46:	431a      	orrs	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c4c:	ea42 0103 	orr.w	r1, r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	430a      	orrs	r2, r1
 8003c5a:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d00a      	beq.n	8003c7e <HAL_SPI_Init+0x1ba>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 8003c8e:	2300      	movs	r3, #0
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3710      	adds	r7, #16
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	40002000 	.word	0x40002000
 8003c9c:	40013000 	.word	0x40013000
 8003ca0:	40003800 	.word	0x40003800

08003ca4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b088      	sub	sp, #32
 8003ca8:	af02      	add	r7, sp, #8
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	603b      	str	r3, [r7, #0]
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	3320      	adds	r3, #32
 8003cba:	617b      	str	r3, [r7, #20]
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003cbc:	f7fd fe46 	bl	800194c <HAL_GetTick>
 8003cc0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d001      	beq.n	8003cd2 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8003cce:	2302      	movs	r3, #2
 8003cd0:	e1e5      	b.n	800409e <HAL_SPI_Transmit+0x3fa>
  }

  if ((pData == NULL) || (Size == 0UL))
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d002      	beq.n	8003cde <HAL_SPI_Transmit+0x3a>
 8003cd8:	88fb      	ldrh	r3, [r7, #6]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d101      	bne.n	8003ce2 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e1dd      	b.n	800409e <HAL_SPI_Transmit+0x3fa>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d101      	bne.n	8003cf0 <HAL_SPI_Transmit+0x4c>
 8003cec:	2302      	movs	r3, #2
 8003cee:	e1d6      	b.n	800409e <HAL_SPI_Transmit+0x3fa>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2203      	movs	r2, #3
 8003cfc:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	68ba      	ldr	r2, [r7, #8]
 8003d0c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	88fa      	ldrh	r2, [r7, #6]
 8003d12:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	88fa      	ldrh	r2, [r7, #6]
 8003d1a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2200      	movs	r2, #0
 8003d22:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2200      	movs	r2, #0
 8003d38:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8003d48:	d108      	bne.n	8003d5c <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d58:	601a      	str	r2, [r3, #0]
 8003d5a:	e009      	b.n	8003d70 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8003d6e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	0c1b      	lsrs	r3, r3, #16
 8003d78:	041b      	lsls	r3, r3, #16
 8003d7a:	88f9      	ldrh	r1, [r7, #6]
 8003d7c:	68fa      	ldr	r2, [r7, #12]
 8003d7e:	6812      	ldr	r2, [r2, #0]
 8003d80:	430b      	orrs	r3, r1
 8003d82:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f042 0201 	orr.w	r2, r2, #1
 8003d92:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	69db      	ldr	r3, [r3, #28]
 8003d9a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d10c      	bne.n	8003dbc <HAL_SPI_Transmit+0x118>
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003daa:	d107      	bne.n	8003dbc <HAL_SPI_Transmit+0x118>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	2b0f      	cmp	r3, #15
 8003dc2:	d951      	bls.n	8003e68 <HAL_SPI_Transmit+0x1c4>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a8a      	ldr	r2, [pc, #552]	@ (8003ff4 <HAL_SPI_Transmit+0x350>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d045      	beq.n	8003e5a <HAL_SPI_Transmit+0x1b6>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a89      	ldr	r2, [pc, #548]	@ (8003ff8 <HAL_SPI_Transmit+0x354>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d147      	bne.n	8003e68 <HAL_SPI_Transmit+0x1c4>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8003dd8:	e03f      	b.n	8003e5a <HAL_SPI_Transmit+0x1b6>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	695b      	ldr	r3, [r3, #20]
 8003de0:	f003 0302 	and.w	r3, r3, #2
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d114      	bne.n	8003e12 <HAL_SPI_Transmit+0x16e>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	6812      	ldr	r2, [r2, #0]
 8003df2:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003df8:	1d1a      	adds	r2, r3, #4
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	3b01      	subs	r3, #1
 8003e08:	b29a      	uxth	r2, r3
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8003e10:	e023      	b.n	8003e5a <HAL_SPI_Transmit+0x1b6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e12:	f7fd fd9b 	bl	800194c <HAL_GetTick>
 8003e16:	4602      	mov	r2, r0
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	683a      	ldr	r2, [r7, #0]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d803      	bhi.n	8003e2a <HAL_SPI_Transmit+0x186>
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e28:	d102      	bne.n	8003e30 <HAL_SPI_Transmit+0x18c>
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d114      	bne.n	8003e5a <HAL_SPI_Transmit+0x1b6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8003e30:	68f8      	ldr	r0, [r7, #12]
 8003e32:	f000 f939 	bl	80040a8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e3c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e121      	b.n	800409e <HAL_SPI_Transmit+0x3fa>
    while (hspi->TxXferCount > 0UL)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1b9      	bne.n	8003dda <HAL_SPI_Transmit+0x136>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8003e66:	e0f4      	b.n	8004052 <HAL_SPI_Transmit+0x3ae>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	2b07      	cmp	r3, #7
 8003e6e:	f240 80e9 	bls.w	8004044 <HAL_SPI_Transmit+0x3a0>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8003e72:	e05d      	b.n	8003f30 <HAL_SPI_Transmit+0x28c>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	f003 0302 	and.w	r3, r3, #2
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d132      	bne.n	8003ee8 <HAL_SPI_Transmit+0x244>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d918      	bls.n	8003ec0 <HAL_SPI_Transmit+0x21c>
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d014      	beq.n	8003ec0 <HAL_SPI_Transmit+0x21c>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	6812      	ldr	r2, [r2, #0]
 8003ea0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ea6:	1d1a      	adds	r2, r3, #4
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	3b02      	subs	r3, #2
 8003eb6:	b29a      	uxth	r2, r3
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8003ebe:	e037      	b.n	8003f30 <HAL_SPI_Transmit+0x28c>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ec4:	881a      	ldrh	r2, [r3, #0]
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ece:	1c9a      	adds	r2, r3, #2
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	3b01      	subs	r3, #1
 8003ede:	b29a      	uxth	r2, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8003ee6:	e023      	b.n	8003f30 <HAL_SPI_Transmit+0x28c>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ee8:	f7fd fd30 	bl	800194c <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	683a      	ldr	r2, [r7, #0]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d803      	bhi.n	8003f00 <HAL_SPI_Transmit+0x25c>
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003efe:	d102      	bne.n	8003f06 <HAL_SPI_Transmit+0x262>
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d114      	bne.n	8003f30 <HAL_SPI_Transmit+0x28c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8003f06:	68f8      	ldr	r0, [r7, #12]
 8003f08:	f000 f8ce 	bl	80040a8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f12:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e0b6      	b.n	800409e <HAL_SPI_Transmit+0x3fa>
    while (hspi->TxXferCount > 0UL)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d19b      	bne.n	8003e74 <HAL_SPI_Transmit+0x1d0>
 8003f3c:	e089      	b.n	8004052 <HAL_SPI_Transmit+0x3ae>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	695b      	ldr	r3, [r3, #20]
 8003f44:	f003 0302 	and.w	r3, r3, #2
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d157      	bne.n	8003ffc <HAL_SPI_Transmit+0x358>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	2b03      	cmp	r3, #3
 8003f56:	d918      	bls.n	8003f8a <HAL_SPI_Transmit+0x2e6>
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f5c:	2b40      	cmp	r3, #64	@ 0x40
 8003f5e:	d914      	bls.n	8003f8a <HAL_SPI_Transmit+0x2e6>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	6812      	ldr	r2, [r2, #0]
 8003f6a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f70:	1d1a      	adds	r2, r3, #4
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	3b04      	subs	r3, #4
 8003f80:	b29a      	uxth	r2, r3
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8003f88:	e05c      	b.n	8004044 <HAL_SPI_Transmit+0x3a0>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d917      	bls.n	8003fc6 <HAL_SPI_Transmit+0x322>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d013      	beq.n	8003fc6 <HAL_SPI_Transmit+0x322>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003fa2:	881a      	ldrh	r2, [r3, #0]
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003fac:	1c9a      	adds	r2, r3, #2
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	3b02      	subs	r3, #2
 8003fbc:	b29a      	uxth	r2, r3
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8003fc4:	e03e      	b.n	8004044 <HAL_SPI_Transmit+0x3a0>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	3320      	adds	r3, #32
 8003fd0:	7812      	ldrb	r2, [r2, #0]
 8003fd2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003fd8:	1c5a      	adds	r2, r3, #1
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	b29a      	uxth	r2, r3
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8003ff0:	e028      	b.n	8004044 <HAL_SPI_Transmit+0x3a0>
 8003ff2:	bf00      	nop
 8003ff4:	40013000 	.word	0x40013000
 8003ff8:	40003800 	.word	0x40003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ffc:	f7fd fca6 	bl	800194c <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	683a      	ldr	r2, [r7, #0]
 8004008:	429a      	cmp	r2, r3
 800400a:	d803      	bhi.n	8004014 <HAL_SPI_Transmit+0x370>
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004012:	d102      	bne.n	800401a <HAL_SPI_Transmit+0x376>
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d114      	bne.n	8004044 <HAL_SPI_Transmit+0x3a0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800401a:	68f8      	ldr	r0, [r7, #12]
 800401c:	f000 f844 	bl	80040a8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004026:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	e02c      	b.n	800409e <HAL_SPI_Transmit+0x3fa>
    while (hspi->TxXferCount > 0UL)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800404a:	b29b      	uxth	r3, r3
 800404c:	2b00      	cmp	r3, #0
 800404e:	f47f af76 	bne.w	8003f3e <HAL_SPI_Transmit+0x29a>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	9300      	str	r3, [sp, #0]
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	2200      	movs	r2, #0
 800405a:	2108      	movs	r1, #8
 800405c:	68f8      	ldr	r0, [r7, #12]
 800405e:	f000 f8c3 	bl	80041e8 <SPI_WaitOnFlagUntilTimeout>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d007      	beq.n	8004078 <HAL_SPI_Transmit+0x3d4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800406e:	f043 0220 	orr.w	r2, r3, #32
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8004078:	68f8      	ldr	r0, [r7, #12]
 800407a:	f000 f815 	bl	80040a8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2201      	movs	r2, #1
 8004082:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004094:	2b00      	cmp	r3, #0
 8004096:	d001      	beq.n	800409c <HAL_SPI_Transmit+0x3f8>
  {
    return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e000      	b.n	800409e <HAL_SPI_Transmit+0x3fa>
  }
  else
  {
    return HAL_OK;
 800409c:	2300      	movs	r3, #0
  }
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3718      	adds	r7, #24
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop

080040a8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b085      	sub	sp, #20
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	699a      	ldr	r2, [r3, #24]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f042 0208 	orr.w	r2, r2, #8
 80040c6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	699a      	ldr	r2, [r3, #24]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f042 0210 	orr.w	r2, r2, #16
 80040d6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f022 0201 	bic.w	r2, r2, #1
 80040e6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	6812      	ldr	r2, [r2, #0]
 80040f2:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 80040f6:	f023 0303 	bic.w	r3, r3, #3
 80040fa:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	689a      	ldr	r2, [r3, #8]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800410a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8004112:	b2db      	uxtb	r3, r3
 8004114:	2b04      	cmp	r3, #4
 8004116:	d014      	beq.n	8004142 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f003 0320 	and.w	r3, r3, #32
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00f      	beq.n	8004142 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004128:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	699a      	ldr	r2, [r3, #24]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f042 0220 	orr.w	r2, r2, #32
 8004140:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8004148:	b2db      	uxtb	r3, r3
 800414a:	2b03      	cmp	r3, #3
 800414c:	d014      	beq.n	8004178 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004154:	2b00      	cmp	r3, #0
 8004156:	d00f      	beq.n	8004178 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800415e:	f043 0204 	orr.w	r2, r3, #4
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	699a      	ldr	r2, [r3, #24]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004176:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00f      	beq.n	80041a2 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004188:	f043 0201 	orr.w	r2, r3, #1
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	699a      	ldr	r2, [r3, #24]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041a0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d00f      	beq.n	80041cc <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80041b2:	f043 0208 	orr.w	r2, r3, #8
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	699a      	ldr	r2, [r3, #24]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041ca:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 80041dc:	bf00      	nop
 80041de:	3714      	adds	r7, #20
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	603b      	str	r3, [r7, #0]
 80041f4:	4613      	mov	r3, r2
 80041f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80041f8:	e010      	b.n	800421c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041fa:	f7fd fba7 	bl	800194c <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	69bb      	ldr	r3, [r7, #24]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	683a      	ldr	r2, [r7, #0]
 8004206:	429a      	cmp	r2, r3
 8004208:	d803      	bhi.n	8004212 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004210:	d102      	bne.n	8004218 <SPI_WaitOnFlagUntilTimeout+0x30>
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d101      	bne.n	800421c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	e00f      	b.n	800423c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	695a      	ldr	r2, [r3, #20]
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	4013      	ands	r3, r2
 8004226:	68ba      	ldr	r2, [r7, #8]
 8004228:	429a      	cmp	r2, r3
 800422a:	bf0c      	ite	eq
 800422c:	2301      	moveq	r3, #1
 800422e:	2300      	movne	r3, #0
 8004230:	b2db      	uxtb	r3, r3
 8004232:	461a      	mov	r2, r3
 8004234:	79fb      	ldrb	r3, [r7, #7]
 8004236:	429a      	cmp	r2, r3
 8004238:	d0df      	beq.n	80041fa <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800423a:	2300      	movs	r3, #0
}
 800423c:	4618      	mov	r0, r3
 800423e:	3710      	adds	r7, #16
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}

08004244 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004250:	095b      	lsrs	r3, r3, #5
 8004252:	3301      	adds	r3, #1
 8004254:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	3301      	adds	r3, #1
 800425c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	3307      	adds	r3, #7
 8004262:	08db      	lsrs	r3, r3, #3
 8004264:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	fb02 f303 	mul.w	r3, r2, r3
}
 800426e:	4618      	mov	r0, r3
 8004270:	3714      	adds	r7, #20
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr

0800427a <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 800427a:	b480      	push	{r7}
 800427c:	b083      	sub	sp, #12
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
 8004282:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800428a:	b2db      	uxtb	r3, r3
 800428c:	2b01      	cmp	r3, #1
 800428e:	d12e      	bne.n	80042ee <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8004296:	2b01      	cmp	r3, #1
 8004298:	d101      	bne.n	800429e <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 800429a:	2302      	movs	r3, #2
 800429c:	e028      	b.n	80042f0 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2201      	movs	r2, #1
 80042a2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2202      	movs	r2, #2
 80042aa:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f022 0201 	bic.w	r2, r2, #1
 80042bc:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80042ca:	ea42 0103 	orr.w	r1, r2, r3
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	689a      	ldr	r2, [r3, #8]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	430a      	orrs	r2, r1
 80042d8:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2201      	movs	r2, #1
 80042de:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80042ea:	2300      	movs	r3, #0
 80042ec:	e000      	b.n	80042f0 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
  }
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d101      	bne.n	800430e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e049      	b.n	80043a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004314:	b2db      	uxtb	r3, r3
 8004316:	2b00      	cmp	r3, #0
 8004318:	d106      	bne.n	8004328 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f7fc fe8c 	bl	8001040 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2202      	movs	r2, #2
 800432c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	3304      	adds	r3, #4
 8004338:	4619      	mov	r1, r3
 800433a:	4610      	mov	r0, r2
 800433c:	f000 fb86 	bl	8004a4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3708      	adds	r7, #8
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}

080043aa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80043aa:	b580      	push	{r7, lr}
 80043ac:	b082      	sub	sp, #8
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d101      	bne.n	80043bc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e049      	b.n	8004450 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d106      	bne.n	80043d6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f000 f841 	bl	8004458 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2202      	movs	r2, #2
 80043da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	3304      	adds	r3, #4
 80043e6:	4619      	mov	r1, r3
 80043e8:	4610      	mov	r0, r2
 80043ea:	f000 fb2f 	bl	8004a4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2201      	movs	r2, #1
 80043f2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2201      	movs	r2, #1
 80043fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2201      	movs	r2, #1
 8004402:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2201      	movs	r2, #1
 800440a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2201      	movs	r2, #1
 8004412:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2201      	movs	r2, #1
 800441a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2201      	movs	r2, #1
 8004422:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2201      	movs	r2, #1
 800442a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2201      	movs	r2, #1
 8004432:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2201      	movs	r2, #1
 800443a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2201      	movs	r2, #1
 8004442:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2201      	movs	r2, #1
 800444a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	3708      	adds	r7, #8
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004460:	bf00      	nop
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d109      	bne.n	8004490 <HAL_TIM_PWM_Start+0x24>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004482:	b2db      	uxtb	r3, r3
 8004484:	2b01      	cmp	r3, #1
 8004486:	bf14      	ite	ne
 8004488:	2301      	movne	r3, #1
 800448a:	2300      	moveq	r3, #0
 800448c:	b2db      	uxtb	r3, r3
 800448e:	e03c      	b.n	800450a <HAL_TIM_PWM_Start+0x9e>
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	2b04      	cmp	r3, #4
 8004494:	d109      	bne.n	80044aa <HAL_TIM_PWM_Start+0x3e>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800449c:	b2db      	uxtb	r3, r3
 800449e:	2b01      	cmp	r3, #1
 80044a0:	bf14      	ite	ne
 80044a2:	2301      	movne	r3, #1
 80044a4:	2300      	moveq	r3, #0
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	e02f      	b.n	800450a <HAL_TIM_PWM_Start+0x9e>
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	2b08      	cmp	r3, #8
 80044ae:	d109      	bne.n	80044c4 <HAL_TIM_PWM_Start+0x58>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	bf14      	ite	ne
 80044bc:	2301      	movne	r3, #1
 80044be:	2300      	moveq	r3, #0
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	e022      	b.n	800450a <HAL_TIM_PWM_Start+0x9e>
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	2b0c      	cmp	r3, #12
 80044c8:	d109      	bne.n	80044de <HAL_TIM_PWM_Start+0x72>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	bf14      	ite	ne
 80044d6:	2301      	movne	r3, #1
 80044d8:	2300      	moveq	r3, #0
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	e015      	b.n	800450a <HAL_TIM_PWM_Start+0x9e>
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	2b10      	cmp	r3, #16
 80044e2:	d109      	bne.n	80044f8 <HAL_TIM_PWM_Start+0x8c>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	bf14      	ite	ne
 80044f0:	2301      	movne	r3, #1
 80044f2:	2300      	moveq	r3, #0
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	e008      	b.n	800450a <HAL_TIM_PWM_Start+0x9e>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	2b01      	cmp	r3, #1
 8004502:	bf14      	ite	ne
 8004504:	2301      	movne	r3, #1
 8004506:	2300      	moveq	r3, #0
 8004508:	b2db      	uxtb	r3, r3
 800450a:	2b00      	cmp	r3, #0
 800450c:	d001      	beq.n	8004512 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e08d      	b.n	800462e <HAL_TIM_PWM_Start+0x1c2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d104      	bne.n	8004522 <HAL_TIM_PWM_Start+0xb6>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2202      	movs	r2, #2
 800451c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004520:	e023      	b.n	800456a <HAL_TIM_PWM_Start+0xfe>
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	2b04      	cmp	r3, #4
 8004526:	d104      	bne.n	8004532 <HAL_TIM_PWM_Start+0xc6>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2202      	movs	r2, #2
 800452c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004530:	e01b      	b.n	800456a <HAL_TIM_PWM_Start+0xfe>
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	2b08      	cmp	r3, #8
 8004536:	d104      	bne.n	8004542 <HAL_TIM_PWM_Start+0xd6>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2202      	movs	r2, #2
 800453c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004540:	e013      	b.n	800456a <HAL_TIM_PWM_Start+0xfe>
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	2b0c      	cmp	r3, #12
 8004546:	d104      	bne.n	8004552 <HAL_TIM_PWM_Start+0xe6>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2202      	movs	r2, #2
 800454c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004550:	e00b      	b.n	800456a <HAL_TIM_PWM_Start+0xfe>
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	2b10      	cmp	r3, #16
 8004556:	d104      	bne.n	8004562 <HAL_TIM_PWM_Start+0xf6>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2202      	movs	r2, #2
 800455c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004560:	e003      	b.n	800456a <HAL_TIM_PWM_Start+0xfe>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2202      	movs	r2, #2
 8004566:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	2201      	movs	r2, #1
 8004570:	6839      	ldr	r1, [r7, #0]
 8004572:	4618      	mov	r0, r3
 8004574:	f000 fe50 	bl	8005218 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a2e      	ldr	r2, [pc, #184]	@ (8004638 <HAL_TIM_PWM_Start+0x1cc>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d00e      	beq.n	80045a0 <HAL_TIM_PWM_Start+0x134>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a2d      	ldr	r2, [pc, #180]	@ (800463c <HAL_TIM_PWM_Start+0x1d0>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d009      	beq.n	80045a0 <HAL_TIM_PWM_Start+0x134>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a2b      	ldr	r2, [pc, #172]	@ (8004640 <HAL_TIM_PWM_Start+0x1d4>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d004      	beq.n	80045a0 <HAL_TIM_PWM_Start+0x134>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a2a      	ldr	r2, [pc, #168]	@ (8004644 <HAL_TIM_PWM_Start+0x1d8>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d101      	bne.n	80045a4 <HAL_TIM_PWM_Start+0x138>
 80045a0:	2301      	movs	r3, #1
 80045a2:	e000      	b.n	80045a6 <HAL_TIM_PWM_Start+0x13a>
 80045a4:	2300      	movs	r3, #0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d007      	beq.n	80045ba <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80045b8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a1e      	ldr	r2, [pc, #120]	@ (8004638 <HAL_TIM_PWM_Start+0x1cc>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d013      	beq.n	80045ec <HAL_TIM_PWM_Start+0x180>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045cc:	d00e      	beq.n	80045ec <HAL_TIM_PWM_Start+0x180>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a1d      	ldr	r2, [pc, #116]	@ (8004648 <HAL_TIM_PWM_Start+0x1dc>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d009      	beq.n	80045ec <HAL_TIM_PWM_Start+0x180>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a1b      	ldr	r2, [pc, #108]	@ (800464c <HAL_TIM_PWM_Start+0x1e0>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d004      	beq.n	80045ec <HAL_TIM_PWM_Start+0x180>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a15      	ldr	r2, [pc, #84]	@ (800463c <HAL_TIM_PWM_Start+0x1d0>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d115      	bne.n	8004618 <HAL_TIM_PWM_Start+0x1ac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	689a      	ldr	r2, [r3, #8]
 80045f2:	4b17      	ldr	r3, [pc, #92]	@ (8004650 <HAL_TIM_PWM_Start+0x1e4>)
 80045f4:	4013      	ands	r3, r2
 80045f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2b06      	cmp	r3, #6
 80045fc:	d015      	beq.n	800462a <HAL_TIM_PWM_Start+0x1be>
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004604:	d011      	beq.n	800462a <HAL_TIM_PWM_Start+0x1be>
    {
      __HAL_TIM_ENABLE(htim);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f042 0201 	orr.w	r2, r2, #1
 8004614:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004616:	e008      	b.n	800462a <HAL_TIM_PWM_Start+0x1be>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f042 0201 	orr.w	r2, r2, #1
 8004626:	601a      	str	r2, [r3, #0]
 8004628:	e000      	b.n	800462c <HAL_TIM_PWM_Start+0x1c0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800462a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	3710      	adds	r7, #16
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
 8004636:	bf00      	nop
 8004638:	40012c00 	.word	0x40012c00
 800463c:	40014000 	.word	0x40014000
 8004640:	40014400 	.word	0x40014400
 8004644:	40014800 	.word	0x40014800
 8004648:	40000400 	.word	0x40000400
 800464c:	40000800 	.word	0x40000800
 8004650:	00010007 	.word	0x00010007

08004654 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b086      	sub	sp, #24
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004660:	2300      	movs	r3, #0
 8004662:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800466a:	2b01      	cmp	r3, #1
 800466c:	d101      	bne.n	8004672 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800466e:	2302      	movs	r3, #2
 8004670:	e0ff      	b.n	8004872 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2201      	movs	r2, #1
 8004676:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2b14      	cmp	r3, #20
 800467e:	f200 80f0 	bhi.w	8004862 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004682:	a201      	add	r2, pc, #4	@ (adr r2, 8004688 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004688:	080046dd 	.word	0x080046dd
 800468c:	08004863 	.word	0x08004863
 8004690:	08004863 	.word	0x08004863
 8004694:	08004863 	.word	0x08004863
 8004698:	0800471d 	.word	0x0800471d
 800469c:	08004863 	.word	0x08004863
 80046a0:	08004863 	.word	0x08004863
 80046a4:	08004863 	.word	0x08004863
 80046a8:	0800475f 	.word	0x0800475f
 80046ac:	08004863 	.word	0x08004863
 80046b0:	08004863 	.word	0x08004863
 80046b4:	08004863 	.word	0x08004863
 80046b8:	0800479f 	.word	0x0800479f
 80046bc:	08004863 	.word	0x08004863
 80046c0:	08004863 	.word	0x08004863
 80046c4:	08004863 	.word	0x08004863
 80046c8:	080047e1 	.word	0x080047e1
 80046cc:	08004863 	.word	0x08004863
 80046d0:	08004863 	.word	0x08004863
 80046d4:	08004863 	.word	0x08004863
 80046d8:	08004821 	.word	0x08004821
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68b9      	ldr	r1, [r7, #8]
 80046e2:	4618      	mov	r0, r3
 80046e4:	f000 fa3a 	bl	8004b5c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	699a      	ldr	r2, [r3, #24]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f042 0208 	orr.w	r2, r2, #8
 80046f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	699a      	ldr	r2, [r3, #24]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f022 0204 	bic.w	r2, r2, #4
 8004706:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	6999      	ldr	r1, [r3, #24]
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	691a      	ldr	r2, [r3, #16]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	430a      	orrs	r2, r1
 8004718:	619a      	str	r2, [r3, #24]
      break;
 800471a:	e0a5      	b.n	8004868 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68b9      	ldr	r1, [r7, #8]
 8004722:	4618      	mov	r0, r3
 8004724:	f000 faa0 	bl	8004c68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	699a      	ldr	r2, [r3, #24]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004736:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	699a      	ldr	r2, [r3, #24]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004746:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6999      	ldr	r1, [r3, #24]
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	691b      	ldr	r3, [r3, #16]
 8004752:	021a      	lsls	r2, r3, #8
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	430a      	orrs	r2, r1
 800475a:	619a      	str	r2, [r3, #24]
      break;
 800475c:	e084      	b.n	8004868 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	68b9      	ldr	r1, [r7, #8]
 8004764:	4618      	mov	r0, r3
 8004766:	f000 faff 	bl	8004d68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	69da      	ldr	r2, [r3, #28]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f042 0208 	orr.w	r2, r2, #8
 8004778:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	69da      	ldr	r2, [r3, #28]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f022 0204 	bic.w	r2, r2, #4
 8004788:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	69d9      	ldr	r1, [r3, #28]
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	691a      	ldr	r2, [r3, #16]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	430a      	orrs	r2, r1
 800479a:	61da      	str	r2, [r3, #28]
      break;
 800479c:	e064      	b.n	8004868 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	68b9      	ldr	r1, [r7, #8]
 80047a4:	4618      	mov	r0, r3
 80047a6:	f000 fb5d 	bl	8004e64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	69da      	ldr	r2, [r3, #28]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80047b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	69da      	ldr	r2, [r3, #28]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	69d9      	ldr	r1, [r3, #28]
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	691b      	ldr	r3, [r3, #16]
 80047d4:	021a      	lsls	r2, r3, #8
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	430a      	orrs	r2, r1
 80047dc:	61da      	str	r2, [r3, #28]
      break;
 80047de:	e043      	b.n	8004868 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68b9      	ldr	r1, [r7, #8]
 80047e6:	4618      	mov	r0, r3
 80047e8:	f000 fbbc 	bl	8004f64 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f042 0208 	orr.w	r2, r2, #8
 80047fa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f022 0204 	bic.w	r2, r2, #4
 800480a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	691a      	ldr	r2, [r3, #16]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	430a      	orrs	r2, r1
 800481c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800481e:	e023      	b.n	8004868 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	68b9      	ldr	r1, [r7, #8]
 8004826:	4618      	mov	r0, r3
 8004828:	f000 fbfa 	bl	8005020 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800483a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800484a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	021a      	lsls	r2, r3, #8
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	430a      	orrs	r2, r1
 800485e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004860:	e002      	b.n	8004868 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	75fb      	strb	r3, [r7, #23]
      break;
 8004866:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2200      	movs	r2, #0
 800486c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004870:	7dfb      	ldrb	r3, [r7, #23]
}
 8004872:	4618      	mov	r0, r3
 8004874:	3718      	adds	r7, #24
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop

0800487c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004886:	2300      	movs	r3, #0
 8004888:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004890:	2b01      	cmp	r3, #1
 8004892:	d101      	bne.n	8004898 <HAL_TIM_ConfigClockSource+0x1c>
 8004894:	2302      	movs	r3, #2
 8004896:	e0ce      	b.n	8004a36 <HAL_TIM_ConfigClockSource+0x1ba>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2202      	movs	r2, #2
 80048a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80048b6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80048ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80048c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68ba      	ldr	r2, [r7, #8]
 80048ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a5b      	ldr	r2, [pc, #364]	@ (8004a40 <HAL_TIM_ConfigClockSource+0x1c4>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	f000 8099 	beq.w	8004a0a <HAL_TIM_ConfigClockSource+0x18e>
 80048d8:	4a59      	ldr	r2, [pc, #356]	@ (8004a40 <HAL_TIM_ConfigClockSource+0x1c4>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	f200 809e 	bhi.w	8004a1c <HAL_TIM_ConfigClockSource+0x1a0>
 80048e0:	4a58      	ldr	r2, [pc, #352]	@ (8004a44 <HAL_TIM_ConfigClockSource+0x1c8>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	f000 8091 	beq.w	8004a0a <HAL_TIM_ConfigClockSource+0x18e>
 80048e8:	4a56      	ldr	r2, [pc, #344]	@ (8004a44 <HAL_TIM_ConfigClockSource+0x1c8>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	f200 8096 	bhi.w	8004a1c <HAL_TIM_ConfigClockSource+0x1a0>
 80048f0:	4a55      	ldr	r2, [pc, #340]	@ (8004a48 <HAL_TIM_ConfigClockSource+0x1cc>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	f000 8089 	beq.w	8004a0a <HAL_TIM_ConfigClockSource+0x18e>
 80048f8:	4a53      	ldr	r2, [pc, #332]	@ (8004a48 <HAL_TIM_ConfigClockSource+0x1cc>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	f200 808e 	bhi.w	8004a1c <HAL_TIM_ConfigClockSource+0x1a0>
 8004900:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004904:	d03e      	beq.n	8004984 <HAL_TIM_ConfigClockSource+0x108>
 8004906:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800490a:	f200 8087 	bhi.w	8004a1c <HAL_TIM_ConfigClockSource+0x1a0>
 800490e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004912:	f000 8086 	beq.w	8004a22 <HAL_TIM_ConfigClockSource+0x1a6>
 8004916:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800491a:	d87f      	bhi.n	8004a1c <HAL_TIM_ConfigClockSource+0x1a0>
 800491c:	2b70      	cmp	r3, #112	@ 0x70
 800491e:	d01a      	beq.n	8004956 <HAL_TIM_ConfigClockSource+0xda>
 8004920:	2b70      	cmp	r3, #112	@ 0x70
 8004922:	d87b      	bhi.n	8004a1c <HAL_TIM_ConfigClockSource+0x1a0>
 8004924:	2b60      	cmp	r3, #96	@ 0x60
 8004926:	d050      	beq.n	80049ca <HAL_TIM_ConfigClockSource+0x14e>
 8004928:	2b60      	cmp	r3, #96	@ 0x60
 800492a:	d877      	bhi.n	8004a1c <HAL_TIM_ConfigClockSource+0x1a0>
 800492c:	2b50      	cmp	r3, #80	@ 0x50
 800492e:	d03c      	beq.n	80049aa <HAL_TIM_ConfigClockSource+0x12e>
 8004930:	2b50      	cmp	r3, #80	@ 0x50
 8004932:	d873      	bhi.n	8004a1c <HAL_TIM_ConfigClockSource+0x1a0>
 8004934:	2b40      	cmp	r3, #64	@ 0x40
 8004936:	d058      	beq.n	80049ea <HAL_TIM_ConfigClockSource+0x16e>
 8004938:	2b40      	cmp	r3, #64	@ 0x40
 800493a:	d86f      	bhi.n	8004a1c <HAL_TIM_ConfigClockSource+0x1a0>
 800493c:	2b30      	cmp	r3, #48	@ 0x30
 800493e:	d064      	beq.n	8004a0a <HAL_TIM_ConfigClockSource+0x18e>
 8004940:	2b30      	cmp	r3, #48	@ 0x30
 8004942:	d86b      	bhi.n	8004a1c <HAL_TIM_ConfigClockSource+0x1a0>
 8004944:	2b20      	cmp	r3, #32
 8004946:	d060      	beq.n	8004a0a <HAL_TIM_ConfigClockSource+0x18e>
 8004948:	2b20      	cmp	r3, #32
 800494a:	d867      	bhi.n	8004a1c <HAL_TIM_ConfigClockSource+0x1a0>
 800494c:	2b00      	cmp	r3, #0
 800494e:	d05c      	beq.n	8004a0a <HAL_TIM_ConfigClockSource+0x18e>
 8004950:	2b10      	cmp	r3, #16
 8004952:	d05a      	beq.n	8004a0a <HAL_TIM_ConfigClockSource+0x18e>
 8004954:	e062      	b.n	8004a1c <HAL_TIM_ConfigClockSource+0x1a0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004966:	f000 fc37 	bl	80051d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004978:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68ba      	ldr	r2, [r7, #8]
 8004980:	609a      	str	r2, [r3, #8]
      break;
 8004982:	e04f      	b.n	8004a24 <HAL_TIM_ConfigClockSource+0x1a8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004994:	f000 fc20 	bl	80051d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	689a      	ldr	r2, [r3, #8]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80049a6:	609a      	str	r2, [r3, #8]
      break;
 80049a8:	e03c      	b.n	8004a24 <HAL_TIM_ConfigClockSource+0x1a8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049b6:	461a      	mov	r2, r3
 80049b8:	f000 fb92 	bl	80050e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2150      	movs	r1, #80	@ 0x50
 80049c2:	4618      	mov	r0, r3
 80049c4:	f000 fbeb 	bl	800519e <TIM_ITRx_SetConfig>
      break;
 80049c8:	e02c      	b.n	8004a24 <HAL_TIM_ConfigClockSource+0x1a8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80049d6:	461a      	mov	r2, r3
 80049d8:	f000 fbb1 	bl	800513e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2160      	movs	r1, #96	@ 0x60
 80049e2:	4618      	mov	r0, r3
 80049e4:	f000 fbdb 	bl	800519e <TIM_ITRx_SetConfig>
      break;
 80049e8:	e01c      	b.n	8004a24 <HAL_TIM_ConfigClockSource+0x1a8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049f6:	461a      	mov	r2, r3
 80049f8:	f000 fb72 	bl	80050e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2140      	movs	r1, #64	@ 0x40
 8004a02:	4618      	mov	r0, r3
 8004a04:	f000 fbcb 	bl	800519e <TIM_ITRx_SetConfig>
      break;
 8004a08:	e00c      	b.n	8004a24 <HAL_TIM_ConfigClockSource+0x1a8>
#endif /* TIM12 */
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4619      	mov	r1, r3
 8004a14:	4610      	mov	r0, r2
 8004a16:	f000 fbc2 	bl	800519e <TIM_ITRx_SetConfig>
      break;
 8004a1a:	e003      	b.n	8004a24 <HAL_TIM_ConfigClockSource+0x1a8>
    }

    default:
      status = HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	73fb      	strb	r3, [r7, #15]
      break;
 8004a20:	e000      	b.n	8004a24 <HAL_TIM_ConfigClockSource+0x1a8>
      break;
 8004a22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3710      	adds	r7, #16
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	00100040 	.word	0x00100040
 8004a44:	00100030 	.word	0x00100030
 8004a48:	00100020 	.word	0x00100020

08004a4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b085      	sub	sp, #20
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4a39      	ldr	r2, [pc, #228]	@ (8004b44 <TIM_Base_SetConfig+0xf8>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d00b      	beq.n	8004a7c <TIM_Base_SetConfig+0x30>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a6a:	d007      	beq.n	8004a7c <TIM_Base_SetConfig+0x30>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	4a36      	ldr	r2, [pc, #216]	@ (8004b48 <TIM_Base_SetConfig+0xfc>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d003      	beq.n	8004a7c <TIM_Base_SetConfig+0x30>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4a35      	ldr	r2, [pc, #212]	@ (8004b4c <TIM_Base_SetConfig+0x100>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d108      	bne.n	8004a8e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	68fa      	ldr	r2, [r7, #12]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4a2c      	ldr	r2, [pc, #176]	@ (8004b44 <TIM_Base_SetConfig+0xf8>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d017      	beq.n	8004ac6 <TIM_Base_SetConfig+0x7a>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a9c:	d013      	beq.n	8004ac6 <TIM_Base_SetConfig+0x7a>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4a29      	ldr	r2, [pc, #164]	@ (8004b48 <TIM_Base_SetConfig+0xfc>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d00f      	beq.n	8004ac6 <TIM_Base_SetConfig+0x7a>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4a28      	ldr	r2, [pc, #160]	@ (8004b4c <TIM_Base_SetConfig+0x100>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d00b      	beq.n	8004ac6 <TIM_Base_SetConfig+0x7a>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4a27      	ldr	r2, [pc, #156]	@ (8004b50 <TIM_Base_SetConfig+0x104>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d007      	beq.n	8004ac6 <TIM_Base_SetConfig+0x7a>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4a26      	ldr	r2, [pc, #152]	@ (8004b54 <TIM_Base_SetConfig+0x108>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d003      	beq.n	8004ac6 <TIM_Base_SetConfig+0x7a>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4a25      	ldr	r2, [pc, #148]	@ (8004b58 <TIM_Base_SetConfig+0x10c>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d108      	bne.n	8004ad8 <TIM_Base_SetConfig+0x8c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004acc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	68fa      	ldr	r2, [r7, #12]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	695b      	ldr	r3, [r3, #20]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	689a      	ldr	r2, [r3, #8]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a12      	ldr	r2, [pc, #72]	@ (8004b44 <TIM_Base_SetConfig+0xf8>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d00b      	beq.n	8004b16 <TIM_Base_SetConfig+0xca>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a13      	ldr	r2, [pc, #76]	@ (8004b50 <TIM_Base_SetConfig+0x104>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d007      	beq.n	8004b16 <TIM_Base_SetConfig+0xca>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a12      	ldr	r2, [pc, #72]	@ (8004b54 <TIM_Base_SetConfig+0x108>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d003      	beq.n	8004b16 <TIM_Base_SetConfig+0xca>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a11      	ldr	r2, [pc, #68]	@ (8004b58 <TIM_Base_SetConfig+0x10c>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d103      	bne.n	8004b1e <TIM_Base_SetConfig+0xd2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	691a      	ldr	r2, [r3, #16]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f043 0204 	orr.w	r2, r3, #4
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	601a      	str	r2, [r3, #0]
}
 8004b36:	bf00      	nop
 8004b38:	3714      	adds	r7, #20
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	40012c00 	.word	0x40012c00
 8004b48:	40000400 	.word	0x40000400
 8004b4c:	40000800 	.word	0x40000800
 8004b50:	40014000 	.word	0x40014000
 8004b54:	40014400 	.word	0x40014400
 8004b58:	40014800 	.word	0x40014800

08004b5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b087      	sub	sp, #28
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a1b      	ldr	r3, [r3, #32]
 8004b6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a1b      	ldr	r3, [r3, #32]
 8004b70:	f023 0201 	bic.w	r2, r3, #1
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	699b      	ldr	r3, [r3, #24]
 8004b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f023 0303 	bic.w	r3, r3, #3
 8004b96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	68fa      	ldr	r2, [r7, #12]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	f023 0302 	bic.w	r3, r3, #2
 8004ba8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	697a      	ldr	r2, [r7, #20]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	4a28      	ldr	r2, [pc, #160]	@ (8004c58 <TIM_OC1_SetConfig+0xfc>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d00b      	beq.n	8004bd4 <TIM_OC1_SetConfig+0x78>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4a27      	ldr	r2, [pc, #156]	@ (8004c5c <TIM_OC1_SetConfig+0x100>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d007      	beq.n	8004bd4 <TIM_OC1_SetConfig+0x78>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	4a26      	ldr	r2, [pc, #152]	@ (8004c60 <TIM_OC1_SetConfig+0x104>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d003      	beq.n	8004bd4 <TIM_OC1_SetConfig+0x78>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	4a25      	ldr	r2, [pc, #148]	@ (8004c64 <TIM_OC1_SetConfig+0x108>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d10c      	bne.n	8004bee <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	f023 0308 	bic.w	r3, r3, #8
 8004bda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	697a      	ldr	r2, [r7, #20]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	f023 0304 	bic.w	r3, r3, #4
 8004bec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a19      	ldr	r2, [pc, #100]	@ (8004c58 <TIM_OC1_SetConfig+0xfc>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d00b      	beq.n	8004c0e <TIM_OC1_SetConfig+0xb2>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a18      	ldr	r2, [pc, #96]	@ (8004c5c <TIM_OC1_SetConfig+0x100>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d007      	beq.n	8004c0e <TIM_OC1_SetConfig+0xb2>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a17      	ldr	r2, [pc, #92]	@ (8004c60 <TIM_OC1_SetConfig+0x104>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d003      	beq.n	8004c0e <TIM_OC1_SetConfig+0xb2>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a16      	ldr	r2, [pc, #88]	@ (8004c64 <TIM_OC1_SetConfig+0x108>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d111      	bne.n	8004c32 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004c1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	695b      	ldr	r3, [r3, #20]
 8004c22:	693a      	ldr	r2, [r7, #16]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	699b      	ldr	r3, [r3, #24]
 8004c2c:	693a      	ldr	r2, [r7, #16]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	693a      	ldr	r2, [r7, #16]
 8004c36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	685a      	ldr	r2, [r3, #4]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	697a      	ldr	r2, [r7, #20]
 8004c4a:	621a      	str	r2, [r3, #32]
}
 8004c4c:	bf00      	nop
 8004c4e:	371c      	adds	r7, #28
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr
 8004c58:	40012c00 	.word	0x40012c00
 8004c5c:	40014000 	.word	0x40014000
 8004c60:	40014400 	.word	0x40014400
 8004c64:	40014800 	.word	0x40014800

08004c68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b087      	sub	sp, #28
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a1b      	ldr	r3, [r3, #32]
 8004c76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a1b      	ldr	r3, [r3, #32]
 8004c7c:	f023 0210 	bic.w	r2, r3, #16
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	699b      	ldr	r3, [r3, #24]
 8004c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ca2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	021b      	lsls	r3, r3, #8
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	f023 0320 	bic.w	r3, r3, #32
 8004cb6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	011b      	lsls	r3, r3, #4
 8004cbe:	697a      	ldr	r2, [r7, #20]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a24      	ldr	r2, [pc, #144]	@ (8004d58 <TIM_OC2_SetConfig+0xf0>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d10d      	bne.n	8004ce8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004cd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	011b      	lsls	r3, r3, #4
 8004cda:	697a      	ldr	r2, [r7, #20]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ce6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a1b      	ldr	r2, [pc, #108]	@ (8004d58 <TIM_OC2_SetConfig+0xf0>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d00b      	beq.n	8004d08 <TIM_OC2_SetConfig+0xa0>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a1a      	ldr	r2, [pc, #104]	@ (8004d5c <TIM_OC2_SetConfig+0xf4>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d007      	beq.n	8004d08 <TIM_OC2_SetConfig+0xa0>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a19      	ldr	r2, [pc, #100]	@ (8004d60 <TIM_OC2_SetConfig+0xf8>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d003      	beq.n	8004d08 <TIM_OC2_SetConfig+0xa0>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4a18      	ldr	r2, [pc, #96]	@ (8004d64 <TIM_OC2_SetConfig+0xfc>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d113      	bne.n	8004d30 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004d0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004d16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	695b      	ldr	r3, [r3, #20]
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	693a      	ldr	r2, [r7, #16]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	699b      	ldr	r3, [r3, #24]
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	693a      	ldr	r2, [r7, #16]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	693a      	ldr	r2, [r7, #16]
 8004d34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	685a      	ldr	r2, [r3, #4]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	697a      	ldr	r2, [r7, #20]
 8004d48:	621a      	str	r2, [r3, #32]
}
 8004d4a:	bf00      	nop
 8004d4c:	371c      	adds	r7, #28
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr
 8004d56:	bf00      	nop
 8004d58:	40012c00 	.word	0x40012c00
 8004d5c:	40014000 	.word	0x40014000
 8004d60:	40014400 	.word	0x40014400
 8004d64:	40014800 	.word	0x40014800

08004d68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b087      	sub	sp, #28
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a1b      	ldr	r3, [r3, #32]
 8004d76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6a1b      	ldr	r3, [r3, #32]
 8004d7c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	69db      	ldr	r3, [r3, #28]
 8004d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f023 0303 	bic.w	r3, r3, #3
 8004da2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	68fa      	ldr	r2, [r7, #12]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004db4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	021b      	lsls	r3, r3, #8
 8004dbc:	697a      	ldr	r2, [r7, #20]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a23      	ldr	r2, [pc, #140]	@ (8004e54 <TIM_OC3_SetConfig+0xec>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d10d      	bne.n	8004de6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004dd0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	021b      	lsls	r3, r3, #8
 8004dd8:	697a      	ldr	r2, [r7, #20]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004de4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a1a      	ldr	r2, [pc, #104]	@ (8004e54 <TIM_OC3_SetConfig+0xec>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d00b      	beq.n	8004e06 <TIM_OC3_SetConfig+0x9e>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a19      	ldr	r2, [pc, #100]	@ (8004e58 <TIM_OC3_SetConfig+0xf0>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d007      	beq.n	8004e06 <TIM_OC3_SetConfig+0x9e>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a18      	ldr	r2, [pc, #96]	@ (8004e5c <TIM_OC3_SetConfig+0xf4>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d003      	beq.n	8004e06 <TIM_OC3_SetConfig+0x9e>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a17      	ldr	r2, [pc, #92]	@ (8004e60 <TIM_OC3_SetConfig+0xf8>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d113      	bne.n	8004e2e <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004e0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004e14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	695b      	ldr	r3, [r3, #20]
 8004e1a:	011b      	lsls	r3, r3, #4
 8004e1c:	693a      	ldr	r2, [r7, #16]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	699b      	ldr	r3, [r3, #24]
 8004e26:	011b      	lsls	r3, r3, #4
 8004e28:	693a      	ldr	r2, [r7, #16]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	693a      	ldr	r2, [r7, #16]
 8004e32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	68fa      	ldr	r2, [r7, #12]
 8004e38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	685a      	ldr	r2, [r3, #4]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	697a      	ldr	r2, [r7, #20]
 8004e46:	621a      	str	r2, [r3, #32]
}
 8004e48:	bf00      	nop
 8004e4a:	371c      	adds	r7, #28
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr
 8004e54:	40012c00 	.word	0x40012c00
 8004e58:	40014000 	.word	0x40014000
 8004e5c:	40014400 	.word	0x40014400
 8004e60:	40014800 	.word	0x40014800

08004e64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b087      	sub	sp, #28
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a1b      	ldr	r3, [r3, #32]
 8004e72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6a1b      	ldr	r3, [r3, #32]
 8004e78:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	69db      	ldr	r3, [r3, #28]
 8004e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	021b      	lsls	r3, r3, #8
 8004ea6:	68fa      	ldr	r2, [r7, #12]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004eb2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	031b      	lsls	r3, r3, #12
 8004eba:	697a      	ldr	r2, [r7, #20]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4a24      	ldr	r2, [pc, #144]	@ (8004f54 <TIM_OC4_SetConfig+0xf0>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d10d      	bne.n	8004ee4 <TIM_OC4_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004ece:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	031b      	lsls	r3, r3, #12
 8004ed6:	697a      	ldr	r2, [r7, #20]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004ee2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4a1b      	ldr	r2, [pc, #108]	@ (8004f54 <TIM_OC4_SetConfig+0xf0>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d00b      	beq.n	8004f04 <TIM_OC4_SetConfig+0xa0>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4a1a      	ldr	r2, [pc, #104]	@ (8004f58 <TIM_OC4_SetConfig+0xf4>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d007      	beq.n	8004f04 <TIM_OC4_SetConfig+0xa0>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	4a19      	ldr	r2, [pc, #100]	@ (8004f5c <TIM_OC4_SetConfig+0xf8>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d003      	beq.n	8004f04 <TIM_OC4_SetConfig+0xa0>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	4a18      	ldr	r2, [pc, #96]	@ (8004f60 <TIM_OC4_SetConfig+0xfc>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d113      	bne.n	8004f2c <TIM_OC4_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f0a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004f12:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	695b      	ldr	r3, [r3, #20]
 8004f18:	019b      	lsls	r3, r3, #6
 8004f1a:	693a      	ldr	r2, [r7, #16]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	699b      	ldr	r3, [r3, #24]
 8004f24:	019b      	lsls	r3, r3, #6
 8004f26:	693a      	ldr	r2, [r7, #16]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	693a      	ldr	r2, [r7, #16]
 8004f30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	68fa      	ldr	r2, [r7, #12]
 8004f36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	685a      	ldr	r2, [r3, #4]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	697a      	ldr	r2, [r7, #20]
 8004f44:	621a      	str	r2, [r3, #32]
}
 8004f46:	bf00      	nop
 8004f48:	371c      	adds	r7, #28
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop
 8004f54:	40012c00 	.word	0x40012c00
 8004f58:	40014000 	.word	0x40014000
 8004f5c:	40014400 	.word	0x40014400
 8004f60:	40014800 	.word	0x40014800

08004f64 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b087      	sub	sp, #28
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a1b      	ldr	r3, [r3, #32]
 8004f72:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a1b      	ldr	r3, [r3, #32]
 8004f78:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	68fa      	ldr	r2, [r7, #12]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004fa8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	041b      	lsls	r3, r3, #16
 8004fb0:	693a      	ldr	r2, [r7, #16]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a15      	ldr	r2, [pc, #84]	@ (8005010 <TIM_OC5_SetConfig+0xac>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d00b      	beq.n	8004fd6 <TIM_OC5_SetConfig+0x72>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a14      	ldr	r2, [pc, #80]	@ (8005014 <TIM_OC5_SetConfig+0xb0>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d007      	beq.n	8004fd6 <TIM_OC5_SetConfig+0x72>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a13      	ldr	r2, [pc, #76]	@ (8005018 <TIM_OC5_SetConfig+0xb4>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d003      	beq.n	8004fd6 <TIM_OC5_SetConfig+0x72>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a12      	ldr	r2, [pc, #72]	@ (800501c <TIM_OC5_SetConfig+0xb8>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d109      	bne.n	8004fea <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fdc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	695b      	ldr	r3, [r3, #20]
 8004fe2:	021b      	lsls	r3, r3, #8
 8004fe4:	697a      	ldr	r2, [r7, #20]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	697a      	ldr	r2, [r7, #20]
 8004fee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	685a      	ldr	r2, [r3, #4]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	693a      	ldr	r2, [r7, #16]
 8005002:	621a      	str	r2, [r3, #32]
}
 8005004:	bf00      	nop
 8005006:	371c      	adds	r7, #28
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr
 8005010:	40012c00 	.word	0x40012c00
 8005014:	40014000 	.word	0x40014000
 8005018:	40014400 	.word	0x40014400
 800501c:	40014800 	.word	0x40014800

08005020 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005020:	b480      	push	{r7}
 8005022:	b087      	sub	sp, #28
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a1b      	ldr	r3, [r3, #32]
 800502e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6a1b      	ldr	r3, [r3, #32]
 8005034:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800504e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005052:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	021b      	lsls	r3, r3, #8
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	4313      	orrs	r3, r2
 800505e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005066:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	051b      	lsls	r3, r3, #20
 800506e:	693a      	ldr	r2, [r7, #16]
 8005070:	4313      	orrs	r3, r2
 8005072:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4a16      	ldr	r2, [pc, #88]	@ (80050d0 <TIM_OC6_SetConfig+0xb0>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d00b      	beq.n	8005094 <TIM_OC6_SetConfig+0x74>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a15      	ldr	r2, [pc, #84]	@ (80050d4 <TIM_OC6_SetConfig+0xb4>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d007      	beq.n	8005094 <TIM_OC6_SetConfig+0x74>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4a14      	ldr	r2, [pc, #80]	@ (80050d8 <TIM_OC6_SetConfig+0xb8>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d003      	beq.n	8005094 <TIM_OC6_SetConfig+0x74>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a13      	ldr	r2, [pc, #76]	@ (80050dc <TIM_OC6_SetConfig+0xbc>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d109      	bne.n	80050a8 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800509a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	695b      	ldr	r3, [r3, #20]
 80050a0:	029b      	lsls	r3, r3, #10
 80050a2:	697a      	ldr	r2, [r7, #20]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	697a      	ldr	r2, [r7, #20]
 80050ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	68fa      	ldr	r2, [r7, #12]
 80050b2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	685a      	ldr	r2, [r3, #4]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	693a      	ldr	r2, [r7, #16]
 80050c0:	621a      	str	r2, [r3, #32]
}
 80050c2:	bf00      	nop
 80050c4:	371c      	adds	r7, #28
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop
 80050d0:	40012c00 	.word	0x40012c00
 80050d4:	40014000 	.word	0x40014000
 80050d8:	40014400 	.word	0x40014400
 80050dc:	40014800 	.word	0x40014800

080050e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b087      	sub	sp, #28
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	60b9      	str	r1, [r7, #8]
 80050ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6a1b      	ldr	r3, [r3, #32]
 80050f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6a1b      	ldr	r3, [r3, #32]
 80050f6:	f023 0201 	bic.w	r2, r3, #1
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	699b      	ldr	r3, [r3, #24]
 8005102:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800510a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	011b      	lsls	r3, r3, #4
 8005110:	693a      	ldr	r2, [r7, #16]
 8005112:	4313      	orrs	r3, r2
 8005114:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	f023 030a 	bic.w	r3, r3, #10
 800511c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800511e:	697a      	ldr	r2, [r7, #20]
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	4313      	orrs	r3, r2
 8005124:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	693a      	ldr	r2, [r7, #16]
 800512a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	697a      	ldr	r2, [r7, #20]
 8005130:	621a      	str	r2, [r3, #32]
}
 8005132:	bf00      	nop
 8005134:	371c      	adds	r7, #28
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr

0800513e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800513e:	b480      	push	{r7}
 8005140:	b087      	sub	sp, #28
 8005142:	af00      	add	r7, sp, #0
 8005144:	60f8      	str	r0, [r7, #12]
 8005146:	60b9      	str	r1, [r7, #8]
 8005148:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6a1b      	ldr	r3, [r3, #32]
 800514e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6a1b      	ldr	r3, [r3, #32]
 8005154:	f023 0210 	bic.w	r2, r3, #16
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	699b      	ldr	r3, [r3, #24]
 8005160:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005168:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	031b      	lsls	r3, r3, #12
 800516e:	693a      	ldr	r2, [r7, #16]
 8005170:	4313      	orrs	r3, r2
 8005172:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800517a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	011b      	lsls	r3, r3, #4
 8005180:	697a      	ldr	r2, [r7, #20]
 8005182:	4313      	orrs	r3, r2
 8005184:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	693a      	ldr	r2, [r7, #16]
 800518a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	697a      	ldr	r2, [r7, #20]
 8005190:	621a      	str	r2, [r3, #32]
}
 8005192:	bf00      	nop
 8005194:	371c      	adds	r7, #28
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr

0800519e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800519e:	b480      	push	{r7}
 80051a0:	b085      	sub	sp, #20
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
 80051a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80051b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80051ba:	683a      	ldr	r2, [r7, #0]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	4313      	orrs	r3, r2
 80051c0:	f043 0307 	orr.w	r3, r3, #7
 80051c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	68fa      	ldr	r2, [r7, #12]
 80051ca:	609a      	str	r2, [r3, #8]
}
 80051cc:	bf00      	nop
 80051ce:	3714      	adds	r7, #20
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051d8:	b480      	push	{r7}
 80051da:	b087      	sub	sp, #28
 80051dc:	af00      	add	r7, sp, #0
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	60b9      	str	r1, [r7, #8]
 80051e2:	607a      	str	r2, [r7, #4]
 80051e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80051f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	021a      	lsls	r2, r3, #8
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	431a      	orrs	r2, r3
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	4313      	orrs	r3, r2
 8005200:	697a      	ldr	r2, [r7, #20]
 8005202:	4313      	orrs	r3, r2
 8005204:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	697a      	ldr	r2, [r7, #20]
 800520a:	609a      	str	r2, [r3, #8]
}
 800520c:	bf00      	nop
 800520e:	371c      	adds	r7, #28
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr

08005218 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005218:	b480      	push	{r7}
 800521a:	b087      	sub	sp, #28
 800521c:	af00      	add	r7, sp, #0
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	f003 031f 	and.w	r3, r3, #31
 800522a:	2201      	movs	r2, #1
 800522c:	fa02 f303 	lsl.w	r3, r2, r3
 8005230:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	6a1a      	ldr	r2, [r3, #32]
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	43db      	mvns	r3, r3
 800523a:	401a      	ands	r2, r3
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6a1a      	ldr	r2, [r3, #32]
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	f003 031f 	and.w	r3, r3, #31
 800524a:	6879      	ldr	r1, [r7, #4]
 800524c:	fa01 f303 	lsl.w	r3, r1, r3
 8005250:	431a      	orrs	r2, r3
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	621a      	str	r2, [r3, #32]
}
 8005256:	bf00      	nop
 8005258:	371c      	adds	r7, #28
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr
	...

08005264 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005264:	b480      	push	{r7}
 8005266:	b085      	sub	sp, #20
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005274:	2b01      	cmp	r3, #1
 8005276:	d101      	bne.n	800527c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005278:	2302      	movs	r3, #2
 800527a:	e05b      	b.n	8005334 <HAL_TIMEx_MasterConfigSynchronization+0xd0>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2202      	movs	r2, #2
 8005288:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a27      	ldr	r2, [pc, #156]	@ (8005340 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d108      	bne.n	80052b8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80052ac:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	68fa      	ldr	r2, [r7, #12]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80052be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	68fa      	ldr	r2, [r7, #12]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	68fa      	ldr	r2, [r7, #12]
 80052d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a19      	ldr	r2, [pc, #100]	@ (8005340 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d013      	beq.n	8005308 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052e8:	d00e      	beq.n	8005308 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a15      	ldr	r2, [pc, #84]	@ (8005344 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d009      	beq.n	8005308 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a13      	ldr	r2, [pc, #76]	@ (8005348 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d004      	beq.n	8005308 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a12      	ldr	r2, [pc, #72]	@ (800534c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d10c      	bne.n	8005322 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800530e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	68ba      	ldr	r2, [r7, #8]
 8005316:	4313      	orrs	r3, r2
 8005318:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	68ba      	ldr	r2, [r7, #8]
 8005320:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2201      	movs	r2, #1
 8005326:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005332:	2300      	movs	r3, #0
}
 8005334:	4618      	mov	r0, r3
 8005336:	3714      	adds	r7, #20
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr
 8005340:	40012c00 	.word	0x40012c00
 8005344:	40000400 	.word	0x40000400
 8005348:	40000800 	.word	0x40000800
 800534c:	40014000 	.word	0x40014000

08005350 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b082      	sub	sp, #8
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d101      	bne.n	8005362 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e042      	b.n	80053e8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005368:	2b00      	cmp	r3, #0
 800536a:	d106      	bne.n	800537a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f7fb fec1 	bl	80010fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2224      	movs	r2, #36	@ 0x24
 800537e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f022 0201 	bic.w	r2, r2, #1
 8005390:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005396:	2b00      	cmp	r3, #0
 8005398:	d002      	beq.n	80053a0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 fa2a 	bl	80057f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f000 f8b3 	bl	800550c <UART_SetConfig>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d101      	bne.n	80053b0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	e01b      	b.n	80053e8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	685a      	ldr	r2, [r3, #4]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80053be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	689a      	ldr	r2, [r3, #8]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80053ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f042 0201 	orr.w	r2, r2, #1
 80053de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f000 faa9 	bl	8005938 <UART_CheckIdleState>
 80053e6:	4603      	mov	r3, r0
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3708      	adds	r7, #8
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b08a      	sub	sp, #40	@ 0x28
 80053f4:	af02      	add	r7, sp, #8
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	60b9      	str	r1, [r7, #8]
 80053fa:	603b      	str	r3, [r7, #0]
 80053fc:	4613      	mov	r3, r2
 80053fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005406:	2b20      	cmp	r3, #32
 8005408:	d17b      	bne.n	8005502 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d002      	beq.n	8005416 <HAL_UART_Transmit+0x26>
 8005410:	88fb      	ldrh	r3, [r7, #6]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d101      	bne.n	800541a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e074      	b.n	8005504 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2200      	movs	r2, #0
 800541e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2221      	movs	r2, #33	@ 0x21
 8005426:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800542a:	f7fc fa8f 	bl	800194c <HAL_GetTick>
 800542e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	88fa      	ldrh	r2, [r7, #6]
 8005434:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	88fa      	ldrh	r2, [r7, #6]
 800543c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005448:	d108      	bne.n	800545c <HAL_UART_Transmit+0x6c>
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d104      	bne.n	800545c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005452:	2300      	movs	r3, #0
 8005454:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	61bb      	str	r3, [r7, #24]
 800545a:	e003      	b.n	8005464 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005460:	2300      	movs	r3, #0
 8005462:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005464:	e030      	b.n	80054c8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	9300      	str	r3, [sp, #0]
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	2200      	movs	r2, #0
 800546e:	2180      	movs	r1, #128	@ 0x80
 8005470:	68f8      	ldr	r0, [r7, #12]
 8005472:	f000 fb0b 	bl	8005a8c <UART_WaitOnFlagUntilTimeout>
 8005476:	4603      	mov	r3, r0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d005      	beq.n	8005488 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2220      	movs	r2, #32
 8005480:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005484:	2303      	movs	r3, #3
 8005486:	e03d      	b.n	8005504 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d10b      	bne.n	80054a6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800548e:	69bb      	ldr	r3, [r7, #24]
 8005490:	881b      	ldrh	r3, [r3, #0]
 8005492:	461a      	mov	r2, r3
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800549c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800549e:	69bb      	ldr	r3, [r7, #24]
 80054a0:	3302      	adds	r3, #2
 80054a2:	61bb      	str	r3, [r7, #24]
 80054a4:	e007      	b.n	80054b6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80054a6:	69fb      	ldr	r3, [r7, #28]
 80054a8:	781a      	ldrb	r2, [r3, #0]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	3301      	adds	r3, #1
 80054b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80054bc:	b29b      	uxth	r3, r3
 80054be:	3b01      	subs	r3, #1
 80054c0:	b29a      	uxth	r2, r3
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d1c8      	bne.n	8005466 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	9300      	str	r3, [sp, #0]
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	2200      	movs	r2, #0
 80054dc:	2140      	movs	r1, #64	@ 0x40
 80054de:	68f8      	ldr	r0, [r7, #12]
 80054e0:	f000 fad4 	bl	8005a8c <UART_WaitOnFlagUntilTimeout>
 80054e4:	4603      	mov	r3, r0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d005      	beq.n	80054f6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2220      	movs	r2, #32
 80054ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e006      	b.n	8005504 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2220      	movs	r2, #32
 80054fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80054fe:	2300      	movs	r3, #0
 8005500:	e000      	b.n	8005504 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005502:	2302      	movs	r3, #2
  }
}
 8005504:	4618      	mov	r0, r3
 8005506:	3720      	adds	r7, #32
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800550c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005510:	b08e      	sub	sp, #56	@ 0x38
 8005512:	af00      	add	r7, sp, #0
 8005514:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005516:	2300      	movs	r3, #0
 8005518:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	689a      	ldr	r2, [r3, #8]
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	691b      	ldr	r3, [r3, #16]
 8005524:	431a      	orrs	r2, r3
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	695b      	ldr	r3, [r3, #20]
 800552a:	431a      	orrs	r2, r3
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	69db      	ldr	r3, [r3, #28]
 8005530:	4313      	orrs	r3, r2
 8005532:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	4b9b      	ldr	r3, [pc, #620]	@ (80057a8 <UART_SetConfig+0x29c>)
 800553c:	4013      	ands	r3, r2
 800553e:	697a      	ldr	r2, [r7, #20]
 8005540:	6812      	ldr	r2, [r2, #0]
 8005542:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005544:	430b      	orrs	r3, r1
 8005546:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	68da      	ldr	r2, [r3, #12]
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	430a      	orrs	r2, r1
 800555c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	699b      	ldr	r3, [r3, #24]
 8005562:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a90      	ldr	r2, [pc, #576]	@ (80057ac <UART_SetConfig+0x2a0>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d004      	beq.n	8005578 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	6a1b      	ldr	r3, [r3, #32]
 8005572:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005574:	4313      	orrs	r3, r2
 8005576:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005582:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005586:	697a      	ldr	r2, [r7, #20]
 8005588:	6812      	ldr	r2, [r2, #0]
 800558a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800558c:	430b      	orrs	r3, r1
 800558e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005596:	f023 010f 	bic.w	r1, r3, #15
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	430a      	orrs	r2, r1
 80055a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a81      	ldr	r2, [pc, #516]	@ (80057b0 <UART_SetConfig+0x2a4>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d102      	bne.n	80055b6 <UART_SetConfig+0xaa>
 80055b0:	2301      	movs	r3, #1
 80055b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80055b4:	e022      	b.n	80055fc <UART_SetConfig+0xf0>
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a7e      	ldr	r2, [pc, #504]	@ (80057b4 <UART_SetConfig+0x2a8>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d102      	bne.n	80055c6 <UART_SetConfig+0xba>
 80055c0:	2302      	movs	r3, #2
 80055c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80055c4:	e01a      	b.n	80055fc <UART_SetConfig+0xf0>
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a7b      	ldr	r2, [pc, #492]	@ (80057b8 <UART_SetConfig+0x2ac>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d102      	bne.n	80055d6 <UART_SetConfig+0xca>
 80055d0:	2304      	movs	r3, #4
 80055d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80055d4:	e012      	b.n	80055fc <UART_SetConfig+0xf0>
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a78      	ldr	r2, [pc, #480]	@ (80057bc <UART_SetConfig+0x2b0>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d102      	bne.n	80055e6 <UART_SetConfig+0xda>
 80055e0:	2308      	movs	r3, #8
 80055e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80055e4:	e00a      	b.n	80055fc <UART_SetConfig+0xf0>
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a70      	ldr	r2, [pc, #448]	@ (80057ac <UART_SetConfig+0x2a0>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d103      	bne.n	80055f8 <UART_SetConfig+0xec>
 80055f0:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80055f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80055f6:	e001      	b.n	80055fc <UART_SetConfig+0xf0>
 80055f8:	2300      	movs	r3, #0
 80055fa:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a6a      	ldr	r2, [pc, #424]	@ (80057ac <UART_SetConfig+0x2a0>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d16c      	bne.n	80056e0 <UART_SetConfig+0x1d4>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8005606:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005608:	f7fd fd3e 	bl	8003088 <HAL_RCCEx_GetPeriphCLKFreq>
 800560c:	62b8      	str	r0, [r7, #40]	@ 0x28

    /* If proper clock source reported */
    if (pclk != 0U)
 800560e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005610:	2b00      	cmp	r3, #0
 8005612:	f000 80da 	beq.w	80057ca <UART_SetConfig+0x2be>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800561a:	4a69      	ldr	r2, [pc, #420]	@ (80057c0 <UART_SetConfig+0x2b4>)
 800561c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005620:	461a      	mov	r2, r3
 8005622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005624:	fbb3 f3f2 	udiv	r3, r3, r2
 8005628:	61fb      	str	r3, [r7, #28]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	685a      	ldr	r2, [r3, #4]
 800562e:	4613      	mov	r3, r2
 8005630:	005b      	lsls	r3, r3, #1
 8005632:	4413      	add	r3, r2
 8005634:	69fa      	ldr	r2, [r7, #28]
 8005636:	429a      	cmp	r2, r3
 8005638:	d305      	bcc.n	8005646 <UART_SetConfig+0x13a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005640:	69fa      	ldr	r2, [r7, #28]
 8005642:	429a      	cmp	r2, r3
 8005644:	d903      	bls.n	800564e <UART_SetConfig+0x142>
      {
        ret = HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800564c:	e0bd      	b.n	80057ca <UART_SetConfig+0x2be>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800564e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005650:	2200      	movs	r2, #0
 8005652:	60bb      	str	r3, [r7, #8]
 8005654:	60fa      	str	r2, [r7, #12]
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800565a:	4a59      	ldr	r2, [pc, #356]	@ (80057c0 <UART_SetConfig+0x2b4>)
 800565c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005660:	b29b      	uxth	r3, r3
 8005662:	2200      	movs	r2, #0
 8005664:	603b      	str	r3, [r7, #0]
 8005666:	607a      	str	r2, [r7, #4]
 8005668:	e9d7 2300 	ldrd	r2, r3, [r7]
 800566c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005670:	f7fa fe08 	bl	8000284 <__aeabi_uldivmod>
 8005674:	4602      	mov	r2, r0
 8005676:	460b      	mov	r3, r1
 8005678:	4610      	mov	r0, r2
 800567a:	4619      	mov	r1, r3
 800567c:	f04f 0200 	mov.w	r2, #0
 8005680:	f04f 0300 	mov.w	r3, #0
 8005684:	020b      	lsls	r3, r1, #8
 8005686:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800568a:	0202      	lsls	r2, r0, #8
 800568c:	6979      	ldr	r1, [r7, #20]
 800568e:	6849      	ldr	r1, [r1, #4]
 8005690:	0849      	lsrs	r1, r1, #1
 8005692:	2000      	movs	r0, #0
 8005694:	460c      	mov	r4, r1
 8005696:	4605      	mov	r5, r0
 8005698:	eb12 0804 	adds.w	r8, r2, r4
 800569c:	eb43 0905 	adc.w	r9, r3, r5
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	469a      	mov	sl, r3
 80056a8:	4693      	mov	fp, r2
 80056aa:	4652      	mov	r2, sl
 80056ac:	465b      	mov	r3, fp
 80056ae:	4640      	mov	r0, r8
 80056b0:	4649      	mov	r1, r9
 80056b2:	f7fa fde7 	bl	8000284 <__aeabi_uldivmod>
 80056b6:	4602      	mov	r2, r0
 80056b8:	460b      	mov	r3, r1
 80056ba:	4613      	mov	r3, r2
 80056bc:	627b      	str	r3, [r7, #36]	@ 0x24
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80056be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80056c4:	d308      	bcc.n	80056d8 <UART_SetConfig+0x1cc>
 80056c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80056cc:	d204      	bcs.n	80056d8 <UART_SetConfig+0x1cc>
        {
          huart->Instance->BRR = usartdiv;
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056d4:	60da      	str	r2, [r3, #12]
 80056d6:	e078      	b.n	80057ca <UART_SetConfig+0x2be>
        }
        else
        {
          ret = HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80056de:	e074      	b.n	80057ca <UART_SetConfig+0x2be>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	69db      	ldr	r3, [r3, #28]
 80056e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056e8:	d137      	bne.n	800575a <UART_SetConfig+0x24e>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80056ea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80056ec:	f7fd fccc 	bl	8003088 <HAL_RCCEx_GetPeriphCLKFreq>
 80056f0:	62b8      	str	r0, [r7, #40]	@ 0x28

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80056f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d068      	beq.n	80057ca <UART_SetConfig+0x2be>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056fc:	4a30      	ldr	r2, [pc, #192]	@ (80057c0 <UART_SetConfig+0x2b4>)
 80056fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005702:	461a      	mov	r2, r3
 8005704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005706:	fbb3 f3f2 	udiv	r3, r3, r2
 800570a:	005a      	lsls	r2, r3, #1
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	085b      	lsrs	r3, r3, #1
 8005712:	441a      	add	r2, r3
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	fbb2 f3f3 	udiv	r3, r2, r3
 800571c:	627b      	str	r3, [r7, #36]	@ 0x24
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800571e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005720:	2b0f      	cmp	r3, #15
 8005722:	d916      	bls.n	8005752 <UART_SetConfig+0x246>
 8005724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005726:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800572a:	d212      	bcs.n	8005752 <UART_SetConfig+0x246>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800572c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800572e:	b29b      	uxth	r3, r3
 8005730:	f023 030f 	bic.w	r3, r3, #15
 8005734:	847b      	strh	r3, [r7, #34]	@ 0x22
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005738:	085b      	lsrs	r3, r3, #1
 800573a:	b29b      	uxth	r3, r3
 800573c:	f003 0307 	and.w	r3, r3, #7
 8005740:	b29a      	uxth	r2, r3
 8005742:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005744:	4313      	orrs	r3, r2
 8005746:	847b      	strh	r3, [r7, #34]	@ 0x22
        huart->Instance->BRR = brrtemp;
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800574e:	60da      	str	r2, [r3, #12]
 8005750:	e03b      	b.n	80057ca <UART_SetConfig+0x2be>
      }
      else
      {
        ret = HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8005758:	e037      	b.n	80057ca <UART_SetConfig+0x2be>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800575a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800575c:	f7fd fc94 	bl	8003088 <HAL_RCCEx_GetPeriphCLKFreq>
 8005760:	62b8      	str	r0, [r7, #40]	@ 0x28

    if (pclk != 0U)
 8005762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005764:	2b00      	cmp	r3, #0
 8005766:	d030      	beq.n	80057ca <UART_SetConfig+0x2be>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800576c:	4a14      	ldr	r2, [pc, #80]	@ (80057c0 <UART_SetConfig+0x2b4>)
 800576e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005772:	461a      	mov	r2, r3
 8005774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005776:	fbb3 f2f2 	udiv	r2, r3, r2
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	085b      	lsrs	r3, r3, #1
 8005780:	441a      	add	r2, r3
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	fbb2 f3f3 	udiv	r3, r2, r3
 800578a:	627b      	str	r3, [r7, #36]	@ 0x24
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800578c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800578e:	2b0f      	cmp	r3, #15
 8005790:	d918      	bls.n	80057c4 <UART_SetConfig+0x2b8>
 8005792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005794:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005798:	d214      	bcs.n	80057c4 <UART_SetConfig+0x2b8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800579a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800579c:	b29a      	uxth	r2, r3
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	60da      	str	r2, [r3, #12]
 80057a4:	e011      	b.n	80057ca <UART_SetConfig+0x2be>
 80057a6:	bf00      	nop
 80057a8:	cfff69f3 	.word	0xcfff69f3
 80057ac:	40042400 	.word	0x40042400
 80057b0:	40013800 	.word	0x40013800
 80057b4:	40004800 	.word	0x40004800
 80057b8:	40004c00 	.word	0x40004c00
 80057bc:	40005000 	.word	0x40005000
 80057c0:	08007034 	.word	0x08007034
      }
      else
      {
        ret = HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	2201      	movs	r2, #1
 80057ce:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	2201      	movs	r2, #1
 80057d6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	2200      	movs	r2, #0
 80057de:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	2200      	movs	r2, #0
 80057e4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80057e6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3738      	adds	r7, #56	@ 0x38
 80057ee:	46bd      	mov	sp, r7
 80057f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080057f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005800:	f003 0308 	and.w	r3, r3, #8
 8005804:	2b00      	cmp	r3, #0
 8005806:	d00a      	beq.n	800581e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	430a      	orrs	r2, r1
 800581c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005822:	f003 0301 	and.w	r3, r3, #1
 8005826:	2b00      	cmp	r3, #0
 8005828:	d00a      	beq.n	8005840 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	430a      	orrs	r2, r1
 800583e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005844:	f003 0302 	and.w	r3, r3, #2
 8005848:	2b00      	cmp	r3, #0
 800584a:	d00a      	beq.n	8005862 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	430a      	orrs	r2, r1
 8005860:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005866:	f003 0304 	and.w	r3, r3, #4
 800586a:	2b00      	cmp	r3, #0
 800586c:	d00a      	beq.n	8005884 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	430a      	orrs	r2, r1
 8005882:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005888:	f003 0310 	and.w	r3, r3, #16
 800588c:	2b00      	cmp	r3, #0
 800588e:	d00a      	beq.n	80058a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	430a      	orrs	r2, r1
 80058a4:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058aa:	f003 0320 	and.w	r3, r3, #32
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d00a      	beq.n	80058c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	430a      	orrs	r2, r1
 80058c6:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d01a      	beq.n	800590a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	430a      	orrs	r2, r1
 80058e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80058f2:	d10a      	bne.n	800590a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	430a      	orrs	r2, r1
 8005908:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800590e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005912:	2b00      	cmp	r3, #0
 8005914:	d00a      	beq.n	800592c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	430a      	orrs	r2, r1
 800592a:	605a      	str	r2, [r3, #4]
  }
}
 800592c:	bf00      	nop
 800592e:	370c      	adds	r7, #12
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b098      	sub	sp, #96	@ 0x60
 800593c:	af02      	add	r7, sp, #8
 800593e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005948:	f7fc f800 	bl	800194c <HAL_GetTick>
 800594c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 0308 	and.w	r3, r3, #8
 8005958:	2b08      	cmp	r3, #8
 800595a:	d12f      	bne.n	80059bc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800595c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005960:	9300      	str	r3, [sp, #0]
 8005962:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005964:	2200      	movs	r2, #0
 8005966:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f000 f88e 	bl	8005a8c <UART_WaitOnFlagUntilTimeout>
 8005970:	4603      	mov	r3, r0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d022      	beq.n	80059bc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800597c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800597e:	e853 3f00 	ldrex	r3, [r3]
 8005982:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005984:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005986:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800598a:	653b      	str	r3, [r7, #80]	@ 0x50
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	461a      	mov	r2, r3
 8005992:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005994:	647b      	str	r3, [r7, #68]	@ 0x44
 8005996:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005998:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800599a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800599c:	e841 2300 	strex	r3, r2, [r1]
 80059a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80059a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d1e6      	bne.n	8005976 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2220      	movs	r2, #32
 80059ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059b8:	2303      	movs	r3, #3
 80059ba:	e063      	b.n	8005a84 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 0304 	and.w	r3, r3, #4
 80059c6:	2b04      	cmp	r3, #4
 80059c8:	d149      	bne.n	8005a5e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059ca:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80059ce:	9300      	str	r3, [sp, #0]
 80059d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059d2:	2200      	movs	r2, #0
 80059d4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f000 f857 	bl	8005a8c <UART_WaitOnFlagUntilTimeout>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d03c      	beq.n	8005a5e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ec:	e853 3f00 	ldrex	r3, [r3]
 80059f0:	623b      	str	r3, [r7, #32]
   return(result);
 80059f2:	6a3b      	ldr	r3, [r7, #32]
 80059f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80059f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	461a      	mov	r2, r3
 8005a00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a02:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a04:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a0a:	e841 2300 	strex	r3, r2, [r1]
 8005a0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d1e6      	bne.n	80059e4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	3308      	adds	r3, #8
 8005a1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	e853 3f00 	ldrex	r3, [r3]
 8005a24:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f023 0301 	bic.w	r3, r3, #1
 8005a2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	3308      	adds	r3, #8
 8005a34:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a36:	61fa      	str	r2, [r7, #28]
 8005a38:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a3a:	69b9      	ldr	r1, [r7, #24]
 8005a3c:	69fa      	ldr	r2, [r7, #28]
 8005a3e:	e841 2300 	strex	r3, r2, [r1]
 8005a42:	617b      	str	r3, [r7, #20]
   return(result);
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d1e5      	bne.n	8005a16 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2220      	movs	r2, #32
 8005a4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a5a:	2303      	movs	r3, #3
 8005a5c:	e012      	b.n	8005a84 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2220      	movs	r2, #32
 8005a62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2220      	movs	r2, #32
 8005a6a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005a82:	2300      	movs	r3, #0
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3758      	adds	r7, #88	@ 0x58
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b084      	sub	sp, #16
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	60f8      	str	r0, [r7, #12]
 8005a94:	60b9      	str	r1, [r7, #8]
 8005a96:	603b      	str	r3, [r7, #0]
 8005a98:	4613      	mov	r3, r2
 8005a9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a9c:	e04f      	b.n	8005b3e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a9e:	69bb      	ldr	r3, [r7, #24]
 8005aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aa4:	d04b      	beq.n	8005b3e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005aa6:	f7fb ff51 	bl	800194c <HAL_GetTick>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	1ad3      	subs	r3, r2, r3
 8005ab0:	69ba      	ldr	r2, [r7, #24]
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d302      	bcc.n	8005abc <UART_WaitOnFlagUntilTimeout+0x30>
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d101      	bne.n	8005ac0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005abc:	2303      	movs	r3, #3
 8005abe:	e04e      	b.n	8005b5e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f003 0304 	and.w	r3, r3, #4
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d037      	beq.n	8005b3e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	2b80      	cmp	r3, #128	@ 0x80
 8005ad2:	d034      	beq.n	8005b3e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	2b40      	cmp	r3, #64	@ 0x40
 8005ad8:	d031      	beq.n	8005b3e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	69db      	ldr	r3, [r3, #28]
 8005ae0:	f003 0308 	and.w	r3, r3, #8
 8005ae4:	2b08      	cmp	r3, #8
 8005ae6:	d110      	bne.n	8005b0a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	2208      	movs	r2, #8
 8005aee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005af0:	68f8      	ldr	r0, [r7, #12]
 8005af2:	f000 f838 	bl	8005b66 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2208      	movs	r2, #8
 8005afa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2200      	movs	r2, #0
 8005b02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e029      	b.n	8005b5e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	69db      	ldr	r3, [r3, #28]
 8005b10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b18:	d111      	bne.n	8005b3e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005b22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b24:	68f8      	ldr	r0, [r7, #12]
 8005b26:	f000 f81e 	bl	8005b66 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2220      	movs	r2, #32
 8005b2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005b3a:	2303      	movs	r3, #3
 8005b3c:	e00f      	b.n	8005b5e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	69da      	ldr	r2, [r3, #28]
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	4013      	ands	r3, r2
 8005b48:	68ba      	ldr	r2, [r7, #8]
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	bf0c      	ite	eq
 8005b4e:	2301      	moveq	r3, #1
 8005b50:	2300      	movne	r3, #0
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	461a      	mov	r2, r3
 8005b56:	79fb      	ldrb	r3, [r7, #7]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d0a0      	beq.n	8005a9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b5c:	2300      	movs	r3, #0
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3710      	adds	r7, #16
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}

08005b66 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b66:	b480      	push	{r7}
 8005b68:	b095      	sub	sp, #84	@ 0x54
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b76:	e853 3f00 	ldrex	r3, [r3]
 8005b7a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b7e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	461a      	mov	r2, r3
 8005b8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b8c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b8e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b90:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005b92:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b94:	e841 2300 	strex	r3, r2, [r1]
 8005b98:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d1e6      	bne.n	8005b6e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	3308      	adds	r3, #8
 8005ba6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba8:	6a3b      	ldr	r3, [r7, #32]
 8005baa:	e853 3f00 	ldrex	r3, [r3]
 8005bae:	61fb      	str	r3, [r7, #28]
   return(result);
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005bb6:	f023 0301 	bic.w	r3, r3, #1
 8005bba:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	3308      	adds	r3, #8
 8005bc2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005bc4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005bc6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005bca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005bcc:	e841 2300 	strex	r3, r2, [r1]
 8005bd0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d1e3      	bne.n	8005ba0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d118      	bne.n	8005c12 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	e853 3f00 	ldrex	r3, [r3]
 8005bec:	60bb      	str	r3, [r7, #8]
   return(result);
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	f023 0310 	bic.w	r3, r3, #16
 8005bf4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005bfe:	61bb      	str	r3, [r7, #24]
 8005c00:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c02:	6979      	ldr	r1, [r7, #20]
 8005c04:	69ba      	ldr	r2, [r7, #24]
 8005c06:	e841 2300 	strex	r3, r2, [r1]
 8005c0a:	613b      	str	r3, [r7, #16]
   return(result);
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d1e6      	bne.n	8005be0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2220      	movs	r2, #32
 8005c16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005c26:	bf00      	nop
 8005c28:	3754      	adds	r7, #84	@ 0x54
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr

08005c32 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005c32:	b480      	push	{r7}
 8005c34:	b085      	sub	sp, #20
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d101      	bne.n	8005c48 <HAL_UARTEx_DisableFifoMode+0x16>
 8005c44:	2302      	movs	r3, #2
 8005c46:	e027      	b.n	8005c98 <HAL_UARTEx_DisableFifoMode+0x66>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2224      	movs	r2, #36	@ 0x24
 8005c54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f022 0201 	bic.w	r2, r2, #1
 8005c6e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005c76:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	68fa      	ldr	r2, [r7, #12]
 8005c84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2220      	movs	r2, #32
 8005c8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005c96:	2300      	movs	r3, #0
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3714      	adds	r7, #20
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d101      	bne.n	8005cbc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005cb8:	2302      	movs	r3, #2
 8005cba:	e02d      	b.n	8005d18 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2224      	movs	r2, #36	@ 0x24
 8005cc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f022 0201 	bic.w	r2, r2, #1
 8005ce2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	683a      	ldr	r2, [r7, #0]
 8005cf4:	430a      	orrs	r2, r1
 8005cf6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f000 f84f 	bl	8005d9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68fa      	ldr	r2, [r7, #12]
 8005d04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2220      	movs	r2, #32
 8005d0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005d16:	2300      	movs	r3, #0
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3710      	adds	r7, #16
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d101      	bne.n	8005d38 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005d34:	2302      	movs	r3, #2
 8005d36:	e02d      	b.n	8005d94 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2224      	movs	r2, #36	@ 0x24
 8005d44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f022 0201 	bic.w	r2, r2, #1
 8005d5e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	683a      	ldr	r2, [r7, #0]
 8005d70:	430a      	orrs	r2, r1
 8005d72:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f000 f811 	bl	8005d9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	68fa      	ldr	r2, [r7, #12]
 8005d80:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2220      	movs	r2, #32
 8005d86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005d92:	2300      	movs	r3, #0
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3710      	adds	r7, #16
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b085      	sub	sp, #20
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d108      	bne.n	8005dbe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005dbc:	e031      	b.n	8005e22 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005dbe:	2308      	movs	r3, #8
 8005dc0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005dc2:	2308      	movs	r3, #8
 8005dc4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	0e5b      	lsrs	r3, r3, #25
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	f003 0307 	and.w	r3, r3, #7
 8005dd4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	0f5b      	lsrs	r3, r3, #29
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	f003 0307 	and.w	r3, r3, #7
 8005de4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005de6:	7bbb      	ldrb	r3, [r7, #14]
 8005de8:	7b3a      	ldrb	r2, [r7, #12]
 8005dea:	4911      	ldr	r1, [pc, #68]	@ (8005e30 <UARTEx_SetNbDataToProcess+0x94>)
 8005dec:	5c8a      	ldrb	r2, [r1, r2]
 8005dee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005df2:	7b3a      	ldrb	r2, [r7, #12]
 8005df4:	490f      	ldr	r1, [pc, #60]	@ (8005e34 <UARTEx_SetNbDataToProcess+0x98>)
 8005df6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005df8:	fb93 f3f2 	sdiv	r3, r3, r2
 8005dfc:	b29a      	uxth	r2, r3
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005e04:	7bfb      	ldrb	r3, [r7, #15]
 8005e06:	7b7a      	ldrb	r2, [r7, #13]
 8005e08:	4909      	ldr	r1, [pc, #36]	@ (8005e30 <UARTEx_SetNbDataToProcess+0x94>)
 8005e0a:	5c8a      	ldrb	r2, [r1, r2]
 8005e0c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005e10:	7b7a      	ldrb	r2, [r7, #13]
 8005e12:	4908      	ldr	r1, [pc, #32]	@ (8005e34 <UARTEx_SetNbDataToProcess+0x98>)
 8005e14:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005e16:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e1a:	b29a      	uxth	r2, r3
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005e22:	bf00      	nop
 8005e24:	3714      	adds	r7, #20
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr
 8005e2e:	bf00      	nop
 8005e30:	0800704c 	.word	0x0800704c
 8005e34:	08007054 	.word	0x08007054

08005e38 <std>:
 8005e38:	2300      	movs	r3, #0
 8005e3a:	b510      	push	{r4, lr}
 8005e3c:	4604      	mov	r4, r0
 8005e3e:	6083      	str	r3, [r0, #8]
 8005e40:	8181      	strh	r1, [r0, #12]
 8005e42:	4619      	mov	r1, r3
 8005e44:	6643      	str	r3, [r0, #100]	@ 0x64
 8005e46:	81c2      	strh	r2, [r0, #14]
 8005e48:	2208      	movs	r2, #8
 8005e4a:	6183      	str	r3, [r0, #24]
 8005e4c:	e9c0 3300 	strd	r3, r3, [r0]
 8005e50:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005e54:	305c      	adds	r0, #92	@ 0x5c
 8005e56:	f000 f906 	bl	8006066 <memset>
 8005e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8005e90 <std+0x58>)
 8005e5c:	6224      	str	r4, [r4, #32]
 8005e5e:	6263      	str	r3, [r4, #36]	@ 0x24
 8005e60:	4b0c      	ldr	r3, [pc, #48]	@ (8005e94 <std+0x5c>)
 8005e62:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005e64:	4b0c      	ldr	r3, [pc, #48]	@ (8005e98 <std+0x60>)
 8005e66:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005e68:	4b0c      	ldr	r3, [pc, #48]	@ (8005e9c <std+0x64>)
 8005e6a:	6323      	str	r3, [r4, #48]	@ 0x30
 8005e6c:	4b0c      	ldr	r3, [pc, #48]	@ (8005ea0 <std+0x68>)
 8005e6e:	429c      	cmp	r4, r3
 8005e70:	d006      	beq.n	8005e80 <std+0x48>
 8005e72:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005e76:	4294      	cmp	r4, r2
 8005e78:	d002      	beq.n	8005e80 <std+0x48>
 8005e7a:	33d0      	adds	r3, #208	@ 0xd0
 8005e7c:	429c      	cmp	r4, r3
 8005e7e:	d105      	bne.n	8005e8c <std+0x54>
 8005e80:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005e84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e88:	f000 b966 	b.w	8006158 <__retarget_lock_init_recursive>
 8005e8c:	bd10      	pop	{r4, pc}
 8005e8e:	bf00      	nop
 8005e90:	08005fe1 	.word	0x08005fe1
 8005e94:	08006003 	.word	0x08006003
 8005e98:	0800603b 	.word	0x0800603b
 8005e9c:	0800605f 	.word	0x0800605f
 8005ea0:	200002c4 	.word	0x200002c4

08005ea4 <stdio_exit_handler>:
 8005ea4:	4a02      	ldr	r2, [pc, #8]	@ (8005eb0 <stdio_exit_handler+0xc>)
 8005ea6:	4903      	ldr	r1, [pc, #12]	@ (8005eb4 <stdio_exit_handler+0x10>)
 8005ea8:	4803      	ldr	r0, [pc, #12]	@ (8005eb8 <stdio_exit_handler+0x14>)
 8005eaa:	f000 b869 	b.w	8005f80 <_fwalk_sglue>
 8005eae:	bf00      	nop
 8005eb0:	2000001c 	.word	0x2000001c
 8005eb4:	08006a15 	.word	0x08006a15
 8005eb8:	2000002c 	.word	0x2000002c

08005ebc <cleanup_stdio>:
 8005ebc:	6841      	ldr	r1, [r0, #4]
 8005ebe:	4b0c      	ldr	r3, [pc, #48]	@ (8005ef0 <cleanup_stdio+0x34>)
 8005ec0:	4299      	cmp	r1, r3
 8005ec2:	b510      	push	{r4, lr}
 8005ec4:	4604      	mov	r4, r0
 8005ec6:	d001      	beq.n	8005ecc <cleanup_stdio+0x10>
 8005ec8:	f000 fda4 	bl	8006a14 <_fflush_r>
 8005ecc:	68a1      	ldr	r1, [r4, #8]
 8005ece:	4b09      	ldr	r3, [pc, #36]	@ (8005ef4 <cleanup_stdio+0x38>)
 8005ed0:	4299      	cmp	r1, r3
 8005ed2:	d002      	beq.n	8005eda <cleanup_stdio+0x1e>
 8005ed4:	4620      	mov	r0, r4
 8005ed6:	f000 fd9d 	bl	8006a14 <_fflush_r>
 8005eda:	68e1      	ldr	r1, [r4, #12]
 8005edc:	4b06      	ldr	r3, [pc, #24]	@ (8005ef8 <cleanup_stdio+0x3c>)
 8005ede:	4299      	cmp	r1, r3
 8005ee0:	d004      	beq.n	8005eec <cleanup_stdio+0x30>
 8005ee2:	4620      	mov	r0, r4
 8005ee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ee8:	f000 bd94 	b.w	8006a14 <_fflush_r>
 8005eec:	bd10      	pop	{r4, pc}
 8005eee:	bf00      	nop
 8005ef0:	200002c4 	.word	0x200002c4
 8005ef4:	2000032c 	.word	0x2000032c
 8005ef8:	20000394 	.word	0x20000394

08005efc <global_stdio_init.part.0>:
 8005efc:	b510      	push	{r4, lr}
 8005efe:	4b0b      	ldr	r3, [pc, #44]	@ (8005f2c <global_stdio_init.part.0+0x30>)
 8005f00:	2104      	movs	r1, #4
 8005f02:	4c0b      	ldr	r4, [pc, #44]	@ (8005f30 <global_stdio_init.part.0+0x34>)
 8005f04:	4a0b      	ldr	r2, [pc, #44]	@ (8005f34 <global_stdio_init.part.0+0x38>)
 8005f06:	4620      	mov	r0, r4
 8005f08:	601a      	str	r2, [r3, #0]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	f7ff ff94 	bl	8005e38 <std>
 8005f10:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005f14:	2201      	movs	r2, #1
 8005f16:	2109      	movs	r1, #9
 8005f18:	f7ff ff8e 	bl	8005e38 <std>
 8005f1c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005f20:	2202      	movs	r2, #2
 8005f22:	2112      	movs	r1, #18
 8005f24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f28:	f7ff bf86 	b.w	8005e38 <std>
 8005f2c:	200003fc 	.word	0x200003fc
 8005f30:	200002c4 	.word	0x200002c4
 8005f34:	08005ea5 	.word	0x08005ea5

08005f38 <__sfp_lock_acquire>:
 8005f38:	4801      	ldr	r0, [pc, #4]	@ (8005f40 <__sfp_lock_acquire+0x8>)
 8005f3a:	f000 b90e 	b.w	800615a <__retarget_lock_acquire_recursive>
 8005f3e:	bf00      	nop
 8005f40:	20000405 	.word	0x20000405

08005f44 <__sfp_lock_release>:
 8005f44:	4801      	ldr	r0, [pc, #4]	@ (8005f4c <__sfp_lock_release+0x8>)
 8005f46:	f000 b909 	b.w	800615c <__retarget_lock_release_recursive>
 8005f4a:	bf00      	nop
 8005f4c:	20000405 	.word	0x20000405

08005f50 <__sinit>:
 8005f50:	b510      	push	{r4, lr}
 8005f52:	4604      	mov	r4, r0
 8005f54:	f7ff fff0 	bl	8005f38 <__sfp_lock_acquire>
 8005f58:	6a23      	ldr	r3, [r4, #32]
 8005f5a:	b11b      	cbz	r3, 8005f64 <__sinit+0x14>
 8005f5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f60:	f7ff bff0 	b.w	8005f44 <__sfp_lock_release>
 8005f64:	4b04      	ldr	r3, [pc, #16]	@ (8005f78 <__sinit+0x28>)
 8005f66:	6223      	str	r3, [r4, #32]
 8005f68:	4b04      	ldr	r3, [pc, #16]	@ (8005f7c <__sinit+0x2c>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d1f5      	bne.n	8005f5c <__sinit+0xc>
 8005f70:	f7ff ffc4 	bl	8005efc <global_stdio_init.part.0>
 8005f74:	e7f2      	b.n	8005f5c <__sinit+0xc>
 8005f76:	bf00      	nop
 8005f78:	08005ebd 	.word	0x08005ebd
 8005f7c:	200003fc 	.word	0x200003fc

08005f80 <_fwalk_sglue>:
 8005f80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f84:	4607      	mov	r7, r0
 8005f86:	4688      	mov	r8, r1
 8005f88:	4614      	mov	r4, r2
 8005f8a:	2600      	movs	r6, #0
 8005f8c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005f90:	f1b9 0901 	subs.w	r9, r9, #1
 8005f94:	d505      	bpl.n	8005fa2 <_fwalk_sglue+0x22>
 8005f96:	6824      	ldr	r4, [r4, #0]
 8005f98:	2c00      	cmp	r4, #0
 8005f9a:	d1f7      	bne.n	8005f8c <_fwalk_sglue+0xc>
 8005f9c:	4630      	mov	r0, r6
 8005f9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fa2:	89ab      	ldrh	r3, [r5, #12]
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d907      	bls.n	8005fb8 <_fwalk_sglue+0x38>
 8005fa8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005fac:	3301      	adds	r3, #1
 8005fae:	d003      	beq.n	8005fb8 <_fwalk_sglue+0x38>
 8005fb0:	4629      	mov	r1, r5
 8005fb2:	4638      	mov	r0, r7
 8005fb4:	47c0      	blx	r8
 8005fb6:	4306      	orrs	r6, r0
 8005fb8:	3568      	adds	r5, #104	@ 0x68
 8005fba:	e7e9      	b.n	8005f90 <_fwalk_sglue+0x10>

08005fbc <iprintf>:
 8005fbc:	b40f      	push	{r0, r1, r2, r3}
 8005fbe:	b507      	push	{r0, r1, r2, lr}
 8005fc0:	4906      	ldr	r1, [pc, #24]	@ (8005fdc <iprintf+0x20>)
 8005fc2:	ab04      	add	r3, sp, #16
 8005fc4:	6808      	ldr	r0, [r1, #0]
 8005fc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8005fca:	6881      	ldr	r1, [r0, #8]
 8005fcc:	9301      	str	r3, [sp, #4]
 8005fce:	f000 f9f5 	bl	80063bc <_vfiprintf_r>
 8005fd2:	b003      	add	sp, #12
 8005fd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005fd8:	b004      	add	sp, #16
 8005fda:	4770      	bx	lr
 8005fdc:	20000028 	.word	0x20000028

08005fe0 <__sread>:
 8005fe0:	b510      	push	{r4, lr}
 8005fe2:	460c      	mov	r4, r1
 8005fe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fe8:	f000 f868 	bl	80060bc <_read_r>
 8005fec:	2800      	cmp	r0, #0
 8005fee:	bfab      	itete	ge
 8005ff0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005ff2:	89a3      	ldrhlt	r3, [r4, #12]
 8005ff4:	181b      	addge	r3, r3, r0
 8005ff6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005ffa:	bfac      	ite	ge
 8005ffc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005ffe:	81a3      	strhlt	r3, [r4, #12]
 8006000:	bd10      	pop	{r4, pc}

08006002 <__swrite>:
 8006002:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006006:	461f      	mov	r7, r3
 8006008:	898b      	ldrh	r3, [r1, #12]
 800600a:	4605      	mov	r5, r0
 800600c:	460c      	mov	r4, r1
 800600e:	05db      	lsls	r3, r3, #23
 8006010:	4616      	mov	r6, r2
 8006012:	d505      	bpl.n	8006020 <__swrite+0x1e>
 8006014:	2302      	movs	r3, #2
 8006016:	2200      	movs	r2, #0
 8006018:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800601c:	f000 f83c 	bl	8006098 <_lseek_r>
 8006020:	89a3      	ldrh	r3, [r4, #12]
 8006022:	4632      	mov	r2, r6
 8006024:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006028:	4628      	mov	r0, r5
 800602a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800602e:	81a3      	strh	r3, [r4, #12]
 8006030:	463b      	mov	r3, r7
 8006032:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006036:	f000 b853 	b.w	80060e0 <_write_r>

0800603a <__sseek>:
 800603a:	b510      	push	{r4, lr}
 800603c:	460c      	mov	r4, r1
 800603e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006042:	f000 f829 	bl	8006098 <_lseek_r>
 8006046:	1c43      	adds	r3, r0, #1
 8006048:	89a3      	ldrh	r3, [r4, #12]
 800604a:	bf15      	itete	ne
 800604c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800604e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006052:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006056:	81a3      	strheq	r3, [r4, #12]
 8006058:	bf18      	it	ne
 800605a:	81a3      	strhne	r3, [r4, #12]
 800605c:	bd10      	pop	{r4, pc}

0800605e <__sclose>:
 800605e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006062:	f000 b809 	b.w	8006078 <_close_r>

08006066 <memset>:
 8006066:	4402      	add	r2, r0
 8006068:	4603      	mov	r3, r0
 800606a:	4293      	cmp	r3, r2
 800606c:	d100      	bne.n	8006070 <memset+0xa>
 800606e:	4770      	bx	lr
 8006070:	f803 1b01 	strb.w	r1, [r3], #1
 8006074:	e7f9      	b.n	800606a <memset+0x4>
	...

08006078 <_close_r>:
 8006078:	b538      	push	{r3, r4, r5, lr}
 800607a:	2300      	movs	r3, #0
 800607c:	4d05      	ldr	r5, [pc, #20]	@ (8006094 <_close_r+0x1c>)
 800607e:	4604      	mov	r4, r0
 8006080:	4608      	mov	r0, r1
 8006082:	602b      	str	r3, [r5, #0]
 8006084:	f7fb f933 	bl	80012ee <_close>
 8006088:	1c43      	adds	r3, r0, #1
 800608a:	d102      	bne.n	8006092 <_close_r+0x1a>
 800608c:	682b      	ldr	r3, [r5, #0]
 800608e:	b103      	cbz	r3, 8006092 <_close_r+0x1a>
 8006090:	6023      	str	r3, [r4, #0]
 8006092:	bd38      	pop	{r3, r4, r5, pc}
 8006094:	20000400 	.word	0x20000400

08006098 <_lseek_r>:
 8006098:	b538      	push	{r3, r4, r5, lr}
 800609a:	4604      	mov	r4, r0
 800609c:	4d06      	ldr	r5, [pc, #24]	@ (80060b8 <_lseek_r+0x20>)
 800609e:	4608      	mov	r0, r1
 80060a0:	4611      	mov	r1, r2
 80060a2:	2200      	movs	r2, #0
 80060a4:	602a      	str	r2, [r5, #0]
 80060a6:	461a      	mov	r2, r3
 80060a8:	f7fb f948 	bl	800133c <_lseek>
 80060ac:	1c43      	adds	r3, r0, #1
 80060ae:	d102      	bne.n	80060b6 <_lseek_r+0x1e>
 80060b0:	682b      	ldr	r3, [r5, #0]
 80060b2:	b103      	cbz	r3, 80060b6 <_lseek_r+0x1e>
 80060b4:	6023      	str	r3, [r4, #0]
 80060b6:	bd38      	pop	{r3, r4, r5, pc}
 80060b8:	20000400 	.word	0x20000400

080060bc <_read_r>:
 80060bc:	b538      	push	{r3, r4, r5, lr}
 80060be:	4604      	mov	r4, r0
 80060c0:	4d06      	ldr	r5, [pc, #24]	@ (80060dc <_read_r+0x20>)
 80060c2:	4608      	mov	r0, r1
 80060c4:	4611      	mov	r1, r2
 80060c6:	2200      	movs	r2, #0
 80060c8:	602a      	str	r2, [r5, #0]
 80060ca:	461a      	mov	r2, r3
 80060cc:	f7fb f8d6 	bl	800127c <_read>
 80060d0:	1c43      	adds	r3, r0, #1
 80060d2:	d102      	bne.n	80060da <_read_r+0x1e>
 80060d4:	682b      	ldr	r3, [r5, #0]
 80060d6:	b103      	cbz	r3, 80060da <_read_r+0x1e>
 80060d8:	6023      	str	r3, [r4, #0]
 80060da:	bd38      	pop	{r3, r4, r5, pc}
 80060dc:	20000400 	.word	0x20000400

080060e0 <_write_r>:
 80060e0:	b538      	push	{r3, r4, r5, lr}
 80060e2:	4604      	mov	r4, r0
 80060e4:	4d06      	ldr	r5, [pc, #24]	@ (8006100 <_write_r+0x20>)
 80060e6:	4608      	mov	r0, r1
 80060e8:	4611      	mov	r1, r2
 80060ea:	2200      	movs	r2, #0
 80060ec:	602a      	str	r2, [r5, #0]
 80060ee:	461a      	mov	r2, r3
 80060f0:	f7fb f8e1 	bl	80012b6 <_write>
 80060f4:	1c43      	adds	r3, r0, #1
 80060f6:	d102      	bne.n	80060fe <_write_r+0x1e>
 80060f8:	682b      	ldr	r3, [r5, #0]
 80060fa:	b103      	cbz	r3, 80060fe <_write_r+0x1e>
 80060fc:	6023      	str	r3, [r4, #0]
 80060fe:	bd38      	pop	{r3, r4, r5, pc}
 8006100:	20000400 	.word	0x20000400

08006104 <__errno>:
 8006104:	4b01      	ldr	r3, [pc, #4]	@ (800610c <__errno+0x8>)
 8006106:	6818      	ldr	r0, [r3, #0]
 8006108:	4770      	bx	lr
 800610a:	bf00      	nop
 800610c:	20000028 	.word	0x20000028

08006110 <__libc_init_array>:
 8006110:	b570      	push	{r4, r5, r6, lr}
 8006112:	4d0d      	ldr	r5, [pc, #52]	@ (8006148 <__libc_init_array+0x38>)
 8006114:	2600      	movs	r6, #0
 8006116:	4c0d      	ldr	r4, [pc, #52]	@ (800614c <__libc_init_array+0x3c>)
 8006118:	1b64      	subs	r4, r4, r5
 800611a:	10a4      	asrs	r4, r4, #2
 800611c:	42a6      	cmp	r6, r4
 800611e:	d109      	bne.n	8006134 <__libc_init_array+0x24>
 8006120:	4d0b      	ldr	r5, [pc, #44]	@ (8006150 <__libc_init_array+0x40>)
 8006122:	2600      	movs	r6, #0
 8006124:	4c0b      	ldr	r4, [pc, #44]	@ (8006154 <__libc_init_array+0x44>)
 8006126:	f000 fdd3 	bl	8006cd0 <_init>
 800612a:	1b64      	subs	r4, r4, r5
 800612c:	10a4      	asrs	r4, r4, #2
 800612e:	42a6      	cmp	r6, r4
 8006130:	d105      	bne.n	800613e <__libc_init_array+0x2e>
 8006132:	bd70      	pop	{r4, r5, r6, pc}
 8006134:	f855 3b04 	ldr.w	r3, [r5], #4
 8006138:	3601      	adds	r6, #1
 800613a:	4798      	blx	r3
 800613c:	e7ee      	b.n	800611c <__libc_init_array+0xc>
 800613e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006142:	3601      	adds	r6, #1
 8006144:	4798      	blx	r3
 8006146:	e7f2      	b.n	800612e <__libc_init_array+0x1e>
 8006148:	08007098 	.word	0x08007098
 800614c:	08007098 	.word	0x08007098
 8006150:	08007098 	.word	0x08007098
 8006154:	0800709c 	.word	0x0800709c

08006158 <__retarget_lock_init_recursive>:
 8006158:	4770      	bx	lr

0800615a <__retarget_lock_acquire_recursive>:
 800615a:	4770      	bx	lr

0800615c <__retarget_lock_release_recursive>:
 800615c:	4770      	bx	lr

0800615e <memcpy>:
 800615e:	440a      	add	r2, r1
 8006160:	1e43      	subs	r3, r0, #1
 8006162:	4291      	cmp	r1, r2
 8006164:	d100      	bne.n	8006168 <memcpy+0xa>
 8006166:	4770      	bx	lr
 8006168:	b510      	push	{r4, lr}
 800616a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800616e:	4291      	cmp	r1, r2
 8006170:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006174:	d1f9      	bne.n	800616a <memcpy+0xc>
 8006176:	bd10      	pop	{r4, pc}

08006178 <_free_r>:
 8006178:	b538      	push	{r3, r4, r5, lr}
 800617a:	4605      	mov	r5, r0
 800617c:	2900      	cmp	r1, #0
 800617e:	d041      	beq.n	8006204 <_free_r+0x8c>
 8006180:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006184:	1f0c      	subs	r4, r1, #4
 8006186:	2b00      	cmp	r3, #0
 8006188:	bfb8      	it	lt
 800618a:	18e4      	addlt	r4, r4, r3
 800618c:	f000 f8e0 	bl	8006350 <__malloc_lock>
 8006190:	4a1d      	ldr	r2, [pc, #116]	@ (8006208 <_free_r+0x90>)
 8006192:	6813      	ldr	r3, [r2, #0]
 8006194:	b933      	cbnz	r3, 80061a4 <_free_r+0x2c>
 8006196:	6063      	str	r3, [r4, #4]
 8006198:	6014      	str	r4, [r2, #0]
 800619a:	4628      	mov	r0, r5
 800619c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061a0:	f000 b8dc 	b.w	800635c <__malloc_unlock>
 80061a4:	42a3      	cmp	r3, r4
 80061a6:	d908      	bls.n	80061ba <_free_r+0x42>
 80061a8:	6820      	ldr	r0, [r4, #0]
 80061aa:	1821      	adds	r1, r4, r0
 80061ac:	428b      	cmp	r3, r1
 80061ae:	bf01      	itttt	eq
 80061b0:	6819      	ldreq	r1, [r3, #0]
 80061b2:	685b      	ldreq	r3, [r3, #4]
 80061b4:	1809      	addeq	r1, r1, r0
 80061b6:	6021      	streq	r1, [r4, #0]
 80061b8:	e7ed      	b.n	8006196 <_free_r+0x1e>
 80061ba:	461a      	mov	r2, r3
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	b10b      	cbz	r3, 80061c4 <_free_r+0x4c>
 80061c0:	42a3      	cmp	r3, r4
 80061c2:	d9fa      	bls.n	80061ba <_free_r+0x42>
 80061c4:	6811      	ldr	r1, [r2, #0]
 80061c6:	1850      	adds	r0, r2, r1
 80061c8:	42a0      	cmp	r0, r4
 80061ca:	d10b      	bne.n	80061e4 <_free_r+0x6c>
 80061cc:	6820      	ldr	r0, [r4, #0]
 80061ce:	4401      	add	r1, r0
 80061d0:	1850      	adds	r0, r2, r1
 80061d2:	6011      	str	r1, [r2, #0]
 80061d4:	4283      	cmp	r3, r0
 80061d6:	d1e0      	bne.n	800619a <_free_r+0x22>
 80061d8:	6818      	ldr	r0, [r3, #0]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	4408      	add	r0, r1
 80061de:	6053      	str	r3, [r2, #4]
 80061e0:	6010      	str	r0, [r2, #0]
 80061e2:	e7da      	b.n	800619a <_free_r+0x22>
 80061e4:	d902      	bls.n	80061ec <_free_r+0x74>
 80061e6:	230c      	movs	r3, #12
 80061e8:	602b      	str	r3, [r5, #0]
 80061ea:	e7d6      	b.n	800619a <_free_r+0x22>
 80061ec:	6820      	ldr	r0, [r4, #0]
 80061ee:	1821      	adds	r1, r4, r0
 80061f0:	428b      	cmp	r3, r1
 80061f2:	bf02      	ittt	eq
 80061f4:	6819      	ldreq	r1, [r3, #0]
 80061f6:	685b      	ldreq	r3, [r3, #4]
 80061f8:	1809      	addeq	r1, r1, r0
 80061fa:	6063      	str	r3, [r4, #4]
 80061fc:	bf08      	it	eq
 80061fe:	6021      	streq	r1, [r4, #0]
 8006200:	6054      	str	r4, [r2, #4]
 8006202:	e7ca      	b.n	800619a <_free_r+0x22>
 8006204:	bd38      	pop	{r3, r4, r5, pc}
 8006206:	bf00      	nop
 8006208:	2000040c 	.word	0x2000040c

0800620c <sbrk_aligned>:
 800620c:	b570      	push	{r4, r5, r6, lr}
 800620e:	4e0f      	ldr	r6, [pc, #60]	@ (800624c <sbrk_aligned+0x40>)
 8006210:	460c      	mov	r4, r1
 8006212:	4605      	mov	r5, r0
 8006214:	6831      	ldr	r1, [r6, #0]
 8006216:	b911      	cbnz	r1, 800621e <sbrk_aligned+0x12>
 8006218:	f000 fcb8 	bl	8006b8c <_sbrk_r>
 800621c:	6030      	str	r0, [r6, #0]
 800621e:	4621      	mov	r1, r4
 8006220:	4628      	mov	r0, r5
 8006222:	f000 fcb3 	bl	8006b8c <_sbrk_r>
 8006226:	1c43      	adds	r3, r0, #1
 8006228:	d103      	bne.n	8006232 <sbrk_aligned+0x26>
 800622a:	f04f 34ff 	mov.w	r4, #4294967295
 800622e:	4620      	mov	r0, r4
 8006230:	bd70      	pop	{r4, r5, r6, pc}
 8006232:	1cc4      	adds	r4, r0, #3
 8006234:	f024 0403 	bic.w	r4, r4, #3
 8006238:	42a0      	cmp	r0, r4
 800623a:	d0f8      	beq.n	800622e <sbrk_aligned+0x22>
 800623c:	1a21      	subs	r1, r4, r0
 800623e:	4628      	mov	r0, r5
 8006240:	f000 fca4 	bl	8006b8c <_sbrk_r>
 8006244:	3001      	adds	r0, #1
 8006246:	d1f2      	bne.n	800622e <sbrk_aligned+0x22>
 8006248:	e7ef      	b.n	800622a <sbrk_aligned+0x1e>
 800624a:	bf00      	nop
 800624c:	20000408 	.word	0x20000408

08006250 <_malloc_r>:
 8006250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006254:	1ccd      	adds	r5, r1, #3
 8006256:	4606      	mov	r6, r0
 8006258:	f025 0503 	bic.w	r5, r5, #3
 800625c:	3508      	adds	r5, #8
 800625e:	2d0c      	cmp	r5, #12
 8006260:	bf38      	it	cc
 8006262:	250c      	movcc	r5, #12
 8006264:	2d00      	cmp	r5, #0
 8006266:	db01      	blt.n	800626c <_malloc_r+0x1c>
 8006268:	42a9      	cmp	r1, r5
 800626a:	d904      	bls.n	8006276 <_malloc_r+0x26>
 800626c:	230c      	movs	r3, #12
 800626e:	6033      	str	r3, [r6, #0]
 8006270:	2000      	movs	r0, #0
 8006272:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006276:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800634c <_malloc_r+0xfc>
 800627a:	f000 f869 	bl	8006350 <__malloc_lock>
 800627e:	f8d8 3000 	ldr.w	r3, [r8]
 8006282:	461c      	mov	r4, r3
 8006284:	bb44      	cbnz	r4, 80062d8 <_malloc_r+0x88>
 8006286:	4629      	mov	r1, r5
 8006288:	4630      	mov	r0, r6
 800628a:	f7ff ffbf 	bl	800620c <sbrk_aligned>
 800628e:	1c43      	adds	r3, r0, #1
 8006290:	4604      	mov	r4, r0
 8006292:	d158      	bne.n	8006346 <_malloc_r+0xf6>
 8006294:	f8d8 4000 	ldr.w	r4, [r8]
 8006298:	4627      	mov	r7, r4
 800629a:	2f00      	cmp	r7, #0
 800629c:	d143      	bne.n	8006326 <_malloc_r+0xd6>
 800629e:	2c00      	cmp	r4, #0
 80062a0:	d04b      	beq.n	800633a <_malloc_r+0xea>
 80062a2:	6823      	ldr	r3, [r4, #0]
 80062a4:	4639      	mov	r1, r7
 80062a6:	4630      	mov	r0, r6
 80062a8:	eb04 0903 	add.w	r9, r4, r3
 80062ac:	f000 fc6e 	bl	8006b8c <_sbrk_r>
 80062b0:	4581      	cmp	r9, r0
 80062b2:	d142      	bne.n	800633a <_malloc_r+0xea>
 80062b4:	6821      	ldr	r1, [r4, #0]
 80062b6:	4630      	mov	r0, r6
 80062b8:	1a6d      	subs	r5, r5, r1
 80062ba:	4629      	mov	r1, r5
 80062bc:	f7ff ffa6 	bl	800620c <sbrk_aligned>
 80062c0:	3001      	adds	r0, #1
 80062c2:	d03a      	beq.n	800633a <_malloc_r+0xea>
 80062c4:	6823      	ldr	r3, [r4, #0]
 80062c6:	442b      	add	r3, r5
 80062c8:	6023      	str	r3, [r4, #0]
 80062ca:	f8d8 3000 	ldr.w	r3, [r8]
 80062ce:	685a      	ldr	r2, [r3, #4]
 80062d0:	bb62      	cbnz	r2, 800632c <_malloc_r+0xdc>
 80062d2:	f8c8 7000 	str.w	r7, [r8]
 80062d6:	e00f      	b.n	80062f8 <_malloc_r+0xa8>
 80062d8:	6822      	ldr	r2, [r4, #0]
 80062da:	1b52      	subs	r2, r2, r5
 80062dc:	d420      	bmi.n	8006320 <_malloc_r+0xd0>
 80062de:	2a0b      	cmp	r2, #11
 80062e0:	d917      	bls.n	8006312 <_malloc_r+0xc2>
 80062e2:	1961      	adds	r1, r4, r5
 80062e4:	42a3      	cmp	r3, r4
 80062e6:	6025      	str	r5, [r4, #0]
 80062e8:	bf18      	it	ne
 80062ea:	6059      	strne	r1, [r3, #4]
 80062ec:	6863      	ldr	r3, [r4, #4]
 80062ee:	bf08      	it	eq
 80062f0:	f8c8 1000 	streq.w	r1, [r8]
 80062f4:	5162      	str	r2, [r4, r5]
 80062f6:	604b      	str	r3, [r1, #4]
 80062f8:	4630      	mov	r0, r6
 80062fa:	f000 f82f 	bl	800635c <__malloc_unlock>
 80062fe:	f104 000b 	add.w	r0, r4, #11
 8006302:	1d23      	adds	r3, r4, #4
 8006304:	f020 0007 	bic.w	r0, r0, #7
 8006308:	1ac2      	subs	r2, r0, r3
 800630a:	bf1c      	itt	ne
 800630c:	1a1b      	subne	r3, r3, r0
 800630e:	50a3      	strne	r3, [r4, r2]
 8006310:	e7af      	b.n	8006272 <_malloc_r+0x22>
 8006312:	6862      	ldr	r2, [r4, #4]
 8006314:	42a3      	cmp	r3, r4
 8006316:	bf0c      	ite	eq
 8006318:	f8c8 2000 	streq.w	r2, [r8]
 800631c:	605a      	strne	r2, [r3, #4]
 800631e:	e7eb      	b.n	80062f8 <_malloc_r+0xa8>
 8006320:	4623      	mov	r3, r4
 8006322:	6864      	ldr	r4, [r4, #4]
 8006324:	e7ae      	b.n	8006284 <_malloc_r+0x34>
 8006326:	463c      	mov	r4, r7
 8006328:	687f      	ldr	r7, [r7, #4]
 800632a:	e7b6      	b.n	800629a <_malloc_r+0x4a>
 800632c:	461a      	mov	r2, r3
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	42a3      	cmp	r3, r4
 8006332:	d1fb      	bne.n	800632c <_malloc_r+0xdc>
 8006334:	2300      	movs	r3, #0
 8006336:	6053      	str	r3, [r2, #4]
 8006338:	e7de      	b.n	80062f8 <_malloc_r+0xa8>
 800633a:	230c      	movs	r3, #12
 800633c:	4630      	mov	r0, r6
 800633e:	6033      	str	r3, [r6, #0]
 8006340:	f000 f80c 	bl	800635c <__malloc_unlock>
 8006344:	e794      	b.n	8006270 <_malloc_r+0x20>
 8006346:	6005      	str	r5, [r0, #0]
 8006348:	e7d6      	b.n	80062f8 <_malloc_r+0xa8>
 800634a:	bf00      	nop
 800634c:	2000040c 	.word	0x2000040c

08006350 <__malloc_lock>:
 8006350:	4801      	ldr	r0, [pc, #4]	@ (8006358 <__malloc_lock+0x8>)
 8006352:	f7ff bf02 	b.w	800615a <__retarget_lock_acquire_recursive>
 8006356:	bf00      	nop
 8006358:	20000404 	.word	0x20000404

0800635c <__malloc_unlock>:
 800635c:	4801      	ldr	r0, [pc, #4]	@ (8006364 <__malloc_unlock+0x8>)
 800635e:	f7ff befd 	b.w	800615c <__retarget_lock_release_recursive>
 8006362:	bf00      	nop
 8006364:	20000404 	.word	0x20000404

08006368 <__sfputc_r>:
 8006368:	6893      	ldr	r3, [r2, #8]
 800636a:	3b01      	subs	r3, #1
 800636c:	2b00      	cmp	r3, #0
 800636e:	b410      	push	{r4}
 8006370:	6093      	str	r3, [r2, #8]
 8006372:	da08      	bge.n	8006386 <__sfputc_r+0x1e>
 8006374:	6994      	ldr	r4, [r2, #24]
 8006376:	42a3      	cmp	r3, r4
 8006378:	db01      	blt.n	800637e <__sfputc_r+0x16>
 800637a:	290a      	cmp	r1, #10
 800637c:	d103      	bne.n	8006386 <__sfputc_r+0x1e>
 800637e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006382:	f000 bb6f 	b.w	8006a64 <__swbuf_r>
 8006386:	6813      	ldr	r3, [r2, #0]
 8006388:	1c58      	adds	r0, r3, #1
 800638a:	6010      	str	r0, [r2, #0]
 800638c:	4608      	mov	r0, r1
 800638e:	7019      	strb	r1, [r3, #0]
 8006390:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006394:	4770      	bx	lr

08006396 <__sfputs_r>:
 8006396:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006398:	4606      	mov	r6, r0
 800639a:	460f      	mov	r7, r1
 800639c:	4614      	mov	r4, r2
 800639e:	18d5      	adds	r5, r2, r3
 80063a0:	42ac      	cmp	r4, r5
 80063a2:	d101      	bne.n	80063a8 <__sfputs_r+0x12>
 80063a4:	2000      	movs	r0, #0
 80063a6:	e007      	b.n	80063b8 <__sfputs_r+0x22>
 80063a8:	463a      	mov	r2, r7
 80063aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063ae:	4630      	mov	r0, r6
 80063b0:	f7ff ffda 	bl	8006368 <__sfputc_r>
 80063b4:	1c43      	adds	r3, r0, #1
 80063b6:	d1f3      	bne.n	80063a0 <__sfputs_r+0xa>
 80063b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080063bc <_vfiprintf_r>:
 80063bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063c0:	460d      	mov	r5, r1
 80063c2:	b09d      	sub	sp, #116	@ 0x74
 80063c4:	4614      	mov	r4, r2
 80063c6:	4698      	mov	r8, r3
 80063c8:	4606      	mov	r6, r0
 80063ca:	b118      	cbz	r0, 80063d4 <_vfiprintf_r+0x18>
 80063cc:	6a03      	ldr	r3, [r0, #32]
 80063ce:	b90b      	cbnz	r3, 80063d4 <_vfiprintf_r+0x18>
 80063d0:	f7ff fdbe 	bl	8005f50 <__sinit>
 80063d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80063d6:	07d9      	lsls	r1, r3, #31
 80063d8:	d405      	bmi.n	80063e6 <_vfiprintf_r+0x2a>
 80063da:	89ab      	ldrh	r3, [r5, #12]
 80063dc:	059a      	lsls	r2, r3, #22
 80063de:	d402      	bmi.n	80063e6 <_vfiprintf_r+0x2a>
 80063e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80063e2:	f7ff feba 	bl	800615a <__retarget_lock_acquire_recursive>
 80063e6:	89ab      	ldrh	r3, [r5, #12]
 80063e8:	071b      	lsls	r3, r3, #28
 80063ea:	d501      	bpl.n	80063f0 <_vfiprintf_r+0x34>
 80063ec:	692b      	ldr	r3, [r5, #16]
 80063ee:	b99b      	cbnz	r3, 8006418 <_vfiprintf_r+0x5c>
 80063f0:	4629      	mov	r1, r5
 80063f2:	4630      	mov	r0, r6
 80063f4:	f000 fb74 	bl	8006ae0 <__swsetup_r>
 80063f8:	b170      	cbz	r0, 8006418 <_vfiprintf_r+0x5c>
 80063fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80063fc:	07dc      	lsls	r4, r3, #31
 80063fe:	d504      	bpl.n	800640a <_vfiprintf_r+0x4e>
 8006400:	f04f 30ff 	mov.w	r0, #4294967295
 8006404:	b01d      	add	sp, #116	@ 0x74
 8006406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800640a:	89ab      	ldrh	r3, [r5, #12]
 800640c:	0598      	lsls	r0, r3, #22
 800640e:	d4f7      	bmi.n	8006400 <_vfiprintf_r+0x44>
 8006410:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006412:	f7ff fea3 	bl	800615c <__retarget_lock_release_recursive>
 8006416:	e7f3      	b.n	8006400 <_vfiprintf_r+0x44>
 8006418:	2300      	movs	r3, #0
 800641a:	f8cd 800c 	str.w	r8, [sp, #12]
 800641e:	f04f 0901 	mov.w	r9, #1
 8006422:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 80065d8 <_vfiprintf_r+0x21c>
 8006426:	9309      	str	r3, [sp, #36]	@ 0x24
 8006428:	2320      	movs	r3, #32
 800642a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800642e:	2330      	movs	r3, #48	@ 0x30
 8006430:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006434:	4623      	mov	r3, r4
 8006436:	469a      	mov	sl, r3
 8006438:	f813 2b01 	ldrb.w	r2, [r3], #1
 800643c:	b10a      	cbz	r2, 8006442 <_vfiprintf_r+0x86>
 800643e:	2a25      	cmp	r2, #37	@ 0x25
 8006440:	d1f9      	bne.n	8006436 <_vfiprintf_r+0x7a>
 8006442:	ebba 0b04 	subs.w	fp, sl, r4
 8006446:	d00b      	beq.n	8006460 <_vfiprintf_r+0xa4>
 8006448:	465b      	mov	r3, fp
 800644a:	4622      	mov	r2, r4
 800644c:	4629      	mov	r1, r5
 800644e:	4630      	mov	r0, r6
 8006450:	f7ff ffa1 	bl	8006396 <__sfputs_r>
 8006454:	3001      	adds	r0, #1
 8006456:	f000 80a7 	beq.w	80065a8 <_vfiprintf_r+0x1ec>
 800645a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800645c:	445a      	add	r2, fp
 800645e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006460:	f89a 3000 	ldrb.w	r3, [sl]
 8006464:	2b00      	cmp	r3, #0
 8006466:	f000 809f 	beq.w	80065a8 <_vfiprintf_r+0x1ec>
 800646a:	2300      	movs	r3, #0
 800646c:	f04f 32ff 	mov.w	r2, #4294967295
 8006470:	f10a 0a01 	add.w	sl, sl, #1
 8006474:	9304      	str	r3, [sp, #16]
 8006476:	9307      	str	r3, [sp, #28]
 8006478:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800647c:	931a      	str	r3, [sp, #104]	@ 0x68
 800647e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006482:	4654      	mov	r4, sl
 8006484:	2205      	movs	r2, #5
 8006486:	4854      	ldr	r0, [pc, #336]	@ (80065d8 <_vfiprintf_r+0x21c>)
 8006488:	f814 1b01 	ldrb.w	r1, [r4], #1
 800648c:	f000 fb8e 	bl	8006bac <memchr>
 8006490:	9a04      	ldr	r2, [sp, #16]
 8006492:	b9d8      	cbnz	r0, 80064cc <_vfiprintf_r+0x110>
 8006494:	06d1      	lsls	r1, r2, #27
 8006496:	bf44      	itt	mi
 8006498:	2320      	movmi	r3, #32
 800649a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800649e:	0713      	lsls	r3, r2, #28
 80064a0:	bf44      	itt	mi
 80064a2:	232b      	movmi	r3, #43	@ 0x2b
 80064a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80064a8:	f89a 3000 	ldrb.w	r3, [sl]
 80064ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80064ae:	d015      	beq.n	80064dc <_vfiprintf_r+0x120>
 80064b0:	9a07      	ldr	r2, [sp, #28]
 80064b2:	4654      	mov	r4, sl
 80064b4:	2000      	movs	r0, #0
 80064b6:	f04f 0c0a 	mov.w	ip, #10
 80064ba:	4621      	mov	r1, r4
 80064bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80064c0:	3b30      	subs	r3, #48	@ 0x30
 80064c2:	2b09      	cmp	r3, #9
 80064c4:	d94b      	bls.n	800655e <_vfiprintf_r+0x1a2>
 80064c6:	b1b0      	cbz	r0, 80064f6 <_vfiprintf_r+0x13a>
 80064c8:	9207      	str	r2, [sp, #28]
 80064ca:	e014      	b.n	80064f6 <_vfiprintf_r+0x13a>
 80064cc:	eba0 0308 	sub.w	r3, r0, r8
 80064d0:	46a2      	mov	sl, r4
 80064d2:	fa09 f303 	lsl.w	r3, r9, r3
 80064d6:	4313      	orrs	r3, r2
 80064d8:	9304      	str	r3, [sp, #16]
 80064da:	e7d2      	b.n	8006482 <_vfiprintf_r+0xc6>
 80064dc:	9b03      	ldr	r3, [sp, #12]
 80064de:	1d19      	adds	r1, r3, #4
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	9103      	str	r1, [sp, #12]
 80064e6:	bfbb      	ittet	lt
 80064e8:	425b      	neglt	r3, r3
 80064ea:	f042 0202 	orrlt.w	r2, r2, #2
 80064ee:	9307      	strge	r3, [sp, #28]
 80064f0:	9307      	strlt	r3, [sp, #28]
 80064f2:	bfb8      	it	lt
 80064f4:	9204      	strlt	r2, [sp, #16]
 80064f6:	7823      	ldrb	r3, [r4, #0]
 80064f8:	2b2e      	cmp	r3, #46	@ 0x2e
 80064fa:	d10a      	bne.n	8006512 <_vfiprintf_r+0x156>
 80064fc:	7863      	ldrb	r3, [r4, #1]
 80064fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8006500:	d132      	bne.n	8006568 <_vfiprintf_r+0x1ac>
 8006502:	9b03      	ldr	r3, [sp, #12]
 8006504:	3402      	adds	r4, #2
 8006506:	1d1a      	adds	r2, r3, #4
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800650e:	9203      	str	r2, [sp, #12]
 8006510:	9305      	str	r3, [sp, #20]
 8006512:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80065e8 <_vfiprintf_r+0x22c>
 8006516:	2203      	movs	r2, #3
 8006518:	7821      	ldrb	r1, [r4, #0]
 800651a:	4650      	mov	r0, sl
 800651c:	f000 fb46 	bl	8006bac <memchr>
 8006520:	b138      	cbz	r0, 8006532 <_vfiprintf_r+0x176>
 8006522:	eba0 000a 	sub.w	r0, r0, sl
 8006526:	2240      	movs	r2, #64	@ 0x40
 8006528:	9b04      	ldr	r3, [sp, #16]
 800652a:	3401      	adds	r4, #1
 800652c:	4082      	lsls	r2, r0
 800652e:	4313      	orrs	r3, r2
 8006530:	9304      	str	r3, [sp, #16]
 8006532:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006536:	2206      	movs	r2, #6
 8006538:	4828      	ldr	r0, [pc, #160]	@ (80065dc <_vfiprintf_r+0x220>)
 800653a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800653e:	f000 fb35 	bl	8006bac <memchr>
 8006542:	2800      	cmp	r0, #0
 8006544:	d03f      	beq.n	80065c6 <_vfiprintf_r+0x20a>
 8006546:	4b26      	ldr	r3, [pc, #152]	@ (80065e0 <_vfiprintf_r+0x224>)
 8006548:	bb1b      	cbnz	r3, 8006592 <_vfiprintf_r+0x1d6>
 800654a:	9b03      	ldr	r3, [sp, #12]
 800654c:	3307      	adds	r3, #7
 800654e:	f023 0307 	bic.w	r3, r3, #7
 8006552:	3308      	adds	r3, #8
 8006554:	9303      	str	r3, [sp, #12]
 8006556:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006558:	443b      	add	r3, r7
 800655a:	9309      	str	r3, [sp, #36]	@ 0x24
 800655c:	e76a      	b.n	8006434 <_vfiprintf_r+0x78>
 800655e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006562:	460c      	mov	r4, r1
 8006564:	2001      	movs	r0, #1
 8006566:	e7a8      	b.n	80064ba <_vfiprintf_r+0xfe>
 8006568:	2300      	movs	r3, #0
 800656a:	3401      	adds	r4, #1
 800656c:	f04f 0c0a 	mov.w	ip, #10
 8006570:	4619      	mov	r1, r3
 8006572:	9305      	str	r3, [sp, #20]
 8006574:	4620      	mov	r0, r4
 8006576:	f810 2b01 	ldrb.w	r2, [r0], #1
 800657a:	3a30      	subs	r2, #48	@ 0x30
 800657c:	2a09      	cmp	r2, #9
 800657e:	d903      	bls.n	8006588 <_vfiprintf_r+0x1cc>
 8006580:	2b00      	cmp	r3, #0
 8006582:	d0c6      	beq.n	8006512 <_vfiprintf_r+0x156>
 8006584:	9105      	str	r1, [sp, #20]
 8006586:	e7c4      	b.n	8006512 <_vfiprintf_r+0x156>
 8006588:	fb0c 2101 	mla	r1, ip, r1, r2
 800658c:	4604      	mov	r4, r0
 800658e:	2301      	movs	r3, #1
 8006590:	e7f0      	b.n	8006574 <_vfiprintf_r+0x1b8>
 8006592:	ab03      	add	r3, sp, #12
 8006594:	462a      	mov	r2, r5
 8006596:	a904      	add	r1, sp, #16
 8006598:	4630      	mov	r0, r6
 800659a:	9300      	str	r3, [sp, #0]
 800659c:	4b11      	ldr	r3, [pc, #68]	@ (80065e4 <_vfiprintf_r+0x228>)
 800659e:	f3af 8000 	nop.w
 80065a2:	4607      	mov	r7, r0
 80065a4:	1c78      	adds	r0, r7, #1
 80065a6:	d1d6      	bne.n	8006556 <_vfiprintf_r+0x19a>
 80065a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80065aa:	07d9      	lsls	r1, r3, #31
 80065ac:	d405      	bmi.n	80065ba <_vfiprintf_r+0x1fe>
 80065ae:	89ab      	ldrh	r3, [r5, #12]
 80065b0:	059a      	lsls	r2, r3, #22
 80065b2:	d402      	bmi.n	80065ba <_vfiprintf_r+0x1fe>
 80065b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80065b6:	f7ff fdd1 	bl	800615c <__retarget_lock_release_recursive>
 80065ba:	89ab      	ldrh	r3, [r5, #12]
 80065bc:	065b      	lsls	r3, r3, #25
 80065be:	f53f af1f 	bmi.w	8006400 <_vfiprintf_r+0x44>
 80065c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80065c4:	e71e      	b.n	8006404 <_vfiprintf_r+0x48>
 80065c6:	ab03      	add	r3, sp, #12
 80065c8:	462a      	mov	r2, r5
 80065ca:	a904      	add	r1, sp, #16
 80065cc:	4630      	mov	r0, r6
 80065ce:	9300      	str	r3, [sp, #0]
 80065d0:	4b04      	ldr	r3, [pc, #16]	@ (80065e4 <_vfiprintf_r+0x228>)
 80065d2:	f000 f87d 	bl	80066d0 <_printf_i>
 80065d6:	e7e4      	b.n	80065a2 <_vfiprintf_r+0x1e6>
 80065d8:	0800705c 	.word	0x0800705c
 80065dc:	08007066 	.word	0x08007066
 80065e0:	00000000 	.word	0x00000000
 80065e4:	08006397 	.word	0x08006397
 80065e8:	08007062 	.word	0x08007062

080065ec <_printf_common>:
 80065ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065f0:	4616      	mov	r6, r2
 80065f2:	4698      	mov	r8, r3
 80065f4:	688a      	ldr	r2, [r1, #8]
 80065f6:	4607      	mov	r7, r0
 80065f8:	690b      	ldr	r3, [r1, #16]
 80065fa:	460c      	mov	r4, r1
 80065fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006600:	4293      	cmp	r3, r2
 8006602:	bfb8      	it	lt
 8006604:	4613      	movlt	r3, r2
 8006606:	6033      	str	r3, [r6, #0]
 8006608:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800660c:	b10a      	cbz	r2, 8006612 <_printf_common+0x26>
 800660e:	3301      	adds	r3, #1
 8006610:	6033      	str	r3, [r6, #0]
 8006612:	6823      	ldr	r3, [r4, #0]
 8006614:	0699      	lsls	r1, r3, #26
 8006616:	bf42      	ittt	mi
 8006618:	6833      	ldrmi	r3, [r6, #0]
 800661a:	3302      	addmi	r3, #2
 800661c:	6033      	strmi	r3, [r6, #0]
 800661e:	6825      	ldr	r5, [r4, #0]
 8006620:	f015 0506 	ands.w	r5, r5, #6
 8006624:	d106      	bne.n	8006634 <_printf_common+0x48>
 8006626:	f104 0a19 	add.w	sl, r4, #25
 800662a:	68e3      	ldr	r3, [r4, #12]
 800662c:	6832      	ldr	r2, [r6, #0]
 800662e:	1a9b      	subs	r3, r3, r2
 8006630:	42ab      	cmp	r3, r5
 8006632:	dc2b      	bgt.n	800668c <_printf_common+0xa0>
 8006634:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006638:	6822      	ldr	r2, [r4, #0]
 800663a:	3b00      	subs	r3, #0
 800663c:	bf18      	it	ne
 800663e:	2301      	movne	r3, #1
 8006640:	0692      	lsls	r2, r2, #26
 8006642:	d430      	bmi.n	80066a6 <_printf_common+0xba>
 8006644:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006648:	4641      	mov	r1, r8
 800664a:	4638      	mov	r0, r7
 800664c:	47c8      	blx	r9
 800664e:	3001      	adds	r0, #1
 8006650:	d023      	beq.n	800669a <_printf_common+0xae>
 8006652:	6823      	ldr	r3, [r4, #0]
 8006654:	341a      	adds	r4, #26
 8006656:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800665a:	f003 0306 	and.w	r3, r3, #6
 800665e:	2b04      	cmp	r3, #4
 8006660:	bf0a      	itet	eq
 8006662:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8006666:	2500      	movne	r5, #0
 8006668:	6833      	ldreq	r3, [r6, #0]
 800666a:	f04f 0600 	mov.w	r6, #0
 800666e:	bf08      	it	eq
 8006670:	1aed      	subeq	r5, r5, r3
 8006672:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006676:	bf08      	it	eq
 8006678:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800667c:	4293      	cmp	r3, r2
 800667e:	bfc4      	itt	gt
 8006680:	1a9b      	subgt	r3, r3, r2
 8006682:	18ed      	addgt	r5, r5, r3
 8006684:	42b5      	cmp	r5, r6
 8006686:	d11a      	bne.n	80066be <_printf_common+0xd2>
 8006688:	2000      	movs	r0, #0
 800668a:	e008      	b.n	800669e <_printf_common+0xb2>
 800668c:	2301      	movs	r3, #1
 800668e:	4652      	mov	r2, sl
 8006690:	4641      	mov	r1, r8
 8006692:	4638      	mov	r0, r7
 8006694:	47c8      	blx	r9
 8006696:	3001      	adds	r0, #1
 8006698:	d103      	bne.n	80066a2 <_printf_common+0xb6>
 800669a:	f04f 30ff 	mov.w	r0, #4294967295
 800669e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066a2:	3501      	adds	r5, #1
 80066a4:	e7c1      	b.n	800662a <_printf_common+0x3e>
 80066a6:	18e1      	adds	r1, r4, r3
 80066a8:	1c5a      	adds	r2, r3, #1
 80066aa:	2030      	movs	r0, #48	@ 0x30
 80066ac:	3302      	adds	r3, #2
 80066ae:	4422      	add	r2, r4
 80066b0:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80066b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80066b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80066bc:	e7c2      	b.n	8006644 <_printf_common+0x58>
 80066be:	2301      	movs	r3, #1
 80066c0:	4622      	mov	r2, r4
 80066c2:	4641      	mov	r1, r8
 80066c4:	4638      	mov	r0, r7
 80066c6:	47c8      	blx	r9
 80066c8:	3001      	adds	r0, #1
 80066ca:	d0e6      	beq.n	800669a <_printf_common+0xae>
 80066cc:	3601      	adds	r6, #1
 80066ce:	e7d9      	b.n	8006684 <_printf_common+0x98>

080066d0 <_printf_i>:
 80066d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80066d4:	7e0f      	ldrb	r7, [r1, #24]
 80066d6:	4691      	mov	r9, r2
 80066d8:	4680      	mov	r8, r0
 80066da:	460c      	mov	r4, r1
 80066dc:	2f78      	cmp	r7, #120	@ 0x78
 80066de:	469a      	mov	sl, r3
 80066e0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80066e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80066e6:	d807      	bhi.n	80066f8 <_printf_i+0x28>
 80066e8:	2f62      	cmp	r7, #98	@ 0x62
 80066ea:	d80a      	bhi.n	8006702 <_printf_i+0x32>
 80066ec:	2f00      	cmp	r7, #0
 80066ee:	f000 80d1 	beq.w	8006894 <_printf_i+0x1c4>
 80066f2:	2f58      	cmp	r7, #88	@ 0x58
 80066f4:	f000 80b8 	beq.w	8006868 <_printf_i+0x198>
 80066f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80066fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006700:	e03a      	b.n	8006778 <_printf_i+0xa8>
 8006702:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006706:	2b15      	cmp	r3, #21
 8006708:	d8f6      	bhi.n	80066f8 <_printf_i+0x28>
 800670a:	a101      	add	r1, pc, #4	@ (adr r1, 8006710 <_printf_i+0x40>)
 800670c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006710:	08006769 	.word	0x08006769
 8006714:	0800677d 	.word	0x0800677d
 8006718:	080066f9 	.word	0x080066f9
 800671c:	080066f9 	.word	0x080066f9
 8006720:	080066f9 	.word	0x080066f9
 8006724:	080066f9 	.word	0x080066f9
 8006728:	0800677d 	.word	0x0800677d
 800672c:	080066f9 	.word	0x080066f9
 8006730:	080066f9 	.word	0x080066f9
 8006734:	080066f9 	.word	0x080066f9
 8006738:	080066f9 	.word	0x080066f9
 800673c:	0800687b 	.word	0x0800687b
 8006740:	080067a7 	.word	0x080067a7
 8006744:	08006835 	.word	0x08006835
 8006748:	080066f9 	.word	0x080066f9
 800674c:	080066f9 	.word	0x080066f9
 8006750:	0800689d 	.word	0x0800689d
 8006754:	080066f9 	.word	0x080066f9
 8006758:	080067a7 	.word	0x080067a7
 800675c:	080066f9 	.word	0x080066f9
 8006760:	080066f9 	.word	0x080066f9
 8006764:	0800683d 	.word	0x0800683d
 8006768:	6833      	ldr	r3, [r6, #0]
 800676a:	1d1a      	adds	r2, r3, #4
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	6032      	str	r2, [r6, #0]
 8006770:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006774:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006778:	2301      	movs	r3, #1
 800677a:	e09c      	b.n	80068b6 <_printf_i+0x1e6>
 800677c:	6833      	ldr	r3, [r6, #0]
 800677e:	6820      	ldr	r0, [r4, #0]
 8006780:	1d19      	adds	r1, r3, #4
 8006782:	6031      	str	r1, [r6, #0]
 8006784:	0606      	lsls	r6, r0, #24
 8006786:	d501      	bpl.n	800678c <_printf_i+0xbc>
 8006788:	681d      	ldr	r5, [r3, #0]
 800678a:	e003      	b.n	8006794 <_printf_i+0xc4>
 800678c:	0645      	lsls	r5, r0, #25
 800678e:	d5fb      	bpl.n	8006788 <_printf_i+0xb8>
 8006790:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006794:	2d00      	cmp	r5, #0
 8006796:	da03      	bge.n	80067a0 <_printf_i+0xd0>
 8006798:	232d      	movs	r3, #45	@ 0x2d
 800679a:	426d      	negs	r5, r5
 800679c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80067a0:	4858      	ldr	r0, [pc, #352]	@ (8006904 <_printf_i+0x234>)
 80067a2:	230a      	movs	r3, #10
 80067a4:	e011      	b.n	80067ca <_printf_i+0xfa>
 80067a6:	6821      	ldr	r1, [r4, #0]
 80067a8:	6833      	ldr	r3, [r6, #0]
 80067aa:	0608      	lsls	r0, r1, #24
 80067ac:	f853 5b04 	ldr.w	r5, [r3], #4
 80067b0:	d402      	bmi.n	80067b8 <_printf_i+0xe8>
 80067b2:	0649      	lsls	r1, r1, #25
 80067b4:	bf48      	it	mi
 80067b6:	b2ad      	uxthmi	r5, r5
 80067b8:	2f6f      	cmp	r7, #111	@ 0x6f
 80067ba:	6033      	str	r3, [r6, #0]
 80067bc:	4851      	ldr	r0, [pc, #324]	@ (8006904 <_printf_i+0x234>)
 80067be:	bf14      	ite	ne
 80067c0:	230a      	movne	r3, #10
 80067c2:	2308      	moveq	r3, #8
 80067c4:	2100      	movs	r1, #0
 80067c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80067ca:	6866      	ldr	r6, [r4, #4]
 80067cc:	2e00      	cmp	r6, #0
 80067ce:	60a6      	str	r6, [r4, #8]
 80067d0:	db05      	blt.n	80067de <_printf_i+0x10e>
 80067d2:	6821      	ldr	r1, [r4, #0]
 80067d4:	432e      	orrs	r6, r5
 80067d6:	f021 0104 	bic.w	r1, r1, #4
 80067da:	6021      	str	r1, [r4, #0]
 80067dc:	d04b      	beq.n	8006876 <_printf_i+0x1a6>
 80067de:	4616      	mov	r6, r2
 80067e0:	fbb5 f1f3 	udiv	r1, r5, r3
 80067e4:	fb03 5711 	mls	r7, r3, r1, r5
 80067e8:	5dc7      	ldrb	r7, [r0, r7]
 80067ea:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80067ee:	462f      	mov	r7, r5
 80067f0:	460d      	mov	r5, r1
 80067f2:	42bb      	cmp	r3, r7
 80067f4:	d9f4      	bls.n	80067e0 <_printf_i+0x110>
 80067f6:	2b08      	cmp	r3, #8
 80067f8:	d10b      	bne.n	8006812 <_printf_i+0x142>
 80067fa:	6823      	ldr	r3, [r4, #0]
 80067fc:	07df      	lsls	r7, r3, #31
 80067fe:	d508      	bpl.n	8006812 <_printf_i+0x142>
 8006800:	6923      	ldr	r3, [r4, #16]
 8006802:	6861      	ldr	r1, [r4, #4]
 8006804:	4299      	cmp	r1, r3
 8006806:	bfde      	ittt	le
 8006808:	2330      	movle	r3, #48	@ 0x30
 800680a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800680e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006812:	1b92      	subs	r2, r2, r6
 8006814:	6122      	str	r2, [r4, #16]
 8006816:	464b      	mov	r3, r9
 8006818:	aa03      	add	r2, sp, #12
 800681a:	4621      	mov	r1, r4
 800681c:	4640      	mov	r0, r8
 800681e:	f8cd a000 	str.w	sl, [sp]
 8006822:	f7ff fee3 	bl	80065ec <_printf_common>
 8006826:	3001      	adds	r0, #1
 8006828:	d14a      	bne.n	80068c0 <_printf_i+0x1f0>
 800682a:	f04f 30ff 	mov.w	r0, #4294967295
 800682e:	b004      	add	sp, #16
 8006830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006834:	6823      	ldr	r3, [r4, #0]
 8006836:	f043 0320 	orr.w	r3, r3, #32
 800683a:	6023      	str	r3, [r4, #0]
 800683c:	2778      	movs	r7, #120	@ 0x78
 800683e:	4832      	ldr	r0, [pc, #200]	@ (8006908 <_printf_i+0x238>)
 8006840:	6823      	ldr	r3, [r4, #0]
 8006842:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006846:	061f      	lsls	r7, r3, #24
 8006848:	6831      	ldr	r1, [r6, #0]
 800684a:	f851 5b04 	ldr.w	r5, [r1], #4
 800684e:	d402      	bmi.n	8006856 <_printf_i+0x186>
 8006850:	065f      	lsls	r7, r3, #25
 8006852:	bf48      	it	mi
 8006854:	b2ad      	uxthmi	r5, r5
 8006856:	6031      	str	r1, [r6, #0]
 8006858:	07d9      	lsls	r1, r3, #31
 800685a:	bf44      	itt	mi
 800685c:	f043 0320 	orrmi.w	r3, r3, #32
 8006860:	6023      	strmi	r3, [r4, #0]
 8006862:	b11d      	cbz	r5, 800686c <_printf_i+0x19c>
 8006864:	2310      	movs	r3, #16
 8006866:	e7ad      	b.n	80067c4 <_printf_i+0xf4>
 8006868:	4826      	ldr	r0, [pc, #152]	@ (8006904 <_printf_i+0x234>)
 800686a:	e7e9      	b.n	8006840 <_printf_i+0x170>
 800686c:	6823      	ldr	r3, [r4, #0]
 800686e:	f023 0320 	bic.w	r3, r3, #32
 8006872:	6023      	str	r3, [r4, #0]
 8006874:	e7f6      	b.n	8006864 <_printf_i+0x194>
 8006876:	4616      	mov	r6, r2
 8006878:	e7bd      	b.n	80067f6 <_printf_i+0x126>
 800687a:	6833      	ldr	r3, [r6, #0]
 800687c:	6825      	ldr	r5, [r4, #0]
 800687e:	1d18      	adds	r0, r3, #4
 8006880:	6961      	ldr	r1, [r4, #20]
 8006882:	6030      	str	r0, [r6, #0]
 8006884:	062e      	lsls	r6, r5, #24
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	d501      	bpl.n	800688e <_printf_i+0x1be>
 800688a:	6019      	str	r1, [r3, #0]
 800688c:	e002      	b.n	8006894 <_printf_i+0x1c4>
 800688e:	0668      	lsls	r0, r5, #25
 8006890:	d5fb      	bpl.n	800688a <_printf_i+0x1ba>
 8006892:	8019      	strh	r1, [r3, #0]
 8006894:	2300      	movs	r3, #0
 8006896:	4616      	mov	r6, r2
 8006898:	6123      	str	r3, [r4, #16]
 800689a:	e7bc      	b.n	8006816 <_printf_i+0x146>
 800689c:	6833      	ldr	r3, [r6, #0]
 800689e:	2100      	movs	r1, #0
 80068a0:	1d1a      	adds	r2, r3, #4
 80068a2:	6032      	str	r2, [r6, #0]
 80068a4:	681e      	ldr	r6, [r3, #0]
 80068a6:	6862      	ldr	r2, [r4, #4]
 80068a8:	4630      	mov	r0, r6
 80068aa:	f000 f97f 	bl	8006bac <memchr>
 80068ae:	b108      	cbz	r0, 80068b4 <_printf_i+0x1e4>
 80068b0:	1b80      	subs	r0, r0, r6
 80068b2:	6060      	str	r0, [r4, #4]
 80068b4:	6863      	ldr	r3, [r4, #4]
 80068b6:	6123      	str	r3, [r4, #16]
 80068b8:	2300      	movs	r3, #0
 80068ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80068be:	e7aa      	b.n	8006816 <_printf_i+0x146>
 80068c0:	6923      	ldr	r3, [r4, #16]
 80068c2:	4632      	mov	r2, r6
 80068c4:	4649      	mov	r1, r9
 80068c6:	4640      	mov	r0, r8
 80068c8:	47d0      	blx	sl
 80068ca:	3001      	adds	r0, #1
 80068cc:	d0ad      	beq.n	800682a <_printf_i+0x15a>
 80068ce:	6823      	ldr	r3, [r4, #0]
 80068d0:	079b      	lsls	r3, r3, #30
 80068d2:	d413      	bmi.n	80068fc <_printf_i+0x22c>
 80068d4:	68e0      	ldr	r0, [r4, #12]
 80068d6:	9b03      	ldr	r3, [sp, #12]
 80068d8:	4298      	cmp	r0, r3
 80068da:	bfb8      	it	lt
 80068dc:	4618      	movlt	r0, r3
 80068de:	e7a6      	b.n	800682e <_printf_i+0x15e>
 80068e0:	2301      	movs	r3, #1
 80068e2:	4632      	mov	r2, r6
 80068e4:	4649      	mov	r1, r9
 80068e6:	4640      	mov	r0, r8
 80068e8:	47d0      	blx	sl
 80068ea:	3001      	adds	r0, #1
 80068ec:	d09d      	beq.n	800682a <_printf_i+0x15a>
 80068ee:	3501      	adds	r5, #1
 80068f0:	68e3      	ldr	r3, [r4, #12]
 80068f2:	9903      	ldr	r1, [sp, #12]
 80068f4:	1a5b      	subs	r3, r3, r1
 80068f6:	42ab      	cmp	r3, r5
 80068f8:	dcf2      	bgt.n	80068e0 <_printf_i+0x210>
 80068fa:	e7eb      	b.n	80068d4 <_printf_i+0x204>
 80068fc:	2500      	movs	r5, #0
 80068fe:	f104 0619 	add.w	r6, r4, #25
 8006902:	e7f5      	b.n	80068f0 <_printf_i+0x220>
 8006904:	0800706d 	.word	0x0800706d
 8006908:	0800707e 	.word	0x0800707e

0800690c <__sflush_r>:
 800690c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006914:	0716      	lsls	r6, r2, #28
 8006916:	4605      	mov	r5, r0
 8006918:	460c      	mov	r4, r1
 800691a:	d454      	bmi.n	80069c6 <__sflush_r+0xba>
 800691c:	684b      	ldr	r3, [r1, #4]
 800691e:	2b00      	cmp	r3, #0
 8006920:	dc02      	bgt.n	8006928 <__sflush_r+0x1c>
 8006922:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006924:	2b00      	cmp	r3, #0
 8006926:	dd48      	ble.n	80069ba <__sflush_r+0xae>
 8006928:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800692a:	2e00      	cmp	r6, #0
 800692c:	d045      	beq.n	80069ba <__sflush_r+0xae>
 800692e:	2300      	movs	r3, #0
 8006930:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006934:	682f      	ldr	r7, [r5, #0]
 8006936:	6a21      	ldr	r1, [r4, #32]
 8006938:	602b      	str	r3, [r5, #0]
 800693a:	d030      	beq.n	800699e <__sflush_r+0x92>
 800693c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800693e:	89a3      	ldrh	r3, [r4, #12]
 8006940:	0759      	lsls	r1, r3, #29
 8006942:	d505      	bpl.n	8006950 <__sflush_r+0x44>
 8006944:	6863      	ldr	r3, [r4, #4]
 8006946:	1ad2      	subs	r2, r2, r3
 8006948:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800694a:	b10b      	cbz	r3, 8006950 <__sflush_r+0x44>
 800694c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800694e:	1ad2      	subs	r2, r2, r3
 8006950:	2300      	movs	r3, #0
 8006952:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006954:	6a21      	ldr	r1, [r4, #32]
 8006956:	4628      	mov	r0, r5
 8006958:	47b0      	blx	r6
 800695a:	1c43      	adds	r3, r0, #1
 800695c:	89a3      	ldrh	r3, [r4, #12]
 800695e:	d106      	bne.n	800696e <__sflush_r+0x62>
 8006960:	6829      	ldr	r1, [r5, #0]
 8006962:	291d      	cmp	r1, #29
 8006964:	d82b      	bhi.n	80069be <__sflush_r+0xb2>
 8006966:	4a2a      	ldr	r2, [pc, #168]	@ (8006a10 <__sflush_r+0x104>)
 8006968:	40ca      	lsrs	r2, r1
 800696a:	07d6      	lsls	r6, r2, #31
 800696c:	d527      	bpl.n	80069be <__sflush_r+0xb2>
 800696e:	2200      	movs	r2, #0
 8006970:	04d9      	lsls	r1, r3, #19
 8006972:	6062      	str	r2, [r4, #4]
 8006974:	6922      	ldr	r2, [r4, #16]
 8006976:	6022      	str	r2, [r4, #0]
 8006978:	d504      	bpl.n	8006984 <__sflush_r+0x78>
 800697a:	1c42      	adds	r2, r0, #1
 800697c:	d101      	bne.n	8006982 <__sflush_r+0x76>
 800697e:	682b      	ldr	r3, [r5, #0]
 8006980:	b903      	cbnz	r3, 8006984 <__sflush_r+0x78>
 8006982:	6560      	str	r0, [r4, #84]	@ 0x54
 8006984:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006986:	602f      	str	r7, [r5, #0]
 8006988:	b1b9      	cbz	r1, 80069ba <__sflush_r+0xae>
 800698a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800698e:	4299      	cmp	r1, r3
 8006990:	d002      	beq.n	8006998 <__sflush_r+0x8c>
 8006992:	4628      	mov	r0, r5
 8006994:	f7ff fbf0 	bl	8006178 <_free_r>
 8006998:	2300      	movs	r3, #0
 800699a:	6363      	str	r3, [r4, #52]	@ 0x34
 800699c:	e00d      	b.n	80069ba <__sflush_r+0xae>
 800699e:	2301      	movs	r3, #1
 80069a0:	4628      	mov	r0, r5
 80069a2:	47b0      	blx	r6
 80069a4:	4602      	mov	r2, r0
 80069a6:	1c50      	adds	r0, r2, #1
 80069a8:	d1c9      	bne.n	800693e <__sflush_r+0x32>
 80069aa:	682b      	ldr	r3, [r5, #0]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d0c6      	beq.n	800693e <__sflush_r+0x32>
 80069b0:	2b1d      	cmp	r3, #29
 80069b2:	d001      	beq.n	80069b8 <__sflush_r+0xac>
 80069b4:	2b16      	cmp	r3, #22
 80069b6:	d11d      	bne.n	80069f4 <__sflush_r+0xe8>
 80069b8:	602f      	str	r7, [r5, #0]
 80069ba:	2000      	movs	r0, #0
 80069bc:	e021      	b.n	8006a02 <__sflush_r+0xf6>
 80069be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80069c2:	b21b      	sxth	r3, r3
 80069c4:	e01a      	b.n	80069fc <__sflush_r+0xf0>
 80069c6:	690f      	ldr	r7, [r1, #16]
 80069c8:	2f00      	cmp	r7, #0
 80069ca:	d0f6      	beq.n	80069ba <__sflush_r+0xae>
 80069cc:	0793      	lsls	r3, r2, #30
 80069ce:	680e      	ldr	r6, [r1, #0]
 80069d0:	600f      	str	r7, [r1, #0]
 80069d2:	bf0c      	ite	eq
 80069d4:	694b      	ldreq	r3, [r1, #20]
 80069d6:	2300      	movne	r3, #0
 80069d8:	eba6 0807 	sub.w	r8, r6, r7
 80069dc:	608b      	str	r3, [r1, #8]
 80069de:	f1b8 0f00 	cmp.w	r8, #0
 80069e2:	ddea      	ble.n	80069ba <__sflush_r+0xae>
 80069e4:	4643      	mov	r3, r8
 80069e6:	463a      	mov	r2, r7
 80069e8:	6a21      	ldr	r1, [r4, #32]
 80069ea:	4628      	mov	r0, r5
 80069ec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80069ee:	47b0      	blx	r6
 80069f0:	2800      	cmp	r0, #0
 80069f2:	dc08      	bgt.n	8006a06 <__sflush_r+0xfa>
 80069f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80069fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006a00:	81a3      	strh	r3, [r4, #12]
 8006a02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a06:	4407      	add	r7, r0
 8006a08:	eba8 0800 	sub.w	r8, r8, r0
 8006a0c:	e7e7      	b.n	80069de <__sflush_r+0xd2>
 8006a0e:	bf00      	nop
 8006a10:	20400001 	.word	0x20400001

08006a14 <_fflush_r>:
 8006a14:	b538      	push	{r3, r4, r5, lr}
 8006a16:	690b      	ldr	r3, [r1, #16]
 8006a18:	4605      	mov	r5, r0
 8006a1a:	460c      	mov	r4, r1
 8006a1c:	b913      	cbnz	r3, 8006a24 <_fflush_r+0x10>
 8006a1e:	2500      	movs	r5, #0
 8006a20:	4628      	mov	r0, r5
 8006a22:	bd38      	pop	{r3, r4, r5, pc}
 8006a24:	b118      	cbz	r0, 8006a2e <_fflush_r+0x1a>
 8006a26:	6a03      	ldr	r3, [r0, #32]
 8006a28:	b90b      	cbnz	r3, 8006a2e <_fflush_r+0x1a>
 8006a2a:	f7ff fa91 	bl	8005f50 <__sinit>
 8006a2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d0f3      	beq.n	8006a1e <_fflush_r+0xa>
 8006a36:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006a38:	07d0      	lsls	r0, r2, #31
 8006a3a:	d404      	bmi.n	8006a46 <_fflush_r+0x32>
 8006a3c:	0599      	lsls	r1, r3, #22
 8006a3e:	d402      	bmi.n	8006a46 <_fflush_r+0x32>
 8006a40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a42:	f7ff fb8a 	bl	800615a <__retarget_lock_acquire_recursive>
 8006a46:	4628      	mov	r0, r5
 8006a48:	4621      	mov	r1, r4
 8006a4a:	f7ff ff5f 	bl	800690c <__sflush_r>
 8006a4e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006a50:	4605      	mov	r5, r0
 8006a52:	07da      	lsls	r2, r3, #31
 8006a54:	d4e4      	bmi.n	8006a20 <_fflush_r+0xc>
 8006a56:	89a3      	ldrh	r3, [r4, #12]
 8006a58:	059b      	lsls	r3, r3, #22
 8006a5a:	d4e1      	bmi.n	8006a20 <_fflush_r+0xc>
 8006a5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a5e:	f7ff fb7d 	bl	800615c <__retarget_lock_release_recursive>
 8006a62:	e7dd      	b.n	8006a20 <_fflush_r+0xc>

08006a64 <__swbuf_r>:
 8006a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a66:	460e      	mov	r6, r1
 8006a68:	4614      	mov	r4, r2
 8006a6a:	4605      	mov	r5, r0
 8006a6c:	b118      	cbz	r0, 8006a76 <__swbuf_r+0x12>
 8006a6e:	6a03      	ldr	r3, [r0, #32]
 8006a70:	b90b      	cbnz	r3, 8006a76 <__swbuf_r+0x12>
 8006a72:	f7ff fa6d 	bl	8005f50 <__sinit>
 8006a76:	69a3      	ldr	r3, [r4, #24]
 8006a78:	60a3      	str	r3, [r4, #8]
 8006a7a:	89a3      	ldrh	r3, [r4, #12]
 8006a7c:	071a      	lsls	r2, r3, #28
 8006a7e:	d501      	bpl.n	8006a84 <__swbuf_r+0x20>
 8006a80:	6923      	ldr	r3, [r4, #16]
 8006a82:	b943      	cbnz	r3, 8006a96 <__swbuf_r+0x32>
 8006a84:	4621      	mov	r1, r4
 8006a86:	4628      	mov	r0, r5
 8006a88:	f000 f82a 	bl	8006ae0 <__swsetup_r>
 8006a8c:	b118      	cbz	r0, 8006a96 <__swbuf_r+0x32>
 8006a8e:	f04f 37ff 	mov.w	r7, #4294967295
 8006a92:	4638      	mov	r0, r7
 8006a94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a96:	6823      	ldr	r3, [r4, #0]
 8006a98:	b2f6      	uxtb	r6, r6
 8006a9a:	6922      	ldr	r2, [r4, #16]
 8006a9c:	4637      	mov	r7, r6
 8006a9e:	1a98      	subs	r0, r3, r2
 8006aa0:	6963      	ldr	r3, [r4, #20]
 8006aa2:	4283      	cmp	r3, r0
 8006aa4:	dc05      	bgt.n	8006ab2 <__swbuf_r+0x4e>
 8006aa6:	4621      	mov	r1, r4
 8006aa8:	4628      	mov	r0, r5
 8006aaa:	f7ff ffb3 	bl	8006a14 <_fflush_r>
 8006aae:	2800      	cmp	r0, #0
 8006ab0:	d1ed      	bne.n	8006a8e <__swbuf_r+0x2a>
 8006ab2:	68a3      	ldr	r3, [r4, #8]
 8006ab4:	3b01      	subs	r3, #1
 8006ab6:	60a3      	str	r3, [r4, #8]
 8006ab8:	6823      	ldr	r3, [r4, #0]
 8006aba:	1c5a      	adds	r2, r3, #1
 8006abc:	6022      	str	r2, [r4, #0]
 8006abe:	701e      	strb	r6, [r3, #0]
 8006ac0:	1c43      	adds	r3, r0, #1
 8006ac2:	6962      	ldr	r2, [r4, #20]
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d004      	beq.n	8006ad2 <__swbuf_r+0x6e>
 8006ac8:	89a3      	ldrh	r3, [r4, #12]
 8006aca:	07db      	lsls	r3, r3, #31
 8006acc:	d5e1      	bpl.n	8006a92 <__swbuf_r+0x2e>
 8006ace:	2e0a      	cmp	r6, #10
 8006ad0:	d1df      	bne.n	8006a92 <__swbuf_r+0x2e>
 8006ad2:	4621      	mov	r1, r4
 8006ad4:	4628      	mov	r0, r5
 8006ad6:	f7ff ff9d 	bl	8006a14 <_fflush_r>
 8006ada:	2800      	cmp	r0, #0
 8006adc:	d0d9      	beq.n	8006a92 <__swbuf_r+0x2e>
 8006ade:	e7d6      	b.n	8006a8e <__swbuf_r+0x2a>

08006ae0 <__swsetup_r>:
 8006ae0:	b538      	push	{r3, r4, r5, lr}
 8006ae2:	4b29      	ldr	r3, [pc, #164]	@ (8006b88 <__swsetup_r+0xa8>)
 8006ae4:	4605      	mov	r5, r0
 8006ae6:	460c      	mov	r4, r1
 8006ae8:	6818      	ldr	r0, [r3, #0]
 8006aea:	b118      	cbz	r0, 8006af4 <__swsetup_r+0x14>
 8006aec:	6a03      	ldr	r3, [r0, #32]
 8006aee:	b90b      	cbnz	r3, 8006af4 <__swsetup_r+0x14>
 8006af0:	f7ff fa2e 	bl	8005f50 <__sinit>
 8006af4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006af8:	0719      	lsls	r1, r3, #28
 8006afa:	d422      	bmi.n	8006b42 <__swsetup_r+0x62>
 8006afc:	06da      	lsls	r2, r3, #27
 8006afe:	d407      	bmi.n	8006b10 <__swsetup_r+0x30>
 8006b00:	2209      	movs	r2, #9
 8006b02:	602a      	str	r2, [r5, #0]
 8006b04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b08:	f04f 30ff 	mov.w	r0, #4294967295
 8006b0c:	81a3      	strh	r3, [r4, #12]
 8006b0e:	e033      	b.n	8006b78 <__swsetup_r+0x98>
 8006b10:	0758      	lsls	r0, r3, #29
 8006b12:	d512      	bpl.n	8006b3a <__swsetup_r+0x5a>
 8006b14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006b16:	b141      	cbz	r1, 8006b2a <__swsetup_r+0x4a>
 8006b18:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006b1c:	4299      	cmp	r1, r3
 8006b1e:	d002      	beq.n	8006b26 <__swsetup_r+0x46>
 8006b20:	4628      	mov	r0, r5
 8006b22:	f7ff fb29 	bl	8006178 <_free_r>
 8006b26:	2300      	movs	r3, #0
 8006b28:	6363      	str	r3, [r4, #52]	@ 0x34
 8006b2a:	89a3      	ldrh	r3, [r4, #12]
 8006b2c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006b30:	81a3      	strh	r3, [r4, #12]
 8006b32:	2300      	movs	r3, #0
 8006b34:	6063      	str	r3, [r4, #4]
 8006b36:	6923      	ldr	r3, [r4, #16]
 8006b38:	6023      	str	r3, [r4, #0]
 8006b3a:	89a3      	ldrh	r3, [r4, #12]
 8006b3c:	f043 0308 	orr.w	r3, r3, #8
 8006b40:	81a3      	strh	r3, [r4, #12]
 8006b42:	6923      	ldr	r3, [r4, #16]
 8006b44:	b94b      	cbnz	r3, 8006b5a <__swsetup_r+0x7a>
 8006b46:	89a3      	ldrh	r3, [r4, #12]
 8006b48:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006b4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b50:	d003      	beq.n	8006b5a <__swsetup_r+0x7a>
 8006b52:	4621      	mov	r1, r4
 8006b54:	4628      	mov	r0, r5
 8006b56:	f000 f85c 	bl	8006c12 <__smakebuf_r>
 8006b5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b5e:	f013 0201 	ands.w	r2, r3, #1
 8006b62:	d00a      	beq.n	8006b7a <__swsetup_r+0x9a>
 8006b64:	2200      	movs	r2, #0
 8006b66:	60a2      	str	r2, [r4, #8]
 8006b68:	6962      	ldr	r2, [r4, #20]
 8006b6a:	4252      	negs	r2, r2
 8006b6c:	61a2      	str	r2, [r4, #24]
 8006b6e:	6922      	ldr	r2, [r4, #16]
 8006b70:	b942      	cbnz	r2, 8006b84 <__swsetup_r+0xa4>
 8006b72:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006b76:	d1c5      	bne.n	8006b04 <__swsetup_r+0x24>
 8006b78:	bd38      	pop	{r3, r4, r5, pc}
 8006b7a:	0799      	lsls	r1, r3, #30
 8006b7c:	bf58      	it	pl
 8006b7e:	6962      	ldrpl	r2, [r4, #20]
 8006b80:	60a2      	str	r2, [r4, #8]
 8006b82:	e7f4      	b.n	8006b6e <__swsetup_r+0x8e>
 8006b84:	2000      	movs	r0, #0
 8006b86:	e7f7      	b.n	8006b78 <__swsetup_r+0x98>
 8006b88:	20000028 	.word	0x20000028

08006b8c <_sbrk_r>:
 8006b8c:	b538      	push	{r3, r4, r5, lr}
 8006b8e:	2300      	movs	r3, #0
 8006b90:	4d05      	ldr	r5, [pc, #20]	@ (8006ba8 <_sbrk_r+0x1c>)
 8006b92:	4604      	mov	r4, r0
 8006b94:	4608      	mov	r0, r1
 8006b96:	602b      	str	r3, [r5, #0]
 8006b98:	f7fa fbde 	bl	8001358 <_sbrk>
 8006b9c:	1c43      	adds	r3, r0, #1
 8006b9e:	d102      	bne.n	8006ba6 <_sbrk_r+0x1a>
 8006ba0:	682b      	ldr	r3, [r5, #0]
 8006ba2:	b103      	cbz	r3, 8006ba6 <_sbrk_r+0x1a>
 8006ba4:	6023      	str	r3, [r4, #0]
 8006ba6:	bd38      	pop	{r3, r4, r5, pc}
 8006ba8:	20000400 	.word	0x20000400

08006bac <memchr>:
 8006bac:	b2c9      	uxtb	r1, r1
 8006bae:	4603      	mov	r3, r0
 8006bb0:	4402      	add	r2, r0
 8006bb2:	b510      	push	{r4, lr}
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	d101      	bne.n	8006bbe <memchr+0x12>
 8006bba:	2000      	movs	r0, #0
 8006bbc:	e003      	b.n	8006bc6 <memchr+0x1a>
 8006bbe:	7804      	ldrb	r4, [r0, #0]
 8006bc0:	3301      	adds	r3, #1
 8006bc2:	428c      	cmp	r4, r1
 8006bc4:	d1f6      	bne.n	8006bb4 <memchr+0x8>
 8006bc6:	bd10      	pop	{r4, pc}

08006bc8 <__swhatbuf_r>:
 8006bc8:	b570      	push	{r4, r5, r6, lr}
 8006bca:	460c      	mov	r4, r1
 8006bcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bd0:	b096      	sub	sp, #88	@ 0x58
 8006bd2:	4615      	mov	r5, r2
 8006bd4:	2900      	cmp	r1, #0
 8006bd6:	461e      	mov	r6, r3
 8006bd8:	da0c      	bge.n	8006bf4 <__swhatbuf_r+0x2c>
 8006bda:	89a3      	ldrh	r3, [r4, #12]
 8006bdc:	2100      	movs	r1, #0
 8006bde:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006be2:	bf14      	ite	ne
 8006be4:	2340      	movne	r3, #64	@ 0x40
 8006be6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006bea:	2000      	movs	r0, #0
 8006bec:	6031      	str	r1, [r6, #0]
 8006bee:	602b      	str	r3, [r5, #0]
 8006bf0:	b016      	add	sp, #88	@ 0x58
 8006bf2:	bd70      	pop	{r4, r5, r6, pc}
 8006bf4:	466a      	mov	r2, sp
 8006bf6:	f000 f849 	bl	8006c8c <_fstat_r>
 8006bfa:	2800      	cmp	r0, #0
 8006bfc:	dbed      	blt.n	8006bda <__swhatbuf_r+0x12>
 8006bfe:	9901      	ldr	r1, [sp, #4]
 8006c00:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006c04:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006c08:	4259      	negs	r1, r3
 8006c0a:	4159      	adcs	r1, r3
 8006c0c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006c10:	e7eb      	b.n	8006bea <__swhatbuf_r+0x22>

08006c12 <__smakebuf_r>:
 8006c12:	898b      	ldrh	r3, [r1, #12]
 8006c14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c16:	079d      	lsls	r5, r3, #30
 8006c18:	4606      	mov	r6, r0
 8006c1a:	460c      	mov	r4, r1
 8006c1c:	d507      	bpl.n	8006c2e <__smakebuf_r+0x1c>
 8006c1e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006c22:	6023      	str	r3, [r4, #0]
 8006c24:	6123      	str	r3, [r4, #16]
 8006c26:	2301      	movs	r3, #1
 8006c28:	6163      	str	r3, [r4, #20]
 8006c2a:	b003      	add	sp, #12
 8006c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c2e:	ab01      	add	r3, sp, #4
 8006c30:	466a      	mov	r2, sp
 8006c32:	f7ff ffc9 	bl	8006bc8 <__swhatbuf_r>
 8006c36:	9f00      	ldr	r7, [sp, #0]
 8006c38:	4605      	mov	r5, r0
 8006c3a:	4630      	mov	r0, r6
 8006c3c:	4639      	mov	r1, r7
 8006c3e:	f7ff fb07 	bl	8006250 <_malloc_r>
 8006c42:	b948      	cbnz	r0, 8006c58 <__smakebuf_r+0x46>
 8006c44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c48:	059a      	lsls	r2, r3, #22
 8006c4a:	d4ee      	bmi.n	8006c2a <__smakebuf_r+0x18>
 8006c4c:	f023 0303 	bic.w	r3, r3, #3
 8006c50:	f043 0302 	orr.w	r3, r3, #2
 8006c54:	81a3      	strh	r3, [r4, #12]
 8006c56:	e7e2      	b.n	8006c1e <__smakebuf_r+0xc>
 8006c58:	89a3      	ldrh	r3, [r4, #12]
 8006c5a:	6020      	str	r0, [r4, #0]
 8006c5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c60:	81a3      	strh	r3, [r4, #12]
 8006c62:	9b01      	ldr	r3, [sp, #4]
 8006c64:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006c68:	b15b      	cbz	r3, 8006c82 <__smakebuf_r+0x70>
 8006c6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c6e:	4630      	mov	r0, r6
 8006c70:	f000 f81e 	bl	8006cb0 <_isatty_r>
 8006c74:	b128      	cbz	r0, 8006c82 <__smakebuf_r+0x70>
 8006c76:	89a3      	ldrh	r3, [r4, #12]
 8006c78:	f023 0303 	bic.w	r3, r3, #3
 8006c7c:	f043 0301 	orr.w	r3, r3, #1
 8006c80:	81a3      	strh	r3, [r4, #12]
 8006c82:	89a3      	ldrh	r3, [r4, #12]
 8006c84:	431d      	orrs	r5, r3
 8006c86:	81a5      	strh	r5, [r4, #12]
 8006c88:	e7cf      	b.n	8006c2a <__smakebuf_r+0x18>
	...

08006c8c <_fstat_r>:
 8006c8c:	b538      	push	{r3, r4, r5, lr}
 8006c8e:	2300      	movs	r3, #0
 8006c90:	4d06      	ldr	r5, [pc, #24]	@ (8006cac <_fstat_r+0x20>)
 8006c92:	4604      	mov	r4, r0
 8006c94:	4608      	mov	r0, r1
 8006c96:	4611      	mov	r1, r2
 8006c98:	602b      	str	r3, [r5, #0]
 8006c9a:	f7fa fb34 	bl	8001306 <_fstat>
 8006c9e:	1c43      	adds	r3, r0, #1
 8006ca0:	d102      	bne.n	8006ca8 <_fstat_r+0x1c>
 8006ca2:	682b      	ldr	r3, [r5, #0]
 8006ca4:	b103      	cbz	r3, 8006ca8 <_fstat_r+0x1c>
 8006ca6:	6023      	str	r3, [r4, #0]
 8006ca8:	bd38      	pop	{r3, r4, r5, pc}
 8006caa:	bf00      	nop
 8006cac:	20000400 	.word	0x20000400

08006cb0 <_isatty_r>:
 8006cb0:	b538      	push	{r3, r4, r5, lr}
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	4d05      	ldr	r5, [pc, #20]	@ (8006ccc <_isatty_r+0x1c>)
 8006cb6:	4604      	mov	r4, r0
 8006cb8:	4608      	mov	r0, r1
 8006cba:	602b      	str	r3, [r5, #0]
 8006cbc:	f7fa fb33 	bl	8001326 <_isatty>
 8006cc0:	1c43      	adds	r3, r0, #1
 8006cc2:	d102      	bne.n	8006cca <_isatty_r+0x1a>
 8006cc4:	682b      	ldr	r3, [r5, #0]
 8006cc6:	b103      	cbz	r3, 8006cca <_isatty_r+0x1a>
 8006cc8:	6023      	str	r3, [r4, #0]
 8006cca:	bd38      	pop	{r3, r4, r5, pc}
 8006ccc:	20000400 	.word	0x20000400

08006cd0 <_init>:
 8006cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cd2:	bf00      	nop
 8006cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cd6:	bc08      	pop	{r3}
 8006cd8:	469e      	mov	lr, r3
 8006cda:	4770      	bx	lr

08006cdc <_fini>:
 8006cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cde:	bf00      	nop
 8006ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ce2:	bc08      	pop	{r3}
 8006ce4:	469e      	mov	lr, r3
 8006ce6:	4770      	bx	lr
