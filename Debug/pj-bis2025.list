
pj-bis2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bafc  08000238  08000238  00001238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00017414  0800bd38  0800bd38  0000cd38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802314c  0802314c  000251e8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0802314c  0802314c  0002414c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08023154  08023154  000251e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08023154  08023154  00024154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08023158  08023158  00024158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0802315c  00025000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005cc  200001e8  08023344  000251e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007b4  08023344  000257b4  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  000251e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025f5d  00000000  00000000  0002521e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004294  00000000  00000000  0004b17b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c28  00000000  00000000  0004f410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003211b  00000000  00000000  00051038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00021749  00000000  00000000  00083153  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001417fd  00000000  00000000  000a489c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  001e6099  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 0000159a  00000000  00000000  001e60dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008bc0  00000000  00000000  001e7678  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  001f0238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	200001e8 	.word	0x200001e8
 8000254:	00000000 	.word	0x00000000
 8000258:	0800bd1c 	.word	0x0800bd1c

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	200001ec 	.word	0x200001ec
 8000274:	0800bd1c 	.word	0x0800bd1c

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_drsub>:
 8000288:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800028c:	e002      	b.n	8000294 <__adddf3>
 800028e:	bf00      	nop

08000290 <__aeabi_dsub>:
 8000290:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000294 <__adddf3>:
 8000294:	b530      	push	{r4, r5, lr}
 8000296:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800029a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800029e:	ea94 0f05 	teq	r4, r5
 80002a2:	bf08      	it	eq
 80002a4:	ea90 0f02 	teqeq	r0, r2
 80002a8:	bf1f      	itttt	ne
 80002aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ba:	f000 80e2 	beq.w	8000482 <__adddf3+0x1ee>
 80002be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002c6:	bfb8      	it	lt
 80002c8:	426d      	neglt	r5, r5
 80002ca:	dd0c      	ble.n	80002e6 <__adddf3+0x52>
 80002cc:	442c      	add	r4, r5
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	ea82 0000 	eor.w	r0, r2, r0
 80002da:	ea83 0101 	eor.w	r1, r3, r1
 80002de:	ea80 0202 	eor.w	r2, r0, r2
 80002e2:	ea81 0303 	eor.w	r3, r1, r3
 80002e6:	2d36      	cmp	r5, #54	@ 0x36
 80002e8:	bf88      	it	hi
 80002ea:	bd30      	pophi	{r4, r5, pc}
 80002ec:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002f4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002fc:	d002      	beq.n	8000304 <__adddf3+0x70>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000308:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800030c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000310:	d002      	beq.n	8000318 <__adddf3+0x84>
 8000312:	4252      	negs	r2, r2
 8000314:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000318:	ea94 0f05 	teq	r4, r5
 800031c:	f000 80a7 	beq.w	800046e <__adddf3+0x1da>
 8000320:	f1a4 0401 	sub.w	r4, r4, #1
 8000324:	f1d5 0e20 	rsbs	lr, r5, #32
 8000328:	db0d      	blt.n	8000346 <__adddf3+0xb2>
 800032a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800032e:	fa22 f205 	lsr.w	r2, r2, r5
 8000332:	1880      	adds	r0, r0, r2
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	fa03 f20e 	lsl.w	r2, r3, lr
 800033c:	1880      	adds	r0, r0, r2
 800033e:	fa43 f305 	asr.w	r3, r3, r5
 8000342:	4159      	adcs	r1, r3
 8000344:	e00e      	b.n	8000364 <__adddf3+0xd0>
 8000346:	f1a5 0520 	sub.w	r5, r5, #32
 800034a:	f10e 0e20 	add.w	lr, lr, #32
 800034e:	2a01      	cmp	r2, #1
 8000350:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000354:	bf28      	it	cs
 8000356:	f04c 0c02 	orrcs.w	ip, ip, #2
 800035a:	fa43 f305 	asr.w	r3, r3, r5
 800035e:	18c0      	adds	r0, r0, r3
 8000360:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000364:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000368:	d507      	bpl.n	800037a <__adddf3+0xe6>
 800036a:	f04f 0e00 	mov.w	lr, #0
 800036e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000372:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000376:	eb6e 0101 	sbc.w	r1, lr, r1
 800037a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800037e:	d31b      	bcc.n	80003b8 <__adddf3+0x124>
 8000380:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000384:	d30c      	bcc.n	80003a0 <__adddf3+0x10c>
 8000386:	0849      	lsrs	r1, r1, #1
 8000388:	ea5f 0030 	movs.w	r0, r0, rrx
 800038c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000390:	f104 0401 	add.w	r4, r4, #1
 8000394:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000398:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800039c:	f080 809a 	bcs.w	80004d4 <__adddf3+0x240>
 80003a0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003a4:	bf08      	it	eq
 80003a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003aa:	f150 0000 	adcs.w	r0, r0, #0
 80003ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003b2:	ea41 0105 	orr.w	r1, r1, r5
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003bc:	4140      	adcs	r0, r0
 80003be:	eb41 0101 	adc.w	r1, r1, r1
 80003c2:	3c01      	subs	r4, #1
 80003c4:	bf28      	it	cs
 80003c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003ca:	d2e9      	bcs.n	80003a0 <__adddf3+0x10c>
 80003cc:	f091 0f00 	teq	r1, #0
 80003d0:	bf04      	itt	eq
 80003d2:	4601      	moveq	r1, r0
 80003d4:	2000      	moveq	r0, #0
 80003d6:	fab1 f381 	clz	r3, r1
 80003da:	bf08      	it	eq
 80003dc:	3320      	addeq	r3, #32
 80003de:	f1a3 030b 	sub.w	r3, r3, #11
 80003e2:	f1b3 0220 	subs.w	r2, r3, #32
 80003e6:	da0c      	bge.n	8000402 <__adddf3+0x16e>
 80003e8:	320c      	adds	r2, #12
 80003ea:	dd08      	ble.n	80003fe <__adddf3+0x16a>
 80003ec:	f102 0c14 	add.w	ip, r2, #20
 80003f0:	f1c2 020c 	rsb	r2, r2, #12
 80003f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f8:	fa21 f102 	lsr.w	r1, r1, r2
 80003fc:	e00c      	b.n	8000418 <__adddf3+0x184>
 80003fe:	f102 0214 	add.w	r2, r2, #20
 8000402:	bfd8      	it	le
 8000404:	f1c2 0c20 	rsble	ip, r2, #32
 8000408:	fa01 f102 	lsl.w	r1, r1, r2
 800040c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000410:	bfdc      	itt	le
 8000412:	ea41 010c 	orrle.w	r1, r1, ip
 8000416:	4090      	lslle	r0, r2
 8000418:	1ae4      	subs	r4, r4, r3
 800041a:	bfa2      	ittt	ge
 800041c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000420:	4329      	orrge	r1, r5
 8000422:	bd30      	popge	{r4, r5, pc}
 8000424:	ea6f 0404 	mvn.w	r4, r4
 8000428:	3c1f      	subs	r4, #31
 800042a:	da1c      	bge.n	8000466 <__adddf3+0x1d2>
 800042c:	340c      	adds	r4, #12
 800042e:	dc0e      	bgt.n	800044e <__adddf3+0x1ba>
 8000430:	f104 0414 	add.w	r4, r4, #20
 8000434:	f1c4 0220 	rsb	r2, r4, #32
 8000438:	fa20 f004 	lsr.w	r0, r0, r4
 800043c:	fa01 f302 	lsl.w	r3, r1, r2
 8000440:	ea40 0003 	orr.w	r0, r0, r3
 8000444:	fa21 f304 	lsr.w	r3, r1, r4
 8000448:	ea45 0103 	orr.w	r1, r5, r3
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	f1c4 040c 	rsb	r4, r4, #12
 8000452:	f1c4 0220 	rsb	r2, r4, #32
 8000456:	fa20 f002 	lsr.w	r0, r0, r2
 800045a:	fa01 f304 	lsl.w	r3, r1, r4
 800045e:	ea40 0003 	orr.w	r0, r0, r3
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	fa21 f004 	lsr.w	r0, r1, r4
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f094 0f00 	teq	r4, #0
 8000472:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000476:	bf06      	itte	eq
 8000478:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800047c:	3401      	addeq	r4, #1
 800047e:	3d01      	subne	r5, #1
 8000480:	e74e      	b.n	8000320 <__adddf3+0x8c>
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf18      	it	ne
 8000488:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048c:	d029      	beq.n	80004e2 <__adddf3+0x24e>
 800048e:	ea94 0f05 	teq	r4, r5
 8000492:	bf08      	it	eq
 8000494:	ea90 0f02 	teqeq	r0, r2
 8000498:	d005      	beq.n	80004a6 <__adddf3+0x212>
 800049a:	ea54 0c00 	orrs.w	ip, r4, r0
 800049e:	bf04      	itt	eq
 80004a0:	4619      	moveq	r1, r3
 80004a2:	4610      	moveq	r0, r2
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea91 0f03 	teq	r1, r3
 80004aa:	bf1e      	ittt	ne
 80004ac:	2100      	movne	r1, #0
 80004ae:	2000      	movne	r0, #0
 80004b0:	bd30      	popne	{r4, r5, pc}
 80004b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004b6:	d105      	bne.n	80004c4 <__adddf3+0x230>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	4149      	adcs	r1, r1
 80004bc:	bf28      	it	cs
 80004be:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004c2:	bd30      	pop	{r4, r5, pc}
 80004c4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c8:	bf3c      	itt	cc
 80004ca:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004ce:	bd30      	popcc	{r4, r5, pc}
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004dc:	f04f 0000 	mov.w	r0, #0
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf1a      	itte	ne
 80004e8:	4619      	movne	r1, r3
 80004ea:	4610      	movne	r0, r2
 80004ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f0:	bf1c      	itt	ne
 80004f2:	460b      	movne	r3, r1
 80004f4:	4602      	movne	r2, r0
 80004f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004fa:	bf06      	itte	eq
 80004fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000500:	ea91 0f03 	teqeq	r1, r3
 8000504:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	bf00      	nop

0800050c <__aeabi_ui2d>:
 800050c:	f090 0f00 	teq	r0, #0
 8000510:	bf04      	itt	eq
 8000512:	2100      	moveq	r1, #0
 8000514:	4770      	bxeq	lr
 8000516:	b530      	push	{r4, r5, lr}
 8000518:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800051c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000520:	f04f 0500 	mov.w	r5, #0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e750      	b.n	80003cc <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_i2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000540:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000544:	bf48      	it	mi
 8000546:	4240      	negmi	r0, r0
 8000548:	f04f 0100 	mov.w	r1, #0
 800054c:	e73e      	b.n	80003cc <__adddf3+0x138>
 800054e:	bf00      	nop

08000550 <__aeabi_f2d>:
 8000550:	0042      	lsls	r2, r0, #1
 8000552:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800055e:	bf1f      	itttt	ne
 8000560:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000564:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000568:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800056c:	4770      	bxne	lr
 800056e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000572:	bf08      	it	eq
 8000574:	4770      	bxeq	lr
 8000576:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800057a:	bf04      	itt	eq
 800057c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000590:	e71c      	b.n	80003cc <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aed8 	beq.w	800037a <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6bd      	b.n	800037a <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_uldivmod>:
 8000bb0:	b953      	cbnz	r3, 8000bc8 <__aeabi_uldivmod+0x18>
 8000bb2:	b94a      	cbnz	r2, 8000bc8 <__aeabi_uldivmod+0x18>
 8000bb4:	2900      	cmp	r1, #0
 8000bb6:	bf08      	it	eq
 8000bb8:	2800      	cmpeq	r0, #0
 8000bba:	bf1c      	itt	ne
 8000bbc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bc0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bc4:	f000 b9b0 	b.w	8000f28 <__aeabi_idiv0>
 8000bc8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bcc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd0:	f000 f806 	bl	8000be0 <__udivmoddi4>
 8000bd4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bdc:	b004      	add	sp, #16
 8000bde:	4770      	bx	lr

08000be0 <__udivmoddi4>:
 8000be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000be4:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000be6:	4688      	mov	r8, r1
 8000be8:	4604      	mov	r4, r0
 8000bea:	468e      	mov	lr, r1
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d14a      	bne.n	8000c86 <__udivmoddi4+0xa6>
 8000bf0:	428a      	cmp	r2, r1
 8000bf2:	4617      	mov	r7, r2
 8000bf4:	d95f      	bls.n	8000cb6 <__udivmoddi4+0xd6>
 8000bf6:	fab2 f682 	clz	r6, r2
 8000bfa:	b14e      	cbz	r6, 8000c10 <__udivmoddi4+0x30>
 8000bfc:	f1c6 0320 	rsb	r3, r6, #32
 8000c00:	fa01 fe06 	lsl.w	lr, r1, r6
 8000c04:	40b7      	lsls	r7, r6
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	ea43 0e0e 	orr.w	lr, r3, lr
 8000c10:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c14:	fa1f fc87 	uxth.w	ip, r7
 8000c18:	0c23      	lsrs	r3, r4, #16
 8000c1a:	fbbe f1f8 	udiv	r1, lr, r8
 8000c1e:	fb08 ee11 	mls	lr, r8, r1, lr
 8000c22:	fb01 f20c 	mul.w	r2, r1, ip
 8000c26:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000c2a:	429a      	cmp	r2, r3
 8000c2c:	d907      	bls.n	8000c3e <__udivmoddi4+0x5e>
 8000c2e:	18fb      	adds	r3, r7, r3
 8000c30:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c34:	d202      	bcs.n	8000c3c <__udivmoddi4+0x5c>
 8000c36:	429a      	cmp	r2, r3
 8000c38:	f200 8154 	bhi.w	8000ee4 <__udivmoddi4+0x304>
 8000c3c:	4601      	mov	r1, r0
 8000c3e:	1a9b      	subs	r3, r3, r2
 8000c40:	b2a2      	uxth	r2, r4
 8000c42:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c46:	fb08 3310 	mls	r3, r8, r0, r3
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8000c52:	4594      	cmp	ip, r2
 8000c54:	d90b      	bls.n	8000c6e <__udivmoddi4+0x8e>
 8000c56:	18ba      	adds	r2, r7, r2
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8000c5c:	bf2c      	ite	cs
 8000c5e:	2401      	movcs	r4, #1
 8000c60:	2400      	movcc	r4, #0
 8000c62:	4594      	cmp	ip, r2
 8000c64:	d902      	bls.n	8000c6c <__udivmoddi4+0x8c>
 8000c66:	2c00      	cmp	r4, #0
 8000c68:	f000 813f 	beq.w	8000eea <__udivmoddi4+0x30a>
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c72:	eba2 020c 	sub.w	r2, r2, ip
 8000c76:	2100      	movs	r1, #0
 8000c78:	b11d      	cbz	r5, 8000c82 <__udivmoddi4+0xa2>
 8000c7a:	40f2      	lsrs	r2, r6
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	e9c5 2300 	strd	r2, r3, [r5]
 8000c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c86:	428b      	cmp	r3, r1
 8000c88:	d905      	bls.n	8000c96 <__udivmoddi4+0xb6>
 8000c8a:	b10d      	cbz	r5, 8000c90 <__udivmoddi4+0xb0>
 8000c8c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c90:	2100      	movs	r1, #0
 8000c92:	4608      	mov	r0, r1
 8000c94:	e7f5      	b.n	8000c82 <__udivmoddi4+0xa2>
 8000c96:	fab3 f183 	clz	r1, r3
 8000c9a:	2900      	cmp	r1, #0
 8000c9c:	d14e      	bne.n	8000d3c <__udivmoddi4+0x15c>
 8000c9e:	4543      	cmp	r3, r8
 8000ca0:	f0c0 8112 	bcc.w	8000ec8 <__udivmoddi4+0x2e8>
 8000ca4:	4282      	cmp	r2, r0
 8000ca6:	f240 810f 	bls.w	8000ec8 <__udivmoddi4+0x2e8>
 8000caa:	4608      	mov	r0, r1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e8      	beq.n	8000c82 <__udivmoddi4+0xa2>
 8000cb0:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cb4:	e7e5      	b.n	8000c82 <__udivmoddi4+0xa2>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f000 80ac 	beq.w	8000e14 <__udivmoddi4+0x234>
 8000cbc:	fab2 f682 	clz	r6, r2
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	f040 80bb 	bne.w	8000e3c <__udivmoddi4+0x25c>
 8000cc6:	1a8b      	subs	r3, r1, r2
 8000cc8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000ccc:	b2bc      	uxth	r4, r7
 8000cce:	2101      	movs	r1, #1
 8000cd0:	0c02      	lsrs	r2, r0, #16
 8000cd2:	b280      	uxth	r0, r0
 8000cd4:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cd8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cdc:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000ce0:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d90e      	bls.n	8000d06 <__udivmoddi4+0x126>
 8000ce8:	18fb      	adds	r3, r7, r3
 8000cea:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000cee:	bf2c      	ite	cs
 8000cf0:	f04f 0901 	movcs.w	r9, #1
 8000cf4:	f04f 0900 	movcc.w	r9, #0
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d903      	bls.n	8000d04 <__udivmoddi4+0x124>
 8000cfc:	f1b9 0f00 	cmp.w	r9, #0
 8000d00:	f000 80ec 	beq.w	8000edc <__udivmoddi4+0x2fc>
 8000d04:	46c4      	mov	ip, r8
 8000d06:	1a9b      	subs	r3, r3, r2
 8000d08:	fbb3 f8fe 	udiv	r8, r3, lr
 8000d0c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d10:	fb04 f408 	mul.w	r4, r4, r8
 8000d14:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 8000d18:	4294      	cmp	r4, r2
 8000d1a:	d90b      	bls.n	8000d34 <__udivmoddi4+0x154>
 8000d1c:	18ba      	adds	r2, r7, r2
 8000d1e:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8000d22:	bf2c      	ite	cs
 8000d24:	2001      	movcs	r0, #1
 8000d26:	2000      	movcc	r0, #0
 8000d28:	4294      	cmp	r4, r2
 8000d2a:	d902      	bls.n	8000d32 <__udivmoddi4+0x152>
 8000d2c:	2800      	cmp	r0, #0
 8000d2e:	f000 80d1 	beq.w	8000ed4 <__udivmoddi4+0x2f4>
 8000d32:	4698      	mov	r8, r3
 8000d34:	1b12      	subs	r2, r2, r4
 8000d36:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 8000d3a:	e79d      	b.n	8000c78 <__udivmoddi4+0x98>
 8000d3c:	f1c1 0620 	rsb	r6, r1, #32
 8000d40:	408b      	lsls	r3, r1
 8000d42:	fa08 f401 	lsl.w	r4, r8, r1
 8000d46:	fa00 f901 	lsl.w	r9, r0, r1
 8000d4a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d4e:	fa28 f806 	lsr.w	r8, r8, r6
 8000d52:	408a      	lsls	r2, r1
 8000d54:	431f      	orrs	r7, r3
 8000d56:	fa20 f306 	lsr.w	r3, r0, r6
 8000d5a:	0c38      	lsrs	r0, r7, #16
 8000d5c:	4323      	orrs	r3, r4
 8000d5e:	fa1f fc87 	uxth.w	ip, r7
 8000d62:	0c1c      	lsrs	r4, r3, #16
 8000d64:	fbb8 fef0 	udiv	lr, r8, r0
 8000d68:	fb00 881e 	mls	r8, r0, lr, r8
 8000d6c:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000d70:	fb0e f80c 	mul.w	r8, lr, ip
 8000d74:	45a0      	cmp	r8, r4
 8000d76:	d90e      	bls.n	8000d96 <__udivmoddi4+0x1b6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000d7e:	bf2c      	ite	cs
 8000d80:	f04f 0b01 	movcs.w	fp, #1
 8000d84:	f04f 0b00 	movcc.w	fp, #0
 8000d88:	45a0      	cmp	r8, r4
 8000d8a:	d903      	bls.n	8000d94 <__udivmoddi4+0x1b4>
 8000d8c:	f1bb 0f00 	cmp.w	fp, #0
 8000d90:	f000 80b8 	beq.w	8000f04 <__udivmoddi4+0x324>
 8000d94:	46d6      	mov	lr, sl
 8000d96:	eba4 0408 	sub.w	r4, r4, r8
 8000d9a:	fa1f f883 	uxth.w	r8, r3
 8000d9e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000da2:	fb00 4413 	mls	r4, r0, r3, r4
 8000da6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000daa:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000dae:	45a4      	cmp	ip, r4
 8000db0:	d90e      	bls.n	8000dd0 <__udivmoddi4+0x1f0>
 8000db2:	193c      	adds	r4, r7, r4
 8000db4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000db8:	bf2c      	ite	cs
 8000dba:	f04f 0801 	movcs.w	r8, #1
 8000dbe:	f04f 0800 	movcc.w	r8, #0
 8000dc2:	45a4      	cmp	ip, r4
 8000dc4:	d903      	bls.n	8000dce <__udivmoddi4+0x1ee>
 8000dc6:	f1b8 0f00 	cmp.w	r8, #0
 8000dca:	f000 809f 	beq.w	8000f0c <__udivmoddi4+0x32c>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dd4:	eba4 040c 	sub.w	r4, r4, ip
 8000dd8:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ddc:	4564      	cmp	r4, ip
 8000dde:	4673      	mov	r3, lr
 8000de0:	46e0      	mov	r8, ip
 8000de2:	d302      	bcc.n	8000dea <__udivmoddi4+0x20a>
 8000de4:	d107      	bne.n	8000df6 <__udivmoddi4+0x216>
 8000de6:	45f1      	cmp	r9, lr
 8000de8:	d205      	bcs.n	8000df6 <__udivmoddi4+0x216>
 8000dea:	ebbe 0302 	subs.w	r3, lr, r2
 8000dee:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000df2:	3801      	subs	r0, #1
 8000df4:	46e0      	mov	r8, ip
 8000df6:	b15d      	cbz	r5, 8000e10 <__udivmoddi4+0x230>
 8000df8:	ebb9 0203 	subs.w	r2, r9, r3
 8000dfc:	eb64 0408 	sbc.w	r4, r4, r8
 8000e00:	fa04 f606 	lsl.w	r6, r4, r6
 8000e04:	fa22 f301 	lsr.w	r3, r2, r1
 8000e08:	40cc      	lsrs	r4, r1
 8000e0a:	431e      	orrs	r6, r3
 8000e0c:	e9c5 6400 	strd	r6, r4, [r5]
 8000e10:	2100      	movs	r1, #0
 8000e12:	e736      	b.n	8000c82 <__udivmoddi4+0xa2>
 8000e14:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e18:	0c01      	lsrs	r1, r0, #16
 8000e1a:	4614      	mov	r4, r2
 8000e1c:	b280      	uxth	r0, r0
 8000e1e:	4696      	mov	lr, r2
 8000e20:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000e24:	2620      	movs	r6, #32
 8000e26:	4690      	mov	r8, r2
 8000e28:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8000e2c:	4610      	mov	r0, r2
 8000e2e:	fbb1 f1f2 	udiv	r1, r1, r2
 8000e32:	eba3 0308 	sub.w	r3, r3, r8
 8000e36:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e3a:	e74b      	b.n	8000cd4 <__udivmoddi4+0xf4>
 8000e3c:	40b7      	lsls	r7, r6
 8000e3e:	f1c6 0320 	rsb	r3, r6, #32
 8000e42:	fa01 f206 	lsl.w	r2, r1, r6
 8000e46:	fa21 f803 	lsr.w	r8, r1, r3
 8000e4a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e4e:	fa20 f303 	lsr.w	r3, r0, r3
 8000e52:	b2bc      	uxth	r4, r7
 8000e54:	40b0      	lsls	r0, r6
 8000e56:	4313      	orrs	r3, r2
 8000e58:	0c02      	lsrs	r2, r0, #16
 8000e5a:	0c19      	lsrs	r1, r3, #16
 8000e5c:	b280      	uxth	r0, r0
 8000e5e:	fbb8 f9fe 	udiv	r9, r8, lr
 8000e62:	fb0e 8819 	mls	r8, lr, r9, r8
 8000e66:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000e6a:	fb09 f804 	mul.w	r8, r9, r4
 8000e6e:	4588      	cmp	r8, r1
 8000e70:	d951      	bls.n	8000f16 <__udivmoddi4+0x336>
 8000e72:	1879      	adds	r1, r7, r1
 8000e74:	f109 3cff 	add.w	ip, r9, #4294967295	@ 0xffffffff
 8000e78:	bf2c      	ite	cs
 8000e7a:	f04f 0a01 	movcs.w	sl, #1
 8000e7e:	f04f 0a00 	movcc.w	sl, #0
 8000e82:	4588      	cmp	r8, r1
 8000e84:	d902      	bls.n	8000e8c <__udivmoddi4+0x2ac>
 8000e86:	f1ba 0f00 	cmp.w	sl, #0
 8000e8a:	d031      	beq.n	8000ef0 <__udivmoddi4+0x310>
 8000e8c:	eba1 0108 	sub.w	r1, r1, r8
 8000e90:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e94:	fb09 f804 	mul.w	r8, r9, r4
 8000e98:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e9c:	b29b      	uxth	r3, r3
 8000e9e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea2:	4543      	cmp	r3, r8
 8000ea4:	d235      	bcs.n	8000f12 <__udivmoddi4+0x332>
 8000ea6:	18fb      	adds	r3, r7, r3
 8000ea8:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000eac:	bf2c      	ite	cs
 8000eae:	f04f 0a01 	movcs.w	sl, #1
 8000eb2:	f04f 0a00 	movcc.w	sl, #0
 8000eb6:	4543      	cmp	r3, r8
 8000eb8:	d2bb      	bcs.n	8000e32 <__udivmoddi4+0x252>
 8000eba:	f1ba 0f00 	cmp.w	sl, #0
 8000ebe:	d1b8      	bne.n	8000e32 <__udivmoddi4+0x252>
 8000ec0:	f1a9 0102 	sub.w	r1, r9, #2
 8000ec4:	443b      	add	r3, r7
 8000ec6:	e7b4      	b.n	8000e32 <__udivmoddi4+0x252>
 8000ec8:	1a84      	subs	r4, r0, r2
 8000eca:	eb68 0203 	sbc.w	r2, r8, r3
 8000ece:	2001      	movs	r0, #1
 8000ed0:	4696      	mov	lr, r2
 8000ed2:	e6eb      	b.n	8000cac <__udivmoddi4+0xcc>
 8000ed4:	443a      	add	r2, r7
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	e72b      	b.n	8000d34 <__udivmoddi4+0x154>
 8000edc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ee0:	443b      	add	r3, r7
 8000ee2:	e710      	b.n	8000d06 <__udivmoddi4+0x126>
 8000ee4:	3902      	subs	r1, #2
 8000ee6:	443b      	add	r3, r7
 8000ee8:	e6a9      	b.n	8000c3e <__udivmoddi4+0x5e>
 8000eea:	443a      	add	r2, r7
 8000eec:	3802      	subs	r0, #2
 8000eee:	e6be      	b.n	8000c6e <__udivmoddi4+0x8e>
 8000ef0:	eba7 0808 	sub.w	r8, r7, r8
 8000ef4:	f1a9 0c02 	sub.w	ip, r9, #2
 8000ef8:	4441      	add	r1, r8
 8000efa:	fbb1 f9fe 	udiv	r9, r1, lr
 8000efe:	fb09 f804 	mul.w	r8, r9, r4
 8000f02:	e7c9      	b.n	8000e98 <__udivmoddi4+0x2b8>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	e744      	b.n	8000d96 <__udivmoddi4+0x1b6>
 8000f0c:	3b02      	subs	r3, #2
 8000f0e:	443c      	add	r4, r7
 8000f10:	e75e      	b.n	8000dd0 <__udivmoddi4+0x1f0>
 8000f12:	4649      	mov	r1, r9
 8000f14:	e78d      	b.n	8000e32 <__udivmoddi4+0x252>
 8000f16:	eba1 0108 	sub.w	r1, r1, r8
 8000f1a:	46cc      	mov	ip, r9
 8000f1c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f20:	fb09 f804 	mul.w	r8, r9, r4
 8000f24:	e7b8      	b.n	8000e98 <__udivmoddi4+0x2b8>
 8000f26:	bf00      	nop

08000f28 <__aeabi_idiv0>:
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop

08000f2c <LCD_SELECT>:
#define LCD_DISP_GPIO_Port GPIOC
#define LCD_DISP_Pin       GPIO_PIN_10
#define HDR4BIT   0x24

/* 内部ヘルパ */
static inline void LCD_SELECT  (void){ HAL_GPIO_WritePin(LCD_CS_GPIO_Port,  LCD_CS_Pin, GPIO_PIN_SET); }
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	2201      	movs	r2, #1
 8000f32:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f36:	4802      	ldr	r0, [pc, #8]	@ (8000f40 <LCD_SELECT+0x14>)
 8000f38:	f004 f8d0 	bl	80050dc <HAL_GPIO_WritePin>
 8000f3c:	bf00      	nop
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	42020800 	.word	0x42020800

08000f44 <LCD_UNSELECT>:
static inline void LCD_UNSELECT(void){ HAL_GPIO_WritePin(LCD_CS_GPIO_Port,  LCD_CS_Pin, GPIO_PIN_RESET);   }
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f4e:	4802      	ldr	r0, [pc, #8]	@ (8000f58 <LCD_UNSELECT+0x14>)
 8000f50:	f004 f8c4 	bl	80050dc <HAL_GPIO_WritePin>
 8000f54:	bf00      	nop
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	42020800 	.word	0x42020800

08000f5c <lcd_tx>:
static inline void lcd_tx(const uint8_t *p, size_t len){
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	6039      	str	r1, [r7, #0]
    HAL_SPI_Transmit(&hspi1, (uint8_t*)p, len, HAL_MAX_DELAY);
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	b29a      	uxth	r2, r3
 8000f6a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f6e:	6879      	ldr	r1, [r7, #4]
 8000f70:	4803      	ldr	r0, [pc, #12]	@ (8000f80 <lcd_tx+0x24>)
 8000f72:	f006 f835 	bl	8006fe0 <HAL_SPI_Transmit>
}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20000364 	.word	0x20000364

08000f84 <LCD_Init>:

/* --- Public API ------------------------------------------------- */
void LCD_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
    /* ハードリセット相当 */
    HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_RESET);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f8e:	480a      	ldr	r0, [pc, #40]	@ (8000fb8 <LCD_Init+0x34>)
 8000f90:	f004 f8a4 	bl	80050dc <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000f94:	2001      	movs	r0, #1
 8000f96:	f002 f827 	bl	8002fe8 <HAL_Delay>
    HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000fa0:	4805      	ldr	r0, [pc, #20]	@ (8000fb8 <LCD_Init+0x34>)
 8000fa2:	f004 f89b 	bl	80050dc <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000fa6:	200a      	movs	r0, #10
 8000fa8:	f002 f81e 	bl	8002fe8 <HAL_Delay>

    LCD_AllClear();                      /* メモリ全消去 (CMD 0x20) */
 8000fac:	f000 f806 	bl	8000fbc <LCD_AllClear>
    
    /* 画面全体を白で塗りつぶし */
    LCD_FillWhite();
 8000fb0:	f000 f850 	bl	8001054 <LCD_FillWhite>
}
 8000fb4:	bf00      	nop
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	42020800 	.word	0x42020800

08000fbc <LCD_AllClear>:

void LCD_AllClear(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
    const uint8_t cmd = 0x20;            /* ALL CLEAR */
 8000fc2:	2320      	movs	r3, #32
 8000fc4:	71fb      	strb	r3, [r7, #7]
    LCD_SELECT();
 8000fc6:	f7ff ffb1 	bl	8000f2c <LCD_SELECT>
    lcd_tx(&cmd, 1);
 8000fca:	1dfb      	adds	r3, r7, #7
 8000fcc:	2101      	movs	r1, #1
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff ffc4 	bl	8000f5c <lcd_tx>
    LCD_UNSELECT();
 8000fd4:	f7ff ffb6 	bl	8000f44 <LCD_UNSELECT>
}
 8000fd8:	bf00      	nop
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <LCD_SendLine4bit>:

void LCD_SendLine4bit(uint16_t y, const uint8_t *buf)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b09a      	sub	sp, #104	@ 0x68
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	6039      	str	r1, [r7, #0]
 8000fea:	80fb      	strh	r3, [r7, #6]
    uint16_t hdr = (HDR4BIT << 10) | (y & 0x03FF);   /* 16‑bit ヘッダ */
 8000fec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ff0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000ff4:	b21a      	sxth	r2, r3
 8000ff6:	4b16      	ldr	r3, [pc, #88]	@ (8001050 <LCD_SendLine4bit+0x70>)
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	b21b      	sxth	r3, r3
 8000ffc:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
    uint8_t  tx[2 + 88 + 2];                         /* hdr + data + 2B dummy */

    tx[0] = hdr >> 8;         /* MSB first */
 8001000:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8001004:	0a1b      	lsrs	r3, r3, #8
 8001006:	b29b      	uxth	r3, r3
 8001008:	b2db      	uxtb	r3, r3
 800100a:	723b      	strb	r3, [r7, #8]
    tx[1] = hdr & 0xFF;
 800100c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8001010:	b2db      	uxtb	r3, r3
 8001012:	727b      	strb	r3, [r7, #9]
    memcpy(&tx[2], buf, 88);
 8001014:	f107 0308 	add.w	r3, r7, #8
 8001018:	3302      	adds	r3, #2
 800101a:	2258      	movs	r2, #88	@ 0x58
 800101c:	6839      	ldr	r1, [r7, #0]
 800101e:	4618      	mov	r0, r3
 8001020:	f008 fd96 	bl	8009b50 <memcpy>
    tx[90] = tx[91] = 0x00;   /* 16clk transfer period */
 8001024:	2300      	movs	r3, #0
 8001026:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
 800102a:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 800102e:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62

    LCD_SELECT();             /* ★ CS = High (SCS=H がアクティブ) */
 8001032:	f7ff ff7b 	bl	8000f2c <LCD_SELECT>
    lcd_tx(tx, sizeof tx);    /* SPI 8‑bit, ≒20 MHz, MSB first */
 8001036:	f107 0308 	add.w	r3, r7, #8
 800103a:	215c      	movs	r1, #92	@ 0x5c
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff ff8d 	bl	8000f5c <lcd_tx>
    LCD_UNSELECT();           /* CS = Low */
 8001042:	f7ff ff7f 	bl	8000f44 <LCD_UNSELECT>
}
 8001046:	bf00      	nop
 8001048:	3768      	adds	r7, #104	@ 0x68
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	ffff9000 	.word	0xffff9000

08001054 <LCD_FillWhite>:

/* 画面全体を白で塗りつぶす */
void LCD_FillWhite(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b098      	sub	sp, #96	@ 0x60
 8001058:	af00      	add	r7, sp, #0
    uint8_t white_line[88];
    /* 全ピクセルを白(0b1110)で初期化 */
    for (int i = 0; i < 88; i++) {
 800105a:	2300      	movs	r3, #0
 800105c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800105e:	e007      	b.n	8001070 <LCD_FillWhite+0x1c>
        white_line[i] = 0xEE;  /* 0b11101110 = 白白 */
 8001060:	463a      	mov	r2, r7
 8001062:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001064:	4413      	add	r3, r2
 8001066:	22ee      	movs	r2, #238	@ 0xee
 8001068:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 88; i++) {
 800106a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800106c:	3301      	adds	r3, #1
 800106e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001070:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001072:	2b57      	cmp	r3, #87	@ 0x57
 8001074:	ddf4      	ble.n	8001060 <LCD_FillWhite+0xc>
    }
    
    /* 全ライン(176行)を白で塗りつぶし */
    for (uint16_t y = 0; y < 176; y++) {
 8001076:	2300      	movs	r3, #0
 8001078:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 800107c:	e00b      	b.n	8001096 <LCD_FillWhite+0x42>
        LCD_SendLine4bit(y, white_line);
 800107e:	463a      	mov	r2, r7
 8001080:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8001084:	4611      	mov	r1, r2
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff ffaa 	bl	8000fe0 <LCD_SendLine4bit>
    for (uint16_t y = 0; y < 176; y++) {
 800108c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8001090:	3301      	adds	r3, #1
 8001092:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8001096:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800109a:	2baf      	cmp	r3, #175	@ 0xaf
 800109c:	d9ef      	bls.n	800107e <LCD_FillWhite+0x2a>
    }
 800109e:	bf00      	nop
 80010a0:	bf00      	nop
 80010a2:	3760      	adds	r7, #96	@ 0x60
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <LCD_DrawString4bit>:
#define PIX_ON   0b0000   /* 黒 → 文字色 */
#define PIX_OFF  0b1110   /* RGB=111, D=0 → 白 → 背景色 */

/* 文字列を y0 行から 8 行ぶん描画（4‑bit data mode） */
void LCD_DrawString4bit(uint16_t y0, const char *str)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b09e      	sub	sp, #120	@ 0x78
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	6039      	str	r1, [r7, #0]
 80010b2:	80fb      	strh	r3, [r7, #6]
    const uint16_t len   = strlen(str);
 80010b4:	6838      	ldr	r0, [r7, #0]
 80010b6:	f7ff f8df 	bl	8000278 <strlen>
 80010ba:	4603      	mov	r3, r0
 80010bc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    const uint16_t xmax  = len * 8;          /* 文字幅(ピクセル) */
 80010c0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80010c4:	00db      	lsls	r3, r3, #3
 80010c6:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
    uint8_t rowbuf[88];                      /* 176px ÷2 = 88B */

    for (uint8_t font_row = 0; font_row < 8; ++font_row) {
 80010ca:	2300      	movs	r3, #0
 80010cc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80010d0:	e08d      	b.n	80011ee <LCD_DrawString4bit+0x146>
        /* 1 行分を白で初期化 */
        for (int i = 0; i < 88; i++) {
 80010d2:	2300      	movs	r3, #0
 80010d4:	673b      	str	r3, [r7, #112]	@ 0x70
 80010d6:	e008      	b.n	80010ea <LCD_DrawString4bit+0x42>
            rowbuf[i] = 0xEE;  /* 0b11101110 = 白白 */
 80010d8:	f107 020c 	add.w	r2, r7, #12
 80010dc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80010de:	4413      	add	r3, r2
 80010e0:	22ee      	movs	r2, #238	@ 0xee
 80010e2:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < 88; i++) {
 80010e4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80010e6:	3301      	adds	r3, #1
 80010e8:	673b      	str	r3, [r7, #112]	@ 0x70
 80010ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80010ec:	2b57      	cmp	r3, #87	@ 0x57
 80010ee:	ddf3      	ble.n	80010d8 <LCD_DrawString4bit+0x30>
        }

        /* 文字→ピクセル→4‑bit パック */
        for (uint16_t x = 0; x < xmax; ++x) {
 80010f0:	2300      	movs	r3, #0
 80010f2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 80010f6:	e063      	b.n	80011c0 <LCD_DrawString4bit+0x118>
            uint8_t ch   = str[x / 8] - 32;      /* ASCII32=space 基点 */
 80010f8:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80010fc:	08db      	lsrs	r3, r3, #3
 80010fe:	b29b      	uxth	r3, r3
 8001100:	461a      	mov	r2, r3
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	4413      	add	r3, r2
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	3b20      	subs	r3, #32
 800110a:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
            uint8_t bit  = (font8x8_basic[ch][font_row] >> (x % 8)) & 1;
 800110e:	f897 2069 	ldrb.w	r2, [r7, #105]	@ 0x69
 8001112:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8001116:	493b      	ldr	r1, [pc, #236]	@ (8001204 <LCD_DrawString4bit+0x15c>)
 8001118:	00d2      	lsls	r2, r2, #3
 800111a:	440a      	add	r2, r1
 800111c:	4413      	add	r3, r2
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	461a      	mov	r2, r3
 8001122:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001126:	f003 0307 	and.w	r3, r3, #7
 800112a:	fa42 f303 	asr.w	r3, r2, r3
 800112e:	b2db      	uxtb	r3, r3
 8001130:	f003 0301 	and.w	r3, r3, #1
 8001134:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
            
            /* 文字の部分のみ黒で上書き */
            if (bit) {
 8001138:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 800113c:	2b00      	cmp	r3, #0
 800113e:	d03a      	beq.n	80011b6 <LCD_DrawString4bit+0x10e>
                uint8_t pix4 = PIX_ON;  /* 黒 */
 8001140:	2300      	movs	r3, #0
 8001142:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
                uint16_t byte_idx = x / 2;
 8001146:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800114a:	085b      	lsrs	r3, r3, #1
 800114c:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
                if (x & 1)
 8001150:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001154:	f003 0301 	and.w	r3, r3, #1
 8001158:	2b00      	cmp	r3, #0
 800115a:	d015      	beq.n	8001188 <LCD_DrawString4bit+0xe0>
                    rowbuf[byte_idx] = (rowbuf[byte_idx] & 0xF0) | pix4;      /* 下位 nibble */
 800115c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8001160:	3378      	adds	r3, #120	@ 0x78
 8001162:	443b      	add	r3, r7
 8001164:	f813 3c6c 	ldrb.w	r3, [r3, #-108]
 8001168:	b25b      	sxtb	r3, r3
 800116a:	f023 030f 	bic.w	r3, r3, #15
 800116e:	b25a      	sxtb	r2, r3
 8001170:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8001174:	4313      	orrs	r3, r2
 8001176:	b25a      	sxtb	r2, r3
 8001178:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800117c:	b2d2      	uxtb	r2, r2
 800117e:	3378      	adds	r3, #120	@ 0x78
 8001180:	443b      	add	r3, r7
 8001182:	f803 2c6c 	strb.w	r2, [r3, #-108]
 8001186:	e016      	b.n	80011b6 <LCD_DrawString4bit+0x10e>
                else
                    rowbuf[byte_idx] = (rowbuf[byte_idx] & 0x0F) | (pix4 << 4); /* 上位 nibble */
 8001188:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800118c:	3378      	adds	r3, #120	@ 0x78
 800118e:	443b      	add	r3, r7
 8001190:	f813 3c6c 	ldrb.w	r3, [r3, #-108]
 8001194:	b25b      	sxtb	r3, r3
 8001196:	f003 030f 	and.w	r3, r3, #15
 800119a:	b25a      	sxtb	r2, r3
 800119c:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80011a0:	011b      	lsls	r3, r3, #4
 80011a2:	b25b      	sxtb	r3, r3
 80011a4:	4313      	orrs	r3, r2
 80011a6:	b25a      	sxtb	r2, r3
 80011a8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80011ac:	b2d2      	uxtb	r2, r2
 80011ae:	3378      	adds	r3, #120	@ 0x78
 80011b0:	443b      	add	r3, r7
 80011b2:	f803 2c6c 	strb.w	r2, [r3, #-108]
        for (uint16_t x = 0; x < xmax; ++x) {
 80011b6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80011ba:	3301      	adds	r3, #1
 80011bc:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 80011c0:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 80011c4:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d395      	bcc.n	80010f8 <LCD_DrawString4bit+0x50>
            }
        }
        /* 画面に送る（4‑bit data mode ヘッダ + dummy 16clk は関数側で付加）*/
        LCD_SendLine4bit(y0 + font_row, rowbuf);
 80011cc:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80011d0:	b29a      	uxth	r2, r3
 80011d2:	88fb      	ldrh	r3, [r7, #6]
 80011d4:	4413      	add	r3, r2
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	f107 020c 	add.w	r2, r7, #12
 80011dc:	4611      	mov	r1, r2
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff fefe 	bl	8000fe0 <LCD_SendLine4bit>
    for (uint8_t font_row = 0; font_row < 8; ++font_row) {
 80011e4:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80011e8:	3301      	adds	r3, #1
 80011ea:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80011ee:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80011f2:	2b07      	cmp	r3, #7
 80011f4:	f67f af6d 	bls.w	80010d2 <LCD_DrawString4bit+0x2a>
    }
}
 80011f8:	bf00      	nop
 80011fa:	bf00      	nop
 80011fc:	3778      	adds	r7, #120	@ 0x78
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	0800bf28 	.word	0x0800bf28

08001208 <LCD_DrawImage>:
        }
    }
}

void LCD_DrawImage(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b09c      	sub	sp, #112	@ 0x70
 800120c:	af00      	add	r7, sp, #0
    uint8_t rowbuf[88]; // 176px / 2 pixels_per_byte = 88 bytes

    // The image data is 24bpp (3 bytes per pixel)
    const uint8_t bytes_per_pixel = 3; 
 800120e:	2303      	movs	r3, #3
 8001210:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
    const uint16_t bytes_per_row = Image_logo.width * bytes_per_pixel;
 8001214:	4b4e      	ldr	r3, [pc, #312]	@ (8001350 <LCD_DrawImage+0x148>)
 8001216:	889a      	ldrh	r2, [r3, #4]
 8001218:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 800121c:	b29b      	uxth	r3, r3
 800121e:	fb12 f303 	smulbb	r3, r2, r3
 8001222:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68

    for (uint16_t y = 0; y < Image_logo.height; y++) {
 8001226:	2300      	movs	r3, #0
 8001228:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 800122c:	e084      	b.n	8001338 <LCD_DrawImage+0x130>
        // Clear the line buffer for the new line
        memset(rowbuf, 0, sizeof(rowbuf));
 800122e:	463b      	mov	r3, r7
 8001230:	2258      	movs	r2, #88	@ 0x58
 8001232:	2100      	movs	r1, #0
 8001234:	4618      	mov	r0, r3
 8001236:	f008 fc43 	bl	8009ac0 <memset>

        // Get a pointer to the start of the current row in the source image
        const uint8_t *p_src_row = &Image_logo.data[y * bytes_per_row];
 800123a:	4b45      	ldr	r3, [pc, #276]	@ (8001350 <LCD_DrawImage+0x148>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8001242:	f8b7 1068 	ldrh.w	r1, [r7, #104]	@ 0x68
 8001246:	fb01 f202 	mul.w	r2, r1, r2
 800124a:	4413      	add	r3, r2
 800124c:	667b      	str	r3, [r7, #100]	@ 0x64

        // Process each pixel in the row
        for (uint16_t x = 0; x < Image_logo.width; x++) {
 800124e:	2300      	movs	r3, #0
 8001250:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8001254:	e05e      	b.n	8001314 <LCD_DrawImage+0x10c>
            // Get the R, G, B values for the current pixel
            const uint8_t *p_pixel = &p_src_row[x * bytes_per_pixel];
 8001256:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800125a:	f897 206a 	ldrb.w	r2, [r7, #106]	@ 0x6a
 800125e:	fb02 f303 	mul.w	r3, r2, r3
 8001262:	461a      	mov	r2, r3
 8001264:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001266:	4413      	add	r3, r2
 8001268:	663b      	str	r3, [r7, #96]	@ 0x60
            uint8_t r = p_pixel[0];
 800126a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
            uint8_t g = p_pixel[1];
 8001272:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001274:	3301      	adds	r3, #1
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
            uint8_t b = p_pixel[2];
 800127c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800127e:	3302      	adds	r3, #2
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d

            // Convert 24bpp pixel to monochrome 4bpp pixel
            // Using a simple luminance threshold.
            // (R+G+B)/3 > 127
            uint8_t pix4;
            if ((r + g + b) > 382) { // 127 * 3 = 381
 8001286:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 800128a:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 800128e:	441a      	add	r2, r3
 8001290:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 8001294:	4413      	add	r3, r2
 8001296:	f5b3 7fbf 	cmp.w	r3, #382	@ 0x17e
 800129a:	dd03      	ble.n	80012a4 <LCD_DrawImage+0x9c>
                pix4 = PIX_OFF; // White
 800129c:	230e      	movs	r3, #14
 800129e:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
 80012a2:	e002      	b.n	80012aa <LCD_DrawImage+0xa2>
            } else {
                pix4 = PIX_ON; // Black
 80012a4:	2300      	movs	r3, #0
 80012a6:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
            }

            // Pack the 4bpp pixel into the row buffer
            // 2 pixels per byte: even x in high nibble, odd x in low nibble
            uint16_t byte_idx = x / 2;
 80012aa:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80012ae:	085b      	lsrs	r3, r3, #1
 80012b0:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
            if (x & 1) { // odd pixel
 80012b4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80012b8:	f003 0301 	and.w	r3, r3, #1
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d010      	beq.n	80012e2 <LCD_DrawImage+0xda>
                rowbuf[byte_idx] |= pix4; // low nibble
 80012c0:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80012c4:	3370      	adds	r3, #112	@ 0x70
 80012c6:	443b      	add	r3, r7
 80012c8:	f813 1c70 	ldrb.w	r1, [r3, #-112]
 80012cc:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80012d0:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 80012d4:	430a      	orrs	r2, r1
 80012d6:	b2d2      	uxtb	r2, r2
 80012d8:	3370      	adds	r3, #112	@ 0x70
 80012da:	443b      	add	r3, r7
 80012dc:	f803 2c70 	strb.w	r2, [r3, #-112]
 80012e0:	e013      	b.n	800130a <LCD_DrawImage+0x102>
            } else { // even pixel
                rowbuf[byte_idx] |= pix4 << 4; // high nibble
 80012e2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80012e6:	3370      	adds	r3, #112	@ 0x70
 80012e8:	443b      	add	r3, r7
 80012ea:	f813 3c70 	ldrb.w	r3, [r3, #-112]
 80012ee:	b25a      	sxtb	r2, r3
 80012f0:	f997 306b 	ldrsb.w	r3, [r7, #107]	@ 0x6b
 80012f4:	011b      	lsls	r3, r3, #4
 80012f6:	b25b      	sxtb	r3, r3
 80012f8:	4313      	orrs	r3, r2
 80012fa:	b25a      	sxtb	r2, r3
 80012fc:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8001300:	b2d2      	uxtb	r2, r2
 8001302:	3370      	adds	r3, #112	@ 0x70
 8001304:	443b      	add	r3, r7
 8001306:	f803 2c70 	strb.w	r2, [r3, #-112]
        for (uint16_t x = 0; x < Image_logo.width; x++) {
 800130a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800130e:	3301      	adds	r3, #1
 8001310:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8001314:	4b0e      	ldr	r3, [pc, #56]	@ (8001350 <LCD_DrawImage+0x148>)
 8001316:	889b      	ldrh	r3, [r3, #4]
 8001318:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800131c:	429a      	cmp	r2, r3
 800131e:	d39a      	bcc.n	8001256 <LCD_DrawImage+0x4e>
            }
        }

        // Send the packed line to the LCD
        LCD_SendLine4bit(y, rowbuf);
 8001320:	463a      	mov	r2, r7
 8001322:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001326:	4611      	mov	r1, r2
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff fe59 	bl	8000fe0 <LCD_SendLine4bit>
    for (uint16_t y = 0; y < Image_logo.height; y++) {
 800132e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001332:	3301      	adds	r3, #1
 8001334:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8001338:	4b05      	ldr	r3, [pc, #20]	@ (8001350 <LCD_DrawImage+0x148>)
 800133a:	88db      	ldrh	r3, [r3, #6]
 800133c:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8001340:	429a      	cmp	r2, r3
 8001342:	f4ff af74 	bcc.w	800122e <LCD_DrawImage+0x26>
    }
 8001346:	bf00      	nop
 8001348:	bf00      	nop
 800134a:	3770      	adds	r7, #112	@ 0x70
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	08022d28 	.word	0x08022d28

08001354 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001354:	b5b0      	push	{r4, r5, r7, lr}
 8001356:	b0a8      	sub	sp, #160	@ 0xa0
 8001358:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800135a:	f001 fd87 	bl	8002e6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800135e:	f000 fab9 	bl	80018d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001362:	f000 fe09 	bl	8001f78 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001366:	f000 fc61 	bl	8001c2c <MX_SPI1_Init>
  MX_UART5_Init();
 800136a:	f000 fdb9 	bl	8001ee0 <MX_UART5_Init>
  MX_TIM3_Init();
 800136e:	f000 fd3d 	bl	8001dec <MX_TIM3_Init>
  MX_SPI2_Init();
 8001372:	f000 fccb 	bl	8001d0c <MX_SPI2_Init>
  MX_DAC1_Init();
 8001376:	f000 fbd1 	bl	8001b1c <MX_DAC1_Init>
  MX_OPAMP1_Init();
 800137a:	f000 fc17 	bl	8001bac <MX_OPAMP1_Init>
  MX_ADC1_Init();
 800137e:	f000 fb15 	bl	80019ac <MX_ADC1_Init>
  MX_OPAMP2_Init();
 8001382:	f000 fc33 	bl	8001bec <MX_OPAMP2_Init>
  MX_ADC2_Init();
 8001386:	f000 fb6d 	bl	8001a64 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  printf("Starting DAC/ADC/LCD Test System...\r\n");
 800138a:	4875      	ldr	r0, [pc, #468]	@ (8001560 <main+0x20c>)
 800138c:	f008 fb90 	bl	8009ab0 <puts>
  
  // LCD初期化
  LCD_Init();
 8001390:	f7ff fdf8 	bl	8000f84 <LCD_Init>
  printf("LCD Initialized\r\n");
 8001394:	4873      	ldr	r0, [pc, #460]	@ (8001564 <main+0x210>)
 8001396:	f008 fb8b 	bl	8009ab0 <puts>

  // 画像を表示
  LCD_DrawImage();
 800139a:	f7ff ff35 	bl	8001208 <LCD_DrawImage>
  HAL_Delay(3000);
 800139e:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80013a2:	f001 fe21 	bl	8002fe8 <HAL_Delay>
  LCD_FillWhite(); // 一時的にコメントアウト
 80013a6:	f7ff fe55 	bl	8001054 <LCD_FillWhite>

  // LCD初期表示
  LCD_DrawString4bit(10, "DAC/ADC Test");
 80013aa:	496f      	ldr	r1, [pc, #444]	@ (8001568 <main+0x214>)
 80013ac:	200a      	movs	r0, #10
 80013ae:	f7ff fe7b 	bl	80010a8 <LCD_DrawString4bit>
  LCD_DrawString4bit(30, "System Ready");
 80013b2:	496e      	ldr	r1, [pc, #440]	@ (800156c <main+0x218>)
 80013b4:	201e      	movs	r0, #30
 80013b6:	f7ff fe77 	bl	80010a8 <LCD_DrawString4bit>
  
  // Start DAC
  if (HAL_DAC_Start(&hdac1, DAC_CHANNEL_1) != HAL_OK) {
 80013ba:	2100      	movs	r1, #0
 80013bc:	486c      	ldr	r0, [pc, #432]	@ (8001570 <main+0x21c>)
 80013be:	f003 fa03 	bl	80047c8 <HAL_DAC_Start>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d008      	beq.n	80013da <main+0x86>
      printf("DAC Start Error!\r\n");
 80013c8:	486a      	ldr	r0, [pc, #424]	@ (8001574 <main+0x220>)
 80013ca:	f008 fb71 	bl	8009ab0 <puts>
      LCD_DrawString4bit(50, "DAC Error");
 80013ce:	496a      	ldr	r1, [pc, #424]	@ (8001578 <main+0x224>)
 80013d0:	2032      	movs	r0, #50	@ 0x32
 80013d2:	f7ff fe69 	bl	80010a8 <LCD_DrawString4bit>
      Error_Handler();
 80013d6:	f000 fe85 	bl	80020e4 <Error_Handler>
  }
  printf("DAC Channel 1 Started\r\n");
 80013da:	4868      	ldr	r0, [pc, #416]	@ (800157c <main+0x228>)
 80013dc:	f008 fb68 	bl	8009ab0 <puts>
  
  // Start OPAMP
  if (HAL_OPAMP_Start(&hopamp1) != HAL_OK) {
 80013e0:	4867      	ldr	r0, [pc, #412]	@ (8001580 <main+0x22c>)
 80013e2:	f003 ff77 	bl	80052d4 <HAL_OPAMP_Start>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d008      	beq.n	80013fe <main+0xaa>
      printf("OPAMP Start Error!\r\n");
 80013ec:	4865      	ldr	r0, [pc, #404]	@ (8001584 <main+0x230>)
 80013ee:	f008 fb5f 	bl	8009ab0 <puts>
      LCD_DrawString4bit(70, "OPAMP Error");
 80013f2:	4965      	ldr	r1, [pc, #404]	@ (8001588 <main+0x234>)
 80013f4:	2046      	movs	r0, #70	@ 0x46
 80013f6:	f7ff fe57 	bl	80010a8 <LCD_DrawString4bit>
      Error_Handler();
 80013fa:	f000 fe73 	bl	80020e4 <Error_Handler>
  }
  printf("OPAMP Started\r\n");
 80013fe:	4863      	ldr	r0, [pc, #396]	@ (800158c <main+0x238>)
 8001400:	f008 fb56 	bl	8009ab0 <puts>
  
  // Start OPAMP2
  if (HAL_OPAMP_Start(&hopamp2) != HAL_OK) {
 8001404:	4862      	ldr	r0, [pc, #392]	@ (8001590 <main+0x23c>)
 8001406:	f003 ff65 	bl	80052d4 <HAL_OPAMP_Start>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d008      	beq.n	8001422 <main+0xce>
      printf("OPAMP2 Start Error!\r\n");
 8001410:	4860      	ldr	r0, [pc, #384]	@ (8001594 <main+0x240>)
 8001412:	f008 fb4d 	bl	8009ab0 <puts>
      LCD_DrawString4bit(90, "OPAMP2 Error");
 8001416:	4960      	ldr	r1, [pc, #384]	@ (8001598 <main+0x244>)
 8001418:	205a      	movs	r0, #90	@ 0x5a
 800141a:	f7ff fe45 	bl	80010a8 <LCD_DrawString4bit>
      Error_Handler();
 800141e:	f000 fe61 	bl	80020e4 <Error_Handler>
  }
  printf("OPAMP2 Started\r\n");
 8001422:	485e      	ldr	r0, [pc, #376]	@ (800159c <main+0x248>)
 8001424:	f008 fb44 	bl	8009ab0 <puts>
  
  // Calibrate ADC
  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK) {
 8001428:	217f      	movs	r1, #127	@ 0x7f
 800142a:	485d      	ldr	r0, [pc, #372]	@ (80015a0 <main+0x24c>)
 800142c:	f002 ffee 	bl	800440c <HAL_ADCEx_Calibration_Start>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d008      	beq.n	8001448 <main+0xf4>
      printf("ADC Calibration Error!\r\n");
 8001436:	485b      	ldr	r0, [pc, #364]	@ (80015a4 <main+0x250>)
 8001438:	f008 fb3a 	bl	8009ab0 <puts>
      LCD_DrawString4bit(90, "ADC Error");
 800143c:	495a      	ldr	r1, [pc, #360]	@ (80015a8 <main+0x254>)
 800143e:	205a      	movs	r0, #90	@ 0x5a
 8001440:	f7ff fe32 	bl	80010a8 <LCD_DrawString4bit>
      Error_Handler();
 8001444:	f000 fe4e 	bl	80020e4 <Error_Handler>
  }
  printf("ADC Calibrated and Ready\r\n");
 8001448:	4858      	ldr	r0, [pc, #352]	@ (80015ac <main+0x258>)
 800144a:	f008 fb31 	bl	8009ab0 <puts>
  // Set initial DAC value to match the first voltage level (100mV)
  dac_value = dac_voltage_levels[current_voltage_index];
 800144e:	4b58      	ldr	r3, [pc, #352]	@ (80015b0 <main+0x25c>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	b2db      	uxtb	r3, r3
 8001454:	461a      	mov	r2, r3
 8001456:	4b57      	ldr	r3, [pc, #348]	@ (80015b4 <main+0x260>)
 8001458:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800145c:	4a56      	ldr	r2, [pc, #344]	@ (80015b8 <main+0x264>)
 800145e:	6013      	str	r3, [r2, #0]
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_value);
 8001460:	4b55      	ldr	r3, [pc, #340]	@ (80015b8 <main+0x264>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2200      	movs	r2, #0
 8001466:	2100      	movs	r1, #0
 8001468:	4841      	ldr	r0, [pc, #260]	@ (8001570 <main+0x21c>)
 800146a:	f003 fa19 	bl	80048a0 <HAL_DAC_SetValue>
  printf("Initial DAC value set to: %lu (%dmV)\r\n", dac_value, (current_voltage_index + 1) * 100);
 800146e:	4b52      	ldr	r3, [pc, #328]	@ (80015b8 <main+0x264>)
 8001470:	6819      	ldr	r1, [r3, #0]
 8001472:	4b4f      	ldr	r3, [pc, #316]	@ (80015b0 <main+0x25c>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	b2db      	uxtb	r3, r3
 8001478:	3301      	adds	r3, #1
 800147a:	2264      	movs	r2, #100	@ 0x64
 800147c:	fb02 f303 	mul.w	r3, r2, r3
 8001480:	461a      	mov	r2, r3
 8001482:	484e      	ldr	r0, [pc, #312]	@ (80015bc <main+0x268>)
 8001484:	f008 faac 	bl	80099e0 <iprintf>

  printf("Starting ID Register Read Test...\r\n");
 8001488:	484d      	ldr	r0, [pc, #308]	@ (80015c0 <main+0x26c>)
 800148a:	f008 fb11 	bl	8009ab0 <puts>

  // 一度リセット
  HAL_GPIO_WritePin(ADS_RESET_PORT, ADS_RESET_PIN, GPIO_PIN_SET);
 800148e:	2201      	movs	r2, #1
 8001490:	2140      	movs	r1, #64	@ 0x40
 8001492:	484c      	ldr	r0, [pc, #304]	@ (80015c4 <main+0x270>)
 8001494:	f003 fe22 	bl	80050dc <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8001498:	200a      	movs	r0, #10
 800149a:	f001 fda5 	bl	8002fe8 <HAL_Delay>
  HAL_GPIO_WritePin(ADS_RESET_PORT, ADS_RESET_PIN, GPIO_PIN_RESET);
 800149e:	2200      	movs	r2, #0
 80014a0:	2140      	movs	r1, #64	@ 0x40
 80014a2:	4848      	ldr	r0, [pc, #288]	@ (80015c4 <main+0x270>)
 80014a4:	f003 fe1a 	bl	80050dc <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80014a8:	2001      	movs	r0, #1
 80014aa:	f001 fd9d 	bl	8002fe8 <HAL_Delay>
  HAL_GPIO_WritePin(ADS_RESET_PORT, ADS_RESET_PIN, GPIO_PIN_SET);
 80014ae:	2201      	movs	r2, #1
 80014b0:	2140      	movs	r1, #64	@ 0x40
 80014b2:	4844      	ldr	r0, [pc, #272]	@ (80015c4 <main+0x270>)
 80014b4:	f003 fe12 	bl	80050dc <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80014b8:	200a      	movs	r0, #10
 80014ba:	f001 fd95 	bl	8002fe8 <HAL_Delay>

  /* USER CODE END 2 */

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80014be:	2101      	movs	r1, #1
 80014c0:	2000      	movs	r0, #0
 80014c2:	f001 fb65 	bl	8002b90 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80014c6:	4b40      	ldr	r3, [pc, #256]	@ (80015c8 <main+0x274>)
 80014c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014cc:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80014ce:	4b3e      	ldr	r3, [pc, #248]	@ (80015c8 <main+0x274>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80014d4:	4b3c      	ldr	r3, [pc, #240]	@ (80015c8 <main+0x274>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80014da:	4b3b      	ldr	r3, [pc, #236]	@ (80015c8 <main+0x274>)
 80014dc:	2200      	movs	r2, #0
 80014de:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80014e0:	4b39      	ldr	r3, [pc, #228]	@ (80015c8 <main+0x274>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80014e6:	4938      	ldr	r1, [pc, #224]	@ (80015c8 <main+0x274>)
 80014e8:	2000      	movs	r0, #0
 80014ea:	f001 fbdf 	bl	8002cac <BSP_COM_Init>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <main+0x1a4>
  {
    Error_Handler();
 80014f4:	f000 fdf6 	bl	80020e4 <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    // Check if button was pressed in interrupt
    if (BspButtonState == BUTTON_PRESSED) {
 80014f8:	4b34      	ldr	r3, [pc, #208]	@ (80015cc <main+0x278>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d114      	bne.n	800152a <main+0x1d6>
        // Debug output with actual voltage calculation
        uint32_t actual_voltage_mv = (dac_value * VREF_MV) / ADC_MAX_VALUE;
 8001500:	4b2d      	ldr	r3, [pc, #180]	@ (80015b8 <main+0x264>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8001508:	fb03 f202 	mul.w	r2, r3, r2
 800150c:	4b30      	ldr	r3, [pc, #192]	@ (80015d0 <main+0x27c>)
 800150e:	fba3 1302 	umull	r1, r3, r3, r2
 8001512:	1ad2      	subs	r2, r2, r3
 8001514:	0852      	lsrs	r2, r2, #1
 8001516:	4413      	add	r3, r2
 8001518:	0adb      	lsrs	r3, r3, #11
 800151a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

        
        button_was_pressed = 1;  // Set flag for LCD update
 800151e:	4b2d      	ldr	r3, [pc, #180]	@ (80015d4 <main+0x280>)
 8001520:	2201      	movs	r2, #1
 8001522:	701a      	strb	r2, [r3, #0]
        BspButtonState = BUTTON_RELEASED;  // Reset state
 8001524:	4b29      	ldr	r3, [pc, #164]	@ (80015cc <main+0x278>)
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
    }
    
    // Set new DAC value
    HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_value);
 800152a:	4b23      	ldr	r3, [pc, #140]	@ (80015b8 <main+0x264>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2200      	movs	r2, #0
 8001530:	2100      	movs	r1, #0
 8001532:	480f      	ldr	r0, [pc, #60]	@ (8001570 <main+0x21c>)
 8001534:	f003 f9b4 	bl	80048a0 <HAL_DAC_SetValue>
    
    // Read ADC value from the DAC output (via OPAMP follower) - 複数回測定して平均化
    uint32_t adc_sum = 0;
 8001538:	2300      	movs	r3, #0
 800153a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    const uint8_t num_samples = 10; // 10回測定して平均
 800153e:	230a      	movs	r3, #10
 8001540:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
    
    for (uint8_t i = 0; i < num_samples; i++) {
 8001544:	2300      	movs	r3, #0
 8001546:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
 800154a:	e063      	b.n	8001614 <main+0x2c0>
        if (HAL_ADC_Start(&hadc1) != HAL_OK) {
 800154c:	4814      	ldr	r0, [pc, #80]	@ (80015a0 <main+0x24c>)
 800154e:	f002 fa15 	bl	800397c <HAL_ADC_Start>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d041      	beq.n	80015dc <main+0x288>
            printf("ADC Start Error!\r\n");
 8001558:	481f      	ldr	r0, [pc, #124]	@ (80015d8 <main+0x284>)
 800155a:	f008 faa9 	bl	8009ab0 <puts>
            break;
 800155e:	e05f      	b.n	8001620 <main+0x2cc>
 8001560:	0800bd38 	.word	0x0800bd38
 8001564:	0800bd60 	.word	0x0800bd60
 8001568:	0800bd74 	.word	0x0800bd74
 800156c:	0800bd84 	.word	0x0800bd84
 8001570:	200002e8 	.word	0x200002e8
 8001574:	0800bd94 	.word	0x0800bd94
 8001578:	0800bda8 	.word	0x0800bda8
 800157c:	0800bdb4 	.word	0x0800bdb4
 8001580:	200002fc 	.word	0x200002fc
 8001584:	0800bdcc 	.word	0x0800bdcc
 8001588:	0800bde0 	.word	0x0800bde0
 800158c:	0800bdec 	.word	0x0800bdec
 8001590:	20000330 	.word	0x20000330
 8001594:	0800bdfc 	.word	0x0800bdfc
 8001598:	0800be14 	.word	0x0800be14
 800159c:	0800be24 	.word	0x0800be24
 80015a0:	20000218 	.word	0x20000218
 80015a4:	0800be34 	.word	0x0800be34
 80015a8:	0800be4c 	.word	0x0800be4c
 80015ac:	0800be58 	.word	0x0800be58
 80015b0:	200005a2 	.word	0x200005a2
 80015b4:	08022d34 	.word	0x08022d34
 80015b8:	20000000 	.word	0x20000000
 80015bc:	0800be74 	.word	0x0800be74
 80015c0:	0800be9c 	.word	0x0800be9c
 80015c4:	42020800 	.word	0x42020800
 80015c8:	20000204 	.word	0x20000204
 80015cc:	20000214 	.word	0x20000214
 80015d0:	00100101 	.word	0x00100101
 80015d4:	200005a8 	.word	0x200005a8
 80015d8:	0800bec0 	.word	0x0800bec0
        }
        
        if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 80015dc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80015e0:	48a6      	ldr	r0, [pc, #664]	@ (800187c <main+0x528>)
 80015e2:	f002 fab9 	bl	8003b58 <HAL_ADC_PollForConversion>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d108      	bne.n	80015fe <main+0x2aa>
            adc_sum += HAL_ADC_GetValue(&hadc1);
 80015ec:	48a3      	ldr	r0, [pc, #652]	@ (800187c <main+0x528>)
 80015ee:	f002 fb8b 	bl	8003d08 <HAL_ADC_GetValue>
 80015f2:	4602      	mov	r2, r0
 80015f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80015f8:	4413      	add	r3, r2
 80015fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
        }
        HAL_ADC_Stop(&hadc1);
 80015fe:	489f      	ldr	r0, [pc, #636]	@ (800187c <main+0x528>)
 8001600:	f002 fa76 	bl	8003af0 <HAL_ADC_Stop>
        HAL_Delay(1); // 測定間の短い遅延
 8001604:	2001      	movs	r0, #1
 8001606:	f001 fcef 	bl	8002fe8 <HAL_Delay>
    for (uint8_t i = 0; i < num_samples; i++) {
 800160a:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 800160e:	3301      	adds	r3, #1
 8001610:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
 8001614:	f897 208b 	ldrb.w	r2, [r7, #139]	@ 0x8b
 8001618:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800161c:	429a      	cmp	r2, r3
 800161e:	d395      	bcc.n	800154c <main+0x1f8>
    }
    
    adc_value = adc_sum / num_samples; // 平均値を計算
 8001620:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8001624:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8001628:	fbb2 f3f3 	udiv	r3, r2, r3
 800162c:	4a94      	ldr	r2, [pc, #592]	@ (8001880 <main+0x52c>)
 800162e:	6013      	str	r3, [r2, #0]
    
    // Calculate voltage values for display (mV単位で整数演算)
    uint32_t dac_voltage_mv = (dac_value * VREF_MV) / ADC_MAX_VALUE;
 8001630:	4b94      	ldr	r3, [pc, #592]	@ (8001884 <main+0x530>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8001638:	fb03 f202 	mul.w	r2, r3, r2
 800163c:	4b92      	ldr	r3, [pc, #584]	@ (8001888 <main+0x534>)
 800163e:	fba3 1302 	umull	r1, r3, r3, r2
 8001642:	1ad2      	subs	r2, r2, r3
 8001644:	0852      	lsrs	r2, r2, #1
 8001646:	4413      	add	r3, r2
 8001648:	0adb      	lsrs	r3, r3, #11
 800164a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint32_t adc_voltage_mv = (adc_value * VREF_MV) / ADC_MAX_VALUE;
 800164c:	4b8c      	ldr	r3, [pc, #560]	@ (8001880 <main+0x52c>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8001654:	fb03 f202 	mul.w	r2, r3, r2
 8001658:	4b8b      	ldr	r3, [pc, #556]	@ (8001888 <main+0x534>)
 800165a:	fba3 1302 	umull	r1, r3, r3, r2
 800165e:	1ad2      	subs	r2, r2, r3
 8001660:	0852      	lsrs	r2, r2, #1
 8001662:	4413      	add	r3, r2
 8001664:	0adb      	lsrs	r3, r3, #11
 8001666:	67bb      	str	r3, [r7, #120]	@ 0x78
    
    // Calculate current from ADC voltage (μA単位)
    // I = (V_adc - 0.5V) / (88kΩ) where V_adc is in V, I is in A
    // Convert to μA: I_uA = (V_adc - 0.5V) / 88000Ω * 1000000
    float voltage_v = adc_voltage_mv / 1000.0f; // mV to V
 8001668:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800166a:	ee07 3a90 	vmov	s15, r3
 800166e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001672:	eddf 6a86 	vldr	s13, [pc, #536]	@ 800188c <main+0x538>
 8001676:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800167a:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
    float current_ua = (voltage_v - 0.5f) / 88000.0f * 1000000.0f; // Calculate current in μA
 800167e:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8001682:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001686:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800168a:	eddf 6a81 	vldr	s13, [pc, #516]	@ 8001890 <main+0x53c>
 800168e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001692:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8001894 <main+0x540>
 8001696:	ee67 7a87 	vmul.f32	s15, s15, s14
 800169a:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
    
    // Accumulate values for UART averaging (with overflow protection)
    if (adc_count_for_uart < MAX_SAMPLES_PER_INTERVAL) {
 800169e:	4b7e      	ldr	r3, [pc, #504]	@ (8001898 <main+0x544>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2b63      	cmp	r3, #99	@ 0x63
 80016a4:	d80e      	bhi.n	80016c4 <main+0x370>
        current_sum_for_uart += current_ua;
 80016a6:	4b7d      	ldr	r3, [pc, #500]	@ (800189c <main+0x548>)
 80016a8:	ed93 7a00 	vldr	s14, [r3]
 80016ac:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 80016b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016b4:	4b79      	ldr	r3, [pc, #484]	@ (800189c <main+0x548>)
 80016b6:	edc3 7a00 	vstr	s15, [r3]
        adc_count_for_uart++;
 80016ba:	4b77      	ldr	r3, [pc, #476]	@ (8001898 <main+0x544>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	3301      	adds	r3, #1
 80016c0:	4a75      	ldr	r2, [pc, #468]	@ (8001898 <main+0x544>)
 80016c2:	6013      	str	r3, [r2, #0]
    }
    
    // Send UART message every 1 second
    uint32_t current_time = HAL_GetTick();
 80016c4:	f001 fc84 	bl	8002fd0 <HAL_GetTick>
 80016c8:	66f8      	str	r0, [r7, #108]	@ 0x6c
    // Handle tick overflow (wraps around after ~49 days)
    if ((current_time >= last_uart_time && (current_time - last_uart_time) >= UART_TRANSMISSION_INTERVAL_MS) ||
 80016ca:	4b75      	ldr	r3, [pc, #468]	@ (80018a0 <main+0x54c>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d306      	bcc.n	80016e2 <main+0x38e>
 80016d4:	4b72      	ldr	r3, [pc, #456]	@ (80018a0 <main+0x54c>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80016e0:	d20c      	bcs.n	80016fc <main+0x3a8>
        (current_time < last_uart_time && (current_time + (0xFFFFFFFF - last_uart_time)) >= UART_TRANSMISSION_INTERVAL_MS)) {
 80016e2:	4b6f      	ldr	r3, [pc, #444]	@ (80018a0 <main+0x54c>)
 80016e4:	681b      	ldr	r3, [r3, #0]
    if ((current_time >= last_uart_time && (current_time - last_uart_time) >= UART_TRANSMISSION_INTERVAL_MS) ||
 80016e6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d265      	bcs.n	80017b8 <main+0x464>
        (current_time < last_uart_time && (current_time + (0xFFFFFFFF - last_uart_time)) >= UART_TRANSMISSION_INTERVAL_MS)) {
 80016ec:	4b6c      	ldr	r3, [pc, #432]	@ (80018a0 <main+0x54c>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	3b01      	subs	r3, #1
 80016f6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80016fa:	d35d      	bcc.n	80017b8 <main+0x464>
        if (adc_count_for_uart > 0) {
 80016fc:	4b66      	ldr	r3, [pc, #408]	@ (8001898 <main+0x544>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d02e      	beq.n	8001762 <main+0x40e>
            // Calculate average values
            float avg_current_ua = current_sum_for_uart / adc_count_for_uart;
 8001704:	4b65      	ldr	r3, [pc, #404]	@ (800189c <main+0x548>)
 8001706:	edd3 6a00 	vldr	s13, [r3]
 800170a:	4b63      	ldr	r3, [pc, #396]	@ (8001898 <main+0x544>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	ee07 3a90 	vmov	s15, r3
 8001712:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001716:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800171a:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
            
            // Format and send UART message: voltage(V) , current(uA)
            float dac_voltage_v = dac_voltage_mv / 1000.0f;  // Convert mV to V
 800171e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001720:	ee07 3a90 	vmov	s15, r3
 8001724:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001728:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800188c <main+0x538>
 800172c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001730:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
            snprintf(uart_output, sizeof(uart_output), "%.3f , %.1f\r\n", dac_voltage_v, avg_current_ua);
 8001734:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8001736:	f7fe ff0b 	bl	8000550 <__aeabi_f2d>
 800173a:	4604      	mov	r4, r0
 800173c:	460d      	mov	r5, r1
 800173e:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8001740:	f7fe ff06 	bl	8000550 <__aeabi_f2d>
 8001744:	4602      	mov	r2, r0
 8001746:	460b      	mov	r3, r1
 8001748:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800174c:	e9cd 4500 	strd	r4, r5, [sp]
 8001750:	4a54      	ldr	r2, [pc, #336]	@ (80018a4 <main+0x550>)
 8001752:	2132      	movs	r1, #50	@ 0x32
 8001754:	4854      	ldr	r0, [pc, #336]	@ (80018a8 <main+0x554>)
 8001756:	f008 f84b 	bl	80097f0 <sniprintf>
            printf(uart_output);
 800175a:	4853      	ldr	r0, [pc, #332]	@ (80018a8 <main+0x554>)
 800175c:	f008 f940 	bl	80099e0 <iprintf>
 8001760:	e020      	b.n	80017a4 <main+0x450>
            
            // Debug: show sample count
            // printf("Debug: %lu samples averaged\r\n", adc_count_for_uart);
        } else {
            // If no samples, still send a message with current value
            float dac_voltage_v = dac_voltage_mv / 1000.0f;
 8001762:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001764:	ee07 3a90 	vmov	s15, r3
 8001768:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800176c:	eddf 6a47 	vldr	s13, [pc, #284]	@ 800188c <main+0x538>
 8001770:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001774:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
            snprintf(uart_output, sizeof(uart_output), "%.3f , %.1f\r\n", dac_voltage_v, current_ua);
 8001778:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800177a:	f7fe fee9 	bl	8000550 <__aeabi_f2d>
 800177e:	4604      	mov	r4, r0
 8001780:	460d      	mov	r5, r1
 8001782:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8001784:	f7fe fee4 	bl	8000550 <__aeabi_f2d>
 8001788:	4602      	mov	r2, r0
 800178a:	460b      	mov	r3, r1
 800178c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001790:	e9cd 4500 	strd	r4, r5, [sp]
 8001794:	4a43      	ldr	r2, [pc, #268]	@ (80018a4 <main+0x550>)
 8001796:	2132      	movs	r1, #50	@ 0x32
 8001798:	4843      	ldr	r0, [pc, #268]	@ (80018a8 <main+0x554>)
 800179a:	f008 f829 	bl	80097f0 <sniprintf>
            printf(uart_output);
 800179e:	4842      	ldr	r0, [pc, #264]	@ (80018a8 <main+0x554>)
 80017a0:	f008 f91e 	bl	80099e0 <iprintf>
        }
        
        // Reset accumulation variables
        current_sum_for_uart = 0.0f;
 80017a4:	4b3d      	ldr	r3, [pc, #244]	@ (800189c <main+0x548>)
 80017a6:	f04f 0200 	mov.w	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
        adc_count_for_uart = 0;
 80017ac:	4b3a      	ldr	r3, [pc, #232]	@ (8001898 <main+0x544>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]
        last_uart_time = current_time;
 80017b2:	4a3b      	ldr	r2, [pc, #236]	@ (80018a0 <main+0x54c>)
 80017b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80017b6:	6013      	str	r3, [r2, #0]
    }
    
    // Update LCD display every 10 iterations to reduce flicker
    static uint32_t lcd_update_counter = 0;
    lcd_update_counter++;
 80017b8:	4b3c      	ldr	r3, [pc, #240]	@ (80018ac <main+0x558>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	3301      	adds	r3, #1
 80017be:	4a3b      	ldr	r2, [pc, #236]	@ (80018ac <main+0x558>)
 80017c0:	6013      	str	r3, [r2, #0]
    
    if (lcd_update_counter % LCD_UPDATE_INTERVAL == 0) { // LCDの更新頻度を下げる
 80017c2:	4b3a      	ldr	r3, [pc, #232]	@ (80018ac <main+0x558>)
 80017c4:	6819      	ldr	r1, [r3, #0]
 80017c6:	4b3a      	ldr	r3, [pc, #232]	@ (80018b0 <main+0x55c>)
 80017c8:	fba3 2301 	umull	r2, r3, r3, r1
 80017cc:	08da      	lsrs	r2, r3, #3
 80017ce:	4613      	mov	r3, r2
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	4413      	add	r3, r2
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	1aca      	subs	r2, r1, r3
 80017d8:	2a00      	cmp	r2, #0
 80017da:	d135      	bne.n	8001848 <main+0x4f4>
        LCD_FillWhite();
 80017dc:	f7ff fc3a 	bl	8001054 <LCD_FillWhite>
        
        // Display title
        LCD_DrawString4bit(10, "Current Monitor");
 80017e0:	4934      	ldr	r1, [pc, #208]	@ (80018b4 <main+0x560>)
 80017e2:	200a      	movs	r0, #10
 80017e4:	f7ff fc60 	bl	80010a8 <LCD_DrawString4bit>
        
        // Display DAC value and voltage (mV)
        char dac_str[32];
        snprintf(dac_str, sizeof(dac_str), "DAC: %lumV [%d/5]", dac_voltage_mv, current_voltage_index + 1);
 80017e8:	4b33      	ldr	r3, [pc, #204]	@ (80018b8 <main+0x564>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	3301      	adds	r3, #1
 80017f0:	4638      	mov	r0, r7
 80017f2:	9300      	str	r3, [sp, #0]
 80017f4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80017f6:	4a31      	ldr	r2, [pc, #196]	@ (80018bc <main+0x568>)
 80017f8:	2120      	movs	r1, #32
 80017fa:	f007 fff9 	bl	80097f0 <sniprintf>
        LCD_DrawString4bit(30, dac_str);
 80017fe:	463b      	mov	r3, r7
 8001800:	4619      	mov	r1, r3
 8001802:	201e      	movs	r0, #30
 8001804:	f7ff fc50 	bl	80010a8 <LCD_DrawString4bit>
        
        // Display ADC voltage (mV)
        char adc_str[32];
        snprintf(adc_str, sizeof(adc_str), "ADC: %lu mV", adc_voltage_mv);
 8001808:	f107 0020 	add.w	r0, r7, #32
 800180c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800180e:	4a2c      	ldr	r2, [pc, #176]	@ (80018c0 <main+0x56c>)
 8001810:	2120      	movs	r1, #32
 8001812:	f007 ffed 	bl	80097f0 <sniprintf>
        LCD_DrawString4bit(50, adc_str);
 8001816:	f107 0320 	add.w	r3, r7, #32
 800181a:	4619      	mov	r1, r3
 800181c:	2032      	movs	r0, #50	@ 0x32
 800181e:	f7ff fc43 	bl	80010a8 <LCD_DrawString4bit>
        
        // Display calculated current (μA)
        char current_str[32];
        snprintf(current_str, sizeof(current_str), "Current: %.1f uA", current_ua);
 8001822:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8001824:	f7fe fe94 	bl	8000550 <__aeabi_f2d>
 8001828:	4602      	mov	r2, r0
 800182a:	460b      	mov	r3, r1
 800182c:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8001830:	e9cd 2300 	strd	r2, r3, [sp]
 8001834:	4a23      	ldr	r2, [pc, #140]	@ (80018c4 <main+0x570>)
 8001836:	2120      	movs	r1, #32
 8001838:	f007 ffda 	bl	80097f0 <sniprintf>
        LCD_DrawString4bit(70, current_str);
 800183c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001840:	4619      	mov	r1, r3
 8001842:	2046      	movs	r0, #70	@ 0x46
 8001844:	f7ff fc30 	bl	80010a8 <LCD_DrawString4bit>
    }
    
    // Keep existing ADS1299 functionality (reduced frequency)
    static uint32_t ads_counter = 0;
    ads_counter++;
 8001848:	4b1f      	ldr	r3, [pc, #124]	@ (80018c8 <main+0x574>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	3301      	adds	r3, #1
 800184e:	4a1e      	ldr	r2, [pc, #120]	@ (80018c8 <main+0x574>)
 8001850:	6013      	str	r3, [r2, #0]
    
    if (ads_counter % ADS_CHECK_INTERVAL == 0) { // Every 50th iteration (less frequent for better LCD performance)
 8001852:	4b1d      	ldr	r3, [pc, #116]	@ (80018c8 <main+0x574>)
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	4b1d      	ldr	r3, [pc, #116]	@ (80018cc <main+0x578>)
 8001858:	fba3 1302 	umull	r1, r3, r3, r2
 800185c:	091b      	lsrs	r3, r3, #4
 800185e:	2132      	movs	r1, #50	@ 0x32
 8001860:	fb01 f303 	mul.w	r3, r1, r3
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	2b00      	cmp	r3, #0
 8001868:	d104      	bne.n	8001874 <main+0x520>
        //char ads_str[22];
        // snprintf(ads_str, sizeof(ads_str), "ADS ID: 0x%02X", device_id);
        //LCD_DrawString4bit(110, ads_str);
        
        // Check DRDY pin and read data if available
        if (HAL_GPIO_ReadPin(ADS_DRDY_PORT, ADS_DRDY_PIN) == GPIO_PIN_RESET) {
 800186a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800186e:	4818      	ldr	r0, [pc, #96]	@ (80018d0 <main+0x57c>)
 8001870:	f003 fc1c 	bl	80050ac <HAL_GPIO_ReadPin>
            // snprintf(ch1_str, sizeof(ch1_str), "CH1: %ld", ch1_val);
            //LCD_DrawString4bit(110, ch1_str);
        }
    }
    
    HAL_Delay(100); // 100ms delay for readable output
 8001874:	2064      	movs	r0, #100	@ 0x64
 8001876:	f001 fbb7 	bl	8002fe8 <HAL_Delay>
  {
 800187a:	e63d      	b.n	80014f8 <main+0x1a4>
 800187c:	20000218 	.word	0x20000218
 8001880:	200005a4 	.word	0x200005a4
 8001884:	20000000 	.word	0x20000000
 8001888:	00100101 	.word	0x00100101
 800188c:	447a0000 	.word	0x447a0000
 8001890:	47abe000 	.word	0x47abe000
 8001894:	49742400 	.word	0x49742400
 8001898:	20000568 	.word	0x20000568
 800189c:	2000056c 	.word	0x2000056c
 80018a0:	20000564 	.word	0x20000564
 80018a4:	0800bed4 	.word	0x0800bed4
 80018a8:	20000570 	.word	0x20000570
 80018ac:	200005ac 	.word	0x200005ac
 80018b0:	cccccccd 	.word	0xcccccccd
 80018b4:	0800bee4 	.word	0x0800bee4
 80018b8:	200005a2 	.word	0x200005a2
 80018bc:	0800bef4 	.word	0x0800bef4
 80018c0:	0800bf08 	.word	0x0800bf08
 80018c4:	0800bf14 	.word	0x0800bf14
 80018c8:	200005b0 	.word	0x200005b0
 80018cc:	51eb851f 	.word	0x51eb851f
 80018d0:	42020400 	.word	0x42020400

080018d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b094      	sub	sp, #80	@ 0x50
 80018d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018da:	f107 0318 	add.w	r3, r7, #24
 80018de:	2238      	movs	r2, #56	@ 0x38
 80018e0:	2100      	movs	r1, #0
 80018e2:	4618      	mov	r0, r3
 80018e4:	f008 f8ec 	bl	8009ac0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018e8:	463b      	mov	r3, r7
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	605a      	str	r2, [r3, #4]
 80018f0:	609a      	str	r2, [r3, #8]
 80018f2:	60da      	str	r2, [r3, #12]
 80018f4:	611a      	str	r2, [r3, #16]
 80018f6:	615a      	str	r2, [r3, #20]

  /** Enable Epod Booster
  */
  if (HAL_RCCEx_EpodBoosterClkConfig(RCC_EPODBOOSTER_SOURCE_MSIS, RCC_EPODBOOSTER_DIV1) != HAL_OK)
 80018f8:	2100      	movs	r1, #0
 80018fa:	2001      	movs	r0, #1
 80018fc:	f005 fa3c 	bl	8006d78 <HAL_RCCEx_EpodBoosterClkConfig>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <SystemClock_Config+0x36>
  {
    Error_Handler();
 8001906:	f000 fbed 	bl	80020e4 <Error_Handler>
  }
  if (HAL_PWREx_EnableEpodBooster() != HAL_OK)
 800190a:	f003 fd63 	bl	80053d4 <HAL_PWREx_EnableEpodBooster>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <SystemClock_Config+0x44>
  {
    Error_Handler();
 8001914:	f000 fbe6 	bl	80020e4 <Error_Handler>
  }

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001918:	2001      	movs	r0, #1
 800191a:	f003 fd0d 	bl	8005338 <HAL_PWREx_ControlVoltageScaling>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8001924:	f000 fbde 	bl	80020e4 <Error_Handler>
  }

  /** Set Flash latency before increasing MSIS
  */
  __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_2);
 8001928:	4b1f      	ldr	r3, [pc, #124]	@ (80019a8 <SystemClock_Config+0xd4>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f023 030f 	bic.w	r3, r3, #15
 8001930:	4a1d      	ldr	r2, [pc, #116]	@ (80019a8 <SystemClock_Config+0xd4>)
 8001932:	f043 0302 	orr.w	r3, r3, #2
 8001936:	6013      	str	r3, [r2, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSIS;
 8001938:	2328      	movs	r3, #40	@ 0x28
 800193a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800193c:	2301      	movs	r3, #1
 800193e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 8001940:	2300      	movs	r3, #0
 8001942:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSISState = RCC_MSI_ON;
 8001944:	2301      	movs	r3, #1
 8001946:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSISSource = RCC_MSI_RC0;
 8001948:	2300      	movs	r3, #0
 800194a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.MSISDiv = RCC_MSI_DIV1;
 800194c:	2300      	movs	r3, #0
 800194e:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001950:	f107 0318 	add.w	r3, r7, #24
 8001954:	4618      	mov	r0, r3
 8001956:	f003 fd69 	bl	800542c <HAL_RCC_OscConfig>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001960:	f000 fbc0 	bl	80020e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001964:	231f      	movs	r3, #31
 8001966:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSIS;
 8001968:	2300      	movs	r3, #0
 800196a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800196c:	2300      	movs	r3, #0
 800196e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001970:	2300      	movs	r3, #0
 8001972:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001974:	2300      	movs	r3, #0
 8001976:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8001978:	2300      	movs	r3, #0
 800197a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800197c:	463b      	mov	r3, r7
 800197e:	2102      	movs	r1, #2
 8001980:	4618      	mov	r0, r3
 8001982:	f004 f8a9 	bl	8005ad8 <HAL_RCC_ClockConfig>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 800198c:	f000 fbaa 	bl	80020e4 <Error_Handler>
  }

  /** MCO1 configuration
  */
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_64);
 8001990:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8001994:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8001998:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800199c:	f004 f988 	bl	8005cb0 <HAL_RCC_MCOConfig>
}
 80019a0:	bf00      	nop
 80019a2:	3750      	adds	r7, #80	@ 0x50
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40022000 	.word	0x40022000

080019ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b088      	sub	sp, #32
 80019b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80019b2:	463b      	mov	r3, r7
 80019b4:	2220      	movs	r2, #32
 80019b6:	2100      	movs	r1, #0
 80019b8:	4618      	mov	r0, r3
 80019ba:	f008 f881 	bl	8009ac0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80019be:	4b27      	ldr	r3, [pc, #156]	@ (8001a5c <MX_ADC1_Init+0xb0>)
 80019c0:	4a27      	ldr	r2, [pc, #156]	@ (8001a60 <MX_ADC1_Init+0xb4>)
 80019c2:	601a      	str	r2, [r3, #0]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80019c4:	4b25      	ldr	r3, [pc, #148]	@ (8001a5c <MX_ADC1_Init+0xb0>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	605a      	str	r2, [r3, #4]
  hadc1.Init.GainCompensation = 0;
 80019ca:	4b24      	ldr	r3, [pc, #144]	@ (8001a5c <MX_ADC1_Init+0xb0>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80019d0:	4b22      	ldr	r3, [pc, #136]	@ (8001a5c <MX_ADC1_Init+0xb0>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80019d6:	4b21      	ldr	r3, [pc, #132]	@ (8001a5c <MX_ADC1_Init+0xb0>)
 80019d8:	2204      	movs	r2, #4
 80019da:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80019dc:	4b1f      	ldr	r3, [pc, #124]	@ (8001a5c <MX_ADC1_Init+0xb0>)
 80019de:	2200      	movs	r2, #0
 80019e0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80019e2:	4b1e      	ldr	r3, [pc, #120]	@ (8001a5c <MX_ADC1_Init+0xb0>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80019e8:	4b1c      	ldr	r3, [pc, #112]	@ (8001a5c <MX_ADC1_Init+0xb0>)
 80019ea:	2201      	movs	r2, #1
 80019ec:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019ee:	4b1b      	ldr	r3, [pc, #108]	@ (8001a5c <MX_ADC1_Init+0xb0>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019f4:	4b19      	ldr	r3, [pc, #100]	@ (8001a5c <MX_ADC1_Init+0xb0>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80019fa:	4b18      	ldr	r3, [pc, #96]	@ (8001a5c <MX_ADC1_Init+0xb0>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001a00:	4b16      	ldr	r3, [pc, #88]	@ (8001a5c <MX_ADC1_Init+0xb0>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001a06:	4b15      	ldr	r3, [pc, #84]	@ (8001a5c <MX_ADC1_Init+0xb0>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001a0c:	4b13      	ldr	r3, [pc, #76]	@ (8001a5c <MX_ADC1_Init+0xb0>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.OversamplingMode = DISABLE;
 8001a12:	4b12      	ldr	r3, [pc, #72]	@ (8001a5c <MX_ADC1_Init+0xb0>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a1a:	4810      	ldr	r0, [pc, #64]	@ (8001a5c <MX_ADC1_Init+0xb0>)
 8001a1c:	f001 fe60 	bl	80036e0 <HAL_ADC_Init>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 8001a26:	f000 fb5d 	bl	80020e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a2e:	2306      	movs	r3, #6
 8001a30:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001a32:	2300      	movs	r3, #0
 8001a34:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001a36:	2304      	movs	r3, #4
 8001a38:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a3e:	463b      	mov	r3, r7
 8001a40:	4619      	mov	r1, r3
 8001a42:	4806      	ldr	r0, [pc, #24]	@ (8001a5c <MX_ADC1_Init+0xb0>)
 8001a44:	f002 f96e 	bl	8003d24 <HAL_ADC_ConfigChannel>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001a4e:	f000 fb49 	bl	80020e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a52:	bf00      	nop
 8001a54:	3720      	adds	r7, #32
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20000218 	.word	0x20000218
 8001a60:	42028000 	.word	0x42028000

08001a64 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b088      	sub	sp, #32
 8001a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a6a:	463b      	mov	r3, r7
 8001a6c:	2220      	movs	r2, #32
 8001a6e:	2100      	movs	r1, #0
 8001a70:	4618      	mov	r0, r3
 8001a72:	f008 f825 	bl	8009ac0 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001a76:	4b27      	ldr	r3, [pc, #156]	@ (8001b14 <MX_ADC2_Init+0xb0>)
 8001a78:	4a27      	ldr	r2, [pc, #156]	@ (8001b18 <MX_ADC2_Init+0xb4>)
 8001a7a:	601a      	str	r2, [r3, #0]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001a7c:	4b25      	ldr	r3, [pc, #148]	@ (8001b14 <MX_ADC2_Init+0xb0>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	605a      	str	r2, [r3, #4]
  hadc2.Init.GainCompensation = 0;
 8001a82:	4b24      	ldr	r3, [pc, #144]	@ (8001b14 <MX_ADC2_Init+0xb0>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001a88:	4b22      	ldr	r3, [pc, #136]	@ (8001b14 <MX_ADC2_Init+0xb0>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a8e:	4b21      	ldr	r3, [pc, #132]	@ (8001b14 <MX_ADC2_Init+0xb0>)
 8001a90:	2204      	movs	r2, #4
 8001a92:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001a94:	4b1f      	ldr	r3, [pc, #124]	@ (8001b14 <MX_ADC2_Init+0xb0>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001a9a:	4b1e      	ldr	r3, [pc, #120]	@ (8001b14 <MX_ADC2_Init+0xb0>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8001aa0:	4b1c      	ldr	r3, [pc, #112]	@ (8001b14 <MX_ADC2_Init+0xb0>)
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001aa6:	4b1b      	ldr	r3, [pc, #108]	@ (8001b14 <MX_ADC2_Init+0xb0>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001aac:	4b19      	ldr	r3, [pc, #100]	@ (8001b14 <MX_ADC2_Init+0xb0>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ab2:	4b18      	ldr	r3, [pc, #96]	@ (8001b14 <MX_ADC2_Init+0xb0>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001ab8:	4b16      	ldr	r3, [pc, #88]	@ (8001b14 <MX_ADC2_Init+0xb0>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001abe:	4b15      	ldr	r3, [pc, #84]	@ (8001b14 <MX_ADC2_Init+0xb0>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001ac4:	4b13      	ldr	r3, [pc, #76]	@ (8001b14 <MX_ADC2_Init+0xb0>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.OversamplingMode = DISABLE;
 8001aca:	4b12      	ldr	r3, [pc, #72]	@ (8001b14 <MX_ADC2_Init+0xb0>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001ad2:	4810      	ldr	r0, [pc, #64]	@ (8001b14 <MX_ADC2_Init+0xb0>)
 8001ad4:	f001 fe04 	bl	80036e0 <HAL_ADC_Init>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8001ade:	f000 fb01 	bl	80020e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ae6:	2306      	movs	r3, #6
 8001ae8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001aea:	2300      	movs	r3, #0
 8001aec:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001aee:	2304      	movs	r3, #4
 8001af0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001af2:	2300      	movs	r3, #0
 8001af4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001af6:	463b      	mov	r3, r7
 8001af8:	4619      	mov	r1, r3
 8001afa:	4806      	ldr	r0, [pc, #24]	@ (8001b14 <MX_ADC2_Init+0xb0>)
 8001afc:	f002 f912 	bl	8003d24 <HAL_ADC_ConfigChannel>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_ADC2_Init+0xa6>
  {
    Error_Handler();
 8001b06:	f000 faed 	bl	80020e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001b0a:	bf00      	nop
 8001b0c:	3720      	adds	r7, #32
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	20000280 	.word	0x20000280
 8001b18:	42028100 	.word	0x42028100

08001b1c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b08e      	sub	sp, #56	@ 0x38
 8001b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001b22:	f107 0308 	add.w	r3, r7, #8
 8001b26:	2230      	movs	r2, #48	@ 0x30
 8001b28:	2100      	movs	r1, #0
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f007 ffc8 	bl	8009ac0 <memset>
  DAC_AutonomousModeConfTypeDef sAutonomousMode = {0};
 8001b30:	2300      	movs	r3, #0
 8001b32:	607b      	str	r3, [r7, #4]

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001b34:	4b1b      	ldr	r3, [pc, #108]	@ (8001ba4 <MX_DAC1_Init+0x88>)
 8001b36:	4a1c      	ldr	r2, [pc, #112]	@ (8001ba8 <MX_DAC1_Init+0x8c>)
 8001b38:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001b3a:	481a      	ldr	r0, [pc, #104]	@ (8001ba4 <MX_DAC1_Init+0x88>)
 8001b3c:	f002 fe22 	bl	8004784 <HAL_DAC_Init>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <MX_DAC1_Init+0x2e>
  {
    Error_Handler();
 8001b46:	f000 facd 	bl	80020e4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	743b      	strb	r3, [r7, #16]
  sConfig.DAC_SignedFormat = DISABLE;
 8001b52:	2300      	movs	r3, #0
 8001b54:	747b      	strb	r3, [r7, #17]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001b56:	2300      	movs	r3, #0
 8001b58:	617b      	str	r3, [r7, #20]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	61fb      	str	r3, [r7, #28]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8001b62:	2301      	movs	r3, #1
 8001b64:	623b      	str	r3, [r7, #32]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001b66:	2300      	movs	r3, #0
 8001b68:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001b6a:	f107 0308 	add.w	r3, r7, #8
 8001b6e:	2200      	movs	r2, #0
 8001b70:	4619      	mov	r1, r3
 8001b72:	480c      	ldr	r0, [pc, #48]	@ (8001ba4 <MX_DAC1_Init+0x88>)
 8001b74:	f002 fec2 	bl	80048fc <HAL_DAC_ConfigChannel>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <MX_DAC1_Init+0x66>
  {
    Error_Handler();
 8001b7e:	f000 fab1 	bl	80020e4 <Error_Handler>
  }

  /** Configure Autonomous Mode
  */
  sAutonomousMode.AutonomousModeState = DAC_AUTONOMOUS_MODE_DISABLE;
 8001b82:	2300      	movs	r3, #0
 8001b84:	607b      	str	r3, [r7, #4]
  if (HAL_DACEx_SetConfigAutonomousMode(&hdac1, &sAutonomousMode) != HAL_OK)
 8001b86:	1d3b      	adds	r3, r7, #4
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4806      	ldr	r0, [pc, #24]	@ (8001ba4 <MX_DAC1_Init+0x88>)
 8001b8c:	f003 f848 	bl	8004c20 <HAL_DACEx_SetConfigAutonomousMode>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_DAC1_Init+0x7e>
  {
    Error_Handler();
 8001b96:	f000 faa5 	bl	80020e4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001b9a:	bf00      	nop
 8001b9c:	3738      	adds	r7, #56	@ 0x38
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	200002e8 	.word	0x200002e8
 8001ba8:	42028400 	.word	0x42028400

08001bac <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8001bb0:	4b0c      	ldr	r3, [pc, #48]	@ (8001be4 <MX_OPAMP1_Init+0x38>)
 8001bb2:	4a0d      	ldr	r2, [pc, #52]	@ (8001be8 <MX_OPAMP1_Init+0x3c>)
 8001bb4:	601a      	str	r2, [r3, #0]
  hopamp1.Init.Mode = OPAMP_FOLLOWER_MODE;
 8001bb6:	4b0b      	ldr	r3, [pc, #44]	@ (8001be4 <MX_OPAMP1_Init+0x38>)
 8001bb8:	220c      	movs	r2, #12
 8001bba:	60da      	str	r2, [r3, #12]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001bbc:	4b09      	ldr	r3, [pc, #36]	@ (8001be4 <MX_OPAMP1_Init+0x38>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	615a      	str	r2, [r3, #20]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALPOWER_NORMALSPEED;
 8001bc2:	4b08      	ldr	r3, [pc, #32]	@ (8001be4 <MX_OPAMP1_Init+0x38>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	609a      	str	r2, [r3, #8]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001bc8:	4b06      	ldr	r3, [pc, #24]	@ (8001be4 <MX_OPAMP1_Init+0x38>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	61da      	str	r2, [r3, #28]
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8001bce:	4805      	ldr	r0, [pc, #20]	@ (8001be4 <MX_OPAMP1_Init+0x38>)
 8001bd0:	f003 fa9c 	bl	800510c <HAL_OPAMP_Init>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <MX_OPAMP1_Init+0x32>
  {
    Error_Handler();
 8001bda:	f000 fa83 	bl	80020e4 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	200002fc 	.word	0x200002fc
 8001be8:	40007000 	.word	0x40007000

08001bec <MX_OPAMP2_Init>:
  * @brief OPAMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP2_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP2_Init 0 */

  /* USER CODE BEGIN OPAMP2_Init 1 */

  /* USER CODE END OPAMP2_Init 1 */
  hopamp2.Instance = OPAMP2;
 8001bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8001c24 <MX_OPAMP2_Init+0x38>)
 8001bf2:	4a0d      	ldr	r2, [pc, #52]	@ (8001c28 <MX_OPAMP2_Init+0x3c>)
 8001bf4:	601a      	str	r2, [r3, #0]
  hopamp2.Init.Mode = OPAMP_FOLLOWER_MODE;
 8001bf6:	4b0b      	ldr	r3, [pc, #44]	@ (8001c24 <MX_OPAMP2_Init+0x38>)
 8001bf8:	220c      	movs	r2, #12
 8001bfa:	60da      	str	r2, [r3, #12]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001bfc:	4b09      	ldr	r3, [pc, #36]	@ (8001c24 <MX_OPAMP2_Init+0x38>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	615a      	str	r2, [r3, #20]
  hopamp2.Init.PowerMode = OPAMP_POWERMODE_NORMALPOWER_NORMALSPEED;
 8001c02:	4b08      	ldr	r3, [pc, #32]	@ (8001c24 <MX_OPAMP2_Init+0x38>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	609a      	str	r2, [r3, #8]
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001c08:	4b06      	ldr	r3, [pc, #24]	@ (8001c24 <MX_OPAMP2_Init+0x38>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	61da      	str	r2, [r3, #28]
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8001c0e:	4805      	ldr	r0, [pc, #20]	@ (8001c24 <MX_OPAMP2_Init+0x38>)
 8001c10:	f003 fa7c 	bl	800510c <HAL_OPAMP_Init>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <MX_OPAMP2_Init+0x32>
  {
    Error_Handler();
 8001c1a:	f000 fa63 	bl	80020e4 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP2_Init 2 */

  /* USER CODE END OPAMP2_Init 2 */

}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	20000330 	.word	0x20000330
 8001c28:	40007010 	.word	0x40007010

08001c2c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8001c32:	1d3b      	adds	r3, r7, #4
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001c3c:	4b31      	ldr	r3, [pc, #196]	@ (8001d04 <MX_SPI1_Init+0xd8>)
 8001c3e:	4a32      	ldr	r2, [pc, #200]	@ (8001d08 <MX_SPI1_Init+0xdc>)
 8001c40:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c42:	4b30      	ldr	r3, [pc, #192]	@ (8001d04 <MX_SPI1_Init+0xd8>)
 8001c44:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001c48:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8001c4a:	4b2e      	ldr	r3, [pc, #184]	@ (8001d04 <MX_SPI1_Init+0xd8>)
 8001c4c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001c50:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c52:	4b2c      	ldr	r3, [pc, #176]	@ (8001d04 <MX_SPI1_Init+0xd8>)
 8001c54:	2207      	movs	r2, #7
 8001c56:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c58:	4b2a      	ldr	r3, [pc, #168]	@ (8001d04 <MX_SPI1_Init+0xd8>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c5e:	4b29      	ldr	r3, [pc, #164]	@ (8001d04 <MX_SPI1_Init+0xd8>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c64:	4b27      	ldr	r3, [pc, #156]	@ (8001d04 <MX_SPI1_Init+0xd8>)
 8001c66:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001c6a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001c6c:	4b25      	ldr	r3, [pc, #148]	@ (8001d04 <MX_SPI1_Init+0xd8>)
 8001c6e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001c72:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c74:	4b23      	ldr	r3, [pc, #140]	@ (8001d04 <MX_SPI1_Init+0xd8>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c7a:	4b22      	ldr	r3, [pc, #136]	@ (8001d04 <MX_SPI1_Init+0xd8>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c80:	4b20      	ldr	r3, [pc, #128]	@ (8001d04 <MX_SPI1_Init+0xd8>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8001c86:	4b1f      	ldr	r3, [pc, #124]	@ (8001d04 <MX_SPI1_Init+0xd8>)
 8001c88:	2207      	movs	r2, #7
 8001c8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001c8c:	4b1d      	ldr	r3, [pc, #116]	@ (8001d04 <MX_SPI1_Init+0xd8>)
 8001c8e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c92:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001c94:	4b1b      	ldr	r3, [pc, #108]	@ (8001d04 <MX_SPI1_Init+0xd8>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001c9a:	4b1a      	ldr	r3, [pc, #104]	@ (8001d04 <MX_SPI1_Init+0xd8>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001ca0:	4b18      	ldr	r3, [pc, #96]	@ (8001d04 <MX_SPI1_Init+0xd8>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001ca6:	4b17      	ldr	r3, [pc, #92]	@ (8001d04 <MX_SPI1_Init+0xd8>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001cac:	4b15      	ldr	r3, [pc, #84]	@ (8001d04 <MX_SPI1_Init+0xd8>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001cb2:	4b14      	ldr	r3, [pc, #80]	@ (8001d04 <MX_SPI1_Init+0xd8>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001cb8:	4b12      	ldr	r3, [pc, #72]	@ (8001d04 <MX_SPI1_Init+0xd8>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8001cbe:	4b11      	ldr	r3, [pc, #68]	@ (8001d04 <MX_SPI1_Init+0xd8>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8001cc4:	4b0f      	ldr	r3, [pc, #60]	@ (8001d04 <MX_SPI1_Init+0xd8>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001cca:	480e      	ldr	r0, [pc, #56]	@ (8001d04 <MX_SPI1_Init+0xd8>)
 8001ccc:	f005 f898 	bl	8006e00 <HAL_SPI_Init>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_SPI1_Init+0xae>
  {
    Error_Handler();
 8001cd6:	f000 fa05 	bl	80020e4 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8001cde:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001ce2:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8001ce8:	1d3b      	adds	r3, r7, #4
 8001cea:	4619      	mov	r1, r3
 8001cec:	4805      	ldr	r0, [pc, #20]	@ (8001d04 <MX_SPI1_Init+0xd8>)
 8001cee:	f005 fc62 	bl	80075b6 <HAL_SPIEx_SetConfigAutonomousMode>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <MX_SPI1_Init+0xd0>
  {
    Error_Handler();
 8001cf8:	f000 f9f4 	bl	80020e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001cfc:	bf00      	nop
 8001cfe:	3710      	adds	r7, #16
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	20000364 	.word	0x20000364
 8001d08:	40013000 	.word	0x40013000

08001d0c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8001d12:	1d3b      	adds	r3, r7, #4
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001d1c:	4b31      	ldr	r3, [pc, #196]	@ (8001de4 <MX_SPI2_Init+0xd8>)
 8001d1e:	4a32      	ldr	r2, [pc, #200]	@ (8001de8 <MX_SPI2_Init+0xdc>)
 8001d20:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001d22:	4b30      	ldr	r3, [pc, #192]	@ (8001de4 <MX_SPI2_Init+0xd8>)
 8001d24:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001d28:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001d2a:	4b2e      	ldr	r3, [pc, #184]	@ (8001de4 <MX_SPI2_Init+0xd8>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d30:	4b2c      	ldr	r3, [pc, #176]	@ (8001de4 <MX_SPI2_Init+0xd8>)
 8001d32:	2207      	movs	r2, #7
 8001d34:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d36:	4b2b      	ldr	r3, [pc, #172]	@ (8001de4 <MX_SPI2_Init+0xd8>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001d3c:	4b29      	ldr	r3, [pc, #164]	@ (8001de4 <MX_SPI2_Init+0xd8>)
 8001d3e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001d42:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001d44:	4b27      	ldr	r3, [pc, #156]	@ (8001de4 <MX_SPI2_Init+0xd8>)
 8001d46:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001d4a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001d4c:	4b25      	ldr	r3, [pc, #148]	@ (8001de4 <MX_SPI2_Init+0xd8>)
 8001d4e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d52:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d54:	4b23      	ldr	r3, [pc, #140]	@ (8001de4 <MX_SPI2_Init+0xd8>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d5a:	4b22      	ldr	r3, [pc, #136]	@ (8001de4 <MX_SPI2_Init+0xd8>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d60:	4b20      	ldr	r3, [pc, #128]	@ (8001de4 <MX_SPI2_Init+0xd8>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x7;
 8001d66:	4b1f      	ldr	r3, [pc, #124]	@ (8001de4 <MX_SPI2_Init+0xd8>)
 8001d68:	2207      	movs	r2, #7
 8001d6a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001d6c:	4b1d      	ldr	r3, [pc, #116]	@ (8001de4 <MX_SPI2_Init+0xd8>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001d72:	4b1c      	ldr	r3, [pc, #112]	@ (8001de4 <MX_SPI2_Init+0xd8>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001d78:	4b1a      	ldr	r3, [pc, #104]	@ (8001de4 <MX_SPI2_Init+0xd8>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001d7e:	4b19      	ldr	r3, [pc, #100]	@ (8001de4 <MX_SPI2_Init+0xd8>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001d84:	4b17      	ldr	r3, [pc, #92]	@ (8001de4 <MX_SPI2_Init+0xd8>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001d8a:	4b16      	ldr	r3, [pc, #88]	@ (8001de4 <MX_SPI2_Init+0xd8>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001d90:	4b14      	ldr	r3, [pc, #80]	@ (8001de4 <MX_SPI2_Init+0xd8>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001d96:	4b13      	ldr	r3, [pc, #76]	@ (8001de4 <MX_SPI2_Init+0xd8>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8001d9c:	4b11      	ldr	r3, [pc, #68]	@ (8001de4 <MX_SPI2_Init+0xd8>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8001da2:	4b10      	ldr	r3, [pc, #64]	@ (8001de4 <MX_SPI2_Init+0xd8>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001da8:	480e      	ldr	r0, [pc, #56]	@ (8001de4 <MX_SPI2_Init+0xd8>)
 8001daa:	f005 f829 	bl	8006e00 <HAL_SPI_Init>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <MX_SPI2_Init+0xac>
  {
    Error_Handler();
 8001db4:	f000 f996 	bl	80020e4 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8001db8:	2300      	movs	r3, #0
 8001dba:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8001dbc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001dc0:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi2, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8001dc6:	1d3b      	adds	r3, r7, #4
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4806      	ldr	r0, [pc, #24]	@ (8001de4 <MX_SPI2_Init+0xd8>)
 8001dcc:	f005 fbf3 	bl	80075b6 <HAL_SPIEx_SetConfigAutonomousMode>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <MX_SPI2_Init+0xce>
  {
    Error_Handler();
 8001dd6:	f000 f985 	bl	80020e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001dda:	bf00      	nop
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	200003f4 	.word	0x200003f4
 8001de8:	40003800 	.word	0x40003800

08001dec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b08e      	sub	sp, #56	@ 0x38
 8001df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001df2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001df6:	2200      	movs	r2, #0
 8001df8:	601a      	str	r2, [r3, #0]
 8001dfa:	605a      	str	r2, [r3, #4]
 8001dfc:	609a      	str	r2, [r3, #8]
 8001dfe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e00:	f107 031c 	add.w	r3, r7, #28
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	605a      	str	r2, [r3, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e0c:	463b      	mov	r3, r7
 8001e0e:	2200      	movs	r2, #0
 8001e10:	601a      	str	r2, [r3, #0]
 8001e12:	605a      	str	r2, [r3, #4]
 8001e14:	609a      	str	r2, [r3, #8]
 8001e16:	60da      	str	r2, [r3, #12]
 8001e18:	611a      	str	r2, [r3, #16]
 8001e1a:	615a      	str	r2, [r3, #20]
 8001e1c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e1e:	4b2e      	ldr	r3, [pc, #184]	@ (8001ed8 <MX_TIM3_Init+0xec>)
 8001e20:	4a2e      	ldr	r2, [pc, #184]	@ (8001edc <MX_TIM3_Init+0xf0>)
 8001e22:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 191;
 8001e24:	4b2c      	ldr	r3, [pc, #176]	@ (8001ed8 <MX_TIM3_Init+0xec>)
 8001e26:	22bf      	movs	r2, #191	@ 0xbf
 8001e28:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e2a:	4b2b      	ldr	r3, [pc, #172]	@ (8001ed8 <MX_TIM3_Init+0xec>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8001e30:	4b29      	ldr	r3, [pc, #164]	@ (8001ed8 <MX_TIM3_Init+0xec>)
 8001e32:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001e36:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001e38:	4b27      	ldr	r3, [pc, #156]	@ (8001ed8 <MX_TIM3_Init+0xec>)
 8001e3a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e3e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e40:	4b25      	ldr	r3, [pc, #148]	@ (8001ed8 <MX_TIM3_Init+0xec>)
 8001e42:	2280      	movs	r2, #128	@ 0x80
 8001e44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001e46:	4824      	ldr	r0, [pc, #144]	@ (8001ed8 <MX_TIM3_Init+0xec>)
 8001e48:	f005 fbf6 	bl	8007638 <HAL_TIM_Base_Init>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8001e52:	f000 f947 	bl	80020e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e56:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001e5c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e60:	4619      	mov	r1, r3
 8001e62:	481d      	ldr	r0, [pc, #116]	@ (8001ed8 <MX_TIM3_Init+0xec>)
 8001e64:	f005 fdb4 	bl	80079d0 <HAL_TIM_ConfigClockSource>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8001e6e:	f000 f939 	bl	80020e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001e72:	4819      	ldr	r0, [pc, #100]	@ (8001ed8 <MX_TIM3_Init+0xec>)
 8001e74:	f005 fc37 	bl	80076e6 <HAL_TIM_PWM_Init>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001e7e:	f000 f931 	bl	80020e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e82:	2300      	movs	r3, #0
 8001e84:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e86:	2300      	movs	r3, #0
 8001e88:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e8a:	f107 031c 	add.w	r3, r7, #28
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4811      	ldr	r0, [pc, #68]	@ (8001ed8 <MX_TIM3_Init+0xec>)
 8001e92:	f006 fa6b 	bl	800836c <HAL_TIMEx_MasterConfigSynchronization>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001e9c:	f000 f922 	bl	80020e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ea0:	2360      	movs	r3, #96	@ 0x60
 8001ea2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 5000;
 8001ea4:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001ea8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001eb2:	463b      	mov	r3, r7
 8001eb4:	2208      	movs	r2, #8
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	4807      	ldr	r0, [pc, #28]	@ (8001ed8 <MX_TIM3_Init+0xec>)
 8001eba:	f005 fc75 	bl	80077a8 <HAL_TIM_PWM_ConfigChannel>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <MX_TIM3_Init+0xdc>
  {
    Error_Handler();
 8001ec4:	f000 f90e 	bl	80020e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001ec8:	4803      	ldr	r0, [pc, #12]	@ (8001ed8 <MX_TIM3_Init+0xec>)
 8001eca:	f000 fbfb 	bl	80026c4 <HAL_TIM_MspPostInit>

}
 8001ece:	bf00      	nop
 8001ed0:	3738      	adds	r7, #56	@ 0x38
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	20000484 	.word	0x20000484
 8001edc:	40000400 	.word	0x40000400

08001ee0 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001ee4:	4b22      	ldr	r3, [pc, #136]	@ (8001f70 <MX_UART5_Init+0x90>)
 8001ee6:	4a23      	ldr	r2, [pc, #140]	@ (8001f74 <MX_UART5_Init+0x94>)
 8001ee8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001eea:	4b21      	ldr	r3, [pc, #132]	@ (8001f70 <MX_UART5_Init+0x90>)
 8001eec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ef0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001ef2:	4b1f      	ldr	r3, [pc, #124]	@ (8001f70 <MX_UART5_Init+0x90>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001ef8:	4b1d      	ldr	r3, [pc, #116]	@ (8001f70 <MX_UART5_Init+0x90>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001efe:	4b1c      	ldr	r3, [pc, #112]	@ (8001f70 <MX_UART5_Init+0x90>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001f04:	4b1a      	ldr	r3, [pc, #104]	@ (8001f70 <MX_UART5_Init+0x90>)
 8001f06:	220c      	movs	r2, #12
 8001f08:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f0a:	4b19      	ldr	r3, [pc, #100]	@ (8001f70 <MX_UART5_Init+0x90>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f10:	4b17      	ldr	r3, [pc, #92]	@ (8001f70 <MX_UART5_Init+0x90>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f16:	4b16      	ldr	r3, [pc, #88]	@ (8001f70 <MX_UART5_Init+0x90>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f1c:	4b14      	ldr	r3, [pc, #80]	@ (8001f70 <MX_UART5_Init+0x90>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f22:	4b13      	ldr	r3, [pc, #76]	@ (8001f70 <MX_UART5_Init+0x90>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001f28:	4811      	ldr	r0, [pc, #68]	@ (8001f70 <MX_UART5_Init+0x90>)
 8001f2a:	f006 fa95 	bl	8008458 <HAL_UART_Init>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8001f34:	f000 f8d6 	bl	80020e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f38:	2100      	movs	r1, #0
 8001f3a:	480d      	ldr	r0, [pc, #52]	@ (8001f70 <MX_UART5_Init+0x90>)
 8001f3c:	f006 ff36 	bl	8008dac <HAL_UARTEx_SetTxFifoThreshold>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8001f46:	f000 f8cd 	bl	80020e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	4808      	ldr	r0, [pc, #32]	@ (8001f70 <MX_UART5_Init+0x90>)
 8001f4e:	f006 ff6b 	bl	8008e28 <HAL_UARTEx_SetRxFifoThreshold>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8001f58:	f000 f8c4 	bl	80020e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8001f5c:	4804      	ldr	r0, [pc, #16]	@ (8001f70 <MX_UART5_Init+0x90>)
 8001f5e:	f006 feec 	bl	8008d3a <HAL_UARTEx_DisableFifoMode>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8001f68:	f000 f8bc 	bl	80020e4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001f6c:	bf00      	nop
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	200004d0 	.word	0x200004d0
 8001f74:	40005000 	.word	0x40005000

08001f78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b08a      	sub	sp, #40	@ 0x28
 8001f7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f7e:	f107 0314 	add.w	r3, r7, #20
 8001f82:	2200      	movs	r2, #0
 8001f84:	601a      	str	r2, [r3, #0]
 8001f86:	605a      	str	r2, [r3, #4]
 8001f88:	609a      	str	r2, [r3, #8]
 8001f8a:	60da      	str	r2, [r3, #12]
 8001f8c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f8e:	4b39      	ldr	r3, [pc, #228]	@ (8002074 <MX_GPIO_Init+0xfc>)
 8001f90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f94:	4a37      	ldr	r2, [pc, #220]	@ (8002074 <MX_GPIO_Init+0xfc>)
 8001f96:	f043 0304 	orr.w	r3, r3, #4
 8001f9a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f9e:	4b35      	ldr	r3, [pc, #212]	@ (8002074 <MX_GPIO_Init+0xfc>)
 8001fa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fa4:	f003 0304 	and.w	r3, r3, #4
 8001fa8:	613b      	str	r3, [r7, #16]
 8001faa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fac:	4b31      	ldr	r3, [pc, #196]	@ (8002074 <MX_GPIO_Init+0xfc>)
 8001fae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fb2:	4a30      	ldr	r2, [pc, #192]	@ (8002074 <MX_GPIO_Init+0xfc>)
 8001fb4:	f043 0301 	orr.w	r3, r3, #1
 8001fb8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001fbc:	4b2d      	ldr	r3, [pc, #180]	@ (8002074 <MX_GPIO_Init+0xfc>)
 8001fbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	60fb      	str	r3, [r7, #12]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fca:	4b2a      	ldr	r3, [pc, #168]	@ (8002074 <MX_GPIO_Init+0xfc>)
 8001fcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fd0:	4a28      	ldr	r2, [pc, #160]	@ (8002074 <MX_GPIO_Init+0xfc>)
 8001fd2:	f043 0302 	orr.w	r3, r3, #2
 8001fd6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001fda:	4b26      	ldr	r3, [pc, #152]	@ (8002074 <MX_GPIO_Init+0xfc>)
 8001fdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	60bb      	str	r3, [r7, #8]
 8001fe6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fe8:	4b22      	ldr	r3, [pc, #136]	@ (8002074 <MX_GPIO_Init+0xfc>)
 8001fea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fee:	4a21      	ldr	r2, [pc, #132]	@ (8002074 <MX_GPIO_Init+0xfc>)
 8001ff0:	f043 0308 	orr.w	r3, r3, #8
 8001ff4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001ff8:	4b1e      	ldr	r3, [pc, #120]	@ (8002074 <MX_GPIO_Init+0xfc>)
 8001ffa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ffe:	f003 0308 	and.w	r3, r3, #8
 8002002:	607b      	str	r3, [r7, #4]
 8002004:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ADC_RESET_Pin|ADC_CS_Pin|LCD_CS_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8002006:	2200      	movs	r2, #0
 8002008:	f44f 61d8 	mov.w	r1, #1728	@ 0x6c0
 800200c:	481a      	ldr	r0, [pc, #104]	@ (8002078 <MX_GPIO_Init+0x100>)
 800200e:	f003 f865 	bl	80050dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ADC_DRDY_Pin */
  GPIO_InitStruct.Pin = ADC_DRDY_Pin;
 8002012:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002016:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002018:	2300      	movs	r3, #0
 800201a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201c:	2300      	movs	r3, #0
 800201e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ADC_DRDY_GPIO_Port, &GPIO_InitStruct);
 8002020:	f107 0314 	add.w	r3, r7, #20
 8002024:	4619      	mov	r1, r3
 8002026:	4815      	ldr	r0, [pc, #84]	@ (800207c <MX_GPIO_Init+0x104>)
 8002028:	f002 feb6 	bl	8004d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC_RESET_Pin ADC_CS_Pin LCD_CS_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ADC_RESET_Pin|ADC_CS_Pin|LCD_CS_Pin|LCD_DISP_Pin;
 800202c:	f44f 63d8 	mov.w	r3, #1728	@ 0x6c0
 8002030:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002032:	2301      	movs	r3, #1
 8002034:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002036:	2300      	movs	r3, #0
 8002038:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203a:	2300      	movs	r3, #0
 800203c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800203e:	f107 0314 	add.w	r3, r7, #20
 8002042:	4619      	mov	r1, r3
 8002044:	480c      	ldr	r0, [pc, #48]	@ (8002078 <MX_GPIO_Init+0x100>)
 8002046:	f002 fea7 	bl	8004d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800204a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800204e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002050:	2302      	movs	r3, #2
 8002052:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002054:	2300      	movs	r3, #0
 8002056:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002058:	2302      	movs	r3, #2
 800205a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800205c:	2300      	movs	r3, #0
 800205e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002060:	f107 0314 	add.w	r3, r7, #20
 8002064:	4619      	mov	r1, r3
 8002066:	4806      	ldr	r0, [pc, #24]	@ (8002080 <MX_GPIO_Init+0x108>)
 8002068:	f002 fe96 	bl	8004d98 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800206c:	bf00      	nop
 800206e:	3728      	adds	r7, #40	@ 0x28
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	40030c00 	.word	0x40030c00
 8002078:	42020800 	.word	0x42020800
 800207c:	42020400 	.word	0x42020400
 8002080:	42020000 	.word	0x42020000

08002084 <BSP_PB_Callback>:
  * @brief BSP Push Button callback
  * @param Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 800208e:	79fb      	ldrb	r3, [r7, #7]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d118      	bne.n	80020c6 <BSP_PB_Callback+0x42>
    extern const uint32_t dac_voltage_levels[];
    extern volatile uint32_t dac_value;
    extern const uint8_t num_voltage_levels;
    
    // Move to the next voltage level
    current_voltage_index = (current_voltage_index + 1) % num_voltage_levels;
 8002094:	4b0f      	ldr	r3, [pc, #60]	@ (80020d4 <BSP_PB_Callback+0x50>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	b2db      	uxtb	r3, r3
 800209a:	3301      	adds	r3, #1
 800209c:	2205      	movs	r2, #5
 800209e:	fb93 f1f2 	sdiv	r1, r3, r2
 80020a2:	fb01 f202 	mul.w	r2, r1, r2
 80020a6:	1a9b      	subs	r3, r3, r2
 80020a8:	b2da      	uxtb	r2, r3
 80020aa:	4b0a      	ldr	r3, [pc, #40]	@ (80020d4 <BSP_PB_Callback+0x50>)
 80020ac:	701a      	strb	r2, [r3, #0]
    dac_value = dac_voltage_levels[current_voltage_index];
 80020ae:	4b09      	ldr	r3, [pc, #36]	@ (80020d4 <BSP_PB_Callback+0x50>)
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	461a      	mov	r2, r3
 80020b6:	4b08      	ldr	r3, [pc, #32]	@ (80020d8 <BSP_PB_Callback+0x54>)
 80020b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020bc:	4a07      	ldr	r2, [pc, #28]	@ (80020dc <BSP_PB_Callback+0x58>)
 80020be:	6013      	str	r3, [r2, #0]
    
    BspButtonState = BUTTON_PRESSED;
 80020c0:	4b07      	ldr	r3, [pc, #28]	@ (80020e0 <BSP_PB_Callback+0x5c>)
 80020c2:	2201      	movs	r2, #1
 80020c4:	601a      	str	r2, [r3, #0]
  }
}
 80020c6:	bf00      	nop
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	200005a2 	.word	0x200005a2
 80020d8:	08022d34 	.word	0x08022d34
 80020dc:	20000000 	.word	0x20000000
 80020e0:	20000214 	.word	0x20000214

080020e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020e8:	b672      	cpsid	i
}
 80020ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020ec:	bf00      	nop
 80020ee:	e7fd      	b.n	80020ec <Error_Handler+0x8>

080020f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80020f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002120 <HAL_MspInit+0x30>)
 80020f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020fc:	4a08      	ldr	r2, [pc, #32]	@ (8002120 <HAL_MspInit+0x30>)
 80020fe:	f043 0304 	orr.w	r3, r3, #4
 8002102:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002106:	4b06      	ldr	r3, [pc, #24]	@ (8002120 <HAL_MspInit+0x30>)
 8002108:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800210c:	f003 0304 	and.w	r3, r3, #4
 8002110:	607b      	str	r3, [r7, #4]
 8002112:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 8002114:	f003 f94e 	bl	80053b4 <HAL_PWREx_EnableVddA>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002118:	bf00      	nop
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	40030c00 	.word	0x40030c00

08002124 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b0aa      	sub	sp, #168	@ 0xa8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800212c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	605a      	str	r2, [r3, #4]
 8002136:	609a      	str	r2, [r3, #8]
 8002138:	60da      	str	r2, [r3, #12]
 800213a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800213c:	f107 031c 	add.w	r3, r7, #28
 8002140:	2278      	movs	r2, #120	@ 0x78
 8002142:	2100      	movs	r1, #0
 8002144:	4618      	mov	r0, r3
 8002146:	f007 fcbb 	bl	8009ac0 <memset>
  if(hadc->Instance==ADC1)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a4d      	ldr	r2, [pc, #308]	@ (8002284 <HAL_ADC_MspInit+0x160>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d147      	bne.n	80021e4 <HAL_ADC_MspInit+0xc0>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8002154:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002158:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HCLK;
 800215a:	2300      	movs	r3, #0
 800215c:	673b      	str	r3, [r7, #112]	@ 0x70
    PeriphClkInit.AdcDacClockDivider = RCC_ADCDACCLK_DIV1;
 800215e:	2300      	movs	r3, #0
 8002160:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002162:	f107 031c 	add.w	r3, r7, #28
 8002166:	4618      	mov	r0, r3
 8002168:	f003 febe 	bl	8005ee8 <HAL_RCCEx_PeriphCLKConfig>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8002172:	f7ff ffb7 	bl	80020e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002176:	4b44      	ldr	r3, [pc, #272]	@ (8002288 <HAL_ADC_MspInit+0x164>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	3301      	adds	r3, #1
 800217c:	4a42      	ldr	r2, [pc, #264]	@ (8002288 <HAL_ADC_MspInit+0x164>)
 800217e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002180:	4b41      	ldr	r3, [pc, #260]	@ (8002288 <HAL_ADC_MspInit+0x164>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d10e      	bne.n	80021a6 <HAL_ADC_MspInit+0x82>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002188:	4b40      	ldr	r3, [pc, #256]	@ (800228c <HAL_ADC_MspInit+0x168>)
 800218a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800218e:	4a3f      	ldr	r2, [pc, #252]	@ (800228c <HAL_ADC_MspInit+0x168>)
 8002190:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002194:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002198:	4b3c      	ldr	r3, [pc, #240]	@ (800228c <HAL_ADC_MspInit+0x168>)
 800219a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800219e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021a2:	61bb      	str	r3, [r7, #24]
 80021a4:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021a6:	4b39      	ldr	r3, [pc, #228]	@ (800228c <HAL_ADC_MspInit+0x168>)
 80021a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021ac:	4a37      	ldr	r2, [pc, #220]	@ (800228c <HAL_ADC_MspInit+0x168>)
 80021ae:	f043 0304 	orr.w	r3, r3, #4
 80021b2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80021b6:	4b35      	ldr	r3, [pc, #212]	@ (800228c <HAL_ADC_MspInit+0x168>)
 80021b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021bc:	f003 0304 	and.w	r3, r3, #4
 80021c0:	617b      	str	r3, [r7, #20]
 80021c2:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80021c4:	2301      	movs	r3, #1
 80021c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021ca:	2303      	movs	r3, #3
 80021cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d0:	2300      	movs	r3, #0
 80021d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021d6:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80021da:	4619      	mov	r1, r3
 80021dc:	482c      	ldr	r0, [pc, #176]	@ (8002290 <HAL_ADC_MspInit+0x16c>)
 80021de:	f002 fddb 	bl	8004d98 <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }

}
 80021e2:	e04b      	b.n	800227c <HAL_ADC_MspInit+0x158>
  else if(hadc->Instance==ADC2)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a2a      	ldr	r2, [pc, #168]	@ (8002294 <HAL_ADC_MspInit+0x170>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d146      	bne.n	800227c <HAL_ADC_MspInit+0x158>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 80021ee:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80021f2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HCLK;
 80021f4:	2300      	movs	r3, #0
 80021f6:	673b      	str	r3, [r7, #112]	@ 0x70
    PeriphClkInit.AdcDacClockDivider = RCC_ADCDACCLK_DIV1;
 80021f8:	2300      	movs	r3, #0
 80021fa:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021fc:	f107 031c 	add.w	r3, r7, #28
 8002200:	4618      	mov	r0, r3
 8002202:	f003 fe71 	bl	8005ee8 <HAL_RCCEx_PeriphCLKConfig>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <HAL_ADC_MspInit+0xec>
      Error_Handler();
 800220c:	f7ff ff6a 	bl	80020e4 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002210:	4b1d      	ldr	r3, [pc, #116]	@ (8002288 <HAL_ADC_MspInit+0x164>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	3301      	adds	r3, #1
 8002216:	4a1c      	ldr	r2, [pc, #112]	@ (8002288 <HAL_ADC_MspInit+0x164>)
 8002218:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800221a:	4b1b      	ldr	r3, [pc, #108]	@ (8002288 <HAL_ADC_MspInit+0x164>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d10e      	bne.n	8002240 <HAL_ADC_MspInit+0x11c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002222:	4b1a      	ldr	r3, [pc, #104]	@ (800228c <HAL_ADC_MspInit+0x168>)
 8002224:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002228:	4a18      	ldr	r2, [pc, #96]	@ (800228c <HAL_ADC_MspInit+0x168>)
 800222a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800222e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002232:	4b16      	ldr	r3, [pc, #88]	@ (800228c <HAL_ADC_MspInit+0x168>)
 8002234:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002238:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800223c:	613b      	str	r3, [r7, #16]
 800223e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002240:	4b12      	ldr	r3, [pc, #72]	@ (800228c <HAL_ADC_MspInit+0x168>)
 8002242:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002246:	4a11      	ldr	r2, [pc, #68]	@ (800228c <HAL_ADC_MspInit+0x168>)
 8002248:	f043 0304 	orr.w	r3, r3, #4
 800224c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002250:	4b0e      	ldr	r3, [pc, #56]	@ (800228c <HAL_ADC_MspInit+0x168>)
 8002252:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002256:	f003 0304 	and.w	r3, r3, #4
 800225a:	60fb      	str	r3, [r7, #12]
 800225c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800225e:	2308      	movs	r3, #8
 8002260:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002264:	2303      	movs	r3, #3
 8002266:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226a:	2300      	movs	r3, #0
 800226c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002270:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002274:	4619      	mov	r1, r3
 8002276:	4806      	ldr	r0, [pc, #24]	@ (8002290 <HAL_ADC_MspInit+0x16c>)
 8002278:	f002 fd8e 	bl	8004d98 <HAL_GPIO_Init>
}
 800227c:	bf00      	nop
 800227e:	37a8      	adds	r7, #168	@ 0xa8
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	42028000 	.word	0x42028000
 8002288:	200005b4 	.word	0x200005b4
 800228c:	40030c00 	.word	0x40030c00
 8002290:	42020800 	.word	0x42020800
 8002294:	42028100 	.word	0x42028100

08002298 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b0a8      	sub	sp, #160	@ 0xa0
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a0:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	605a      	str	r2, [r3, #4]
 80022aa:	609a      	str	r2, [r3, #8]
 80022ac:	60da      	str	r2, [r3, #12]
 80022ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022b0:	f107 0314 	add.w	r3, r7, #20
 80022b4:	2278      	movs	r2, #120	@ 0x78
 80022b6:	2100      	movs	r1, #0
 80022b8:	4618      	mov	r0, r3
 80022ba:	f007 fc01 	bl	8009ac0 <memset>
  if(hdac->Instance==DAC1)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a22      	ldr	r2, [pc, #136]	@ (800234c <HAL_DAC_MspInit+0xb4>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d13c      	bne.n	8002342 <HAL_DAC_MspInit+0xaa>

    /* USER CODE END DAC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DAC1SH;
 80022c8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80022cc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dac1SampleHoldClockSelection = RCC_DAC1SHCLKSOURCE_LSI;
 80022ce:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80022d2:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022d4:	f107 0314 	add.w	r3, r7, #20
 80022d8:	4618      	mov	r0, r3
 80022da:	f003 fe05 	bl	8005ee8 <HAL_RCCEx_PeriphCLKConfig>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <HAL_DAC_MspInit+0x50>
    {
      Error_Handler();
 80022e4:	f7ff fefe 	bl	80020e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80022e8:	4b19      	ldr	r3, [pc, #100]	@ (8002350 <HAL_DAC_MspInit+0xb8>)
 80022ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80022ee:	4a18      	ldr	r2, [pc, #96]	@ (8002350 <HAL_DAC_MspInit+0xb8>)
 80022f0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80022f4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80022f8:	4b15      	ldr	r3, [pc, #84]	@ (8002350 <HAL_DAC_MspInit+0xb8>)
 80022fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80022fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002302:	613b      	str	r3, [r7, #16]
 8002304:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002306:	4b12      	ldr	r3, [pc, #72]	@ (8002350 <HAL_DAC_MspInit+0xb8>)
 8002308:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800230c:	4a10      	ldr	r2, [pc, #64]	@ (8002350 <HAL_DAC_MspInit+0xb8>)
 800230e:	f043 0301 	orr.w	r3, r3, #1
 8002312:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002316:	4b0e      	ldr	r3, [pc, #56]	@ (8002350 <HAL_DAC_MspInit+0xb8>)
 8002318:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800231c:	f003 0301 	and.w	r3, r3, #1
 8002320:	60fb      	str	r3, [r7, #12]
 8002322:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002324:	2310      	movs	r3, #16
 8002326:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800232a:	2303      	movs	r3, #3
 800232c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002330:	2300      	movs	r3, #0
 8002332:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002336:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800233a:	4619      	mov	r1, r3
 800233c:	4805      	ldr	r0, [pc, #20]	@ (8002354 <HAL_DAC_MspInit+0xbc>)
 800233e:	f002 fd2b 	bl	8004d98 <HAL_GPIO_Init>

    /* USER CODE END DAC1_MspInit 1 */

  }

}
 8002342:	bf00      	nop
 8002344:	37a0      	adds	r7, #160	@ 0xa0
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	42028400 	.word	0x42028400
 8002350:	40030c00 	.word	0x40030c00
 8002354:	42020000 	.word	0x42020000

08002358 <HAL_OPAMP_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hopamp: OPAMP handle pointer
  * @retval None
  */
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b08c      	sub	sp, #48	@ 0x30
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002360:	f107 031c 	add.w	r3, r7, #28
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	605a      	str	r2, [r3, #4]
 800236a:	609a      	str	r2, [r3, #8]
 800236c:	60da      	str	r2, [r3, #12]
 800236e:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a46      	ldr	r2, [pc, #280]	@ (8002490 <HAL_OPAMP_MspInit+0x138>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d133      	bne.n	80023e2 <HAL_OPAMP_MspInit+0x8a>
  {
    /* USER CODE BEGIN OPAMP1_MspInit 0 */

    /* USER CODE END OPAMP1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_OPAMP_CLK_ENABLED++;
 800237a:	4b46      	ldr	r3, [pc, #280]	@ (8002494 <HAL_OPAMP_MspInit+0x13c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	3301      	adds	r3, #1
 8002380:	4a44      	ldr	r2, [pc, #272]	@ (8002494 <HAL_OPAMP_MspInit+0x13c>)
 8002382:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OPAMP_CLK_ENABLED==1){
 8002384:	4b43      	ldr	r3, [pc, #268]	@ (8002494 <HAL_OPAMP_MspInit+0x13c>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d10e      	bne.n	80023aa <HAL_OPAMP_MspInit+0x52>
      __HAL_RCC_OPAMP_CLK_ENABLE();
 800238c:	4b42      	ldr	r3, [pc, #264]	@ (8002498 <HAL_OPAMP_MspInit+0x140>)
 800238e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002392:	4a41      	ldr	r2, [pc, #260]	@ (8002498 <HAL_OPAMP_MspInit+0x140>)
 8002394:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002398:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800239c:	4b3e      	ldr	r3, [pc, #248]	@ (8002498 <HAL_OPAMP_MspInit+0x140>)
 800239e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80023a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023a6:	61bb      	str	r3, [r7, #24]
 80023a8:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023aa:	4b3b      	ldr	r3, [pc, #236]	@ (8002498 <HAL_OPAMP_MspInit+0x140>)
 80023ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023b0:	4a39      	ldr	r2, [pc, #228]	@ (8002498 <HAL_OPAMP_MspInit+0x140>)
 80023b2:	f043 0301 	orr.w	r3, r3, #1
 80023b6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80023ba:	4b37      	ldr	r3, [pc, #220]	@ (8002498 <HAL_OPAMP_MspInit+0x140>)
 80023bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023c0:	f003 0301 	and.w	r3, r3, #1
 80023c4:	617b      	str	r3, [r7, #20]
 80023c6:	697b      	ldr	r3, [r7, #20]
    /**OPAMP1 GPIO Configuration
    PA0     ------> OPAMP1_VINP
    PA3     ------> OPAMP1_VOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 80023c8:	2309      	movs	r3, #9
 80023ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023cc:	2303      	movs	r3, #3
 80023ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d0:	2300      	movs	r3, #0
 80023d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023d4:	f107 031c 	add.w	r3, r7, #28
 80023d8:	4619      	mov	r1, r3
 80023da:	4830      	ldr	r0, [pc, #192]	@ (800249c <HAL_OPAMP_MspInit+0x144>)
 80023dc:	f002 fcdc 	bl	8004d98 <HAL_GPIO_Init>
    /* USER CODE BEGIN OPAMP2_MspInit 1 */

    /* USER CODE END OPAMP2_MspInit 1 */
  }

}
 80023e0:	e052      	b.n	8002488 <HAL_OPAMP_MspInit+0x130>
  else if(hopamp->Instance==OPAMP2)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a2e      	ldr	r2, [pc, #184]	@ (80024a0 <HAL_OPAMP_MspInit+0x148>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d14d      	bne.n	8002488 <HAL_OPAMP_MspInit+0x130>
    HAL_RCC_OPAMP_CLK_ENABLED++;
 80023ec:	4b29      	ldr	r3, [pc, #164]	@ (8002494 <HAL_OPAMP_MspInit+0x13c>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	3301      	adds	r3, #1
 80023f2:	4a28      	ldr	r2, [pc, #160]	@ (8002494 <HAL_OPAMP_MspInit+0x13c>)
 80023f4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OPAMP_CLK_ENABLED==1){
 80023f6:	4b27      	ldr	r3, [pc, #156]	@ (8002494 <HAL_OPAMP_MspInit+0x13c>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d10e      	bne.n	800241c <HAL_OPAMP_MspInit+0xc4>
      __HAL_RCC_OPAMP_CLK_ENABLE();
 80023fe:	4b26      	ldr	r3, [pc, #152]	@ (8002498 <HAL_OPAMP_MspInit+0x140>)
 8002400:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002404:	4a24      	ldr	r2, [pc, #144]	@ (8002498 <HAL_OPAMP_MspInit+0x140>)
 8002406:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800240a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800240e:	4b22      	ldr	r3, [pc, #136]	@ (8002498 <HAL_OPAMP_MspInit+0x140>)
 8002410:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002414:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002418:	613b      	str	r3, [r7, #16]
 800241a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800241c:	4b1e      	ldr	r3, [pc, #120]	@ (8002498 <HAL_OPAMP_MspInit+0x140>)
 800241e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002422:	4a1d      	ldr	r2, [pc, #116]	@ (8002498 <HAL_OPAMP_MspInit+0x140>)
 8002424:	f043 0301 	orr.w	r3, r3, #1
 8002428:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800242c:	4b1a      	ldr	r3, [pc, #104]	@ (8002498 <HAL_OPAMP_MspInit+0x140>)
 800242e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	60fb      	str	r3, [r7, #12]
 8002438:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800243a:	4b17      	ldr	r3, [pc, #92]	@ (8002498 <HAL_OPAMP_MspInit+0x140>)
 800243c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002440:	4a15      	ldr	r2, [pc, #84]	@ (8002498 <HAL_OPAMP_MspInit+0x140>)
 8002442:	f043 0302 	orr.w	r3, r3, #2
 8002446:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800244a:	4b13      	ldr	r3, [pc, #76]	@ (8002498 <HAL_OPAMP_MspInit+0x140>)
 800244c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	60bb      	str	r3, [r7, #8]
 8002456:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002458:	2340      	movs	r3, #64	@ 0x40
 800245a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800245c:	2303      	movs	r3, #3
 800245e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002460:	2300      	movs	r3, #0
 8002462:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002464:	f107 031c 	add.w	r3, r7, #28
 8002468:	4619      	mov	r1, r3
 800246a:	480c      	ldr	r0, [pc, #48]	@ (800249c <HAL_OPAMP_MspInit+0x144>)
 800246c:	f002 fc94 	bl	8004d98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002470:	2301      	movs	r3, #1
 8002472:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002474:	2303      	movs	r3, #3
 8002476:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002478:	2300      	movs	r3, #0
 800247a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800247c:	f107 031c 	add.w	r3, r7, #28
 8002480:	4619      	mov	r1, r3
 8002482:	4808      	ldr	r0, [pc, #32]	@ (80024a4 <HAL_OPAMP_MspInit+0x14c>)
 8002484:	f002 fc88 	bl	8004d98 <HAL_GPIO_Init>
}
 8002488:	bf00      	nop
 800248a:	3730      	adds	r7, #48	@ 0x30
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	40007000 	.word	0x40007000
 8002494:	200005b8 	.word	0x200005b8
 8002498:	40030c00 	.word	0x40030c00
 800249c:	42020000 	.word	0x42020000
 80024a0:	40007010 	.word	0x40007010
 80024a4:	42020400 	.word	0x42020400

080024a8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b0aa      	sub	sp, #168	@ 0xa8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b0:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	605a      	str	r2, [r3, #4]
 80024ba:	609a      	str	r2, [r3, #8]
 80024bc:	60da      	str	r2, [r3, #12]
 80024be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024c0:	f107 031c 	add.w	r3, r7, #28
 80024c4:	2278      	movs	r2, #120	@ 0x78
 80024c6:	2100      	movs	r1, #0
 80024c8:	4618      	mov	r0, r3
 80024ca:	f007 faf9 	bl	8009ac0 <memset>
  if(hspi->Instance==SPI1)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a65      	ldr	r2, [pc, #404]	@ (8002668 <HAL_SPI_MspInit+0x1c0>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d142      	bne.n	800255e <HAL_SPI_MspInit+0xb6>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80024d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80024dc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PCLK2;
 80024de:	2300      	movs	r3, #0
 80024e0:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024e2:	f107 031c 	add.w	r3, r7, #28
 80024e6:	4618      	mov	r0, r3
 80024e8:	f003 fcfe 	bl	8005ee8 <HAL_RCCEx_PeriphCLKConfig>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80024f2:	f7ff fdf7 	bl	80020e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80024f6:	4b5d      	ldr	r3, [pc, #372]	@ (800266c <HAL_SPI_MspInit+0x1c4>)
 80024f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80024fc:	4a5b      	ldr	r2, [pc, #364]	@ (800266c <HAL_SPI_MspInit+0x1c4>)
 80024fe:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002502:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002506:	4b59      	ldr	r3, [pc, #356]	@ (800266c <HAL_SPI_MspInit+0x1c4>)
 8002508:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800250c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002510:	61bb      	str	r3, [r7, #24]
 8002512:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002514:	4b55      	ldr	r3, [pc, #340]	@ (800266c <HAL_SPI_MspInit+0x1c4>)
 8002516:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800251a:	4a54      	ldr	r2, [pc, #336]	@ (800266c <HAL_SPI_MspInit+0x1c4>)
 800251c:	f043 0301 	orr.w	r3, r3, #1
 8002520:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002524:	4b51      	ldr	r3, [pc, #324]	@ (800266c <HAL_SPI_MspInit+0x1c4>)
 8002526:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	617b      	str	r3, [r7, #20]
 8002530:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002532:	23a0      	movs	r3, #160	@ 0xa0
 8002534:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002538:	2302      	movs	r3, #2
 800253a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253e:	2300      	movs	r3, #0
 8002540:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002544:	2300      	movs	r3, #0
 8002546:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800254a:	2305      	movs	r3, #5
 800254c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002550:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002554:	4619      	mov	r1, r3
 8002556:	4846      	ldr	r0, [pc, #280]	@ (8002670 <HAL_SPI_MspInit+0x1c8>)
 8002558:	f002 fc1e 	bl	8004d98 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
  }

}
 800255c:	e080      	b.n	8002660 <HAL_SPI_MspInit+0x1b8>
  else if(hspi->Instance==SPI2)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a44      	ldr	r2, [pc, #272]	@ (8002674 <HAL_SPI_MspInit+0x1cc>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d17b      	bne.n	8002660 <HAL_SPI_MspInit+0x1b8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002568:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800256c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Spi2ClockSelection = RCC_SPI2CLKSOURCE_PCLK1;
 800256e:	2300      	movs	r3, #0
 8002570:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002572:	f107 031c 	add.w	r3, r7, #28
 8002576:	4618      	mov	r0, r3
 8002578:	f003 fcb6 	bl	8005ee8 <HAL_RCCEx_PeriphCLKConfig>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <HAL_SPI_MspInit+0xde>
      Error_Handler();
 8002582:	f7ff fdaf 	bl	80020e4 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002586:	4b39      	ldr	r3, [pc, #228]	@ (800266c <HAL_SPI_MspInit+0x1c4>)
 8002588:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800258c:	4a37      	ldr	r2, [pc, #220]	@ (800266c <HAL_SPI_MspInit+0x1c4>)
 800258e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002592:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002596:	4b35      	ldr	r3, [pc, #212]	@ (800266c <HAL_SPI_MspInit+0x1c4>)
 8002598:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800259c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025a0:	613b      	str	r3, [r7, #16]
 80025a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025a4:	4b31      	ldr	r3, [pc, #196]	@ (800266c <HAL_SPI_MspInit+0x1c4>)
 80025a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025aa:	4a30      	ldr	r2, [pc, #192]	@ (800266c <HAL_SPI_MspInit+0x1c4>)
 80025ac:	f043 0304 	orr.w	r3, r3, #4
 80025b0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80025b4:	4b2d      	ldr	r3, [pc, #180]	@ (800266c <HAL_SPI_MspInit+0x1c4>)
 80025b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025ba:	f003 0304 	and.w	r3, r3, #4
 80025be:	60fb      	str	r3, [r7, #12]
 80025c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025c2:	4b2a      	ldr	r3, [pc, #168]	@ (800266c <HAL_SPI_MspInit+0x1c4>)
 80025c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025c8:	4a28      	ldr	r2, [pc, #160]	@ (800266c <HAL_SPI_MspInit+0x1c4>)
 80025ca:	f043 0302 	orr.w	r3, r3, #2
 80025ce:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80025d2:	4b26      	ldr	r3, [pc, #152]	@ (800266c <HAL_SPI_MspInit+0x1c4>)
 80025d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	60bb      	str	r3, [r7, #8]
 80025de:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80025e0:	2302      	movs	r3, #2
 80025e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e6:	2302      	movs	r3, #2
 80025e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ec:	2300      	movs	r3, #0
 80025ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f2:	2300      	movs	r3, #0
 80025f4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 80025f8:	2303      	movs	r3, #3
 80025fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025fe:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002602:	4619      	mov	r1, r3
 8002604:	481c      	ldr	r0, [pc, #112]	@ (8002678 <HAL_SPI_MspInit+0x1d0>)
 8002606:	f002 fbc7 	bl	8004d98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800260a:	2304      	movs	r3, #4
 800260c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002610:	2302      	movs	r3, #2
 8002612:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002616:	2300      	movs	r3, #0
 8002618:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800261c:	2300      	movs	r3, #0
 800261e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002622:	2305      	movs	r3, #5
 8002624:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002628:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800262c:	4619      	mov	r1, r3
 800262e:	4812      	ldr	r0, [pc, #72]	@ (8002678 <HAL_SPI_MspInit+0x1d0>)
 8002630:	f002 fbb2 	bl	8004d98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002634:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002638:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800263c:	2302      	movs	r3, #2
 800263e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002642:	2300      	movs	r3, #0
 8002644:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002648:	2300      	movs	r3, #0
 800264a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800264e:	2305      	movs	r3, #5
 8002650:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002654:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002658:	4619      	mov	r1, r3
 800265a:	4808      	ldr	r0, [pc, #32]	@ (800267c <HAL_SPI_MspInit+0x1d4>)
 800265c:	f002 fb9c 	bl	8004d98 <HAL_GPIO_Init>
}
 8002660:	bf00      	nop
 8002662:	37a8      	adds	r7, #168	@ 0xa8
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	40013000 	.word	0x40013000
 800266c:	40030c00 	.word	0x40030c00
 8002670:	42020000 	.word	0x42020000
 8002674:	40003800 	.word	0x40003800
 8002678:	42020800 	.word	0x42020800
 800267c:	42020400 	.word	0x42020400

08002680 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002680:	b480      	push	{r7}
 8002682:	b085      	sub	sp, #20
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a0b      	ldr	r2, [pc, #44]	@ (80026bc <HAL_TIM_Base_MspInit+0x3c>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d10e      	bne.n	80026b0 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002692:	4b0b      	ldr	r3, [pc, #44]	@ (80026c0 <HAL_TIM_Base_MspInit+0x40>)
 8002694:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002698:	4a09      	ldr	r2, [pc, #36]	@ (80026c0 <HAL_TIM_Base_MspInit+0x40>)
 800269a:	f043 0302 	orr.w	r3, r3, #2
 800269e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80026a2:	4b07      	ldr	r3, [pc, #28]	@ (80026c0 <HAL_TIM_Base_MspInit+0x40>)
 80026a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80026a8:	f003 0302 	and.w	r3, r3, #2
 80026ac:	60fb      	str	r3, [r7, #12]
 80026ae:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 80026b0:	bf00      	nop
 80026b2:	3714      	adds	r7, #20
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr
 80026bc:	40000400 	.word	0x40000400
 80026c0:	40030c00 	.word	0x40030c00

080026c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b088      	sub	sp, #32
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026cc:	f107 030c 	add.w	r3, r7, #12
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	605a      	str	r2, [r3, #4]
 80026d6:	609a      	str	r2, [r3, #8]
 80026d8:	60da      	str	r2, [r3, #12]
 80026da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a13      	ldr	r2, [pc, #76]	@ (8002730 <HAL_TIM_MspPostInit+0x6c>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d11f      	bne.n	8002726 <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026e6:	4b13      	ldr	r3, [pc, #76]	@ (8002734 <HAL_TIM_MspPostInit+0x70>)
 80026e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026ec:	4a11      	ldr	r2, [pc, #68]	@ (8002734 <HAL_TIM_MspPostInit+0x70>)
 80026ee:	f043 0304 	orr.w	r3, r3, #4
 80026f2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80026f6:	4b0f      	ldr	r3, [pc, #60]	@ (8002734 <HAL_TIM_MspPostInit+0x70>)
 80026f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026fc:	f003 0304 	and.w	r3, r3, #4
 8002700:	60bb      	str	r3, [r7, #8]
 8002702:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = LCD_EXTCOMIN_Pin;
 8002704:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002708:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800270a:	2302      	movs	r3, #2
 800270c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270e:	2300      	movs	r3, #0
 8002710:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002712:	2300      	movs	r3, #0
 8002714:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002716:	2302      	movs	r3, #2
 8002718:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LCD_EXTCOMIN_GPIO_Port, &GPIO_InitStruct);
 800271a:	f107 030c 	add.w	r3, r7, #12
 800271e:	4619      	mov	r1, r3
 8002720:	4805      	ldr	r0, [pc, #20]	@ (8002738 <HAL_TIM_MspPostInit+0x74>)
 8002722:	f002 fb39 	bl	8004d98 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002726:	bf00      	nop
 8002728:	3720      	adds	r7, #32
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	40000400 	.word	0x40000400
 8002734:	40030c00 	.word	0x40030c00
 8002738:	42020800 	.word	0x42020800

0800273c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b0a8      	sub	sp, #160	@ 0xa0
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002744:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8002748:	2200      	movs	r2, #0
 800274a:	601a      	str	r2, [r3, #0]
 800274c:	605a      	str	r2, [r3, #4]
 800274e:	609a      	str	r2, [r3, #8]
 8002750:	60da      	str	r2, [r3, #12]
 8002752:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002754:	f107 0314 	add.w	r3, r7, #20
 8002758:	2278      	movs	r2, #120	@ 0x78
 800275a:	2100      	movs	r1, #0
 800275c:	4618      	mov	r0, r3
 800275e:	f007 f9af 	bl	8009ac0 <memset>
  if(huart->Instance==UART5)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a36      	ldr	r2, [pc, #216]	@ (8002840 <HAL_UART_MspInit+0x104>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d165      	bne.n	8002838 <HAL_UART_MspInit+0xfc>

    /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 800276c:	2308      	movs	r3, #8
 800276e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8002770:	2300      	movs	r3, #0
 8002772:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002774:	f107 0314 	add.w	r3, r7, #20
 8002778:	4618      	mov	r0, r3
 800277a:	f003 fbb5 	bl	8005ee8 <HAL_RCCEx_PeriphCLKConfig>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002784:	f7ff fcae 	bl	80020e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002788:	4b2e      	ldr	r3, [pc, #184]	@ (8002844 <HAL_UART_MspInit+0x108>)
 800278a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800278e:	4a2d      	ldr	r2, [pc, #180]	@ (8002844 <HAL_UART_MspInit+0x108>)
 8002790:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002794:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002798:	4b2a      	ldr	r3, [pc, #168]	@ (8002844 <HAL_UART_MspInit+0x108>)
 800279a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800279e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027a2:	613b      	str	r3, [r7, #16]
 80027a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027a6:	4b27      	ldr	r3, [pc, #156]	@ (8002844 <HAL_UART_MspInit+0x108>)
 80027a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80027ac:	4a25      	ldr	r2, [pc, #148]	@ (8002844 <HAL_UART_MspInit+0x108>)
 80027ae:	f043 0304 	orr.w	r3, r3, #4
 80027b2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80027b6:	4b23      	ldr	r3, [pc, #140]	@ (8002844 <HAL_UART_MspInit+0x108>)
 80027b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80027bc:	f003 0304 	and.w	r3, r3, #4
 80027c0:	60fb      	str	r3, [r7, #12]
 80027c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027c4:	4b1f      	ldr	r3, [pc, #124]	@ (8002844 <HAL_UART_MspInit+0x108>)
 80027c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80027ca:	4a1e      	ldr	r2, [pc, #120]	@ (8002844 <HAL_UART_MspInit+0x108>)
 80027cc:	f043 0308 	orr.w	r3, r3, #8
 80027d0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80027d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002844 <HAL_UART_MspInit+0x108>)
 80027d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80027da:	f003 0308 	and.w	r3, r3, #8
 80027de:	60bb      	str	r3, [r7, #8]
 80027e0:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80027e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ea:	2302      	movs	r3, #2
 80027ec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f0:	2300      	movs	r3, #0
 80027f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f6:	2300      	movs	r3, #0
 80027f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80027fc:	2308      	movs	r3, #8
 80027fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002802:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8002806:	4619      	mov	r1, r3
 8002808:	480f      	ldr	r0, [pc, #60]	@ (8002848 <HAL_UART_MspInit+0x10c>)
 800280a:	f002 fac5 	bl	8004d98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800280e:	2304      	movs	r3, #4
 8002810:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002814:	2302      	movs	r3, #2
 8002816:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281a:	2300      	movs	r3, #0
 800281c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002820:	2300      	movs	r3, #0
 8002822:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002826:	2308      	movs	r3, #8
 8002828:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800282c:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8002830:	4619      	mov	r1, r3
 8002832:	4806      	ldr	r0, [pc, #24]	@ (800284c <HAL_UART_MspInit+0x110>)
 8002834:	f002 fab0 	bl	8004d98 <HAL_GPIO_Init>

    /* USER CODE END UART5_MspInit 1 */

  }

}
 8002838:	bf00      	nop
 800283a:	37a0      	adds	r7, #160	@ 0xa0
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	40005000 	.word	0x40005000
 8002844:	40030c00 	.word	0x40030c00
 8002848:	42020800 	.word	0x42020800
 800284c:	42020c00 	.word	0x42020c00

08002850 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002854:	bf00      	nop
 8002856:	e7fd      	b.n	8002854 <NMI_Handler+0x4>

08002858 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800285c:	bf00      	nop
 800285e:	e7fd      	b.n	800285c <HardFault_Handler+0x4>

08002860 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002864:	bf00      	nop
 8002866:	e7fd      	b.n	8002864 <MemManage_Handler+0x4>

08002868 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800286c:	bf00      	nop
 800286e:	e7fd      	b.n	800286c <BusFault_Handler+0x4>

08002870 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002874:	bf00      	nop
 8002876:	e7fd      	b.n	8002874 <UsageFault_Handler+0x4>

08002878 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800287c:	bf00      	nop
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr

08002886 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002886:	b480      	push	{r7}
 8002888:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800288a:	bf00      	nop
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002898:	bf00      	nop
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr

080028a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028a2:	b580      	push	{r7, lr}
 80028a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028a6:	f000 fb7f 	bl	8002fa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028aa:	bf00      	nop
 80028ac:	bd80      	pop	{r7, pc}

080028ae <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 80028ae:	b580      	push	{r7, lr}
 80028b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 80028b2:	2000      	movs	r0, #0
 80028b4:	f000 f9e4 	bl	8002c80 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 80028b8:	bf00      	nop
 80028ba:	bd80      	pop	{r7, pc}

080028bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  return 1;
 80028c0:	2301      	movs	r3, #1
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <_kill>:

int _kill(int pid, int sig)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80028d6:	f007 f8fb 	bl	8009ad0 <__errno>
 80028da:	4603      	mov	r3, r0
 80028dc:	2216      	movs	r2, #22
 80028de:	601a      	str	r2, [r3, #0]
  return -1;
 80028e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <_exit>:

void _exit (int status)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80028f4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f7ff ffe7 	bl	80028cc <_kill>
  while (1) {}    /* Make sure we hang here */
 80028fe:	bf00      	nop
 8002900:	e7fd      	b.n	80028fe <_exit+0x12>

08002902 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002902:	b580      	push	{r7, lr}
 8002904:	b086      	sub	sp, #24
 8002906:	af00      	add	r7, sp, #0
 8002908:	60f8      	str	r0, [r7, #12]
 800290a:	60b9      	str	r1, [r7, #8]
 800290c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800290e:	2300      	movs	r3, #0
 8002910:	617b      	str	r3, [r7, #20]
 8002912:	e00a      	b.n	800292a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002914:	f3af 8000 	nop.w
 8002918:	4601      	mov	r1, r0
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	1c5a      	adds	r2, r3, #1
 800291e:	60ba      	str	r2, [r7, #8]
 8002920:	b2ca      	uxtb	r2, r1
 8002922:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	3301      	adds	r3, #1
 8002928:	617b      	str	r3, [r7, #20]
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	429a      	cmp	r2, r3
 8002930:	dbf0      	blt.n	8002914 <_read+0x12>
  }

  return len;
 8002932:	687b      	ldr	r3, [r7, #4]
}
 8002934:	4618      	mov	r0, r3
 8002936:	3718      	adds	r7, #24
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b086      	sub	sp, #24
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002948:	2300      	movs	r3, #0
 800294a:	617b      	str	r3, [r7, #20]
 800294c:	e009      	b.n	8002962 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	1c5a      	adds	r2, r3, #1
 8002952:	60ba      	str	r2, [r7, #8]
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	4618      	mov	r0, r3
 8002958:	f000 fa0c 	bl	8002d74 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	3301      	adds	r3, #1
 8002960:	617b      	str	r3, [r7, #20]
 8002962:	697a      	ldr	r2, [r7, #20]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	429a      	cmp	r2, r3
 8002968:	dbf1      	blt.n	800294e <_write+0x12>
  }
  return len;
 800296a:	687b      	ldr	r3, [r7, #4]
}
 800296c:	4618      	mov	r0, r3
 800296e:	3718      	adds	r7, #24
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <_close>:

int _close(int file)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800297c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002980:	4618      	mov	r0, r3
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800299c:	605a      	str	r2, [r3, #4]
  return 0;
 800299e:	2300      	movs	r3, #0
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <_isatty>:

int _isatty(int file)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80029b4:	2301      	movs	r3, #1
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr

080029c2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029c2:	b480      	push	{r7}
 80029c4:	b085      	sub	sp, #20
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	60f8      	str	r0, [r7, #12]
 80029ca:	60b9      	str	r1, [r7, #8]
 80029cc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3714      	adds	r7, #20
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b086      	sub	sp, #24
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029e4:	4a14      	ldr	r2, [pc, #80]	@ (8002a38 <_sbrk+0x5c>)
 80029e6:	4b15      	ldr	r3, [pc, #84]	@ (8002a3c <_sbrk+0x60>)
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029f0:	4b13      	ldr	r3, [pc, #76]	@ (8002a40 <_sbrk+0x64>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d102      	bne.n	80029fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029f8:	4b11      	ldr	r3, [pc, #68]	@ (8002a40 <_sbrk+0x64>)
 80029fa:	4a12      	ldr	r2, [pc, #72]	@ (8002a44 <_sbrk+0x68>)
 80029fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029fe:	4b10      	ldr	r3, [pc, #64]	@ (8002a40 <_sbrk+0x64>)
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4413      	add	r3, r2
 8002a06:	693a      	ldr	r2, [r7, #16]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d207      	bcs.n	8002a1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a0c:	f007 f860 	bl	8009ad0 <__errno>
 8002a10:	4603      	mov	r3, r0
 8002a12:	220c      	movs	r2, #12
 8002a14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002a1a:	e009      	b.n	8002a30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a1c:	4b08      	ldr	r3, [pc, #32]	@ (8002a40 <_sbrk+0x64>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a22:	4b07      	ldr	r3, [pc, #28]	@ (8002a40 <_sbrk+0x64>)
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4413      	add	r3, r2
 8002a2a:	4a05      	ldr	r2, [pc, #20]	@ (8002a40 <_sbrk+0x64>)
 8002a2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3718      	adds	r7, #24
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	20030000 	.word	0x20030000
 8002a3c:	00000400 	.word	0x00000400
 8002a40:	200005bc 	.word	0x200005bc
 8002a44:	200007b8 	.word	0x200007b8

08002a48 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002a4c:	4b06      	ldr	r3, [pc, #24]	@ (8002a68 <SystemInit+0x20>)
 8002a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a52:	4a05      	ldr	r2, [pc, #20]	@ (8002a68 <SystemInit+0x20>)
 8002a54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002a58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a5c:	bf00      	nop
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	e000ed00 	.word	0xe000ed00

08002a6c <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR1 & RCC_CFGR1_SWS)
 8002a72:	4b2c      	ldr	r3, [pc, #176]	@ (8002b24 <SystemCoreClockUpdate+0xb8>)
 8002a74:	69db      	ldr	r3, [r3, #28]
 8002a76:	f003 030c 	and.w	r3, r3, #12
 8002a7a:	2b08      	cmp	r3, #8
 8002a7c:	d034      	beq.n	8002ae8 <SystemCoreClockUpdate+0x7c>
 8002a7e:	2b08      	cmp	r3, #8
 8002a80:	d836      	bhi.n	8002af0 <SystemCoreClockUpdate+0x84>
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d002      	beq.n	8002a8c <SystemCoreClockUpdate+0x20>
 8002a86:	2b04      	cmp	r3, #4
 8002a88:	d02a      	beq.n	8002ae0 <SystemCoreClockUpdate+0x74>
 8002a8a:	e031      	b.n	8002af0 <SystemCoreClockUpdate+0x84>
  {
  case 0x00:  /* MSIS used as system clock source */
    /* Read RCC ICSR1 register */
    tmp = RCC->ICSCR1;
 8002a8c:	4b25      	ldr	r3, [pc, #148]	@ (8002b24 <SystemCoreClockUpdate+0xb8>)
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	603b      	str	r3, [r7, #0]
    /* Check which MSIS Range is selected */
    if ((tmp & RCC_ICSCR1_MSIRGSEL) != 0x00u)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d00f      	beq.n	8002abc <SystemCoreClockUpdate+0x50>
    {
      /* Check which MSIRCx is selected as MSIS source */
      if ((tmp & RCC_ICSCR1_MSISSEL) != 0x00u)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	da03      	bge.n	8002aaa <SystemCoreClockUpdate+0x3e>
      {
        /* MSI RC1 is selected */
        SystemCoreClock = MSIRC1_VALUE;
 8002aa2:	4b21      	ldr	r3, [pc, #132]	@ (8002b28 <SystemCoreClockUpdate+0xbc>)
 8002aa4:	4a21      	ldr	r2, [pc, #132]	@ (8002b2c <SystemCoreClockUpdate+0xc0>)
 8002aa6:	601a      	str	r2, [r3, #0]
 8002aa8:	e002      	b.n	8002ab0 <SystemCoreClockUpdate+0x44>
      }
      else
      {
        /* MSI RC0 is selected */
        SystemCoreClock = MSIRC0_VALUE;
 8002aaa:	4b1f      	ldr	r3, [pc, #124]	@ (8002b28 <SystemCoreClockUpdate+0xbc>)
 8002aac:	4a20      	ldr	r2, [pc, #128]	@ (8002b30 <SystemCoreClockUpdate+0xc4>)
 8002aae:	601a      	str	r2, [r3, #0]
      }

      /* Get MSIS range */
      msirange = (tmp & RCC_ICSCR1_MSISDIV) >> RCC_ICSCR1_MSISDIV_Pos;
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	0f5b      	lsrs	r3, r3, #29
 8002ab4:	f003 0303 	and.w	r3, r3, #3
 8002ab8:	607b      	str	r3, [r7, #4]
 8002aba:	e009      	b.n	8002ad0 <SystemCoreClockUpdate+0x64>
    }
    else
    {
      /* MSI RC1 is selected */
      SystemCoreClock = MSIRC1_VALUE;
 8002abc:	4b1a      	ldr	r3, [pc, #104]	@ (8002b28 <SystemCoreClockUpdate+0xbc>)
 8002abe:	4a1b      	ldr	r2, [pc, #108]	@ (8002b2c <SystemCoreClockUpdate+0xc0>)
 8002ac0:	601a      	str	r2, [r3, #0]

      /* Get MSIS range */
      msirange = (RCC->CSR & (RCC_CSR_MSISDIVS_1 | RCC_CSR_MSISDIVS_0)) >> RCC_CSR_MSISDIVS_Pos;
 8002ac2:	4b18      	ldr	r3, [pc, #96]	@ (8002b24 <SystemCoreClockUpdate+0xb8>)
 8002ac4:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8002ac8:	0b1b      	lsrs	r3, r3, #12
 8002aca:	f003 0303 	and.w	r3, r3, #3
 8002ace:	607b      	str	r3, [r7, #4]
    }

    /*MSIS frequency in HZ*/
    SystemCoreClock >>= msirange;
 8002ad0:	4b15      	ldr	r3, [pc, #84]	@ (8002b28 <SystemCoreClockUpdate+0xbc>)
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	fa22 f303 	lsr.w	r3, r2, r3
 8002ada:	4a13      	ldr	r2, [pc, #76]	@ (8002b28 <SystemCoreClockUpdate+0xbc>)
 8002adc:	6013      	str	r3, [r2, #0]
    break;
 8002ade:	e00c      	b.n	8002afa <SystemCoreClockUpdate+0x8e>

  case RCC_CFGR1_SWS_0:  /* HSI used as system clock source */
    SystemCoreClock = HSI_VALUE;
 8002ae0:	4b11      	ldr	r3, [pc, #68]	@ (8002b28 <SystemCoreClockUpdate+0xbc>)
 8002ae2:	4a14      	ldr	r2, [pc, #80]	@ (8002b34 <SystemCoreClockUpdate+0xc8>)
 8002ae4:	601a      	str	r2, [r3, #0]
    break;
 8002ae6:	e008      	b.n	8002afa <SystemCoreClockUpdate+0x8e>

  case RCC_CFGR1_SWS_1:  /* HSE used as system clock source */
    SystemCoreClock = HSE_VALUE;
 8002ae8:	4b0f      	ldr	r3, [pc, #60]	@ (8002b28 <SystemCoreClockUpdate+0xbc>)
 8002aea:	4a12      	ldr	r2, [pc, #72]	@ (8002b34 <SystemCoreClockUpdate+0xc8>)
 8002aec:	601a      	str	r2, [r3, #0]
    break;
 8002aee:	e004      	b.n	8002afa <SystemCoreClockUpdate+0x8e>

  default:
    SystemCoreClock = 0xFFFFFFFFu;
 8002af0:	4b0d      	ldr	r3, [pc, #52]	@ (8002b28 <SystemCoreClockUpdate+0xbc>)
 8002af2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002af6:	601a      	str	r2, [r3, #0]
    break;
 8002af8:	bf00      	nop
  }

  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos)];
 8002afa:	4b0a      	ldr	r3, [pc, #40]	@ (8002b24 <SystemCoreClockUpdate+0xb8>)
 8002afc:	6a1b      	ldr	r3, [r3, #32]
 8002afe:	f003 030f 	and.w	r3, r3, #15
 8002b02:	4a0d      	ldr	r2, [pc, #52]	@ (8002b38 <SystemCoreClockUpdate+0xcc>)
 8002b04:	5cd3      	ldrb	r3, [r2, r3]
 8002b06:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8002b08:	4b07      	ldr	r3, [pc, #28]	@ (8002b28 <SystemCoreClockUpdate+0xbc>)
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b12:	4a05      	ldr	r2, [pc, #20]	@ (8002b28 <SystemCoreClockUpdate+0xbc>)
 8002b14:	6013      	str	r3, [r2, #0]
}
 8002b16:	bf00      	nop
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	40030c00 	.word	0x40030c00
 8002b28:	20000004 	.word	0x20000004
 8002b2c:	016e3600 	.word	0x016e3600
 8002b30:	05b8d800 	.word	0x05b8d800
 8002b34:	00f42400 	.word	0x00f42400
 8002b38:	08022d48 	.word	0x08022d48

08002b3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8002b3c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002b74 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002b40:	f7ff ff82 	bl	8002a48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002b44:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002b46:	e003      	b.n	8002b50 <LoopCopyDataInit>

08002b48 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002b48:	4b0b      	ldr	r3, [pc, #44]	@ (8002b78 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002b4a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002b4c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002b4e:	3104      	adds	r1, #4

08002b50 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002b50:	480a      	ldr	r0, [pc, #40]	@ (8002b7c <LoopForever+0xa>)
	ldr	r3, =_edata
 8002b52:	4b0b      	ldr	r3, [pc, #44]	@ (8002b80 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002b54:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002b56:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002b58:	d3f6      	bcc.n	8002b48 <CopyDataInit>
	ldr	r2, =_sbss
 8002b5a:	4a0a      	ldr	r2, [pc, #40]	@ (8002b84 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002b5c:	e002      	b.n	8002b64 <LoopFillZerobss>

08002b5e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002b5e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002b60:	f842 3b04 	str.w	r3, [r2], #4

08002b64 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002b64:	4b08      	ldr	r3, [pc, #32]	@ (8002b88 <LoopForever+0x16>)
	cmp	r2, r3
 8002b66:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002b68:	d3f9      	bcc.n	8002b5e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002b6a:	f006 ffb7 	bl	8009adc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002b6e:	f7fe fbf1 	bl	8001354 <main>

08002b72 <LoopForever>:

LoopForever:
    b LoopForever
 8002b72:	e7fe      	b.n	8002b72 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8002b74:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8002b78:	0802315c 	.word	0x0802315c
	ldr	r0, =_sdata
 8002b7c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002b80:	200001e8 	.word	0x200001e8
	ldr	r2, =_sbss
 8002b84:	200001e8 	.word	0x200001e8
	ldr	r3, = _ebss
 8002b88:	200007b4 	.word	0x200007b4

08002b8c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002b8c:	e7fe      	b.n	8002b8c <ADC1_IRQHandler>
	...

08002b90 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b088      	sub	sp, #32
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	4603      	mov	r3, r0
 8002b98:	460a      	mov	r2, r1
 8002b9a:	71fb      	strb	r3, [r7, #7]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8002ba0:	4b31      	ldr	r3, [pc, #196]	@ (8002c68 <BSP_PB_Init+0xd8>)
 8002ba2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ba6:	4a30      	ldr	r2, [pc, #192]	@ (8002c68 <BSP_PB_Init+0xd8>)
 8002ba8:	f043 0304 	orr.w	r3, r3, #4
 8002bac:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002bb0:	4b2d      	ldr	r3, [pc, #180]	@ (8002c68 <BSP_PB_Init+0xd8>)
 8002bb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002bb6:	f003 0304 	and.w	r3, r3, #4
 8002bba:	60bb      	str	r3, [r7, #8]
 8002bbc:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8002bbe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002bc2:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bc8:	2302      	movs	r3, #2
 8002bca:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8002bcc:	79bb      	ldrb	r3, [r7, #6]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d10c      	bne.n	8002bec <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8002bd6:	79fb      	ldrb	r3, [r7, #7]
 8002bd8:	4a24      	ldr	r2, [pc, #144]	@ (8002c6c <BSP_PB_Init+0xdc>)
 8002bda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bde:	f107 020c 	add.w	r2, r7, #12
 8002be2:	4611      	mov	r1, r2
 8002be4:	4618      	mov	r0, r3
 8002be6:	f002 f8d7 	bl	8004d98 <HAL_GPIO_Init>
 8002bea:	e037      	b.n	8002c5c <BSP_PB_Init+0xcc>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8002bec:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002bf0:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002bf2:	79fb      	ldrb	r3, [r7, #7]
 8002bf4:	4a1d      	ldr	r2, [pc, #116]	@ (8002c6c <BSP_PB_Init+0xdc>)
 8002bf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bfa:	f107 020c 	add.w	r2, r7, #12
 8002bfe:	4611      	mov	r1, r2
 8002c00:	4618      	mov	r0, r3
 8002c02:	f002 f8c9 	bl	8004d98 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8002c06:	79fa      	ldrb	r2, [r7, #7]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	4413      	add	r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	4a17      	ldr	r2, [pc, #92]	@ (8002c70 <BSP_PB_Init+0xe0>)
 8002c12:	441a      	add	r2, r3
 8002c14:	79fb      	ldrb	r3, [r7, #7]
 8002c16:	4917      	ldr	r1, [pc, #92]	@ (8002c74 <BSP_PB_Init+0xe4>)
 8002c18:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	4610      	mov	r0, r2
 8002c20:	f002 f862 	bl	8004ce8 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8002c24:	79fa      	ldrb	r2, [r7, #7]
 8002c26:	4613      	mov	r3, r2
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	4413      	add	r3, r2
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	4a10      	ldr	r2, [pc, #64]	@ (8002c70 <BSP_PB_Init+0xe0>)
 8002c30:	1898      	adds	r0, r3, r2
 8002c32:	79fb      	ldrb	r3, [r7, #7]
 8002c34:	4a10      	ldr	r2, [pc, #64]	@ (8002c78 <BSP_PB_Init+0xe8>)
 8002c36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	2100      	movs	r1, #0
 8002c3e:	f002 f827 	bl	8004c90 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8002c42:	2018      	movs	r0, #24
 8002c44:	79fb      	ldrb	r3, [r7, #7]
 8002c46:	4a0d      	ldr	r2, [pc, #52]	@ (8002c7c <BSP_PB_Init+0xec>)
 8002c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	4619      	mov	r1, r3
 8002c50:	f001 fcf6 	bl	8004640 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8002c54:	2318      	movs	r3, #24
 8002c56:	4618      	mov	r0, r3
 8002c58:	f001 fd0c 	bl	8004674 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3720      	adds	r7, #32
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	40030c00 	.word	0x40030c00
 8002c6c:	2000000c 	.word	0x2000000c
 8002c70:	200005c0 	.word	0x200005c0
 8002c74:	08022d60 	.word	0x08022d60
 8002c78:	20000010 	.word	0x20000010
 8002c7c:	20000014 	.word	0x20000014

08002c80 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	4603      	mov	r3, r0
 8002c88:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8002c8a:	79fa      	ldrb	r2, [r7, #7]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	4413      	add	r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	4a04      	ldr	r2, [pc, #16]	@ (8002ca8 <BSP_PB_IRQHandler+0x28>)
 8002c96:	4413      	add	r3, r2
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f002 f839 	bl	8004d10 <HAL_EXTI_IRQHandler>
}
 8002c9e:	bf00      	nop
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	200005c0 	.word	0x200005c0

08002cac <BSP_COM_Init>:
  * @param  COM_Init Pointer to a COM_InitTypeDef structure that contains the
  *                configuration information for the specified COM peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	6039      	str	r1, [r7, #0]
 8002cb6:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	60fb      	str	r3, [r7, #12]

  if (COM >= COMn)
 8002cbc:	79fb      	ldrb	r3, [r7, #7]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d003      	beq.n	8002cca <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002cc2:	f06f 0301 	mvn.w	r3, #1
 8002cc6:	60fb      	str	r3, [r7, #12]
 8002cc8:	e018      	b.n	8002cfc <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8002cca:	79fb      	ldrb	r3, [r7, #7]
 8002ccc:	2294      	movs	r2, #148	@ 0x94
 8002cce:	fb02 f303 	mul.w	r3, r2, r3
 8002cd2:	4a0d      	ldr	r2, [pc, #52]	@ (8002d08 <BSP_COM_Init+0x5c>)
 8002cd4:	4413      	add	r3, r2
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f000 f870 	bl	8002dbc <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8002cdc:	79fb      	ldrb	r3, [r7, #7]
 8002cde:	2294      	movs	r2, #148	@ 0x94
 8002ce0:	fb02 f303 	mul.w	r3, r2, r3
 8002ce4:	4a08      	ldr	r2, [pc, #32]	@ (8002d08 <BSP_COM_Init+0x5c>)
 8002ce6:	4413      	add	r3, r2
 8002ce8:	6839      	ldr	r1, [r7, #0]
 8002cea:	4618      	mov	r0, r3
 8002cec:	f000 f80e 	bl	8002d0c <MX_USART1_Init>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d002      	beq.n	8002cfc <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002cf6:	f06f 0303 	mvn.w	r3, #3
 8002cfa:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3710      	adds	r7, #16
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	200005cc 	.word	0x200005cc

08002d0c <MX_USART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 8002d16:	4b16      	ldr	r3, [pc, #88]	@ (8002d70 <MX_USART1_Init+0x64>)
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	220c      	movs	r2, #12
 8002d2a:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	895b      	ldrh	r3, [r3, #10]
 8002d30:	461a      	mov	r2, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	685a      	ldr	r2, [r3, #4]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	891b      	ldrh	r3, [r3, #8]
 8002d42:	461a      	mov	r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	899b      	ldrh	r3, [r3, #12]
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002d58:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f005 fb79 	bl	8008458 <HAL_UART_Init>
 8002d66:	4603      	mov	r3, r0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3708      	adds	r7, #8
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	20000008 	.word	0x20000008

08002d74 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8002d7c:	4b09      	ldr	r3, [pc, #36]	@ (8002da4 <__io_putchar+0x30>)
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	461a      	mov	r2, r3
 8002d82:	2394      	movs	r3, #148	@ 0x94
 8002d84:	fb02 f303 	mul.w	r3, r2, r3
 8002d88:	4a07      	ldr	r2, [pc, #28]	@ (8002da8 <__io_putchar+0x34>)
 8002d8a:	1898      	adds	r0, r3, r2
 8002d8c:	1d39      	adds	r1, r7, #4
 8002d8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d92:	2201      	movs	r2, #1
 8002d94:	f005 fbb0 	bl	80084f8 <HAL_UART_Transmit>
  return ch;
 8002d98:	687b      	ldr	r3, [r7, #4]
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3708      	adds	r7, #8
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	20000660 	.word	0x20000660
 8002da8:	200005cc 	.word	0x200005cc

08002dac <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8002db0:	2000      	movs	r0, #0
 8002db2:	f7ff f967 	bl	8002084 <BSP_PB_Callback>
}
 8002db6:	bf00      	nop
 8002db8:	bd80      	pop	{r7, pc}
	...

08002dbc <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b08a      	sub	sp, #40	@ 0x28
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8002dc4:	4b27      	ldr	r3, [pc, #156]	@ (8002e64 <COM1_MspInit+0xa8>)
 8002dc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002dca:	4a26      	ldr	r2, [pc, #152]	@ (8002e64 <COM1_MspInit+0xa8>)
 8002dcc:	f043 0301 	orr.w	r3, r3, #1
 8002dd0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002dd4:	4b23      	ldr	r3, [pc, #140]	@ (8002e64 <COM1_MspInit+0xa8>)
 8002dd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	613b      	str	r3, [r7, #16]
 8002de0:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8002de2:	4b20      	ldr	r3, [pc, #128]	@ (8002e64 <COM1_MspInit+0xa8>)
 8002de4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002de8:	4a1e      	ldr	r2, [pc, #120]	@ (8002e64 <COM1_MspInit+0xa8>)
 8002dea:	f043 0301 	orr.w	r3, r3, #1
 8002dee:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002df2:	4b1c      	ldr	r3, [pc, #112]	@ (8002e64 <COM1_MspInit+0xa8>)
 8002df4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002df8:	f003 0301 	and.w	r3, r3, #1
 8002dfc:	60fb      	str	r3, [r7, #12]
 8002dfe:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8002e00:	4b18      	ldr	r3, [pc, #96]	@ (8002e64 <COM1_MspInit+0xa8>)
 8002e02:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002e06:	4a17      	ldr	r2, [pc, #92]	@ (8002e64 <COM1_MspInit+0xa8>)
 8002e08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e0c:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002e10:	4b14      	ldr	r3, [pc, #80]	@ (8002e64 <COM1_MspInit+0xa8>)
 8002e12:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002e16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e1a:	60bb      	str	r3, [r7, #8]
 8002e1c:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8002e1e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002e22:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002e24:	2302      	movs	r3, #2
 8002e26:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002e28:	2302      	movs	r3, #2
 8002e2a:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8002e30:	2307      	movs	r3, #7
 8002e32:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8002e34:	f107 0314 	add.w	r3, r7, #20
 8002e38:	4619      	mov	r1, r3
 8002e3a:	480b      	ldr	r0, [pc, #44]	@ (8002e68 <COM1_MspInit+0xac>)
 8002e3c:	f001 ffac 	bl	8004d98 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 8002e40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002e44:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002e46:	2302      	movs	r3, #2
 8002e48:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8002e4a:	2307      	movs	r3, #7
 8002e4c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8002e4e:	f107 0314 	add.w	r3, r7, #20
 8002e52:	4619      	mov	r1, r3
 8002e54:	4804      	ldr	r0, [pc, #16]	@ (8002e68 <COM1_MspInit+0xac>)
 8002e56:	f001 ff9f 	bl	8004d98 <HAL_GPIO_Init>
}
 8002e5a:	bf00      	nop
 8002e5c:	3728      	adds	r7, #40	@ 0x28
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	40030c00 	.word	0x40030c00
 8002e68:	42020000 	.word	0x42020000

08002e6c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e70:	4b0d      	ldr	r3, [pc, #52]	@ (8002ea8 <HAL_Init+0x3c>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a0c      	ldr	r2, [pc, #48]	@ (8002ea8 <HAL_Init+0x3c>)
 8002e76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e7c:	2003      	movs	r0, #3
 8002e7e:	f001 fbd4 	bl	800462a <HAL_NVIC_SetPriorityGrouping>

  /* Ensure time base clock coherency */
  SystemCoreClockUpdate();
 8002e82:	f7ff fdf3 	bl	8002a6c <SystemCoreClockUpdate>

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002e86:	2004      	movs	r0, #4
 8002e88:	f001 fc24 	bl	80046d4 <HAL_SYSTICK_CLKSourceConfig>

  /* Initialize 1ms tick time base (default SysTick based on MSI clock after Reset) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e8c:	200f      	movs	r0, #15
 8002e8e:	f000 f80d 	bl	8002eac <HAL_InitTick>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <HAL_Init+0x30>
  {
    return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e002      	b.n	8002ea2 <HAL_Init+0x36>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002e9c:	f7ff f928 	bl	80020f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	40022000 	.word	0x40022000

08002eac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8002eb8:	4b36      	ldr	r3, [pc, #216]	@ (8002f94 <HAL_InitTick+0xe8>)
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d101      	bne.n	8002ec4 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e062      	b.n	8002f8a <HAL_InitTick+0xde>
  }

  /* Check Clock source to calculate the tickNumber */
  if(READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8002ec4:	4b34      	ldr	r3, [pc, #208]	@ (8002f98 <HAL_InitTick+0xec>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0304 	and.w	r3, r3, #4
 8002ecc:	2b04      	cmp	r3, #4
 8002ece:	d10c      	bne.n	8002eea <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8002ed0:	4b32      	ldr	r3, [pc, #200]	@ (8002f9c <HAL_InitTick+0xf0>)
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	4b2f      	ldr	r3, [pc, #188]	@ (8002f94 <HAL_InitTick+0xe8>)
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	4619      	mov	r1, r3
 8002eda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ede:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ee6:	60fb      	str	r3, [r7, #12]
 8002ee8:	e03d      	b.n	8002f66 <HAL_InitTick+0xba>
  }
  else
  {
    systicksel = __HAL_RCC_GET_SYSTICK_SOURCE();
 8002eea:	4b2d      	ldr	r3, [pc, #180]	@ (8002fa0 <HAL_InitTick+0xf4>)
 8002eec:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002ef0:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8002ef4:	60bb      	str	r3, [r7, #8]
    switch (systicksel)
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002efc:	d025      	beq.n	8002f4a <HAL_InitTick+0x9e>
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002f04:	d82e      	bhi.n	8002f64 <HAL_InitTick+0xb8>
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d004      	beq.n	8002f16 <HAL_InitTick+0x6a>
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f12:	d00d      	beq.n	8002f30 <HAL_InitTick+0x84>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;

      default:
        /* Nothing to do */
        break;
 8002f14:	e026      	b.n	8002f64 <HAL_InitTick+0xb8>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8002f16:	4b21      	ldr	r3, [pc, #132]	@ (8002f9c <HAL_InitTick+0xf0>)
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	4b1e      	ldr	r3, [pc, #120]	@ (8002f94 <HAL_InitTick+0xe8>)
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	4619      	mov	r1, r3
 8002f20:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8002f24:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f2c:	60fb      	str	r3, [r7, #12]
        break;
 8002f2e:	e01a      	b.n	8002f66 <HAL_InitTick+0xba>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002f30:	4b18      	ldr	r3, [pc, #96]	@ (8002f94 <HAL_InitTick+0xe8>)
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	461a      	mov	r2, r3
 8002f36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f3e:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8002f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f46:	60fb      	str	r3, [r7, #12]
        break;
 8002f48:	e00d      	b.n	8002f66 <HAL_InitTick+0xba>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002f4a:	4b12      	ldr	r3, [pc, #72]	@ (8002f94 <HAL_InitTick+0xe8>)
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	461a      	mov	r2, r3
 8002f50:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f54:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f58:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f60:	60fb      	str	r3, [r7, #12]
        break;
 8002f62:	e000      	b.n	8002f66 <HAL_InitTick+0xba>
        break;
 8002f64:	bf00      	nop
    }
  }

  /* Configure the SysTick */
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	f001 fb92 	bl	8004690 <HAL_SYSTICK_Config>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <HAL_InitTick+0xca>
  {
    return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e009      	b.n	8002f8a <HAL_InitTick+0xde>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f76:	2200      	movs	r2, #0
 8002f78:	6879      	ldr	r1, [r7, #4]
 8002f7a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002f7e:	f001 fb5f 	bl	8004640 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8002f82:	4a08      	ldr	r2, [pc, #32]	@ (8002fa4 <HAL_InitTick+0xf8>)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3710      	adds	r7, #16
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	2000001c 	.word	0x2000001c
 8002f98:	e000e010 	.word	0xe000e010
 8002f9c:	20000004 	.word	0x20000004
 8002fa0:	40030c00 	.word	0x40030c00
 8002fa4:	20000018 	.word	0x20000018

08002fa8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002fac:	4b06      	ldr	r3, [pc, #24]	@ (8002fc8 <HAL_IncTick+0x20>)
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	4b06      	ldr	r3, [pc, #24]	@ (8002fcc <HAL_IncTick+0x24>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	4a04      	ldr	r2, [pc, #16]	@ (8002fcc <HAL_IncTick+0x24>)
 8002fba:	6013      	str	r3, [r2, #0]
}
 8002fbc:	bf00      	nop
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	2000001c 	.word	0x2000001c
 8002fcc:	20000664 	.word	0x20000664

08002fd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0
  return uwTick;
 8002fd4:	4b03      	ldr	r3, [pc, #12]	@ (8002fe4 <HAL_GetTick+0x14>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	20000664 	.word	0x20000664

08002fe8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ff0:	f7ff ffee 	bl	8002fd0 <HAL_GetTick>
 8002ff4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003000:	d005      	beq.n	800300e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003002:	4b0a      	ldr	r3, [pc, #40]	@ (800302c <HAL_Delay+0x44>)
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	461a      	mov	r2, r3
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	4413      	add	r3, r2
 800300c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800300e:	bf00      	nop
 8003010:	f7ff ffde 	bl	8002fd0 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	429a      	cmp	r2, r3
 800301e:	d8f7      	bhi.n	8003010 <HAL_Delay+0x28>
  {
  }
}
 8003020:	bf00      	nop
 8003022:	bf00      	nop
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	2000001c 	.word	0x2000001c

08003030 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	431a      	orrs	r2, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	609a      	str	r2, [r3, #8]
}
 800304a:	bf00      	nop
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr

08003056 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003056:	b480      	push	{r7}
 8003058:	b083      	sub	sp, #12
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003066:	4618      	mov	r0, r3
 8003068:	370c      	adds	r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr

08003072 <LL_ADC_SetPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VDDCORE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetPathInternalCh(ADC_TypeDef *ADCx, uint32_t PathInternal)
{
 8003072:	b480      	push	{r7}
 8003074:	b083      	sub	sp, #12
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
 800307a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->OR, ADC_OR_VDDCOREEN, (PathInternal >> ADC_PATH_INTERNAL_POS));
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8003082:	f023 0201 	bic.w	r2, r3, #1
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	0c1b      	lsrs	r3, r3, #16
 800308a:	431a      	orrs	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
}
 8003092:	bf00      	nop
 8003094:	370c      	adds	r7, #12
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr

0800309e <LL_ADC_GetPathInternalCh>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VDDCORE
  */
__STATIC_INLINE uint32_t LL_ADC_GetPathInternalCh(const ADC_TypeDef *ADCx)
{
 800309e:	b480      	push	{r7}
 80030a0:	b083      	sub	sp, #12
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->OR, ADC_OR_VDDCOREEN)) << ADC_PATH_INTERNAL_POS;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80030ac:	041b      	lsls	r3, r3, #16
 80030ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	370c      	adds	r7, #12
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr

080030be <LL_ADC_SetOffsetChannel>:
  *
  *         (1) On this STM32 series, parameter available only on ADC instance: ADC2.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel)
{
 80030be:	b480      	push	{r7}
 80030c0:	b087      	sub	sp, #28
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	60f8      	str	r0, [r7, #12]
 80030c6:	60b9      	str	r1, [r7, #8]
 80030c8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg_offset_cfg = __ADC_PTR_REG_OFFSET(ADCx->OFCFGR1, Offsety);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	3350      	adds	r3, #80	@ 0x50
 80030ce:	461a      	mov	r2, r3
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	4413      	add	r3, r2
 80030d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg_offset_cfg,
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	06db      	lsls	r3, r3, #27
 80030e4:	431a      	orrs	r2, r3
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	601a      	str	r2, [r3, #0]
             ADC_OFCFGR1_OFFSET_CH,
             (Channel & ADC_CHANNEL_NUMBER_MASK) << ADC_OFCFGR1_OFFSET_CH_Pos);
}
 80030ea:	bf00      	nop
 80030ec:	371c      	adds	r7, #28
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr

080030f6 <LL_ADC_GetOffsetChannel>:
  *         (3) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80030f6:	b480      	push	{r7}
 80030f8:	b085      	sub	sp, #20
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
 80030fe:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFCFGR1, Offsety);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	3350      	adds	r3, #80	@ 0x50
 8003104:	461a      	mov	r2, r3
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	4413      	add	r3, r2
 800310c:	60fb      	str	r3, [r7, #12]

  return (uint32_t) __LL_ADC_DECIMAL_NB_TO_CHANNEL(READ_BIT(*preg, ADC_OFCFGR1_OFFSET_CH) >> ADC_OFCFGR1_OFFSET_CH_Pos);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	0edb      	lsrs	r3, r3, #27
 8003114:	f003 031f 	and.w	r3, r3, #31
}
 8003118:	4618      	mov	r0, r3
 800311a:	3714      	adds	r7, #20
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <LL_ADC_SetOffsetLevel>:
  *         @arg @ref LL_ADC_OFFSET_4
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x00FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetLevel(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetLevel)
{
 8003124:	b480      	push	{r7}
 8003126:	b087      	sub	sp, #28
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg_offset_val = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	3360      	adds	r3, #96	@ 0x60
 8003134:	461a      	mov	r2, r3
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	4413      	add	r3, r2
 800313c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg_offset_val,
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	0d9b      	lsrs	r3, r3, #22
 8003144:	059b      	lsls	r3, r3, #22
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	431a      	orrs	r2, r3
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET,
             OffsetLevel);
}
 800314e:	bf00      	nop
 8003150:	371c      	adds	r7, #28
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr

0800315a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800315a:	b480      	push	{r7}
 800315c:	b087      	sub	sp, #28
 800315e:	af00      	add	r7, sp, #0
 8003160:	60f8      	str	r0, [r7, #12]
 8003162:	60b9      	str	r1, [r7, #8]
 8003164:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFCFGR1, Offsety);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	3350      	adds	r3, #80	@ 0x50
 800316a:	461a      	mov	r2, r3
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	4413      	add	r3, r2
 8003172:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	431a      	orrs	r2, r3
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	601a      	str	r2, [r3, #0]
             ADC_OFCFGR1_POSOFF,
             OffsetSign);
}
 8003184:	bf00      	nop
 8003186:	371c      	adds	r7, #28
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr

08003190 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SAT_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 8003190:	b480      	push	{r7}
 8003192:	b087      	sub	sp, #28
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFCFGR1, Offsety);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	3350      	adds	r3, #80	@ 0x50
 80031a0:	461a      	mov	r2, r3
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	4413      	add	r3, r2
 80031a8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFCFGR1_SSAT, OffsetSignedSaturation);
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	431a      	orrs	r2, r3
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	601a      	str	r2, [r3, #0]
}
 80031ba:	bf00      	nop
 80031bc:	371c      	adds	r7, #28
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr

080031c6 <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SAT_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
 80031c6:	b480      	push	{r7}
 80031c8:	b087      	sub	sp, #28
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	60f8      	str	r0, [r7, #12]
 80031ce:	60b9      	str	r1, [r7, #8]
 80031d0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFCFGR1, Offsety);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	3350      	adds	r3, #80	@ 0x50
 80031d6:	461a      	mov	r2, r3
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	4413      	add	r3, r2
 80031de:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFCFGR1_USAT, OffsetUnsignedSaturation);
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	431a      	orrs	r2, r3
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	601a      	str	r2, [r3, #0]
}
 80031f0:	bf00      	nop
 80031f2:	371c      	adds	r7, #28
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800320a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800320e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003212:	683a      	ldr	r2, [r7, #0]
 8003214:	431a      	orrs	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800321e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003222:	683a      	ldr	r2, [r7, #0]
 8003224:	2a00      	cmp	r2, #0
 8003226:	d002      	beq.n	800322e <LL_ADC_SetGainCompensation+0x32>
 8003228:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800322c:	e000      	b.n	8003230 <LL_ADC_SetGainCompensation+0x34>
 800322e:	2200      	movs	r2, #0
 8003230:	431a      	orrs	r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8003236:	bf00      	nop
 8003238:	370c      	adds	r7, #12
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr

08003242 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003242:	b480      	push	{r7}
 8003244:	b083      	sub	sp, #12
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003256:	2301      	movs	r3, #1
 8003258:	e000      	b.n	800325c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800325a:	2300      	movs	r3, #0
}
 800325c:	4618      	mov	r0, r3
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <LL_ADC_REG_SetSequencerRanks>:
  *
  *         (1) On this STM32 series, parameter available only on ADC instance: ADC2.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003268:	b480      	push	{r7}
 800326a:	b087      	sub	sp, #28
 800326c:	af00      	add	r7, sp, #0
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	60b9      	str	r1, [r7, #8]
 8003272:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	3330      	adds	r3, #48	@ 0x30
 8003278:	461a      	mov	r2, r3
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	0a1b      	lsrs	r3, r3, #8
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	f003 030c 	and.w	r3, r3, #12
 8003284:	4413      	add	r3, r2
 8003286:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	f003 031f 	and.w	r3, r3, #31
 8003292:	211f      	movs	r1, #31
 8003294:	fa01 f303 	lsl.w	r3, r1, r3
 8003298:	43db      	mvns	r3, r3
 800329a:	401a      	ands	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f003 011f 	and.w	r1, r3, #31
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	f003 031f 	and.w	r3, r3, #31
 80032a8:	fa01 f303 	lsl.w	r3, r1, r3
 80032ac:	431a      	orrs	r2, r3
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80032b2:	bf00      	nop
 80032b4:	371c      	adds	r7, #28
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr

080032be <LL_ADC_SetChannelPreselection>:
  *
  *         (1) On this STM32 series, parameter available only on ADC instance: ADC2.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80032be:	b480      	push	{r7}
 80032c0:	b085      	sub	sp, #20
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
 80032c6:	6039      	str	r1, [r7, #0]
  __IO uint32_t channel_preselectione = READ_REG(ADCx->PCSEL);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	69db      	ldr	r3, [r3, #28]
 80032cc:	60fb      	str	r3, [r7, #12]
  WRITE_REG(ADCx->PCSEL,
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	f003 031f 	and.w	r3, r3, #31
 80032d4:	2201      	movs	r2, #1
 80032d6:	409a      	lsls	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	431a      	orrs	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	61da      	str	r2, [r3, #28]
            channel_preselectione | (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)Channel) & 0x1FUL)));
}
 80032e0:	bf00      	nop
 80032e2:	3714      	adds	r7, #20
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_246CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_1499CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b087      	sub	sp, #28
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  const uint32_t iChannel = __ADC_CHANNEL_INDEX(Channel);
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	f003 031f 	and.w	r3, r3, #31
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d07f      	beq.n	8003402 <LL_ADC_SetChannelSamplingTime+0x116>
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	f003 031f 	and.w	r3, r3, #31
 8003308:	2b01      	cmp	r3, #1
 800330a:	d078      	beq.n	80033fe <LL_ADC_SetChannelSamplingTime+0x112>
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	f003 031f 	and.w	r3, r3, #31
 8003312:	2b02      	cmp	r3, #2
 8003314:	d071      	beq.n	80033fa <LL_ADC_SetChannelSamplingTime+0x10e>
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	f003 031f 	and.w	r3, r3, #31
 800331c:	2b03      	cmp	r3, #3
 800331e:	d06a      	beq.n	80033f6 <LL_ADC_SetChannelSamplingTime+0x10a>
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	f003 031f 	and.w	r3, r3, #31
 8003326:	2b04      	cmp	r3, #4
 8003328:	d063      	beq.n	80033f2 <LL_ADC_SetChannelSamplingTime+0x106>
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	f003 031f 	and.w	r3, r3, #31
 8003330:	2b05      	cmp	r3, #5
 8003332:	d05c      	beq.n	80033ee <LL_ADC_SetChannelSamplingTime+0x102>
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	f003 031f 	and.w	r3, r3, #31
 800333a:	2b06      	cmp	r3, #6
 800333c:	d055      	beq.n	80033ea <LL_ADC_SetChannelSamplingTime+0xfe>
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	f003 031f 	and.w	r3, r3, #31
 8003344:	2b07      	cmp	r3, #7
 8003346:	d04e      	beq.n	80033e6 <LL_ADC_SetChannelSamplingTime+0xfa>
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	f003 031f 	and.w	r3, r3, #31
 800334e:	2b08      	cmp	r3, #8
 8003350:	d047      	beq.n	80033e2 <LL_ADC_SetChannelSamplingTime+0xf6>
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	f003 031f 	and.w	r3, r3, #31
 8003358:	2b09      	cmp	r3, #9
 800335a:	d040      	beq.n	80033de <LL_ADC_SetChannelSamplingTime+0xf2>
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	f003 031f 	and.w	r3, r3, #31
 8003362:	2b0a      	cmp	r3, #10
 8003364:	d039      	beq.n	80033da <LL_ADC_SetChannelSamplingTime+0xee>
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	f003 031f 	and.w	r3, r3, #31
 800336c:	2b0b      	cmp	r3, #11
 800336e:	d032      	beq.n	80033d6 <LL_ADC_SetChannelSamplingTime+0xea>
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	f003 031f 	and.w	r3, r3, #31
 8003376:	2b0c      	cmp	r3, #12
 8003378:	d02b      	beq.n	80033d2 <LL_ADC_SetChannelSamplingTime+0xe6>
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	f003 031f 	and.w	r3, r3, #31
 8003380:	2b0d      	cmp	r3, #13
 8003382:	d024      	beq.n	80033ce <LL_ADC_SetChannelSamplingTime+0xe2>
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	f003 031f 	and.w	r3, r3, #31
 800338a:	2b0e      	cmp	r3, #14
 800338c:	d01d      	beq.n	80033ca <LL_ADC_SetChannelSamplingTime+0xde>
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	f003 031f 	and.w	r3, r3, #31
 8003394:	2b0f      	cmp	r3, #15
 8003396:	d016      	beq.n	80033c6 <LL_ADC_SetChannelSamplingTime+0xda>
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	f003 031f 	and.w	r3, r3, #31
 800339e:	2b10      	cmp	r3, #16
 80033a0:	d00f      	beq.n	80033c2 <LL_ADC_SetChannelSamplingTime+0xd6>
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	f003 031f 	and.w	r3, r3, #31
 80033a8:	2b11      	cmp	r3, #17
 80033aa:	d008      	beq.n	80033be <LL_ADC_SetChannelSamplingTime+0xd2>
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	f003 031f 	and.w	r3, r3, #31
 80033b2:	2b12      	cmp	r3, #18
 80033b4:	d101      	bne.n	80033ba <LL_ADC_SetChannelSamplingTime+0xce>
 80033b6:	2312      	movs	r3, #18
 80033b8:	e024      	b.n	8003404 <LL_ADC_SetChannelSamplingTime+0x118>
 80033ba:	2300      	movs	r3, #0
 80033bc:	e022      	b.n	8003404 <LL_ADC_SetChannelSamplingTime+0x118>
 80033be:	2311      	movs	r3, #17
 80033c0:	e020      	b.n	8003404 <LL_ADC_SetChannelSamplingTime+0x118>
 80033c2:	2310      	movs	r3, #16
 80033c4:	e01e      	b.n	8003404 <LL_ADC_SetChannelSamplingTime+0x118>
 80033c6:	230f      	movs	r3, #15
 80033c8:	e01c      	b.n	8003404 <LL_ADC_SetChannelSamplingTime+0x118>
 80033ca:	230e      	movs	r3, #14
 80033cc:	e01a      	b.n	8003404 <LL_ADC_SetChannelSamplingTime+0x118>
 80033ce:	230d      	movs	r3, #13
 80033d0:	e018      	b.n	8003404 <LL_ADC_SetChannelSamplingTime+0x118>
 80033d2:	230c      	movs	r3, #12
 80033d4:	e016      	b.n	8003404 <LL_ADC_SetChannelSamplingTime+0x118>
 80033d6:	230b      	movs	r3, #11
 80033d8:	e014      	b.n	8003404 <LL_ADC_SetChannelSamplingTime+0x118>
 80033da:	230a      	movs	r3, #10
 80033dc:	e012      	b.n	8003404 <LL_ADC_SetChannelSamplingTime+0x118>
 80033de:	2309      	movs	r3, #9
 80033e0:	e010      	b.n	8003404 <LL_ADC_SetChannelSamplingTime+0x118>
 80033e2:	2308      	movs	r3, #8
 80033e4:	e00e      	b.n	8003404 <LL_ADC_SetChannelSamplingTime+0x118>
 80033e6:	2307      	movs	r3, #7
 80033e8:	e00c      	b.n	8003404 <LL_ADC_SetChannelSamplingTime+0x118>
 80033ea:	2306      	movs	r3, #6
 80033ec:	e00a      	b.n	8003404 <LL_ADC_SetChannelSamplingTime+0x118>
 80033ee:	2305      	movs	r3, #5
 80033f0:	e008      	b.n	8003404 <LL_ADC_SetChannelSamplingTime+0x118>
 80033f2:	2304      	movs	r3, #4
 80033f4:	e006      	b.n	8003404 <LL_ADC_SetChannelSamplingTime+0x118>
 80033f6:	2303      	movs	r3, #3
 80033f8:	e004      	b.n	8003404 <LL_ADC_SetChannelSamplingTime+0x118>
 80033fa:	2302      	movs	r3, #2
 80033fc:	e002      	b.n	8003404 <LL_ADC_SetChannelSamplingTime+0x118>
 80033fe:	2301      	movs	r3, #1
 8003400:	e000      	b.n	8003404 <LL_ADC_SetChannelSamplingTime+0x118>
 8003402:	2300      	movs	r3, #0
 8003404:	617b      	str	r3, [r7, #20]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	3314      	adds	r3, #20
 800340a:	4619      	mov	r1, r3
 800340c:	4a15      	ldr	r2, [pc, #84]	@ (8003464 <LL_ADC_SetChannelSamplingTime+0x178>)
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003414:	0e5b      	lsrs	r3, r3, #25
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	f003 0304 	and.w	r3, r3, #4
 800341c:	440b      	add	r3, r1
 800341e:	613b      	str	r3, [r7, #16]
                                             ((ADC_CHANNEL_LUT[iChannel]
                                               & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
  MODIFY_REG(*preg,
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	490f      	ldr	r1, [pc, #60]	@ (8003464 <LL_ADC_SetChannelSamplingTime+0x178>)
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800342c:	0d1b      	lsrs	r3, r3, #20
 800342e:	f003 031f 	and.w	r3, r3, #31
 8003432:	2107      	movs	r1, #7
 8003434:	fa01 f303 	lsl.w	r3, r1, r3
 8003438:	43db      	mvns	r3, r3
 800343a:	401a      	ands	r2, r3
 800343c:	4909      	ldr	r1, [pc, #36]	@ (8003464 <LL_ADC_SetChannelSamplingTime+0x178>)
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003444:	0d1b      	lsrs	r3, r3, #20
 8003446:	f003 031f 	and.w	r3, r3, #31
 800344a:	6879      	ldr	r1, [r7, #4]
 800344c:	fa01 f303 	lsl.w	r3, r1, r3
 8003450:	431a      	orrs	r2, r3
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((ADC_CHANNEL_LUT[iChannel] & ADC_CHANNEL_SMPx_BITOFFSET_MASK)
                                >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((ADC_CHANNEL_LUT[iChannel] & ADC_CHANNEL_SMPx_BITOFFSET_MASK)
                                >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003456:	bf00      	nop
 8003458:	371c      	adds	r7, #28
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	08022d64 	.word	0x08022d64

08003468 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f003 031f 	and.w	r3, r3, #31
}
 8003478:	4618      	mov	r0, r3
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <LL_ADC_GetMultiDataFormat>:
  *         @arg @ref LL_ADC_MULTI_REG_DATA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DATA_COMMON_32B
  *         @arg @ref LL_ADC_MULTI_REG_DATA_COMMON_16B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDataFormat(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8003494:	4618      	mov	r0, r3
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80034b0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	6093      	str	r3, [r2, #8]
}
 80034b8:	bf00      	nop
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80034d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80034d8:	d101      	bne.n	80034de <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80034da:	2301      	movs	r3, #1
 80034dc:	e000      	b.n	80034e0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80034de:	2300      	movs	r3, #0
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80034fc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003500:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003508:	bf00      	nop
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003524:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003528:	d101      	bne.n	800352e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800352a:	2301      	movs	r3, #1
 800352c:	e000      	b.n	8003530 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800352e:	2300      	movs	r3, #0
}
 8003530:	4618      	mov	r0, r3
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800354c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003550:	f043 0201 	orr.w	r2, r3, #1
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003558:	bf00      	nop
 800355a:	370c      	adds	r7, #12
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003574:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003578:	f043 0202 	orr.w	r2, r3, #2
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003580:	bf00      	nop
 8003582:	370c      	adds	r7, #12
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	f003 0301 	and.w	r3, r3, #1
 800359c:	2b01      	cmp	r3, #1
 800359e:	d101      	bne.n	80035a4 <LL_ADC_IsEnabled+0x18>
 80035a0:	2301      	movs	r3, #1
 80035a2:	e000      	b.n	80035a6 <LL_ADC_IsEnabled+0x1a>
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	370c      	adds	r7, #12
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr

080035b2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80035b2:	b480      	push	{r7}
 80035b4:	b083      	sub	sp, #12
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d101      	bne.n	80035ca <LL_ADC_IsDisableOngoing+0x18>
 80035c6:	2301      	movs	r3, #1
 80035c8:	e000      	b.n	80035cc <LL_ADC_IsDisableOngoing+0x1a>
 80035ca:	2300      	movs	r3, #0
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80035e8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80035ec:	f043 0204 	orr.w	r2, r3, #4
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003610:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003614:	f043 0210 	orr.w	r2, r3, #16
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f003 0304 	and.w	r3, r3, #4
 8003638:	2b04      	cmp	r3, #4
 800363a:	d101      	bne.n	8003640 <LL_ADC_REG_IsConversionOngoing+0x18>
 800363c:	2301      	movs	r3, #1
 800363e:	e000      	b.n	8003642 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	370c      	adds	r7, #12
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr

0800364e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800364e:	b480      	push	{r7}
 8003650:	b083      	sub	sp, #12
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800365e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003662:	f043 0220 	orr.w	r2, r3, #32
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800366a:	bf00      	nop
 800366c:	370c      	adds	r7, #12
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr

08003676 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003676:	b480      	push	{r7}
 8003678:	b083      	sub	sp, #12
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f003 0308 	and.w	r3, r3, #8
 8003686:	2b08      	cmp	r3, #8
 8003688:	d101      	bne.n	800368e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800368a:	2301      	movs	r3, #1
 800368c:	e000      	b.n	8003690 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800368e:	2300      	movs	r3, #0
}
 8003690:	4618      	mov	r0, r3
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <LL_ADC_IsActiveFlag_LDORDY>:
  * @rmtoll ISR      LDORDY          LL_ADC_IsActiveFlag_LDORDY
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_LDORDY(const ADC_TypeDef *ADCx)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_LDORDY) == (ADC_ISR_LDORDY)) ? 1UL : 0UL);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80036ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036b0:	d101      	bne.n	80036b6 <LL_ADC_IsActiveFlag_LDORDY+0x1a>
 80036b2:	2301      	movs	r3, #1
 80036b4:	e000      	b.n	80036b8 <LL_ADC_IsActiveFlag_LDORDY+0x1c>
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <LL_ADC_ClearFlag_LDORDY>:
  * @rmtoll ISR      LDORDY         LL_ADC_ClearFlag_LDORDY
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE void LL_ADC_ClearFlag_LDORDY(ADC_TypeDef *ADCx)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_LDORDY);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80036d2:	601a      	str	r2, [r3, #0]
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <HAL_ADC_Init>:
  *         without disabling the other ADCs sharing the same ADC common instance.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b088      	sub	sp, #32
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036e8:	2300      	movs	r3, #0
 80036ea:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d101      	bne.n	80036f6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e139      	b.n	800396a <HAL_ADC_Init+0x28a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003700:	2b00      	cmp	r3, #0
 8003702:	d109      	bne.n	8003718 <HAL_ADC_Init+0x38>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f7fe fd0d 	bl	8002124 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4618      	mov	r0, r3
 800371e:	f7ff fed1 	bl	80034c4 <LL_ADC_IsDeepPowerDownEnabled>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d004      	beq.n	8003732 <HAL_ADC_Init+0x52>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4618      	mov	r0, r3
 800372e:	f7ff feb7 	bl	80034a0 <LL_ADC_DisableDeepPowerDown>

    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4618      	mov	r0, r3
 8003738:	f7ff feec 	bl	8003514 <LL_ADC_IsInternalRegulatorEnabled>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d132      	bne.n	80037a8 <HAL_ADC_Init+0xc8>
  {
    /* Clear flag ADC internal voltage regulator ready */
    LL_ADC_ClearFlag_LDORDY(hadc->Instance);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4618      	mov	r0, r3
 8003748:	f7ff ffbc 	bl	80036c4 <LL_ADC_ClearFlag_LDORDY>

    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4618      	mov	r0, r3
 8003752:	f7ff fecb 	bl	80034ec <LL_ADC_EnableInternalRegulator>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8003756:	f7ff fc3b 	bl	8002fd0 <HAL_GetTick>
 800375a:	6178      	str	r0, [r7, #20]

    /* Delay for ADC stabilization time */
    while (LL_ADC_IsActiveFlag_LDORDY(hadc->Instance) == 0UL)
 800375c:	e01c      	b.n	8003798 <HAL_ADC_Init+0xb8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_LDO_RDY_TIMEOUT)
 800375e:	f7ff fc37 	bl	8002fd0 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	2b01      	cmp	r3, #1
 800376a:	d915      	bls.n	8003798 <HAL_ADC_Init+0xb8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsActiveFlag_LDORDY(hadc->Instance) == 0UL)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4618      	mov	r0, r3
 8003772:	f7ff ff93 	bl	800369c <LL_ADC_IsActiveFlag_LDORDY>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d10d      	bne.n	8003798 <HAL_ADC_Init+0xb8>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003780:	f043 0210 	orr.w	r2, r3, #16
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800378c:	f043 0201 	orr.w	r2, r3, #1
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e0e8      	b.n	800396a <HAL_ADC_Init+0x28a>
    while (LL_ADC_IsActiveFlag_LDORDY(hadc->Instance) == 0UL)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4618      	mov	r0, r3
 800379e:	f7ff ff7d 	bl	800369c <LL_ADC_IsActiveFlag_LDORDY>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d0da      	beq.n	800375e <HAL_ADC_Init+0x7e>

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7ff ff3b 	bl	8003628 <LL_ADC_REG_IsConversionOngoing>
 80037b2:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037b8:	f003 0310 	and.w	r3, r3, #16
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f040 80cb 	bne.w	8003958 <HAL_ADC_Init+0x278>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	f040 80c7 	bne.w	8003958 <HAL_ADC_Init+0x278>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037ce:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80037d2:	f043 0202 	orr.w	r2, r3, #2
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

    tmpCFGR1 = (ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	7d5b      	ldrb	r3, [r3, #21]
 80037de:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR1 = (ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80037e4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
                hadc->Init.Overrun                                                    |
 80037ea:	431a      	orrs	r2, r3
                ADC_CFGR1_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	7f1b      	ldrb	r3, [r3, #28]
 80037f0:	041b      	lsls	r3, r3, #16
    tmpCFGR1 = (ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80037f2:	4313      	orrs	r3, r2
 80037f4:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	7f1b      	ldrb	r3, [r3, #28]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d106      	bne.n	800380c <HAL_ADC_Init+0x12c>
    {
      tmpCFGR1 |= ADC_CFGR1_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a1b      	ldr	r3, [r3, #32]
 8003802:	3b01      	subs	r3, #1
 8003804:	045b      	lsls	r3, r3, #17
 8003806:	69ba      	ldr	r2, [r7, #24]
 8003808:	4313      	orrs	r3, r2
 800380a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003810:	2b00      	cmp	r3, #0
 8003812:	d009      	beq.n	8003828 <HAL_ADC_Init+0x148>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003818:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003820:	4313      	orrs	r3, r2
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL)
 8003822:	69ba      	ldr	r2, [r7, #24]
 8003824:	4313      	orrs	r3, r2
 8003826:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_FIELDS_1, tmpCFGR1);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68da      	ldr	r2, [r3, #12]
 800382e:	4b51      	ldr	r3, [pc, #324]	@ (8003974 <HAL_ADC_Init+0x294>)
 8003830:	4013      	ands	r3, r2
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	6812      	ldr	r2, [r2, #0]
 8003836:	69b9      	ldr	r1, [r7, #24]
 8003838:	430b      	orrs	r3, r1
 800383a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	f423 4120 	bic.w	r1, r3, #40960	@ 0xa000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	430a      	orrs	r2, r1
 8003850:	611a      	str	r2, [r3, #16]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4618      	mov	r0, r3
 8003858:	f7ff fee6 	bl	8003628 <LL_ADC_REG_IsConversionOngoing>
 800385c:	60f8      	str	r0, [r7, #12]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4618      	mov	r0, r3
 8003864:	f7ff ff07 	bl	8003676 <LL_ADC_INJ_IsConversionOngoing>
 8003868:	60b8      	str	r0, [r7, #8]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d151      	bne.n	8003914 <HAL_ADC_Init+0x234>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d14e      	bne.n	8003914 <HAL_ADC_Init+0x234>
       )
    {
      tmpCFGR1 = (
                   ADC_CFGR1_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	7d1b      	ldrb	r3, [r3, #20]
 800387a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR1 = (
 8003880:	4313      	orrs	r3, r2
 8003882:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_FIELDS_2, tmpCFGR1);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800388e:	f023 0303 	bic.w	r3, r3, #3
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	6812      	ldr	r2, [r2, #0]
 8003896:	69b9      	ldr	r1, [r7, #24]
 8003898:	430b      	orrs	r3, r1
 800389a:	60d3      	str	r3, [r2, #12]

      LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	4619      	mov	r1, r3
 80038a6:	4610      	mov	r0, r2
 80038a8:	f7ff fca8 	bl	80031fc <LL_ADC_SetGainCompensation>

      if (hadc->Init.OversamplingMode == ENABLE)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d11b      	bne.n	80038ee <HAL_ADC_Init+0x20e>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ba:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	691a      	ldr	r2, [r3, #16]
 80038c2:	4b2d      	ldr	r3, [pc, #180]	@ (8003978 <HAL_ADC_Init+0x298>)
 80038c4:	4013      	ands	r3, r2
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80038ca:	3a01      	subs	r2, #1
 80038cc:	0411      	lsls	r1, r2, #16
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80038d2:	4311      	orrs	r1, r2
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80038d8:	4311      	orrs	r1, r2
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80038de:	430a      	orrs	r2, r1
 80038e0:	431a      	orrs	r2, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f042 0201 	orr.w	r2, r2, #1
 80038ea:	611a      	str	r2, [r3, #16]
 80038ec:	e007      	b.n	80038fe <HAL_ADC_Init+0x21e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	691a      	ldr	r2, [r3, #16]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f022 0201 	bic.w	r2, r2, #1
 80038fc:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	691b      	ldr	r3, [r3, #16]
 8003904:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	430a      	orrs	r2, r1
 8003912:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	2b01      	cmp	r3, #1
 800391a:	d10c      	bne.n	8003936 <HAL_ADC_Init+0x256>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003922:	f023 010f 	bic.w	r1, r3, #15
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	1e5a      	subs	r2, r3, #1
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	430a      	orrs	r2, r1
 8003932:	631a      	str	r2, [r3, #48]	@ 0x30
 8003934:	e007      	b.n	8003946 <HAL_ADC_Init+0x266>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f022 020f 	bic.w	r2, r2, #15
 8003944:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800394a:	f023 0303 	bic.w	r3, r3, #3
 800394e:	f043 0201 	orr.w	r2, r3, #1
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	659a      	str	r2, [r3, #88]	@ 0x58
 8003956:	e007      	b.n	8003968 <HAL_ADC_Init+0x288>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800395c:	f043 0210 	orr.w	r2, r3, #16
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8003968:	7ffb      	ldrb	r3, [r7, #31]
}
 800396a:	4618      	mov	r0, r3
 800396c:	3720      	adds	r7, #32
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	fff0c013 	.word	0xfff0c013
 8003978:	fc00f81e 	.word	0xfc00f81e

0800397c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b086      	sub	sp, #24
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003984:	4857      	ldr	r0, [pc, #348]	@ (8003ae4 <HAL_ADC_Start+0x168>)
 8003986:	f7ff fd6f 	bl	8003468 <LL_ADC_GetMultimode>
 800398a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4618      	mov	r0, r3
 8003992:	f7ff fe49 	bl	8003628 <LL_ADC_REG_IsConversionOngoing>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	f040 809c 	bne.w	8003ad6 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d101      	bne.n	80039ac <HAL_ADC_Start+0x30>
 80039a8:	2302      	movs	r3, #2
 80039aa:	e097      	b.n	8003adc <HAL_ADC_Start+0x160>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f000 fc1d 	bl	80041f4 <ADC_Enable>
 80039ba:	4603      	mov	r3, r0
 80039bc:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80039be:	7dfb      	ldrb	r3, [r7, #23]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	f040 8083 	bne.w	8003acc <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039ca:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80039ce:	f023 0301 	bic.w	r3, r3, #1
 80039d2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	659a      	str	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a42      	ldr	r2, [pc, #264]	@ (8003ae8 <HAL_ADC_Start+0x16c>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d002      	beq.n	80039ea <HAL_ADC_Start+0x6e>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	e000      	b.n	80039ec <HAL_ADC_Start+0x70>
 80039ea:	4b40      	ldr	r3, [pc, #256]	@ (8003aec <HAL_ADC_Start+0x170>)
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	6812      	ldr	r2, [r2, #0]
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d002      	beq.n	80039fa <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d105      	bne.n	8003a06 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039fe:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a0a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a12:	d106      	bne.n	8003a22 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a18:	f023 0206 	bic.w	r2, r3, #6
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003a20:	e002      	b.n	8003a28 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	221c      	movs	r2, #28
 8003a2e:	601a      	str	r2, [r3, #0]

      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a2a      	ldr	r2, [pc, #168]	@ (8003ae8 <HAL_ADC_Start+0x16c>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d002      	beq.n	8003a48 <HAL_ADC_Start+0xcc>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	e000      	b.n	8003a4a <HAL_ADC_Start+0xce>
 8003a48:	4b28      	ldr	r3, [pc, #160]	@ (8003aec <HAL_ADC_Start+0x170>)
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	6812      	ldr	r2, [r2, #0]
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d008      	beq.n	8003a64 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d005      	beq.n	8003a64 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	2b05      	cmp	r3, #5
 8003a5c:	d002      	beq.n	8003a64 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	2b09      	cmp	r3, #9
 8003a62:	d114      	bne.n	8003a8e <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_JAUTO) != 0UL)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d007      	beq.n	8003a82 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a76:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003a7a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4618      	mov	r0, r3
 8003a88:	f7ff fda6 	bl	80035d8 <LL_ADC_REG_StartConversion>
 8003a8c:	e025      	b.n	8003ada <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a92:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	659a      	str	r2, [r3, #88]	@ 0x58
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a12      	ldr	r2, [pc, #72]	@ (8003ae8 <HAL_ADC_Start+0x16c>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d002      	beq.n	8003aaa <HAL_ADC_Start+0x12e>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	e000      	b.n	8003aac <HAL_ADC_Start+0x130>
 8003aaa:	4b10      	ldr	r3, [pc, #64]	@ (8003aec <HAL_ADC_Start+0x170>)
 8003aac:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR1, ADC_CFGR1_JAUTO) != 0UL)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00f      	beq.n	8003ada <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003abe:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003ac2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	659a      	str	r2, [r3, #88]	@ 0x58
 8003aca:	e006      	b.n	8003ada <HAL_ADC_Start+0x15e>
      LL_ADC_REG_StartConversion(hadc->Instance);
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8003ad4:	e001      	b.n	8003ada <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003ad6:	2302      	movs	r3, #2
 8003ad8:	75fb      	strb	r3, [r7, #23]
  }

  return tmp_hal_status;
 8003ada:	7dfb      	ldrb	r3, [r7, #23]
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3718      	adds	r7, #24
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	42028300 	.word	0x42028300
 8003ae8:	42028100 	.word	0x42028100
 8003aec:	42028000 	.word	0x42028000

08003af0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d101      	bne.n	8003b06 <HAL_ADC_Stop+0x16>
 8003b02:	2302      	movs	r3, #2
 8003b04:	e023      	b.n	8003b4e <HAL_ADC_Stop+0x5e>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003b0e:	2103      	movs	r1, #3
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f000 fab3 	bl	800407c <ADC_ConversionStop>
 8003b16:	4603      	mov	r3, r0
 8003b18:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003b1a:	7bfb      	ldrb	r3, [r7, #15]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d111      	bne.n	8003b44 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f000 fbeb 	bl	80042fc <ADC_Disable>
 8003b26:	4603      	mov	r3, r0
 8003b28:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003b2a:	7bfb      	ldrb	r3, [r7, #15]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d109      	bne.n	8003b44 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b34:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003b38:	f023 0301 	bic.w	r3, r3, #1
 8003b3c:	f043 0201 	orr.w	r2, r3, #1
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8003b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3710      	adds	r7, #16
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
	...

08003b58 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b088      	sub	sp, #32
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b62:	4866      	ldr	r0, [pc, #408]	@ (8003cfc <HAL_ADC_PollForConversion+0x1a4>)
 8003b64:	f7ff fc80 	bl	8003468 <LL_ADC_GetMultimode>
 8003b68:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	2b08      	cmp	r3, #8
 8003b70:	d102      	bne.n	8003b78 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003b72:	2308      	movs	r3, #8
 8003b74:	61fb      	str	r3, [r7, #28]
 8003b76:	e02a      	b.n	8003bce <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d005      	beq.n	8003b8a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	2b05      	cmp	r3, #5
 8003b82:	d002      	beq.n	8003b8a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	2b09      	cmp	r3, #9
 8003b88:	d111      	bne.n	8003bae <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMNGT_0) != 0UL)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	f003 0301 	and.w	r3, r3, #1
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d007      	beq.n	8003ba8 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b9c:	f043 0220 	orr.w	r2, r3, #32
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	659a      	str	r2, [r3, #88]	@ 0x58
        return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e0a4      	b.n	8003cf2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003ba8:	2304      	movs	r3, #4
 8003baa:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMNGT_0) != 0UL)
 8003bac:	e00f      	b.n	8003bce <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDataFormat(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DATA_EACH_ADC)
 8003bae:	4853      	ldr	r0, [pc, #332]	@ (8003cfc <HAL_ADC_PollForConversion+0x1a4>)
 8003bb0:	f7ff fc68 	bl	8003484 <LL_ADC_GetMultiDataFormat>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d007      	beq.n	8003bca <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bbe:	f043 0220 	orr.w	r2, r3, #32
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	659a      	str	r2, [r3, #88]	@ 0x58
        return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e093      	b.n	8003cf2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003bca:	2304      	movs	r3, #4
 8003bcc:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003bce:	f7ff f9ff 	bl	8002fd0 <HAL_GetTick>
 8003bd2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003bd4:	e021      	b.n	8003c1a <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003bdc:	d01d      	beq.n	8003c1a <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003bde:	f7ff f9f7 	bl	8002fd0 <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	683a      	ldr	r2, [r7, #0]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d302      	bcc.n	8003bf4 <HAL_ADC_PollForConversion+0x9c>
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d112      	bne.n	8003c1a <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d10b      	bne.n	8003c1a <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c06:	f043 0204 	orr.w	r2, r3, #4
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e06b      	b.n	8003cf2 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	4013      	ands	r3, r2
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d0d6      	beq.n	8003bd6 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c2c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f7ff fb02 	bl	8003242 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d01c      	beq.n	8003c7e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	7d5b      	ldrb	r3, [r3, #21]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d118      	bne.n	8003c7e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0308 	and.w	r3, r3, #8
 8003c56:	2b08      	cmp	r3, #8
 8003c58:	d111      	bne.n	8003c7e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c5e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	659a      	str	r2, [r3, #88]	@ 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c6a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d105      	bne.n	8003c7e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c76:	f043 0201 	orr.w	r2, r3, #1
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a1f      	ldr	r2, [pc, #124]	@ (8003d00 <HAL_ADC_PollForConversion+0x1a8>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d002      	beq.n	8003c8e <HAL_ADC_PollForConversion+0x136>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	e000      	b.n	8003c90 <HAL_ADC_PollForConversion+0x138>
 8003c8e:	4b1d      	ldr	r3, [pc, #116]	@ (8003d04 <HAL_ADC_PollForConversion+0x1ac>)
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	6812      	ldr	r2, [r2, #0]
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d008      	beq.n	8003caa <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d005      	beq.n	8003caa <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	2b05      	cmp	r3, #5
 8003ca2:	d002      	beq.n	8003caa <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	2b09      	cmp	r3, #9
 8003ca8:	d104      	bne.n	8003cb4 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve ADC CFGR1 register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	61bb      	str	r3, [r7, #24]
 8003cb2:	e00c      	b.n	8003cce <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a11      	ldr	r2, [pc, #68]	@ (8003d00 <HAL_ADC_PollForConversion+0x1a8>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d002      	beq.n	8003cc4 <HAL_ADC_PollForConversion+0x16c>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	e000      	b.n	8003cc6 <HAL_ADC_PollForConversion+0x16e>
 8003cc4:	4b0f      	ldr	r3, [pc, #60]	@ (8003d04 <HAL_ADC_PollForConversion+0x1ac>)
 8003cc6:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR1);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	61bb      	str	r3, [r7, #24]
  /* Retrieve ADC CFGR1 register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	2b08      	cmp	r3, #8
 8003cd2:	d104      	bne.n	8003cde <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2208      	movs	r2, #8
 8003cda:	601a      	str	r2, [r3, #0]
 8003cdc:	e008      	b.n	8003cf0 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR1_AUTDLY) == 0UL)
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d103      	bne.n	8003cf0 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	220c      	movs	r2, #12
 8003cee:	601a      	str	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3720      	adds	r7, #32
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	42028300 	.word	0x42028300
 8003d00:	42028100 	.word	0x42028100
 8003d04:	42028000 	.word	0x42028000

08003d08 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	370c      	adds	r7, #12
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
	...

08003d24 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b08a      	sub	sp, #40	@ 0x28
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_common_path_internal_channel;
  uint32_t tmp_config_path_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003d34:	2300      	movs	r3, #0
 8003d36:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_OFFSET(pConfig->Offset));

  assert_param(IS_ADC_CHANNEL(hadc, pConfig->Channel));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d101      	bne.n	8003d46 <HAL_ADC_ConfigChannel+0x22>
 8003d42:	2302      	movs	r3, #2
 8003d44:	e183      	b.n	800404e <HAL_ADC_ConfigChannel+0x32a>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7ff fc68 	bl	8003628 <LL_ADC_REG_IsConversionOngoing>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f040 8162 	bne.w	8004024 <HAL_ADC_ConfigChannel+0x300>
  {
    /* ADC channels preselection */
    LL_ADC_SetChannelPreselection(hadc->Instance, pConfig->Channel);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4619      	mov	r1, r3
 8003d6a:	4610      	mov	r0, r2
 8003d6c:	f7ff faa7 	bl	80032be <LL_ADC_SetChannelPreselection>

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6818      	ldr	r0, [r3, #0]
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	6859      	ldr	r1, [r3, #4]
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	f7ff fa73 	bl	8003268 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7ff fc4e 	bl	8003628 <LL_ADC_REG_IsConversionOngoing>
 8003d8c:	6238      	str	r0, [r7, #32]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4618      	mov	r0, r3
 8003d94:	f7ff fc6f 	bl	8003676 <LL_ADC_INJ_IsConversionOngoing>
 8003d98:	61f8      	str	r0, [r7, #28]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003d9a:	6a3b      	ldr	r3, [r7, #32]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	f040 80aa 	bne.w	8003ef6 <HAL_ADC_ConfigChannel+0x1d2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	f040 80a6 	bne.w	8003ef6 <HAL_ADC_ConfigChannel+0x1d2>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6818      	ldr	r0, [r3, #0]
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	6819      	ldr	r1, [r3, #0]
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	461a      	mov	r2, r3
 8003db8:	f7ff fa98 	bl	80032ec <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	695a      	ldr	r2, [r3, #20]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	089b      	lsrs	r3, r3, #2
 8003dc8:	f003 0303 	and.w	r3, r3, #3
 8003dcc:	005b      	lsls	r3, r3, #1
 8003dce:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd2:	61bb      	str	r3, [r7, #24]

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	2b04      	cmp	r3, #4
 8003dda:	d038      	beq.n	8003e4e <HAL_ADC_ConfigChannel+0x12a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffsetChannel(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6818      	ldr	r0, [r3, #0]
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	6919      	ldr	r1, [r3, #16]
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	461a      	mov	r2, r3
 8003dea:	f7ff f968 	bl	80030be <LL_ADC_SetOffsetChannel>
        LL_ADC_SetOffsetLevel(hadc->Instance, pConfig->OffsetNumber, tmpOffsetShifted);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6818      	ldr	r0, [r3, #0]
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	69ba      	ldr	r2, [r7, #24]
 8003df8:	4619      	mov	r1, r3
 8003dfa:	f7ff f993 	bl	8003124 <LL_ADC_SetOffsetLevel>
        /* Signed and unsigned saturation cannot be set at the same time */
        assert_param(!((pConfig->OffsetSignedSaturation == ENABLE) && (pConfig->OffsetSaturation == ENABLE)));


        /* Set ADC offset sign */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6818      	ldr	r0, [r3, #0]
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	6919      	ldr	r1, [r3, #16]
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	69db      	ldr	r3, [r3, #28]
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	f7ff f9a5 	bl	800315a <LL_ADC_SetOffsetSign>
        /* Set ADC offset signed saturation */
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,      \
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6818      	ldr	r0, [r3, #0]
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	6919      	ldr	r1, [r3, #16]
                                         (pConfig->OffsetSignedSaturation == ENABLE) \
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	7e1b      	ldrb	r3, [r3, #24]
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,      \
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d102      	bne.n	8003e26 <HAL_ADC_ConfigChannel+0x102>
 8003e20:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003e24:	e000      	b.n	8003e28 <HAL_ADC_ConfigChannel+0x104>
 8003e26:	2300      	movs	r3, #0
 8003e28:	461a      	mov	r2, r3
 8003e2a:	f7ff f9b1 	bl	8003190 <LL_ADC_SetOffsetSignedSaturation>
                                         ? LL_ADC_OFFSET_SIGNED_SAT_ENABLE           \
                                         : LL_ADC_OFFSET_SIGNED_SAT_DISABLE);
        /* Set ADC offset unsigned saturation */
        LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,    \
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6818      	ldr	r0, [r3, #0]
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	6919      	ldr	r1, [r3, #16]
                                           (pConfig->OffsetSaturation == ENABLE)     \
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	7e5b      	ldrb	r3, [r3, #25]
        LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,    \
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d102      	bne.n	8003e44 <HAL_ADC_ConfigChannel+0x120>
 8003e3e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e42:	e000      	b.n	8003e46 <HAL_ADC_ConfigChannel+0x122>
 8003e44:	2300      	movs	r3, #0
 8003e46:	461a      	mov	r2, r3
 8003e48:	f7ff f9bd 	bl	80031c6 <LL_ADC_SetOffsetUnsignedSaturation>
 8003e4c:	e053      	b.n	8003ef6 <HAL_ADC_ConfigChannel+0x1d2>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted.
           If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2100      	movs	r1, #0
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7ff f94e 	bl	80030f6 <LL_ADC_GetOffsetChannel>
 8003e5a:	4602      	mov	r2, r0
            == __HAL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4053      	eors	r3, r2
 8003e62:	f003 031f 	and.w	r3, r3, #31
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d106      	bne.n	8003e78 <HAL_ADC_ConfigChannel+0x154>
        {
          LL_ADC_SetOffsetLevel(hadc->Instance, LL_ADC_OFFSET_1, 0UL);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	2100      	movs	r1, #0
 8003e72:	4618      	mov	r0, r3
 8003e74:	f7ff f956 	bl	8003124 <LL_ADC_SetOffsetLevel>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2101      	movs	r1, #1
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f7ff f939 	bl	80030f6 <LL_ADC_GetOffsetChannel>
 8003e84:	4602      	mov	r2, r0
            == __HAL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4053      	eors	r3, r2
 8003e8c:	f003 031f 	and.w	r3, r3, #31
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d106      	bne.n	8003ea2 <HAL_ADC_ConfigChannel+0x17e>
        {
          LL_ADC_SetOffsetLevel(hadc->Instance, LL_ADC_OFFSET_2, 0UL);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	2101      	movs	r1, #1
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7ff f941 	bl	8003124 <LL_ADC_SetOffsetLevel>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2102      	movs	r1, #2
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f7ff f924 	bl	80030f6 <LL_ADC_GetOffsetChannel>
 8003eae:	4602      	mov	r2, r0
            == __HAL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4053      	eors	r3, r2
 8003eb6:	f003 031f 	and.w	r3, r3, #31
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d106      	bne.n	8003ecc <HAL_ADC_ConfigChannel+0x1a8>
        {
          LL_ADC_SetOffsetLevel(hadc->Instance, LL_ADC_OFFSET_3, 0UL);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	2102      	movs	r1, #2
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7ff f92c 	bl	8003124 <LL_ADC_SetOffsetLevel>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2103      	movs	r1, #3
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f7ff f90f 	bl	80030f6 <LL_ADC_GetOffsetChannel>
 8003ed8:	4602      	mov	r2, r0
            == __HAL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4053      	eors	r3, r2
 8003ee0:	f003 031f 	and.w	r3, r3, #31
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d106      	bne.n	8003ef6 <HAL_ADC_ConfigChannel+0x1d2>
        {
          LL_ADC_SetOffsetLevel(hadc->Instance, LL_ADC_OFFSET_4, 0UL);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2200      	movs	r2, #0
 8003eee:	2103      	movs	r1, #3
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f7ff f917 	bl	8003124 <LL_ADC_SetOffsetLevel>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	f000 809f 	beq.w	8004042 <HAL_ADC_ConfigChannel+0x31e>
    {
      tmp_config_common_path_internal_channel =
        LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003f04:	4854      	ldr	r0, [pc, #336]	@ (8004058 <HAL_ADC_ConfigChannel+0x334>)
 8003f06:	f7ff f8a6 	bl	8003056 <LL_ADC_GetCommonPathInternalCh>
 8003f0a:	6178      	str	r0, [r7, #20]
      tmp_config_path_internal_channel = LL_ADC_GetPathInternalCh(hadc->Instance);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7ff f8c4 	bl	800309e <LL_ADC_GetPathInternalCh>
 8003f16:	6138      	str	r0, [r7, #16]
      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a4f      	ldr	r2, [pc, #316]	@ (800405c <HAL_ADC_ConfigChannel+0x338>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d116      	bne.n	8003f50 <HAL_ADC_ConfigChannel+0x22c>
          && ((tmp_config_common_path_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d111      	bne.n	8003f50 <HAL_ADC_ConfigChannel+0x22c>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a4b      	ldr	r2, [pc, #300]	@ (8004060 <HAL_ADC_ConfigChannel+0x33c>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d004      	beq.n	8003f40 <HAL_ADC_ConfigChannel+0x21c>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a4a      	ldr	r2, [pc, #296]	@ (8004064 <HAL_ADC_ConfigChannel+0x340>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d17b      	bne.n	8004038 <HAL_ADC_ConfigChannel+0x314>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003f46:	4619      	mov	r1, r3
 8003f48:	4843      	ldr	r0, [pc, #268]	@ (8004058 <HAL_ADC_ConfigChannel+0x334>)
 8003f4a:	f7ff f871 	bl	8003030 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_VREFINT_INSTANCE(hadc))
 8003f4e:	e073      	b.n	8004038 <HAL_ADC_ConfigChannel+0x314>
                                         LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_common_path_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a44      	ldr	r2, [pc, #272]	@ (8004068 <HAL_ADC_ConfigChannel+0x344>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d12a      	bne.n	8003fb0 <HAL_ADC_ConfigChannel+0x28c>
               && ((tmp_config_common_path_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d125      	bne.n	8003fb0 <HAL_ADC_ConfigChannel+0x28c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a3d      	ldr	r2, [pc, #244]	@ (8004060 <HAL_ADC_ConfigChannel+0x33c>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d004      	beq.n	8003f78 <HAL_ADC_ConfigChannel+0x254>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a3c      	ldr	r2, [pc, #240]	@ (8004064 <HAL_ADC_ConfigChannel+0x340>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d161      	bne.n	800403c <HAL_ADC_ConfigChannel+0x318>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003f7e:	4619      	mov	r1, r3
 8003f80:	4835      	ldr	r0, [pc, #212]	@ (8004058 <HAL_ADC_ConfigChannel+0x334>)
 8003f82:	f7ff f855 	bl	8003030 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f86:	4b39      	ldr	r3, [pc, #228]	@ (800406c <HAL_ADC_ConfigChannel+0x348>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	099b      	lsrs	r3, r3, #6
 8003f8c:	4a38      	ldr	r2, [pc, #224]	@ (8004070 <HAL_ADC_ConfigChannel+0x34c>)
 8003f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f92:	099b      	lsrs	r3, r3, #6
 8003f94:	1c5a      	adds	r2, r3, #1
 8003f96:	4613      	mov	r3, r2
 8003f98:	005b      	lsls	r3, r3, #1
 8003f9a:	4413      	add	r3, r2
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003fa0:	e002      	b.n	8003fa8 <HAL_ADC_ConfigChannel+0x284>
          {
            wait_loop_index--;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	3b01      	subs	r3, #1
 8003fa6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1f9      	bne.n	8003fa2 <HAL_ADC_ConfigChannel+0x27e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003fae:	e045      	b.n	800403c <HAL_ADC_ConfigChannel+0x318>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a2f      	ldr	r2, [pc, #188]	@ (8004074 <HAL_ADC_ConfigChannel+0x350>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d116      	bne.n	8003fe8 <HAL_ADC_ConfigChannel+0x2c4>
               && ((tmp_config_common_path_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d111      	bne.n	8003fe8 <HAL_ADC_ConfigChannel+0x2c4>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a25      	ldr	r2, [pc, #148]	@ (8004060 <HAL_ADC_ConfigChannel+0x33c>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d004      	beq.n	8003fd8 <HAL_ADC_ConfigChannel+0x2b4>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a24      	ldr	r2, [pc, #144]	@ (8004064 <HAL_ADC_ConfigChannel+0x340>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d133      	bne.n	8004040 <HAL_ADC_ConfigChannel+0x31c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003fde:	4619      	mov	r1, r3
 8003fe0:	481d      	ldr	r0, [pc, #116]	@ (8004058 <HAL_ADC_ConfigChannel+0x334>)
 8003fe2:	f7ff f825 	bl	8003030 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003fe6:	e02b      	b.n	8004040 <HAL_ADC_ConfigChannel+0x31c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_common_path_internal_channel);
        }
      }
      else if (((pConfig->Channel == ADC_CHANNEL_VDDCORE)
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a22      	ldr	r2, [pc, #136]	@ (8004078 <HAL_ADC_ConfigChannel+0x354>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d127      	bne.n	8004042 <HAL_ADC_ConfigChannel+0x31e>
                && ((tmp_config_path_internal_channel & LL_ADC_PATH_INTERNAL_VDDCORE) == 0UL)))
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d122      	bne.n	8004042 <HAL_ADC_ConfigChannel+0x31e>
      {
        if (ADC_VDDCORE_INSTANCE(hadc))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a17      	ldr	r2, [pc, #92]	@ (8004060 <HAL_ADC_ConfigChannel+0x33c>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d004      	beq.n	8004010 <HAL_ADC_ConfigChannel+0x2ec>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a16      	ldr	r2, [pc, #88]	@ (8004064 <HAL_ADC_ConfigChannel+0x340>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d118      	bne.n	8004042 <HAL_ADC_ConfigChannel+0x31e>
        {
          LL_ADC_SetPathInternalCh(hadc->Instance, LL_ADC_PATH_INTERNAL_VDDCORE | tmp_config_path_internal_channel);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800401a:	4619      	mov	r1, r3
 800401c:	4610      	mov	r0, r2
 800401e:	f7ff f828 	bl	8003072 <LL_ADC_SetPathInternalCh>
 8004022:	e00e      	b.n	8004042 <HAL_ADC_ConfigChannel+0x31e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004028:	f043 0220 	orr.w	r2, r3, #32
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004036:	e004      	b.n	8004042 <HAL_ADC_ConfigChannel+0x31e>
        if (ADC_VREFINT_INSTANCE(hadc))
 8004038:	bf00      	nop
 800403a:	e002      	b.n	8004042 <HAL_ADC_ConfigChannel+0x31e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800403c:	bf00      	nop
 800403e:	e000      	b.n	8004042 <HAL_ADC_ConfigChannel+0x31e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004040:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 800404a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800404e:	4618      	mov	r0, r3
 8004050:	3728      	adds	r7, #40	@ 0x28
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	42028300 	.word	0x42028300
 800405c:	00400c00 	.word	0x00400c00
 8004060:	42028000 	.word	0x42028000
 8004064:	42028100 	.word	0x42028100
 8004068:	00800c11 	.word	0x00800c11
 800406c:	20000004 	.word	0x20000004
 8004070:	053e2d63 	.word	0x053e2d63
 8004074:	01000c10 	.word	0x01000c10
 8004078:	00010c12 	.word	0x00010c12

0800407c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b088      	sub	sp, #32
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t conversion_timeout_cpu_cycles = 0UL;
 8004086:	2300      	movs	r3, #0
 8004088:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4618      	mov	r0, r3
 8004094:	f7ff fac8 	bl	8003628 <LL_ADC_REG_IsConversionOngoing>
 8004098:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4618      	mov	r0, r3
 80040a0:	f7ff fae9 	bl	8003676 <LL_ADC_INJ_IsConversionOngoing>
 80040a4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d103      	bne.n	80040b4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	f000 8098 	beq.w	80041e4 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR1 & ADC_CFGR1_JAUTO) != 0UL)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d02a      	beq.n	8004118 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	7d5b      	ldrb	r3, [r3, #21]
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d126      	bne.n	8004118 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	7d1b      	ldrb	r3, [r3, #20]
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d122      	bne.n	8004118 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80040d2:	2301      	movs	r3, #1
 80040d4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80040d6:	e014      	b.n	8004102 <ADC_ConversionStop+0x86>
      {
        if (conversion_timeout_cpu_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	4a45      	ldr	r2, [pc, #276]	@ (80041f0 <ADC_ConversionStop+0x174>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d90d      	bls.n	80040fc <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040e4:	f043 0210 	orr.w	r2, r3, #16
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040f0:	f043 0201 	orr.w	r2, r3, #1
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e074      	b.n	80041e6 <ADC_ConversionStop+0x16a>
        }
        conversion_timeout_cpu_cycles ++;
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	3301      	adds	r3, #1
 8004100:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800410c:	2b40      	cmp	r3, #64	@ 0x40
 800410e:	d1e3      	bne.n	80040d8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2240      	movs	r2, #64	@ 0x40
 8004116:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8004118:	69bb      	ldr	r3, [r7, #24]
 800411a:	2b02      	cmp	r3, #2
 800411c:	d014      	beq.n	8004148 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4618      	mov	r0, r3
 8004124:	f7ff fa80 	bl	8003628 <LL_ADC_REG_IsConversionOngoing>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00c      	beq.n	8004148 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4618      	mov	r0, r3
 8004134:	f7ff fa3d 	bl	80035b2 <LL_ADC_IsDisableOngoing>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d104      	bne.n	8004148 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4618      	mov	r0, r3
 8004144:	f7ff fa5c 	bl	8003600 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	2b01      	cmp	r3, #1
 800414c:	d014      	beq.n	8004178 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4618      	mov	r0, r3
 8004154:	f7ff fa8f 	bl	8003676 <LL_ADC_INJ_IsConversionOngoing>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00c      	beq.n	8004178 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4618      	mov	r0, r3
 8004164:	f7ff fa25 	bl	80035b2 <LL_ADC_IsDisableOngoing>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d104      	bne.n	8004178 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4618      	mov	r0, r3
 8004174:	f7ff fa6b 	bl	800364e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	2b02      	cmp	r3, #2
 800417c:	d005      	beq.n	800418a <ADC_ConversionStop+0x10e>
 800417e:	69bb      	ldr	r3, [r7, #24]
 8004180:	2b03      	cmp	r3, #3
 8004182:	d105      	bne.n	8004190 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004184:	230c      	movs	r3, #12
 8004186:	617b      	str	r3, [r7, #20]
        break;
 8004188:	e005      	b.n	8004196 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800418a:	2308      	movs	r3, #8
 800418c:	617b      	str	r3, [r7, #20]
        break;
 800418e:	e002      	b.n	8004196 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004190:	2304      	movs	r3, #4
 8004192:	617b      	str	r3, [r7, #20]
        break;
 8004194:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004196:	f7fe ff1b 	bl	8002fd0 <HAL_GetTick>
 800419a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800419c:	e01b      	b.n	80041d6 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800419e:	f7fe ff17 	bl	8002fd0 <HAL_GetTick>
 80041a2:	4602      	mov	r2, r0
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	2b05      	cmp	r3, #5
 80041aa:	d914      	bls.n	80041d6 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	689a      	ldr	r2, [r3, #8]
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	4013      	ands	r3, r2
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00d      	beq.n	80041d6 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041be:	f043 0210 	orr.w	r2, r3, #16
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041ca:	f043 0201 	orr.w	r2, r3, #1
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e007      	b.n	80041e6 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	689a      	ldr	r2, [r3, #8]
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	4013      	ands	r3, r2
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d1dc      	bne.n	800419e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3720      	adds	r7, #32
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	a33fffff 	.word	0xa33fffff

080041f4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4618      	mov	r0, r3
 8004202:	f7ff f9c3 	bl	800358c <LL_ADC_IsEnabled>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d169      	bne.n	80042e0 <ADC_Enable+0xec>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	689a      	ldr	r2, [r3, #8]
 8004212:	4b36      	ldr	r3, [pc, #216]	@ (80042ec <ADC_Enable+0xf8>)
 8004214:	4013      	ands	r3, r2
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00d      	beq.n	8004236 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800421e:	f043 0210 	orr.w	r2, r3, #16
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800422a:	f043 0201 	orr.w	r2, r3, #1
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e055      	b.n	80042e2 <ADC_Enable+0xee>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4618      	mov	r0, r3
 800423c:	f7ff f97e 	bl	800353c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004240:	482b      	ldr	r0, [pc, #172]	@ (80042f0 <ADC_Enable+0xfc>)
 8004242:	f7fe ff08 	bl	8003056 <LL_ADC_GetCommonPathInternalCh>
 8004246:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004248:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800424c:	2b00      	cmp	r3, #0
 800424e:	d013      	beq.n	8004278 <ADC_Enable+0x84>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004250:	4b28      	ldr	r3, [pc, #160]	@ (80042f4 <ADC_Enable+0x100>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	099b      	lsrs	r3, r3, #6
 8004256:	4a28      	ldr	r2, [pc, #160]	@ (80042f8 <ADC_Enable+0x104>)
 8004258:	fba2 2303 	umull	r2, r3, r2, r3
 800425c:	099b      	lsrs	r3, r3, #6
 800425e:	1c5a      	adds	r2, r3, #1
 8004260:	4613      	mov	r3, r2
 8004262:	005b      	lsls	r3, r3, #1
 8004264:	4413      	add	r3, r2
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 800426a:	e002      	b.n	8004272 <ADC_Enable+0x7e>
      {
        wait_loop_index--;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	3b01      	subs	r3, #1
 8004270:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d1f9      	bne.n	800426c <ADC_Enable+0x78>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004278:	f7fe feaa 	bl	8002fd0 <HAL_GetTick>
 800427c:	60b8      	str	r0, [r7, #8]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800427e:	e028      	b.n	80042d2 <ADC_Enable+0xde>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4618      	mov	r0, r3
 8004286:	f7ff f981 	bl	800358c <LL_ADC_IsEnabled>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d104      	bne.n	800429a <ADC_Enable+0xa6>
      {
        LL_ADC_Enable(hadc->Instance);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4618      	mov	r0, r3
 8004296:	f7ff f951 	bl	800353c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800429a:	f7fe fe99 	bl	8002fd0 <HAL_GetTick>
 800429e:	4602      	mov	r2, r0
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	2b02      	cmp	r3, #2
 80042a6:	d914      	bls.n	80042d2 <ADC_Enable+0xde>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d00d      	beq.n	80042d2 <ADC_Enable+0xde>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042ba:	f043 0210 	orr.w	r2, r3, #16
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042c6:	f043 0201 	orr.w	r2, r3, #1
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e007      	b.n	80042e2 <ADC_Enable+0xee>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0301 	and.w	r3, r3, #1
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d1cf      	bne.n	8004280 <ADC_Enable+0x8c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3710      	adds	r7, #16
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	8000003f 	.word	0x8000003f
 80042f0:	42028300 	.word	0x42028300
 80042f4:	20000004 	.word	0x20000004
 80042f8:	053e2d63 	.word	0x053e2d63

080042fc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4618      	mov	r0, r3
 800430a:	f7ff f952 	bl	80035b2 <LL_ADC_IsDisableOngoing>
 800430e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4618      	mov	r0, r3
 8004316:	f7ff f939 	bl	800358c <LL_ADC_IsEnabled>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d047      	beq.n	80043b0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d144      	bne.n	80043b0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	f003 030d 	and.w	r3, r3, #13
 8004330:	2b01      	cmp	r3, #1
 8004332:	d10c      	bne.n	800434e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4618      	mov	r0, r3
 800433a:	f7ff f913 	bl	8003564 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2203      	movs	r2, #3
 8004344:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004346:	f7fe fe43 	bl	8002fd0 <HAL_GetTick>
 800434a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800434c:	e029      	b.n	80043a2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004352:	f043 0210 	orr.w	r2, r3, #16
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800435e:	f043 0201 	orr.w	r2, r3, #1
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e023      	b.n	80043b2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800436a:	f7fe fe31 	bl	8002fd0 <HAL_GetTick>
 800436e:	4602      	mov	r2, r0
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	2b02      	cmp	r3, #2
 8004376:	d914      	bls.n	80043a2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f003 0301 	and.w	r3, r3, #1
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00d      	beq.n	80043a2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800438a:	f043 0210 	orr.w	r2, r3, #16
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004396:	f043 0201 	orr.w	r2, r3, #1
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e007      	b.n	80043b2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f003 0301 	and.w	r3, r3, #1
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d1dc      	bne.n	800436a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3710      	adds	r7, #16
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}

080043ba <LL_ADC_StartCalibration>:
{
 80043ba:	b480      	push	{r7}
 80043bc:	b083      	sub	sp, #12
 80043be:	af00      	add	r7, sp, #0
 80043c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80043ca:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80043ce:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	609a      	str	r2, [r3, #8]
}
 80043d6:	bf00      	nop
 80043d8:	370c      	adds	r7, #12
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr

080043e2 <LL_ADC_IsCalibrationOnGoing>:
{
 80043e2:	b480      	push	{r7}
 80043e4:	b083      	sub	sp, #12
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80043f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80043f6:	d101      	bne.n	80043fc <LL_ADC_IsCalibrationOnGoing+0x1a>
 80043f8:	2301      	movs	r3, #1
 80043fa:	e000      	b.n	80043fe <LL_ADC_IsCalibrationOnGoing+0x1c>
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	370c      	adds	r7, #12
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
	...

0800440c <HAL_ADCEx_Calibration_Start>:
  *         This parameter can be one of the following values:
  *           @arg @ref ADC_SINGLE_ENDED      Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
  UNUSED(SingleDiff);
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004416:	2300      	movs	r3, #0
 8004418:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004420:	2b01      	cmp	r3, #1
 8004422:	d101      	bne.n	8004428 <HAL_ADCEx_Calibration_Start+0x1c>
 8004424:	2302      	movs	r3, #2
 8004426:	e04c      	b.n	80044c2 <HAL_ADCEx_Calibration_Start+0xb6>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f7ff ff63 	bl	80042fc <ADC_Disable>
 8004436:	4603      	mov	r3, r0
 8004438:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800443a:	7bfb      	ldrb	r3, [r7, #15]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d135      	bne.n	80044ac <HAL_ADCEx_Calibration_Start+0xa0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004444:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004448:	f023 0302 	bic.w	r3, r3, #2
 800444c:	f043 0202 	orr.w	r2, r3, #2
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	659a      	str	r2, [r3, #88]	@ 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    /* Start ADC calibration */
    LL_ADC_StartCalibration(hadc->Instance);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4618      	mov	r0, r3
 800445a:	f7ff ffae 	bl	80043ba <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800445e:	e014      	b.n	800448a <HAL_ADCEx_Calibration_Start+0x7e>
    {

      wait_loop_index++;
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	3301      	adds	r3, #1
 8004464:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	4a18      	ldr	r2, [pc, #96]	@ (80044cc <HAL_ADCEx_Calibration_Start+0xc0>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d90d      	bls.n	800448a <HAL_ADCEx_Calibration_Start+0x7e>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004472:	f023 0312 	bic.w	r3, r3, #18
 8004476:	f043 0210 	orr.w	r2, r3, #16
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	659a      	str	r2, [r3, #88]	@ 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e01b      	b.n	80044c2 <HAL_ADCEx_Calibration_Start+0xb6>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4618      	mov	r0, r3
 8004490:	f7ff ffa7 	bl	80043e2 <LL_ADC_IsCalibrationOnGoing>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1e2      	bne.n	8004460 <HAL_ADCEx_Calibration_Start+0x54>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800449e:	f023 0303 	bic.w	r3, r3, #3
 80044a2:	f043 0201 	orr.w	r2, r3, #1
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	659a      	str	r2, [r3, #88]	@ 0x58
 80044aa:	e005      	b.n	80044b8 <HAL_ADCEx_Calibration_Start+0xac>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044b0:	f043 0210 	orr.w	r2, r3, #16
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 80044c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3710      	adds	r7, #16
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	0005e8ff 	.word	0x0005e8ff

080044d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b085      	sub	sp, #20
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f003 0307 	and.w	r3, r3, #7
 80044de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044e0:	4b0c      	ldr	r3, [pc, #48]	@ (8004514 <__NVIC_SetPriorityGrouping+0x44>)
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044e6:	68ba      	ldr	r2, [r7, #8]
 80044e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80044ec:	4013      	ands	r3, r2
 80044ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80044fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004500:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004502:	4a04      	ldr	r2, [pc, #16]	@ (8004514 <__NVIC_SetPriorityGrouping+0x44>)
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	60d3      	str	r3, [r2, #12]
}
 8004508:	bf00      	nop
 800450a:	3714      	adds	r7, #20
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr
 8004514:	e000ed00 	.word	0xe000ed00

08004518 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004518:	b480      	push	{r7}
 800451a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800451c:	4b04      	ldr	r3, [pc, #16]	@ (8004530 <__NVIC_GetPriorityGrouping+0x18>)
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	0a1b      	lsrs	r3, r3, #8
 8004522:	f003 0307 	and.w	r3, r3, #7
}
 8004526:	4618      	mov	r0, r3
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr
 8004530:	e000ed00 	.word	0xe000ed00

08004534 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	4603      	mov	r3, r0
 800453c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800453e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004542:	2b00      	cmp	r3, #0
 8004544:	db0b      	blt.n	800455e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004546:	79fb      	ldrb	r3, [r7, #7]
 8004548:	f003 021f 	and.w	r2, r3, #31
 800454c:	4907      	ldr	r1, [pc, #28]	@ (800456c <__NVIC_EnableIRQ+0x38>)
 800454e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004552:	095b      	lsrs	r3, r3, #5
 8004554:	2001      	movs	r0, #1
 8004556:	fa00 f202 	lsl.w	r2, r0, r2
 800455a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800455e:	bf00      	nop
 8004560:	370c      	adds	r7, #12
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	e000e100 	.word	0xe000e100

08004570 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	4603      	mov	r3, r0
 8004578:	6039      	str	r1, [r7, #0]
 800457a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800457c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004580:	2b00      	cmp	r3, #0
 8004582:	db0a      	blt.n	800459a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	b2da      	uxtb	r2, r3
 8004588:	490c      	ldr	r1, [pc, #48]	@ (80045bc <__NVIC_SetPriority+0x4c>)
 800458a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800458e:	0112      	lsls	r2, r2, #4
 8004590:	b2d2      	uxtb	r2, r2
 8004592:	440b      	add	r3, r1
 8004594:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004598:	e00a      	b.n	80045b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	b2da      	uxtb	r2, r3
 800459e:	4908      	ldr	r1, [pc, #32]	@ (80045c0 <__NVIC_SetPriority+0x50>)
 80045a0:	79fb      	ldrb	r3, [r7, #7]
 80045a2:	f003 030f 	and.w	r3, r3, #15
 80045a6:	3b04      	subs	r3, #4
 80045a8:	0112      	lsls	r2, r2, #4
 80045aa:	b2d2      	uxtb	r2, r2
 80045ac:	440b      	add	r3, r1
 80045ae:	761a      	strb	r2, [r3, #24]
}
 80045b0:	bf00      	nop
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr
 80045bc:	e000e100 	.word	0xe000e100
 80045c0:	e000ed00 	.word	0xe000ed00

080045c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b089      	sub	sp, #36	@ 0x24
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f003 0307 	and.w	r3, r3, #7
 80045d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	f1c3 0307 	rsb	r3, r3, #7
 80045de:	2b04      	cmp	r3, #4
 80045e0:	bf28      	it	cs
 80045e2:	2304      	movcs	r3, #4
 80045e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	3304      	adds	r3, #4
 80045ea:	2b06      	cmp	r3, #6
 80045ec:	d902      	bls.n	80045f4 <NVIC_EncodePriority+0x30>
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	3b03      	subs	r3, #3
 80045f2:	e000      	b.n	80045f6 <NVIC_EncodePriority+0x32>
 80045f4:	2300      	movs	r3, #0
 80045f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004602:	43da      	mvns	r2, r3
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	401a      	ands	r2, r3
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800460c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	fa01 f303 	lsl.w	r3, r1, r3
 8004616:	43d9      	mvns	r1, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800461c:	4313      	orrs	r3, r2
         );
}
 800461e:	4618      	mov	r0, r3
 8004620:	3724      	adds	r7, #36	@ 0x24
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr

0800462a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800462a:	b580      	push	{r7, lr}
 800462c:	b082      	sub	sp, #8
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f7ff ff4c 	bl	80044d0 <__NVIC_SetPriorityGrouping>
}
 8004638:	bf00      	nop
 800463a:	3708      	adds	r7, #8
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b086      	sub	sp, #24
 8004644:	af00      	add	r7, sp, #0
 8004646:	4603      	mov	r3, r0
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	607a      	str	r2, [r7, #4]
 800464c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_PRIO_INTERRUPT(IRQn));
  prioritygroup = NVIC_GetPriorityGrouping();
 800464e:	f7ff ff63 	bl	8004518 <__NVIC_GetPriorityGrouping>
 8004652:	6178      	str	r0, [r7, #20]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority, prioritygroup));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority, prioritygroup));

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	68b9      	ldr	r1, [r7, #8]
 8004658:	6978      	ldr	r0, [r7, #20]
 800465a:	f7ff ffb3 	bl	80045c4 <NVIC_EncodePriority>
 800465e:	4602      	mov	r2, r0
 8004660:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004664:	4611      	mov	r1, r2
 8004666:	4618      	mov	r0, r3
 8004668:	f7ff ff82 	bl	8004570 <__NVIC_SetPriority>
}
 800466c:	bf00      	nop
 800466e:	3718      	adds	r7, #24
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *         to the appropriate CMSIS device file (stm32u3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
 800467a:	4603      	mov	r3, r0
 800467c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800467e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004682:	4618      	mov	r0, r3
 8004684:	f7ff ff56 	bl	8004534 <__NVIC_EnableIRQ>
}
 8004688:	bf00      	nop
 800468a:	3708      	adds	r7, #8
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	3b01      	subs	r3, #1
 800469c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80046a0:	d301      	bcc.n	80046a6 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80046a2:	2301      	movs	r3, #1
 80046a4:	e00d      	b.n	80046c2 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80046a6:	4a0a      	ldr	r2, [pc, #40]	@ (80046d0 <HAL_SYSTICK_Config+0x40>)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	3b01      	subs	r3, #1
 80046ac:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80046ae:	4b08      	ldr	r3, [pc, #32]	@ (80046d0 <HAL_SYSTICK_Config+0x40>)
 80046b0:	2200      	movs	r2, #0
 80046b2:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80046b4:	4b06      	ldr	r3, [pc, #24]	@ (80046d0 <HAL_SYSTICK_Config+0x40>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a05      	ldr	r2, [pc, #20]	@ (80046d0 <HAL_SYSTICK_Config+0x40>)
 80046ba:	f043 0303 	orr.w	r3, r3, #3
 80046be:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	370c      	adds	r7, #12
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop
 80046d0:	e000e010 	.word	0xe000e010

080046d4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8 AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2b04      	cmp	r3, #4
 80046e0:	d844      	bhi.n	800476c <HAL_SYSTICK_CLKSourceConfig+0x98>
 80046e2:	a201      	add	r2, pc, #4	@ (adr r2, 80046e8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80046e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e8:	0800470b 	.word	0x0800470b
 80046ec:	08004729 	.word	0x08004729
 80046f0:	0800474b 	.word	0x0800474b
 80046f4:	0800476d 	.word	0x0800476d
 80046f8:	080046fd 	.word	0x080046fd
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80046fc:	4b1f      	ldr	r3, [pc, #124]	@ (800477c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a1e      	ldr	r2, [pc, #120]	@ (800477c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004702:	f043 0304 	orr.w	r3, r3, #4
 8004706:	6013      	str	r3, [r2, #0]
      break;
 8004708:	e031      	b.n	800476e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800470a:	4b1c      	ldr	r3, [pc, #112]	@ (800477c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a1b      	ldr	r2, [pc, #108]	@ (800477c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004710:	f023 0304 	bic.w	r3, r3, #4
 8004714:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8004716:	4b1a      	ldr	r3, [pc, #104]	@ (8004780 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004718:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800471c:	4a18      	ldr	r2, [pc, #96]	@ (8004780 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800471e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8004722:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
      break;
 8004726:	e022      	b.n	800476e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8004728:	4b14      	ldr	r3, [pc, #80]	@ (800477c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a13      	ldr	r2, [pc, #76]	@ (800477c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800472e:	f023 0304 	bic.w	r3, r3, #4
 8004732:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8004734:	4b12      	ldr	r3, [pc, #72]	@ (8004780 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004736:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800473a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800473e:	4a10      	ldr	r2, [pc, #64]	@ (8004780 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004740:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004744:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
      break;
 8004748:	e011      	b.n	800476e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800474a:	4b0c      	ldr	r3, [pc, #48]	@ (800477c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a0b      	ldr	r2, [pc, #44]	@ (800477c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004750:	f023 0304 	bic.w	r3, r3, #4
 8004754:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8004756:	4b0a      	ldr	r3, [pc, #40]	@ (8004780 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004758:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800475c:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8004760:	4a07      	ldr	r2, [pc, #28]	@ (8004780 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004762:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004766:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
      break;
 800476a:	e000      	b.n	800476e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 800476c:	bf00      	nop
  }
}
 800476e:	bf00      	nop
 8004770:	370c      	adds	r7, #12
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	e000e010 	.word	0xe000e010
 8004780:	40030c00 	.word	0x40030c00

08004784 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b082      	sub	sp, #8
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d101      	bne.n	8004796 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e014      	b.n	80047c0 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	791b      	ldrb	r3, [r3, #4]
 800479a:	b2db      	uxtb	r3, r3
 800479c:	2b00      	cmp	r3, #0
 800479e:	d105      	bne.n	80047ac <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f7fd fd76 	bl	8002298 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2202      	movs	r2, #2
 80047b0:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80047be:	2300      	movs	r3, #0
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3708      	adds	r7, #8
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b085      	sub	sp, #20
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d101      	bne.n	80047dc <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e056      	b.n	800488a <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	795b      	ldrb	r3, [r3, #5]
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d101      	bne.n	80047e8 <HAL_DAC_Start+0x20>
 80047e4:	2302      	movs	r3, #2
 80047e6:	e050      	b.n	800488a <HAL_DAC_Start+0xc2>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2202      	movs	r2, #2
 80047f2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	6819      	ldr	r1, [r3, #0]
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	f003 0310 	and.w	r3, r3, #16
 8004800:	2201      	movs	r2, #1
 8004802:	409a      	lsls	r2, r3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	430a      	orrs	r2, r1
 800480a:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800480c:	4b22      	ldr	r3, [pc, #136]	@ (8004898 <HAL_DAC_Start+0xd0>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	099b      	lsrs	r3, r3, #6
 8004812:	4a22      	ldr	r2, [pc, #136]	@ (800489c <HAL_DAC_Start+0xd4>)
 8004814:	fba2 2303 	umull	r2, r3, r2, r3
 8004818:	099b      	lsrs	r3, r3, #6
 800481a:	3301      	adds	r3, #1
 800481c:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 800481e:	e002      	b.n	8004826 <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	3b01      	subs	r3, #1
 8004824:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d1f9      	bne.n	8004820 <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d10f      	bne.n	8004852 <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800483c:	2b02      	cmp	r3, #2
 800483e:	d11d      	bne.n	800487c <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	685a      	ldr	r2, [r3, #4]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f042 0201 	orr.w	r2, r2, #1
 800484e:	605a      	str	r2, [r3, #4]
 8004850:	e014      	b.n	800487c <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	f003 0310 	and.w	r3, r3, #16
 8004862:	2102      	movs	r1, #2
 8004864:	fa01 f303 	lsl.w	r3, r1, r3
 8004868:	429a      	cmp	r2, r3
 800486a:	d107      	bne.n	800487c <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	685a      	ldr	r2, [r3, #4]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f042 0202 	orr.w	r2, r2, #2
 800487a:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	3714      	adds	r7, #20
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr
 8004896:	bf00      	nop
 8004898:	20000004 	.word	0x20000004
 800489c:	053e2d63 	.word	0x053e2d63

080048a0 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b087      	sub	sp, #28
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	60b9      	str	r1, [r7, #8]
 80048aa:	607a      	str	r2, [r7, #4]
 80048ac:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80048ae:	2300      	movs	r3, #0
 80048b0:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d101      	bne.n	80048bc <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e018      	b.n	80048ee <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d105      	bne.n	80048da <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80048ce:	697a      	ldr	r2, [r7, #20]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4413      	add	r3, r2
 80048d4:	3308      	adds	r3, #8
 80048d6:	617b      	str	r3, [r7, #20]
 80048d8:	e004      	b.n	80048e4 <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80048da:	697a      	ldr	r2, [r7, #20]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4413      	add	r3, r2
 80048e0:	3314      	adds	r3, #20
 80048e2:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	461a      	mov	r2, r3
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	371c      	adds	r7, #28
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
	...

080048fc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b08a      	sub	sp, #40	@ 0x28
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004908:	2300      	movs	r3, #0
 800490a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d002      	beq.n	8004918 <HAL_DAC_ConfigChannel+0x1c>
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d101      	bne.n	800491c <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e17b      	b.n	8004c14 <HAL_DAC_ConfigChannel+0x318>
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	795b      	ldrb	r3, [r3, #5]
 8004920:	2b01      	cmp	r3, #1
 8004922:	d101      	bne.n	8004928 <HAL_DAC_ConfigChannel+0x2c>
 8004924:	2302      	movs	r3, #2
 8004926:	e175      	b.n	8004c14 <HAL_DAC_ConfigChannel+0x318>
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2201      	movs	r2, #1
 800492c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2202      	movs	r2, #2
 8004932:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	2b04      	cmp	r3, #4
 800493a:	d17a      	bne.n	8004a32 <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800493c:	f7fe fb48 	bl	8002fd0 <HAL_GetTick>
 8004940:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d13d      	bne.n	80049c4 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004948:	e018      	b.n	800497c <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800494a:	f7fe fb41 	bl	8002fd0 <HAL_GetTick>
 800494e:	4602      	mov	r2, r0
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	2b01      	cmp	r3, #1
 8004956:	d911      	bls.n	800497c <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800495e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d00a      	beq.n	800497c <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	f043 0208 	orr.w	r2, r3, #8
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2203      	movs	r2, #3
 8004976:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004978:	2303      	movs	r3, #3
 800497a:	e14b      	b.n	8004c14 <HAL_DAC_ConfigChannel+0x318>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004982:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d1df      	bne.n	800494a <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68ba      	ldr	r2, [r7, #8]
 8004990:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004992:	641a      	str	r2, [r3, #64]	@ 0x40
 8004994:	e020      	b.n	80049d8 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004996:	f7fe fb1b 	bl	8002fd0 <HAL_GetTick>
 800499a:	4602      	mov	r2, r0
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	1ad3      	subs	r3, r2, r3
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d90f      	bls.n	80049c4 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	da0a      	bge.n	80049c4 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	f043 0208 	orr.w	r2, r3, #8
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2203      	movs	r2, #3
 80049be:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	e127      	b.n	8004c14 <HAL_DAC_ConfigChannel+0x318>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	dbe3      	blt.n	8004996 <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68ba      	ldr	r2, [r7, #8]
 80049d4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80049d6:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f003 0310 	and.w	r3, r3, #16
 80049e4:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80049e8:	fa01 f303 	lsl.w	r3, r1, r3
 80049ec:	43db      	mvns	r3, r3
 80049ee:	ea02 0103 	and.w	r1, r2, r3
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f003 0310 	and.w	r3, r3, #16
 80049fc:	409a      	lsls	r2, r3
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	430a      	orrs	r2, r1
 8004a04:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f003 0310 	and.w	r3, r3, #16
 8004a12:	21ff      	movs	r1, #255	@ 0xff
 8004a14:	fa01 f303 	lsl.w	r3, r1, r3
 8004a18:	43db      	mvns	r3, r3
 8004a1a:	ea02 0103 	and.w	r1, r2, r3
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f003 0310 	and.w	r3, r3, #16
 8004a28:	409a      	lsls	r2, r3
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	430a      	orrs	r2, r1
 8004a30:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  /* Autonomous mode configuration */
  MODIFY_REG(hdac->Instance->AUTOCR, DAC_AUTOCR_AUTOMODE, sConfig->DAC_AutonomousMode);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a38:	f423 0180 	bic.w	r1, r3, #4194304	@ 0x400000
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	685a      	ldr	r2, [r3, #4]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	430a      	orrs	r2, r1
 8004a46:	655a      	str	r2, [r3, #84]	@ 0x54

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	69db      	ldr	r3, [r3, #28]
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d11d      	bne.n	8004a8c <HAL_DAC_ConfigChannel+0x190>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a56:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f003 0310 	and.w	r3, r3, #16
 8004a5e:	221f      	movs	r2, #31
 8004a60:	fa02 f303 	lsl.w	r3, r2, r3
 8004a64:	43db      	mvns	r3, r3
 8004a66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a68:	4013      	ands	r3, r2
 8004a6a:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	6a1b      	ldr	r3, [r3, #32]
 8004a70:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f003 0310 	and.w	r3, r3, #16
 8004a78:	697a      	ldr	r2, [r7, #20]
 8004a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a80:	4313      	orrs	r3, r2
 8004a82:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a8a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a92:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f003 0310 	and.w	r3, r3, #16
 8004a9a:	2207      	movs	r2, #7
 8004a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa0:	43db      	mvns	r3, r3
 8004aa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	699b      	ldr	r3, [r3, #24]
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d102      	bne.n	8004ab6 <HAL_DAC_ConfigChannel+0x1ba>
  {
    connectOnChip = 0x00000000UL;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	623b      	str	r3, [r7, #32]
 8004ab4:	e00f      	b.n	8004ad6 <HAL_DAC_ConfigChannel+0x1da>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d102      	bne.n	8004ac4 <HAL_DAC_ConfigChannel+0x1c8>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	623b      	str	r3, [r7, #32]
 8004ac2:	e008      	b.n	8004ad6 <HAL_DAC_ConfigChannel+0x1da>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	695b      	ldr	r3, [r3, #20]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d102      	bne.n	8004ad2 <HAL_DAC_ConfigChannel+0x1d6>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004acc:	2301      	movs	r3, #1
 8004ace:	623b      	str	r3, [r7, #32]
 8004ad0:	e001      	b.n	8004ad6 <HAL_DAC_ConfigChannel+0x1da>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	68da      	ldr	r2, [r3, #12]
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	695b      	ldr	r3, [r3, #20]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	6a3a      	ldr	r2, [r7, #32]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f003 0310 	and.w	r3, r3, #16
 8004aec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004af0:	fa02 f303 	lsl.w	r3, r2, r3
 8004af4:	43db      	mvns	r3, r3
 8004af6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004af8:	4013      	ands	r3, r2
 8004afa:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	7a1b      	ldrb	r3, [r3, #8]
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d102      	bne.n	8004b0a <HAL_DAC_ConfigChannel+0x20e>
 8004b04:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004b08:	e000      	b.n	8004b0c <HAL_DAC_ConfigChannel+0x210>
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	697a      	ldr	r2, [r7, #20]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f003 0310 	and.w	r3, r3, #16
 8004b18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b20:	43db      	mvns	r3, r3
 8004b22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b24:	4013      	ands	r3, r2
 8004b26:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	7a5b      	ldrb	r3, [r3, #9]
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d102      	bne.n	8004b36 <HAL_DAC_ConfigChannel+0x23a>
 8004b30:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004b34:	e000      	b.n	8004b38 <HAL_DAC_ConfigChannel+0x23c>
 8004b36:	2300      	movs	r3, #0
 8004b38:	697a      	ldr	r2, [r7, #20]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8004b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b40:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8004b44:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d10b      	bne.n	8004b66 <HAL_DAC_ConfigChannel+0x26a>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8004b4e:	f001 f93f 	bl	8005dd0 <HAL_RCC_GetHCLKFreq>
 8004b52:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_48MHZ)
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	4a31      	ldr	r2, [pc, #196]	@ (8004c1c <HAL_DAC_ConfigChannel+0x320>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d90a      	bls.n	8004b72 <HAL_DAC_ConfigChannel+0x276>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_48MHZ;
 8004b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b5e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004b62:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b64:	e006      	b.n	8004b74 <HAL_DAC_ConfigChannel+0x278>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b70:	e000      	b.n	8004b74 <HAL_DAC_ConfigChannel+0x278>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8004b72:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f003 0310 	and.w	r3, r3, #16
 8004b7a:	697a      	ldr	r2, [r7, #20]
 8004b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b82:	4313      	orrs	r3, r2
 8004b84:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b8c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	6819      	ldr	r1, [r3, #0]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f003 0310 	and.w	r3, r3, #16
 8004b9a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba2:	43da      	mvns	r2, r3
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	400a      	ands	r2, r1
 8004baa:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f003 0310 	and.w	r3, r3, #16
 8004bba:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8004bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc2:	43db      	mvns	r3, r3
 8004bc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f003 0310 	and.w	r3, r3, #16
 8004bd6:	697a      	ldr	r2, [r7, #20]
 8004bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bde:	4313      	orrs	r3, r2
 8004be0:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004be8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	6819      	ldr	r1, [r3, #0]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f003 0310 	and.w	r3, r3, #16
 8004bf6:	22c0      	movs	r2, #192	@ 0xc0
 8004bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfc:	43da      	mvns	r2, r3
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	400a      	ands	r2, r1
 8004c04:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8004c12:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3728      	adds	r7, #40	@ 0x28
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}
 8004c1c:	02dc6c00 	.word	0x02dc6c00

08004c20 <HAL_DACEx_SetConfigAutonomousMode>:
  * @param sConfig pointer to Autonomous mode structure parameters.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_SetConfigAutonomousMode(DAC_HandleTypeDef *hdac,
                                                    const DAC_AutonomousModeConfTypeDef *sConfig)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b083      	sub	sp, #12
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle and autonomous mode configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d002      	beq.n	8004c36 <HAL_DACEx_SetConfigAutonomousMode+0x16>
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d101      	bne.n	8004c3a <HAL_DACEx_SetConfigAutonomousMode+0x1a>
  {
    return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e024      	b.n	8004c84 <HAL_DACEx_SetConfigAutonomousMode+0x64>
  }

  assert_param(IS_DAC_AUTONOMOUS(sConfig->AutonomousModeState));

  if (hdac->State == HAL_DAC_STATE_READY)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	791b      	ldrb	r3, [r3, #4]
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d11e      	bne.n	8004c82 <HAL_DACEx_SetConfigAutonomousMode+0x62>
  {
    /* Process Locked */
    __HAL_LOCK(hdac);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	795b      	ldrb	r3, [r3, #5]
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d101      	bne.n	8004c50 <HAL_DACEx_SetConfigAutonomousMode+0x30>
 8004c4c:	2302      	movs	r3, #2
 8004c4e:	e019      	b.n	8004c84 <HAL_DACEx_SetConfigAutonomousMode+0x64>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	715a      	strb	r2, [r3, #5]

    hdac->State = HAL_DAC_STATE_BUSY;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2202      	movs	r2, #2
 8004c5a:	711a      	strb	r2, [r3, #4]

    /* NOTE: The set/reset of the bit automode in the AUTOCR
             register is for both dac_channel1 and dac_channel2 */

    /* Update the AUTOCR register */
    MODIFY_REG(hdac->Instance->AUTOCR, DAC_AUTOCR_AUTOMODE, sConfig->AutonomousModeState);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c62:	f423 0180 	bic.w	r1, r3, #4194304	@ 0x400000
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Update the DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2201      	movs	r2, #1
 8004c76:	711a      	strb	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdac);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	715a      	strb	r2, [r3, #5]

    return HAL_OK;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	e000      	b.n	8004c84 <HAL_DACEx_SetConfigAutonomousMode+0x64>
  }
  else
  {
    return HAL_BUSY;
 8004c82:	2302      	movs	r3, #2
  }
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <HAL_EXTI_RegisterCallback>:
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti,
                                            EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8004c90:	b480      	push	{r7}
 8004c92:	b087      	sub	sp, #28
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	460b      	mov	r3, r1
 8004c9a:	607a      	str	r2, [r7, #4]
 8004c9c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8004ca2:	7afb      	ldrb	r3, [r7, #11]
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	d011      	beq.n	8004ccc <HAL_EXTI_RegisterCallback+0x3c>
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	dc13      	bgt.n	8004cd4 <HAL_EXTI_RegisterCallback+0x44>
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d002      	beq.n	8004cb6 <HAL_EXTI_RegisterCallback+0x26>
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d007      	beq.n	8004cc4 <HAL_EXTI_RegisterCallback+0x34>
 8004cb4:	e00e      	b.n	8004cd4 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	609a      	str	r2, [r3, #8]
      break;
 8004cc2:	e00a      	b.n	8004cda <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	605a      	str	r2, [r3, #4]
      break;
 8004cca:	e006      	b.n	8004cda <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	609a      	str	r2, [r3, #8]
      break;
 8004cd2:	e002      	b.n	8004cda <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	75fb      	strb	r3, [r7, #23]
      break;
 8004cd8:	bf00      	nop
  }

  return status;
 8004cda:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	371c      	adds	r7, #28
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d101      	bne.n	8004cfc <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e003      	b.n	8004d04 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	683a      	ldr	r2, [r7, #0]
 8004d00:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004d02:	2300      	movs	r3, #0
  }
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	370c      	adds	r7, #12
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b086      	sub	sp, #24
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8004d18:	2300      	movs	r3, #0
 8004d1a:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 031f 	and.w	r3, r3, #31
 8004d24:	2201      	movs	r2, #1
 8004d26:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2a:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	015a      	lsls	r2, r3, #5
 8004d30:	4b17      	ldr	r3, [pc, #92]	@ (8004d90 <HAL_EXTI_IRQHandler+0x80>)
 8004d32:	4413      	add	r3, r2
 8004d34:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	693a      	ldr	r2, [r7, #16]
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d009      	beq.n	8004d5a <HAL_EXTI_IRQHandler+0x4a>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	693a      	ldr	r2, [r7, #16]
 8004d4a:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d002      	beq.n	8004d5a <HAL_EXTI_IRQHandler+0x4a>
    {
      hexti->RisingCallback();
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	015a      	lsls	r2, r3, #5
 8004d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8004d94 <HAL_EXTI_IRQHandler+0x84>)
 8004d60:	4413      	add	r3, r2
 8004d62:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	693a      	ldr	r2, [r7, #16]
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d009      	beq.n	8004d88 <HAL_EXTI_IRQHandler+0x78>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	693a      	ldr	r2, [r7, #16]
 8004d78:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d002      	beq.n	8004d88 <HAL_EXTI_IRQHandler+0x78>
    {
      hexti->FallingCallback();
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	4798      	blx	r3
    }
  }
}
 8004d88:	bf00      	nop
 8004d8a:	3718      	adds	r7, #24
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	4003200c 	.word	0x4003200c
 8004d94:	40032010 	.word	0x40032010

08004d98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b087      	sub	sp, #28
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004da2:	2300      	movs	r3, #0
 8004da4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004da6:	e162      	b.n	800506e <HAL_GPIO_Init+0x2d6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	2101      	movs	r1, #1
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	fa01 f303 	lsl.w	r3, r1, r3
 8004db4:	4013      	ands	r3, r2
 8004db6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	f000 8154 	beq.w	8005068 <HAL_GPIO_Init+0x2d0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	f003 0303 	and.w	r3, r3, #3
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d005      	beq.n	8004dd8 <HAL_GPIO_Init+0x40>
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	f003 0303 	and.w	r3, r3, #3
 8004dd4:	2b02      	cmp	r3, #2
 8004dd6:	d130      	bne.n	8004e3a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	005b      	lsls	r3, r3, #1
 8004de2:	2203      	movs	r2, #3
 8004de4:	fa02 f303 	lsl.w	r3, r2, r3
 8004de8:	43db      	mvns	r3, r3
 8004dea:	693a      	ldr	r2, [r7, #16]
 8004dec:	4013      	ands	r3, r2
 8004dee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	68da      	ldr	r2, [r3, #12]
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	005b      	lsls	r3, r3, #1
 8004df8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfc:	693a      	ldr	r2, [r7, #16]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	693a      	ldr	r2, [r7, #16]
 8004e06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004e0e:	2201      	movs	r2, #1
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	fa02 f303 	lsl.w	r3, r2, r3
 8004e16:	43db      	mvns	r3, r3
 8004e18:	693a      	ldr	r2, [r7, #16]
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	091b      	lsrs	r3, r3, #4
 8004e24:	f003 0201 	and.w	r2, r3, #1
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2e:	693a      	ldr	r2, [r7, #16]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	693a      	ldr	r2, [r7, #16]
 8004e38:	605a      	str	r2, [r3, #4]
      }

      if (((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) ||
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	f003 0303 	and.w	r3, r3, #3
 8004e42:	2b03      	cmp	r3, #3
 8004e44:	d109      	bne.n	8004e5a <HAL_GPIO_Init+0xc2>
         (((GPIO_Init->Mode & GPIO_MODE) == MODE_ANALOG) && (GPIO_Init->Pull != GPIO_PULLUP)))
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) ||
 8004e4e:	2b03      	cmp	r3, #3
 8004e50:	d11b      	bne.n	8004e8a <HAL_GPIO_Init+0xf2>
         (((GPIO_Init->Mode & GPIO_MODE) == MODE_ANALOG) && (GPIO_Init->Pull != GPIO_PULLUP)))
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d017      	beq.n	8004e8a <HAL_GPIO_Init+0xf2>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	005b      	lsls	r3, r3, #1
 8004e64:	2203      	movs	r2, #3
 8004e66:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6a:	43db      	mvns	r3, r3
 8004e6c:	693a      	ldr	r2, [r7, #16]
 8004e6e:	4013      	ands	r3, r2
 8004e70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	689a      	ldr	r2, [r3, #8]
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	005b      	lsls	r3, r3, #1
 8004e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7e:	693a      	ldr	r2, [r7, #16]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	693a      	ldr	r2, [r7, #16]
 8004e88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	f003 0303 	and.w	r3, r3, #3
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d123      	bne.n	8004ede <HAL_GPIO_Init+0x146>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	08da      	lsrs	r2, r3, #3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	3208      	adds	r2, #8
 8004e9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ea2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	f003 0307 	and.w	r3, r3, #7
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	220f      	movs	r2, #15
 8004eae:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb2:	43db      	mvns	r3, r3
 8004eb4:	693a      	ldr	r2, [r7, #16]
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	691a      	ldr	r2, [r3, #16]
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	f003 0307 	and.w	r3, r3, #7
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eca:	693a      	ldr	r2, [r7, #16]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	08da      	lsrs	r2, r3, #3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	3208      	adds	r2, #8
 8004ed8:	6939      	ldr	r1, [r7, #16]
 8004eda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	005b      	lsls	r3, r3, #1
 8004ee8:	2203      	movs	r2, #3
 8004eea:	fa02 f303 	lsl.w	r3, r2, r3
 8004eee:	43db      	mvns	r3, r3
 8004ef0:	693a      	ldr	r2, [r7, #16]
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	f003 0203 	and.w	r2, r3, #3
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	005b      	lsls	r3, r3, #1
 8004f02:	fa02 f303 	lsl.w	r3, r2, r3
 8004f06:	693a      	ldr	r2, [r7, #16]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	693a      	ldr	r2, [r7, #16]
 8004f10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	f000 80a4 	beq.w	8005068 <HAL_GPIO_Init+0x2d0>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8004f20:	4a5a      	ldr	r2, [pc, #360]	@ (800508c <HAL_GPIO_Init+0x2f4>)
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	089b      	lsrs	r3, r3, #2
 8004f26:	3318      	adds	r3, #24
 8004f28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	f003 0303 	and.w	r3, r3, #3
 8004f34:	00db      	lsls	r3, r3, #3
 8004f36:	220f      	movs	r2, #15
 8004f38:	fa02 f303 	lsl.w	r3, r2, r3
 8004f3c:	43db      	mvns	r3, r3
 8004f3e:	693a      	ldr	r2, [r7, #16]
 8004f40:	4013      	ands	r3, r2
 8004f42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a52      	ldr	r2, [pc, #328]	@ (8005090 <HAL_GPIO_Init+0x2f8>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d025      	beq.n	8004f98 <HAL_GPIO_Init+0x200>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a51      	ldr	r2, [pc, #324]	@ (8005094 <HAL_GPIO_Init+0x2fc>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d01f      	beq.n	8004f94 <HAL_GPIO_Init+0x1fc>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4a50      	ldr	r2, [pc, #320]	@ (8005098 <HAL_GPIO_Init+0x300>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d019      	beq.n	8004f90 <HAL_GPIO_Init+0x1f8>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a4f      	ldr	r2, [pc, #316]	@ (800509c <HAL_GPIO_Init+0x304>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d013      	beq.n	8004f8c <HAL_GPIO_Init+0x1f4>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a4e      	ldr	r2, [pc, #312]	@ (80050a0 <HAL_GPIO_Init+0x308>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d00d      	beq.n	8004f88 <HAL_GPIO_Init+0x1f0>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a4d      	ldr	r2, [pc, #308]	@ (80050a4 <HAL_GPIO_Init+0x30c>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d007      	beq.n	8004f84 <HAL_GPIO_Init+0x1ec>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a4c      	ldr	r2, [pc, #304]	@ (80050a8 <HAL_GPIO_Init+0x310>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d101      	bne.n	8004f80 <HAL_GPIO_Init+0x1e8>
 8004f7c:	2307      	movs	r3, #7
 8004f7e:	e00c      	b.n	8004f9a <HAL_GPIO_Init+0x202>
 8004f80:	2310      	movs	r3, #16
 8004f82:	e00a      	b.n	8004f9a <HAL_GPIO_Init+0x202>
 8004f84:	2306      	movs	r3, #6
 8004f86:	e008      	b.n	8004f9a <HAL_GPIO_Init+0x202>
 8004f88:	2304      	movs	r3, #4
 8004f8a:	e006      	b.n	8004f9a <HAL_GPIO_Init+0x202>
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	e004      	b.n	8004f9a <HAL_GPIO_Init+0x202>
 8004f90:	2302      	movs	r3, #2
 8004f92:	e002      	b.n	8004f9a <HAL_GPIO_Init+0x202>
 8004f94:	2301      	movs	r3, #1
 8004f96:	e000      	b.n	8004f9a <HAL_GPIO_Init+0x202>
 8004f98:	2300      	movs	r3, #0
 8004f9a:	697a      	ldr	r2, [r7, #20]
 8004f9c:	f002 0203 	and.w	r2, r2, #3
 8004fa0:	00d2      	lsls	r2, r2, #3
 8004fa2:	4093      	lsls	r3, r2
 8004fa4:	693a      	ldr	r2, [r7, #16]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8004faa:	4938      	ldr	r1, [pc, #224]	@ (800508c <HAL_GPIO_Init+0x2f4>)
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	089b      	lsrs	r3, r3, #2
 8004fb0:	3318      	adds	r3, #24
 8004fb2:	693a      	ldr	r2, [r7, #16]
 8004fb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004fb8:	4b34      	ldr	r3, [pc, #208]	@ (800508c <HAL_GPIO_Init+0x2f4>)
 8004fba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	43db      	mvns	r3, r3
 8004fc4:	693a      	ldr	r2, [r7, #16]
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d003      	beq.n	8004fde <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004fd6:	693a      	ldr	r2, [r7, #16]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004fde:	4a2b      	ldr	r2, [pc, #172]	@ (800508c <HAL_GPIO_Init+0x2f4>)
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8004fe6:	4b29      	ldr	r3, [pc, #164]	@ (800508c <HAL_GPIO_Init+0x2f4>)
 8004fe8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	43db      	mvns	r3, r3
 8004ff2:	693a      	ldr	r2, [r7, #16]
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005000:	2b00      	cmp	r3, #0
 8005002:	d003      	beq.n	800500c <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8005004:	693a      	ldr	r2, [r7, #16]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	4313      	orrs	r3, r2
 800500a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800500c:	4a1f      	ldr	r2, [pc, #124]	@ (800508c <HAL_GPIO_Init+0x2f4>)
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005014:	4b1d      	ldr	r3, [pc, #116]	@ (800508c <HAL_GPIO_Init+0x2f4>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	43db      	mvns	r3, r3
 800501e:	693a      	ldr	r2, [r7, #16]
 8005020:	4013      	ands	r3, r2
 8005022:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800502c:	2b00      	cmp	r3, #0
 800502e:	d003      	beq.n	8005038 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8005030:	693a      	ldr	r2, [r7, #16]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	4313      	orrs	r3, r2
 8005036:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005038:	4a14      	ldr	r2, [pc, #80]	@ (800508c <HAL_GPIO_Init+0x2f4>)
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800503e:	4b13      	ldr	r3, [pc, #76]	@ (800508c <HAL_GPIO_Init+0x2f4>)
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	43db      	mvns	r3, r3
 8005048:	693a      	ldr	r2, [r7, #16]
 800504a:	4013      	ands	r3, r2
 800504c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005056:	2b00      	cmp	r3, #0
 8005058:	d003      	beq.n	8005062 <HAL_GPIO_Init+0x2ca>
        {
          temp |= iocurrent;
 800505a:	693a      	ldr	r2, [r7, #16]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	4313      	orrs	r3, r2
 8005060:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005062:	4a0a      	ldr	r2, [pc, #40]	@ (800508c <HAL_GPIO_Init+0x2f4>)
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	3301      	adds	r3, #1
 800506c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	fa22 f303 	lsr.w	r3, r2, r3
 8005078:	2b00      	cmp	r3, #0
 800507a:	f47f ae95 	bne.w	8004da8 <HAL_GPIO_Init+0x10>
  }
}
 800507e:	bf00      	nop
 8005080:	bf00      	nop
 8005082:	371c      	adds	r7, #28
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr
 800508c:	40032000 	.word	0x40032000
 8005090:	42020000 	.word	0x42020000
 8005094:	42020400 	.word	0x42020400
 8005098:	42020800 	.word	0x42020800
 800509c:	42020c00 	.word	0x42020c00
 80050a0:	42021000 	.word	0x42021000
 80050a4:	42021800 	.word	0x42021800
 80050a8:	42021c00 	.word	0x42021c00

080050ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b085      	sub	sp, #20
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	460b      	mov	r3, r1
 80050b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	691a      	ldr	r2, [r3, #16]
 80050bc:	887b      	ldrh	r3, [r7, #2]
 80050be:	4013      	ands	r3, r2
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d002      	beq.n	80050ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80050c4:	2301      	movs	r3, #1
 80050c6:	73fb      	strb	r3, [r7, #15]
 80050c8:	e001      	b.n	80050ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80050ca:	2300      	movs	r3, #0
 80050cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80050ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3714      	adds	r7, #20
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80050dc:	b480      	push	{r7}
 80050de:	b083      	sub	sp, #12
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	460b      	mov	r3, r1
 80050e6:	807b      	strh	r3, [r7, #2]
 80050e8:	4613      	mov	r3, r2
 80050ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80050ec:	787b      	ldrb	r3, [r7, #1]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d003      	beq.n	80050fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80050f2:	887a      	ldrh	r2, [r7, #2]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80050f8:	e002      	b.n	8005100 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80050fa:	887a      	ldrh	r2, [r7, #2]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005100:	bf00      	nop
 8005102:	370c      	adds	r7, #12
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp: OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b084      	sub	sp, #16
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005114:	2300      	movs	r3, #0
 8005116:	73fb      	strb	r3, [r7, #15]
  uint32_t updateotrlpotr;

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d101      	bne.n	8005122 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e0ca      	b.n	80052b8 <HAL_OPAMP_Init+0x1ac>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005128:	b2db      	uxtb	r3, r3
 800512a:	2b05      	cmp	r3, #5
 800512c:	d101      	bne.n	8005132 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e0c2      	b.n	80052b8 <HAL_OPAMP_Init+0x1ac>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005138:	b2db      	uxtb	r3, r3
 800513a:	2b02      	cmp	r3, #2
 800513c:	d101      	bne.n	8005142 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e0ba      	b.n	80052b8 <HAL_OPAMP_Init+0x1ac>
    {
      assert_param(IS_OPAMP_PGA_GAIN(hopamp->Init.PgaGain));
    }

    assert_param(IS_OPAMP_TRIMMING(hopamp->Init.UserTrimming));
    if ((hopamp->Init.UserTrimming) == OPAMP_TRIMMING_USER)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	69db      	ldr	r3, [r3, #28]
 8005146:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800514a:	d109      	bne.n	8005160 <HAL_OPAMP_Init+0x54>
    {
      if ((hopamp->Init.PowerMode == OPAMP_POWERMODE_NORMALPOWER_NORMALSPEED) || \
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d004      	beq.n	800515e <HAL_OPAMP_Init+0x52>
          (hopamp->Init.PowerMode == OPAMP_POWERMODE_NORMALPOWER_HIGHSPEED))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	689b      	ldr	r3, [r3, #8]
      if ((hopamp->Init.PowerMode == OPAMP_POWERMODE_NORMALPOWER_NORMALSPEED) || \
 8005158:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800515c:	e000      	b.n	8005160 <HAL_OPAMP_Init+0x54>
      {
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
 800515e:	bf00      	nop
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValuePLowPower));
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueNLowPower));
      }
    }

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005166:	b2db      	uxtb	r3, r3
 8005168:	2b00      	cmp	r3, #0
 800516a:	d103      	bne.n	8005174 <HAL_OPAMP_Init+0x68>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f7fd f8ef 	bl	8002358 <HAL_OPAMP_MspInit>
#endif /* USE_HAL_OPAMP_REGISTER_CALLBACKS */

    /* Set operating mode */
    CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALON);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005188:	601a      	str	r2, [r3, #0]

    if (hopamp->Init.Mode == OPAMP_PGA_MODE)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	2b08      	cmp	r3, #8
 8005190:	d119      	bne.n	80051c6 <HAL_OPAMP_Init+0xba>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_PGA, \
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	4b49      	ldr	r3, [pc, #292]	@ (80052c0 <HAL_OPAMP_Init+0x1b4>)
 800519a:	4013      	ands	r3, r2
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	6891      	ldr	r1, [r2, #8]
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	68d2      	ldr	r2, [r2, #12]
 80051a4:	4311      	orrs	r1, r2
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	6992      	ldr	r2, [r2, #24]
 80051aa:	4311      	orrs	r1, r2
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	6912      	ldr	r2, [r2, #16]
 80051b0:	4311      	orrs	r1, r2
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	6952      	ldr	r2, [r2, #20]
 80051b6:	4311      	orrs	r1, r2
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	69d2      	ldr	r2, [r2, #28]
 80051bc:	4311      	orrs	r1, r2
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	6812      	ldr	r2, [r2, #0]
 80051c2:	430b      	orrs	r3, r1
 80051c4:	6013      	str	r3, [r2, #0]
                 hopamp->Init.InvertingInput    | \
                 hopamp->Init.NonInvertingInput | \
                 hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	2b0c      	cmp	r3, #12
 80051cc:	d113      	bne.n	80051f6 <HAL_OPAMP_Init+0xea>
    {
      /* In Follower mode InvertingInput is Not Applicable  */
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_FOLLOWER, \
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	4b3b      	ldr	r3, [pc, #236]	@ (80052c4 <HAL_OPAMP_Init+0x1b8>)
 80051d6:	4013      	ands	r3, r2
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	6891      	ldr	r1, [r2, #8]
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	68d2      	ldr	r2, [r2, #12]
 80051e0:	4311      	orrs	r1, r2
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	6952      	ldr	r2, [r2, #20]
 80051e6:	4311      	orrs	r1, r2
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	69d2      	ldr	r2, [r2, #28]
 80051ec:	4311      	orrs	r1, r2
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	6812      	ldr	r2, [r2, #0]
 80051f2:	430b      	orrs	r3, r1
 80051f4:	6013      	str	r3, [r2, #0]
                 hopamp->Init.Mode | \
                 hopamp->Init.NonInvertingInput | \
                 hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.Mode == OPAMP_STANDALONE_MODE)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d116      	bne.n	800522c <HAL_OPAMP_Init+0x120>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_STANDALONE, \
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	4b30      	ldr	r3, [pc, #192]	@ (80052c8 <HAL_OPAMP_Init+0x1bc>)
 8005206:	4013      	ands	r3, r2
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	6891      	ldr	r1, [r2, #8]
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	68d2      	ldr	r2, [r2, #12]
 8005210:	4311      	orrs	r1, r2
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	6912      	ldr	r2, [r2, #16]
 8005216:	4311      	orrs	r1, r2
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	6952      	ldr	r2, [r2, #20]
 800521c:	4311      	orrs	r1, r2
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	69d2      	ldr	r2, [r2, #28]
 8005222:	4311      	orrs	r1, r2
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	6812      	ldr	r2, [r2, #0]
 8005228:	430b      	orrs	r3, r1
 800522a:	6013      	str	r3, [r2, #0]
                 hopamp->Init.InvertingInput    | \
                 hopamp->Init.NonInvertingInput | \
                 hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.UserTrimming == OPAMP_TRIMMING_USER)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	69db      	ldr	r3, [r3, #28]
 8005230:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005234:	d12f      	bne.n	8005296 <HAL_OPAMP_Init+0x18a>
    {
      /* Set power mode and associated calibration parameters */
      if ((hopamp->Init.PowerMode != OPAMP_POWERMODE_LOWPOWER_NORMALSPEED) && \
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	2b02      	cmp	r3, #2
 800523c:	d018      	beq.n	8005270 <HAL_OPAMP_Init+0x164>
          (hopamp->Init.PowerMode != OPAMP_POWERMODE_LOWPOWER_HIGHSPEED))
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	689b      	ldr	r3, [r3, #8]
      if ((hopamp->Init.PowerMode != OPAMP_POWERMODE_LOWPOWER_NORMALSPEED) && \
 8005242:	4a22      	ldr	r2, [pc, #136]	@ (80052cc <HAL_OPAMP_Init+0x1c0>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d013      	beq.n	8005270 <HAL_OPAMP_Init+0x164>
      {
        /* OPAMP_POWERMODE_NORMALPOWER_HIGHSPEED or OPAMP_POWERMODE_NORMALPOWER_NORMALSPEED */
        /* Set calibration mode (factory or user) and values for            */
        /* transistors differential pair high (PMOS) and low (NMOS) for     */
        /* normal mode.                                                     */
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6a1b      	ldr	r3, [r3, #32]
 800524c:	021a      	lsls	r2, r3, #8
                          | (hopamp->Init.TrimmingValueN));
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 8005252:	4313      	orrs	r3, r2
 8005254:	60bb      	str	r3, [r7, #8]
        MODIFY_REG(hopamp->Instance->OTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 8005260:	f023 031f 	bic.w	r3, r3, #31
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	6812      	ldr	r2, [r2, #0]
 8005268:	68b9      	ldr	r1, [r7, #8]
 800526a:	430b      	orrs	r3, r1
 800526c:	6053      	str	r3, [r2, #4]
 800526e:	e012      	b.n	8005296 <HAL_OPAMP_Init+0x18a>
      else
      {
        /* OPAMP_POWERMODE_LOWPOWER_HIGHSPEED or OPAMP_POWERMODE_LOWPOWER_NORMALSPEED */
        /* transistors differential pair high (PMOS) and low (NMOS) for     */
        /* low power mode.                                                     */
        updateotrlpotr = (((hopamp->Init.TrimmingValuePLowPower) << (OPAMP_INPUT_NONINVERTING)) \
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005274:	021a      	lsls	r2, r3, #8
                          | (hopamp->Init.TrimmingValueNLowPower));
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        updateotrlpotr = (((hopamp->Init.TrimmingValuePLowPower) << (OPAMP_INPUT_NONINVERTING)) \
 800527a:	4313      	orrs	r3, r2
 800527c:	60bb      	str	r3, [r7, #8]
        MODIFY_REG(hopamp->Instance->LPOTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 8005288:	f023 031f 	bic.w	r3, r3, #31
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	6812      	ldr	r2, [r2, #0]
 8005290:	68b9      	ldr	r1, [r7, #8]
 8005292:	430b      	orrs	r3, r1
 8005294:	6093      	str	r3, [r2, #8]
    }

    /* Set the power supply range to high for performance purpose    */
    /* The OPAMP_CSR_OPARANGE is common configuration for all OPAMPs */
    /* bit OPAMP_CSR_OPARANGE applies for both OPAMPs                */
    MODIFY_REG(OPAMP12_COMMON->CSR, OPAMP_CSR_OPARANGE, OPAMP_CSR_OPARANGE);
 8005296:	4b0e      	ldr	r3, [pc, #56]	@ (80052d0 <HAL_OPAMP_Init+0x1c4>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a0d      	ldr	r2, [pc, #52]	@ (80052d0 <HAL_OPAMP_Init+0x1c4>)
 800529c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80052a0:	6013      	str	r3, [r2, #0]

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d103      	bne.n	80052b6 <HAL_OPAMP_Init+0x1aa>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2201      	movs	r2, #1
 80052b2:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    }
    /* else: remain in READY or BUSY state (no update) */
    return status;
 80052b6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3710      	adds	r7, #16
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	bfffb8c1 	.word	0xbfffb8c1
 80052c4:	bfffbbf1 	.word	0xbfffbbf1
 80052c8:	bfffb8f1 	.word	0xbfffb8f1
 80052cc:	40000002 	.word	0x40000002
 80052d0:	40007000 	.word	0x40007000

080052d4 <HAL_OPAMP_Start>:
  * @param  hopamp: OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b085      	sub	sp, #20
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052dc:	2300      	movs	r3, #0
 80052de:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d102      	bne.n	80052ec <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	73fb      	strb	r3, [r7, #15]
 80052ea:	e01d      	b.n	8005328 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	2b05      	cmp	r3, #5
 80052f6:	d102      	bne.n	80052fe <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	73fb      	strb	r3, [r7, #15]
 80052fc:	e014      	b.n	8005328 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005304:	b2db      	uxtb	r3, r3
 8005306:	2b01      	cmp	r3, #1
 8005308:	d10c      	bne.n	8005324 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAEN);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f042 0201 	orr.w	r2, r2, #1
 8005318:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2204      	movs	r2, #4
 800531e:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
 8005322:	e001      	b.n	8005328 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	73fb      	strb	r3, [r7, #15]
    }

  }
  return status;
 8005328:	7bfb      	ldrb	r3, [r7, #15]
}
 800532a:	4618      	mov	r0, r3
 800532c:	3714      	adds	r7, #20
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr
	...

08005338 <HAL_PWREx_ControlVoltageScaling>:
  * @note   Before moving to voltage scaling 2, it is mandatory to ensure that
  *         the system frequency is equal or below 16 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005338:	b480      	push	{r7}
 800533a:	b085      	sub	sp, #20
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Set voltage scaling level */
  vosr = (PWR->VOSR & ~(PWR_VOSR_R2EN | PWR_VOSR_R1EN));
 8005340:	4b19      	ldr	r3, [pc, #100]	@ (80053a8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	f023 0303 	bic.w	r3, r3, #3
 8005348:	60bb      	str	r3, [r7, #8]
  vosr |= VoltageScaling;
 800534a:	68ba      	ldr	r2, [r7, #8]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4313      	orrs	r3, r2
 8005350:	60bb      	str	r3, [r7, #8]
  PWR->VOSR = vosr;
 8005352:	4a15      	ldr	r2, [pc, #84]	@ (80053a8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	60d3      	str	r3, [r2, #12]

  /* Wait until VOSRDY is set */
  timeout = ((PWR_VOSF_SETTING_DELAY_VALUE * SystemCoreClock) / 1000000U) + 1U;
 8005358:	4b14      	ldr	r3, [pc, #80]	@ (80053ac <HAL_PWREx_ControlVoltageScaling+0x74>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	2232      	movs	r2, #50	@ 0x32
 800535e:	fb02 f303 	mul.w	r3, r2, r3
 8005362:	4a13      	ldr	r2, [pc, #76]	@ (80053b0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8005364:	fba2 2303 	umull	r2, r3, r2, r3
 8005368:	0c9b      	lsrs	r3, r3, #18
 800536a:	3301      	adds	r3, #1
 800536c:	60fb      	str	r3, [r7, #12]

  /* store expected ready flag */
  vosr = (VoltageScaling << (PWR_VOSR_R1RDY_Pos - PWR_VOSR_R1EN_Pos));
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	041b      	lsls	r3, r3, #16
 8005372:	60bb      	str	r3, [r7, #8]

  while (((PWR->VOSR & vosr) != vosr) && (timeout != 0U))
 8005374:	e002      	b.n	800537c <HAL_PWREx_ControlVoltageScaling+0x44>
  {
    timeout--;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	3b01      	subs	r3, #1
 800537a:	60fb      	str	r3, [r7, #12]
  while (((PWR->VOSR & vosr) != vosr) && (timeout != 0U))
 800537c:	4b0a      	ldr	r3, [pc, #40]	@ (80053a8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800537e:	68da      	ldr	r2, [r3, #12]
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	4013      	ands	r3, r2
 8005384:	68ba      	ldr	r2, [r7, #8]
 8005386:	429a      	cmp	r2, r3
 8005388:	d002      	beq.n	8005390 <HAL_PWREx_ControlVoltageScaling+0x58>
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d1f2      	bne.n	8005376 <HAL_PWREx_ControlVoltageScaling+0x3e>
  }

  /* Check time out */
  if (timeout == 0U)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d101      	bne.n	800539a <HAL_PWREx_ControlVoltageScaling+0x62>
  {
    return HAL_TIMEOUT;
 8005396:	2303      	movs	r3, #3
 8005398:	e000      	b.n	800539c <HAL_PWREx_ControlVoltageScaling+0x64>
  }
  else
  {
    return HAL_OK;
 800539a:	2300      	movs	r3, #0
  }
}
 800539c:	4618      	mov	r0, r3
 800539e:	3714      	adds	r7, #20
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr
 80053a8:	40030800 	.word	0x40030800
 80053ac:	20000004 	.word	0x20000004
 80053b0:	431bde83 	.word	0x431bde83

080053b4 <HAL_PWREx_EnableVddA>:
  * @brief  Enable VDDA supply valid.
  * @note   Setting this bit is mandatory to use the analog peripherals.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 80053b4:	b480      	push	{r7}
 80053b6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 80053b8:	4b05      	ldr	r3, [pc, #20]	@ (80053d0 <HAL_PWREx_EnableVddA+0x1c>)
 80053ba:	691b      	ldr	r3, [r3, #16]
 80053bc:	4a04      	ldr	r2, [pc, #16]	@ (80053d0 <HAL_PWREx_EnableVddA+0x1c>)
 80053be:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80053c2:	6113      	str	r3, [r2, #16]
}
 80053c4:	bf00      	nop
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	40030800 	.word	0x40030800

080053d4 <HAL_PWREx_EnableEpodBooster>:
  * @note   EPOD booster shall be enabled prior to increase system frequency above 24 MHz in all ranges.
  * @note   EPOD Booster clock source and divider shall be configured through RCC before calling this function.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_EnableEpodBooster(void)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Set EPOD booster bit */
  PWR->VOSR |= PWR_VOSR_BOOSTEN;
 80053da:	4b13      	ldr	r3, [pc, #76]	@ (8005428 <HAL_PWREx_EnableEpodBooster+0x54>)
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	4a12      	ldr	r2, [pc, #72]	@ (8005428 <HAL_PWREx_EnableEpodBooster+0x54>)
 80053e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053e4:	60d3      	str	r3, [r2, #12]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80053e6:	f7fd fdf3 	bl	8002fd0 <HAL_GetTick>
 80053ea:	6078      	str	r0, [r7, #4]

  /* Wait till boster ready bit is set */
  while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) != PWR_VOSR_BOOSTRDY)
 80053ec:	e00f      	b.n	800540e <HAL_PWREx_EnableEpodBooster+0x3a>
  {
    if ((HAL_GetTick() - tickstart) > BOOSTER_TIMEOUT_VALUE)
 80053ee:	f7fd fdef 	bl	8002fd0 <HAL_GetTick>
 80053f2:	4602      	mov	r2, r0
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d908      	bls.n	800540e <HAL_PWREx_EnableEpodBooster+0x3a>
    {
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) != PWR_VOSR_BOOSTRDY)
 80053fc:	4b0a      	ldr	r3, [pc, #40]	@ (8005428 <HAL_PWREx_EnableEpodBooster+0x54>)
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005404:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005408:	d001      	beq.n	800540e <HAL_PWREx_EnableEpodBooster+0x3a>
      {
        return HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	e007      	b.n	800541e <HAL_PWREx_EnableEpodBooster+0x4a>
  while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) != PWR_VOSR_BOOSTRDY)
 800540e:	4b06      	ldr	r3, [pc, #24]	@ (8005428 <HAL_PWREx_EnableEpodBooster+0x54>)
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005416:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800541a:	d1e8      	bne.n	80053ee <HAL_PWREx_EnableEpodBooster+0x1a>
      }
    }
  }

  /* Booster is enabled and ready */
  return HAL_OK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	3708      	adds	r7, #8
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	40030800 	.word	0x40030800

0800542c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef *RCC_OscInitStruct)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b088      	sub	sp, #32
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t sysclksrc;
  uint32_t tmpreg1;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d101      	bne.n	800543e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e340      	b.n	8005ac0 <HAL_RCC_OscConfig+0x694>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800543e:	4b98      	ldr	r3, [pc, #608]	@ (80056a0 <HAL_RCC_OscConfig+0x274>)
 8005440:	69db      	ldr	r3, [r3, #28]
 8005442:	f003 030c 	and.w	r3, r3, #12
 8005446:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) != 0x00u)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0301 	and.w	r3, r3, #1
 8005450:	2b00      	cmp	r3, #0
 8005452:	f000 80ad 	beq.w	80055b0 <HAL_RCC_OscConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock source, it is not allowed to be disabled */
    if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	2b08      	cmp	r3, #8
 800545a:	d106      	bne.n	800546a <HAL_RCC_OscConfig+0x3e>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	2b00      	cmp	r3, #0
 8005462:	f040 80a5 	bne.w	80055b0 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	e32a      	b.n	8005ac0 <HAL_RCC_OscConfig+0x694>
      }
    }
    else
    {
      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d04f      	beq.n	8005512 <HAL_RCC_OscConfig+0xe6>
      {
        /* Set the new HSE configuration ---------------------------------------*/
        __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800547a:	d106      	bne.n	800548a <HAL_RCC_OscConfig+0x5e>
 800547c:	4b88      	ldr	r3, [pc, #544]	@ (80056a0 <HAL_RCC_OscConfig+0x274>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a87      	ldr	r2, [pc, #540]	@ (80056a0 <HAL_RCC_OscConfig+0x274>)
 8005482:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005486:	6013      	str	r3, [r2, #0]
 8005488:	e02f      	b.n	80054ea <HAL_RCC_OscConfig+0xbe>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005492:	d10c      	bne.n	80054ae <HAL_RCC_OscConfig+0x82>
 8005494:	4b82      	ldr	r3, [pc, #520]	@ (80056a0 <HAL_RCC_OscConfig+0x274>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a81      	ldr	r2, [pc, #516]	@ (80056a0 <HAL_RCC_OscConfig+0x274>)
 800549a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800549e:	6013      	str	r3, [r2, #0]
 80054a0:	4b7f      	ldr	r3, [pc, #508]	@ (80056a0 <HAL_RCC_OscConfig+0x274>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a7e      	ldr	r2, [pc, #504]	@ (80056a0 <HAL_RCC_OscConfig+0x274>)
 80054a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054aa:	6013      	str	r3, [r2, #0]
 80054ac:	e01d      	b.n	80054ea <HAL_RCC_OscConfig+0xbe>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80054b6:	d10c      	bne.n	80054d2 <HAL_RCC_OscConfig+0xa6>
 80054b8:	4b79      	ldr	r3, [pc, #484]	@ (80056a0 <HAL_RCC_OscConfig+0x274>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a78      	ldr	r2, [pc, #480]	@ (80056a0 <HAL_RCC_OscConfig+0x274>)
 80054be:	f443 13a0 	orr.w	r3, r3, #1310720	@ 0x140000
 80054c2:	6013      	str	r3, [r2, #0]
 80054c4:	4b76      	ldr	r3, [pc, #472]	@ (80056a0 <HAL_RCC_OscConfig+0x274>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a75      	ldr	r2, [pc, #468]	@ (80056a0 <HAL_RCC_OscConfig+0x274>)
 80054ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054ce:	6013      	str	r3, [r2, #0]
 80054d0:	e00b      	b.n	80054ea <HAL_RCC_OscConfig+0xbe>
 80054d2:	4b73      	ldr	r3, [pc, #460]	@ (80056a0 <HAL_RCC_OscConfig+0x274>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a72      	ldr	r2, [pc, #456]	@ (80056a0 <HAL_RCC_OscConfig+0x274>)
 80054d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054dc:	6013      	str	r3, [r2, #0]
 80054de:	4b70      	ldr	r3, [pc, #448]	@ (80056a0 <HAL_RCC_OscConfig+0x274>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a6f      	ldr	r2, [pc, #444]	@ (80056a0 <HAL_RCC_OscConfig+0x274>)
 80054e4:	f423 13a0 	bic.w	r3, r3, #1310720	@ 0x140000
 80054e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054ea:	f7fd fd71 	bl	8002fd0 <HAL_GetTick>
 80054ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80054f0:	e008      	b.n	8005504 <HAL_RCC_OscConfig+0xd8>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054f2:	f7fd fd6d 	bl	8002fd0 <HAL_GetTick>
 80054f6:	4602      	mov	r2, r0
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	1ad3      	subs	r3, r2, r3
 80054fc:	2b64      	cmp	r3, #100	@ 0x64
 80054fe:	d901      	bls.n	8005504 <HAL_RCC_OscConfig+0xd8>
          {
            return HAL_TIMEOUT;
 8005500:	2303      	movs	r3, #3
 8005502:	e2dd      	b.n	8005ac0 <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005504:	4b66      	ldr	r3, [pc, #408]	@ (80056a0 <HAL_RCC_OscConfig+0x274>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800550c:	2b00      	cmp	r3, #0
 800550e:	d0f0      	beq.n	80054f2 <HAL_RCC_OscConfig+0xc6>
 8005510:	e04e      	b.n	80055b0 <HAL_RCC_OscConfig+0x184>
        }
      }
      else
      {
        /* Set the new HSE configuration ---------------------------------------*/
        __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800551a:	d106      	bne.n	800552a <HAL_RCC_OscConfig+0xfe>
 800551c:	4b60      	ldr	r3, [pc, #384]	@ (80056a0 <HAL_RCC_OscConfig+0x274>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a5f      	ldr	r2, [pc, #380]	@ (80056a0 <HAL_RCC_OscConfig+0x274>)
 8005522:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005526:	6013      	str	r3, [r2, #0]
 8005528:	e02f      	b.n	800558a <HAL_RCC_OscConfig+0x15e>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005532:	d10c      	bne.n	800554e <HAL_RCC_OscConfig+0x122>
 8005534:	4b5a      	ldr	r3, [pc, #360]	@ (80056a0 <HAL_RCC_OscConfig+0x274>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a59      	ldr	r2, [pc, #356]	@ (80056a0 <HAL_RCC_OscConfig+0x274>)
 800553a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800553e:	6013      	str	r3, [r2, #0]
 8005540:	4b57      	ldr	r3, [pc, #348]	@ (80056a0 <HAL_RCC_OscConfig+0x274>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a56      	ldr	r2, [pc, #344]	@ (80056a0 <HAL_RCC_OscConfig+0x274>)
 8005546:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800554a:	6013      	str	r3, [r2, #0]
 800554c:	e01d      	b.n	800558a <HAL_RCC_OscConfig+0x15e>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8005556:	d10c      	bne.n	8005572 <HAL_RCC_OscConfig+0x146>
 8005558:	4b51      	ldr	r3, [pc, #324]	@ (80056a0 <HAL_RCC_OscConfig+0x274>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a50      	ldr	r2, [pc, #320]	@ (80056a0 <HAL_RCC_OscConfig+0x274>)
 800555e:	f443 13a0 	orr.w	r3, r3, #1310720	@ 0x140000
 8005562:	6013      	str	r3, [r2, #0]
 8005564:	4b4e      	ldr	r3, [pc, #312]	@ (80056a0 <HAL_RCC_OscConfig+0x274>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a4d      	ldr	r2, [pc, #308]	@ (80056a0 <HAL_RCC_OscConfig+0x274>)
 800556a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800556e:	6013      	str	r3, [r2, #0]
 8005570:	e00b      	b.n	800558a <HAL_RCC_OscConfig+0x15e>
 8005572:	4b4b      	ldr	r3, [pc, #300]	@ (80056a0 <HAL_RCC_OscConfig+0x274>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a4a      	ldr	r2, [pc, #296]	@ (80056a0 <HAL_RCC_OscConfig+0x274>)
 8005578:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800557c:	6013      	str	r3, [r2, #0]
 800557e:	4b48      	ldr	r3, [pc, #288]	@ (80056a0 <HAL_RCC_OscConfig+0x274>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a47      	ldr	r2, [pc, #284]	@ (80056a0 <HAL_RCC_OscConfig+0x274>)
 8005584:	f423 13a0 	bic.w	r3, r3, #1310720	@ 0x140000
 8005588:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800558a:	f7fd fd21 	bl	8002fd0 <HAL_GetTick>
 800558e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005590:	e008      	b.n	80055a4 <HAL_RCC_OscConfig+0x178>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005592:	f7fd fd1d 	bl	8002fd0 <HAL_GetTick>
 8005596:	4602      	mov	r2, r0
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	1ad3      	subs	r3, r2, r3
 800559c:	2b64      	cmp	r3, #100	@ 0x64
 800559e:	d901      	bls.n	80055a4 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 80055a0:	2303      	movs	r3, #3
 80055a2:	e28d      	b.n	8005ac0 <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80055a4:	4b3e      	ldr	r3, [pc, #248]	@ (80056a0 <HAL_RCC_OscConfig+0x274>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d1f0      	bne.n	8005592 <HAL_RCC_OscConfig+0x166>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) != 0x00u)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 0302 	and.w	r3, r3, #2
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d054      	beq.n	8005666 <HAL_RCC_OscConfig+0x23a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock */
    if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	2b04      	cmp	r3, #4
 80055c0:	d110      	bne.n	80055e4 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d101      	bne.n	80055ce <HAL_RCC_OscConfig+0x1a2>
      {
        return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e278      	b.n	8005ac0 <HAL_RCC_OscConfig+0x694>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055ce:	4b34      	ldr	r3, [pc, #208]	@ (80056a0 <HAL_RCC_OscConfig+0x274>)
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	041b      	lsls	r3, r3, #16
 80055dc:	4930      	ldr	r1, [pc, #192]	@ (80056a0 <HAL_RCC_OscConfig+0x274>)
 80055de:	4313      	orrs	r3, r2
 80055e0:	610b      	str	r3, [r1, #16]
 80055e2:	e040      	b.n	8005666 <HAL_RCC_OscConfig+0x23a>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d023      	beq.n	8005634 <HAL_RCC_OscConfig+0x208>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055ec:	4b2c      	ldr	r3, [pc, #176]	@ (80056a0 <HAL_RCC_OscConfig+0x274>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a2b      	ldr	r2, [pc, #172]	@ (80056a0 <HAL_RCC_OscConfig+0x274>)
 80055f2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80055f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055f8:	f7fd fcea 	bl	8002fd0 <HAL_GetTick>
 80055fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80055fe:	e008      	b.n	8005612 <HAL_RCC_OscConfig+0x1e6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005600:	f7fd fce6 	bl	8002fd0 <HAL_GetTick>
 8005604:	4602      	mov	r2, r0
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	2b02      	cmp	r3, #2
 800560c:	d901      	bls.n	8005612 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	e256      	b.n	8005ac0 <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005612:	4b23      	ldr	r3, [pc, #140]	@ (80056a0 <HAL_RCC_OscConfig+0x274>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800561a:	2b00      	cmp	r3, #0
 800561c:	d0f0      	beq.n	8005600 <HAL_RCC_OscConfig+0x1d4>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800561e:	4b20      	ldr	r3, [pc, #128]	@ (80056a0 <HAL_RCC_OscConfig+0x274>)
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	041b      	lsls	r3, r3, #16
 800562c:	491c      	ldr	r1, [pc, #112]	@ (80056a0 <HAL_RCC_OscConfig+0x274>)
 800562e:	4313      	orrs	r3, r2
 8005630:	610b      	str	r3, [r1, #16]
 8005632:	e018      	b.n	8005666 <HAL_RCC_OscConfig+0x23a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005634:	4b1a      	ldr	r3, [pc, #104]	@ (80056a0 <HAL_RCC_OscConfig+0x274>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a19      	ldr	r2, [pc, #100]	@ (80056a0 <HAL_RCC_OscConfig+0x274>)
 800563a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800563e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005640:	f7fd fcc6 	bl	8002fd0 <HAL_GetTick>
 8005644:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005646:	e008      	b.n	800565a <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005648:	f7fd fcc2 	bl	8002fd0 <HAL_GetTick>
 800564c:	4602      	mov	r2, r0
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	1ad3      	subs	r3, r2, r3
 8005652:	2b02      	cmp	r3, #2
 8005654:	d901      	bls.n	800565a <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	e232      	b.n	8005ac0 <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800565a:	4b11      	ldr	r3, [pc, #68]	@ (80056a0 <HAL_RCC_OscConfig+0x274>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005662:	2b00      	cmp	r3, #0
 8005664:	d1f0      	bne.n	8005648 <HAL_RCC_OscConfig+0x21c>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) != 0x00u)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 0310 	and.w	r3, r3, #16
 800566e:	2b00      	cmp	r3, #0
 8005670:	d038      	beq.n	80056e4 <HAL_RCC_OscConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d01b      	beq.n	80056b2 <HAL_RCC_OscConfig+0x286>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800567a:	4b09      	ldr	r3, [pc, #36]	@ (80056a0 <HAL_RCC_OscConfig+0x274>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a08      	ldr	r2, [pc, #32]	@ (80056a0 <HAL_RCC_OscConfig+0x274>)
 8005680:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005684:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005686:	f7fd fca3 	bl	8002fd0 <HAL_GetTick>
 800568a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800568c:	e00a      	b.n	80056a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800568e:	f7fd fc9f 	bl	8002fd0 <HAL_GetTick>
 8005692:	4602      	mov	r2, r0
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	1ad3      	subs	r3, r2, r3
 8005698:	2b02      	cmp	r3, #2
 800569a:	d903      	bls.n	80056a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800569c:	2303      	movs	r3, #3
 800569e:	e20f      	b.n	8005ac0 <HAL_RCC_OscConfig+0x694>
 80056a0:	40030c00 	.word	0x40030c00
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80056a4:	4ba0      	ldr	r3, [pc, #640]	@ (8005928 <HAL_RCC_OscConfig+0x4fc>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d0ee      	beq.n	800568e <HAL_RCC_OscConfig+0x262>
 80056b0:	e018      	b.n	80056e4 <HAL_RCC_OscConfig+0x2b8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80056b2:	4b9d      	ldr	r3, [pc, #628]	@ (8005928 <HAL_RCC_OscConfig+0x4fc>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a9c      	ldr	r2, [pc, #624]	@ (8005928 <HAL_RCC_OscConfig+0x4fc>)
 80056b8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80056bc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056be:	f7fd fc87 	bl	8002fd0 <HAL_GetTick>
 80056c2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80056c4:	e008      	b.n	80056d8 <HAL_RCC_OscConfig+0x2ac>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80056c6:	f7fd fc83 	bl	8002fd0 <HAL_GetTick>
 80056ca:	4602      	mov	r2, r0
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	1ad3      	subs	r3, r2, r3
 80056d0:	2b02      	cmp	r3, #2
 80056d2:	d901      	bls.n	80056d8 <HAL_RCC_OscConfig+0x2ac>
        {
          return HAL_TIMEOUT;
 80056d4:	2303      	movs	r3, #3
 80056d6:	e1f3      	b.n	8005ac0 <HAL_RCC_OscConfig+0x694>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80056d8:	4b93      	ldr	r3, [pc, #588]	@ (8005928 <HAL_RCC_OscConfig+0x4fc>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d1f0      	bne.n	80056c6 <HAL_RCC_OscConfig+0x29a>
    }
  }


  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) != 0x00u)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 0304 	and.w	r3, r3, #4
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	f000 80a7 	beq.w	8005840 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056f2:	2300      	movs	r3, #0
 80056f4:	76fb      	strb	r3, [r7, #27]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_ENABLED() != 0x01)
 80056f6:	4b8c      	ldr	r3, [pc, #560]	@ (8005928 <HAL_RCC_OscConfig+0x4fc>)
 80056f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80056fc:	f003 0304 	and.w	r3, r3, #4
 8005700:	2b00      	cmp	r3, #0
 8005702:	d110      	bne.n	8005726 <HAL_RCC_OscConfig+0x2fa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005704:	4b88      	ldr	r3, [pc, #544]	@ (8005928 <HAL_RCC_OscConfig+0x4fc>)
 8005706:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800570a:	4a87      	ldr	r2, [pc, #540]	@ (8005928 <HAL_RCC_OscConfig+0x4fc>)
 800570c:	f043 0304 	orr.w	r3, r3, #4
 8005710:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005714:	4b84      	ldr	r3, [pc, #528]	@ (8005928 <HAL_RCC_OscConfig+0x4fc>)
 8005716:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800571a:	f003 0304 	and.w	r3, r3, #4
 800571e:	60fb      	str	r3, [r7, #12]
 8005720:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005722:	2301      	movs	r3, #1
 8005724:	76fb      	strb	r3, [r7, #27]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8005726:	4b81      	ldr	r3, [pc, #516]	@ (800592c <HAL_RCC_OscConfig+0x500>)
 8005728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800572a:	4a80      	ldr	r2, [pc, #512]	@ (800592c <HAL_RCC_OscConfig+0x500>)
 800572c:	f043 0301 	orr.w	r3, r3, #1
 8005730:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Set the new LSE configuration -----------------------------------------*/
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	695b      	ldr	r3, [r3, #20]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d051      	beq.n	80057de <HAL_RCC_OscConfig+0x3b2>
    {
      /* If LSE is already on or in bypass mode, only LSE system can be modified */
      tmpreg1 = (RCC->BDCR & ~RCC_BDCR_LSESYSEN);
 800573a:	4b7b      	ldr	r3, [pc, #492]	@ (8005928 <HAL_RCC_OscConfig+0x4fc>)
 800573c:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8005740:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005744:	61fb      	str	r3, [r7, #28]
      tmpreg1 |= RCC_OscInitStruct->LSEState;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	695b      	ldr	r3, [r3, #20]
 800574a:	69fa      	ldr	r2, [r7, #28]
 800574c:	4313      	orrs	r3, r2
 800574e:	61fb      	str	r3, [r7, #28]
      RCC->BDCR = tmpreg1;
 8005750:	4a75      	ldr	r2, [pc, #468]	@ (8005928 <HAL_RCC_OscConfig+0x4fc>)
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005758:	f7fd fc3a 	bl	8002fd0 <HAL_GetTick>
 800575c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800575e:	e00a      	b.n	8005776 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005760:	f7fd fc36 	bl	8002fd0 <HAL_GetTick>
 8005764:	4602      	mov	r2, r0
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800576e:	4293      	cmp	r3, r2
 8005770:	d901      	bls.n	8005776 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005772:	2303      	movs	r3, #3
 8005774:	e1a4      	b.n	8005ac0 <HAL_RCC_OscConfig+0x694>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005776:	4b6c      	ldr	r3, [pc, #432]	@ (8005928 <HAL_RCC_OscConfig+0x4fc>)
 8005778:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800577c:	f003 0302 	and.w	r3, r3, #2
 8005780:	2b00      	cmp	r3, #0
 8005782:	d0ed      	beq.n	8005760 <HAL_RCC_OscConfig+0x334>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	695b      	ldr	r3, [r3, #20]
 8005788:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800578c:	2b00      	cmp	r3, #0
 800578e:	d01e      	beq.n	80057ce <HAL_RCC_OscConfig+0x3a2>
      {
        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005790:	e00a      	b.n	80057a8 <HAL_RCC_OscConfig+0x37c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005792:	f7fd fc1d 	bl	8002fd0 <HAL_GetTick>
 8005796:	4602      	mov	r2, r0
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	1ad3      	subs	r3, r2, r3
 800579c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d901      	bls.n	80057a8 <HAL_RCC_OscConfig+0x37c>
          {
            return HAL_TIMEOUT;
 80057a4:	2303      	movs	r3, #3
 80057a6:	e18b      	b.n	8005ac0 <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80057a8:	4b5f      	ldr	r3, [pc, #380]	@ (8005928 <HAL_RCC_OscConfig+0x4fc>)
 80057aa:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80057ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d0ed      	beq.n	8005792 <HAL_RCC_OscConfig+0x366>
 80057b6:	e038      	b.n	800582a <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057b8:	f7fd fc0a 	bl	8002fd0 <HAL_GetTick>
 80057bc:	4602      	mov	r2, r0
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	1ad3      	subs	r3, r2, r3
 80057c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d901      	bls.n	80057ce <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80057ca:	2303      	movs	r3, #3
 80057cc:	e178      	b.n	8005ac0 <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80057ce:	4b56      	ldr	r3, [pc, #344]	@ (8005928 <HAL_RCC_OscConfig+0x4fc>)
 80057d0:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80057d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d1ed      	bne.n	80057b8 <HAL_RCC_OscConfig+0x38c>
 80057dc:	e025      	b.n	800582a <HAL_RCC_OscConfig+0x3fe>
        }
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, (RCC_BDCR_LSEON | RCC_BDCR_LSESYSEN));
 80057de:	4b52      	ldr	r3, [pc, #328]	@ (8005928 <HAL_RCC_OscConfig+0x4fc>)
 80057e0:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80057e4:	4a50      	ldr	r2, [pc, #320]	@ (8005928 <HAL_RCC_OscConfig+0x4fc>)
 80057e6:	f023 0381 	bic.w	r3, r3, #129	@ 0x81
 80057ea:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80057ee:	4b4e      	ldr	r3, [pc, #312]	@ (8005928 <HAL_RCC_OscConfig+0x4fc>)
 80057f0:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80057f4:	4a4c      	ldr	r2, [pc, #304]	@ (8005928 <HAL_RCC_OscConfig+0x4fc>)
 80057f6:	f023 0304 	bic.w	r3, r3, #4
 80057fa:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057fe:	f7fd fbe7 	bl	8002fd0 <HAL_GetTick>
 8005802:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005804:	e00a      	b.n	800581c <HAL_RCC_OscConfig+0x3f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005806:	f7fd fbe3 	bl	8002fd0 <HAL_GetTick>
 800580a:	4602      	mov	r2, r0
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	1ad3      	subs	r3, r2, r3
 8005810:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005814:	4293      	cmp	r3, r2
 8005816:	d901      	bls.n	800581c <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8005818:	2303      	movs	r3, #3
 800581a:	e151      	b.n	8005ac0 <HAL_RCC_OscConfig+0x694>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800581c:	4b42      	ldr	r3, [pc, #264]	@ (8005928 <HAL_RCC_OscConfig+0x4fc>)
 800581e:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8005822:	f003 0302 	and.w	r3, r3, #2
 8005826:	2b00      	cmp	r3, #0
 8005828:	d1ed      	bne.n	8005806 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800582a:	7efb      	ldrb	r3, [r7, #27]
 800582c:	2b01      	cmp	r3, #1
 800582e:	d107      	bne.n	8005840 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005830:	4b3d      	ldr	r3, [pc, #244]	@ (8005928 <HAL_RCC_OscConfig+0x4fc>)
 8005832:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005836:	4a3c      	ldr	r2, [pc, #240]	@ (8005928 <HAL_RCC_OscConfig+0x4fc>)
 8005838:	f023 0304 	bic.w	r3, r3, #4
 800583c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) != 0x00u)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 0308 	and.w	r3, r3, #8
 8005848:	2b00      	cmp	r3, #0
 800584a:	d078      	beq.n	800593e <HAL_RCC_OscConfig+0x512>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Get CSR register value */
    tmpreg1 = RCC->CSR;
 800584c:	4b36      	ldr	r3, [pc, #216]	@ (8005928 <HAL_RCC_OscConfig+0x4fc>)
 800584e:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8005852:	61fb      	str	r3, [r7, #28]

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	699b      	ldr	r3, [r3, #24]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d050      	beq.n	80058fe <HAL_RCC_OscConfig+0x4d2>
    {
      /* Check LSI division factor */
      assert_param(IS_RCC_LSI_DIV(RCC_OscInitStruct->LSIDiv));

      /* Check is LSIDiv is requested to be changed and LSI is already ON */
      if ((RCC_OscInitStruct->LSIDiv != (tmpreg1 & RCC_CSR_LSIPREDIV)) && ((tmpreg1 & RCC_CSR_LSIRDY) != 0x00u))
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	69da      	ldr	r2, [r3, #28]
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	f003 0304 	and.w	r3, r3, #4
 8005866:	429a      	cmp	r2, r3
 8005868:	d023      	beq.n	80058b2 <HAL_RCC_OscConfig+0x486>
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	f003 0302 	and.w	r3, r3, #2
 8005870:	2b00      	cmp	r3, #0
 8005872:	d01e      	beq.n	80058b2 <HAL_RCC_OscConfig+0x486>
      {
        /* Disable LSI (end clear ready bit from tmpreg to avoid its propagation below) */
        tmpreg1 &= ~(RCC_CSR_LSION | RCC_CSR_LSIRDY);
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	f023 0303 	bic.w	r3, r3, #3
 800587a:	61fb      	str	r3, [r7, #28]
        RCC->CSR = tmpreg1;
 800587c:	4a2a      	ldr	r2, [pc, #168]	@ (8005928 <HAL_RCC_OscConfig+0x4fc>)
 800587e:	69fb      	ldr	r3, [r7, #28]
 8005880:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005884:	f7fd fba4 	bl	8002fd0 <HAL_GetTick>
 8005888:	6138      	str	r0, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0x00u)
 800588a:	e008      	b.n	800589e <HAL_RCC_OscConfig+0x472>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800588c:	f7fd fba0 	bl	8002fd0 <HAL_GetTick>
 8005890:	4602      	mov	r2, r0
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	2b14      	cmp	r3, #20
 8005898:	d901      	bls.n	800589e <HAL_RCC_OscConfig+0x472>
          {
            /* LSI may be forced ON by IWDG */
            return HAL_TIMEOUT;
 800589a:	2303      	movs	r3, #3
 800589c:	e110      	b.n	8005ac0 <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0x00u)
 800589e:	4b22      	ldr	r3, [pc, #136]	@ (8005928 <HAL_RCC_OscConfig+0x4fc>)
 80058a0:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80058a4:	f003 0302 	and.w	r3, r3, #2
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d1ef      	bne.n	800588c <HAL_RCC_OscConfig+0x460>
          }
        }
        /* Wait at least a half of LSI clock period before applying the new LSI prediv value */
        HAL_Delay(1);
 80058ac:	2001      	movs	r0, #1
 80058ae:	f7fd fb9b 	bl	8002fe8 <HAL_Delay>
      }

      /* Set LSI division factor */
      tmpreg1 &= ~RCC_CSR_LSIPREDIV;
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	f023 0304 	bic.w	r3, r3, #4
 80058b8:	61fb      	str	r3, [r7, #28]
      tmpreg1 |= RCC_OscInitStruct->LSIDiv;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	69db      	ldr	r3, [r3, #28]
 80058be:	69fa      	ldr	r2, [r7, #28]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	61fb      	str	r3, [r7, #28]

      /* Enable  LSI */
      tmpreg1 |= RCC_CSR_LSION;
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	f043 0301 	orr.w	r3, r3, #1
 80058ca:	61fb      	str	r3, [r7, #28]
      RCC->CSR = tmpreg1;
 80058cc:	4a16      	ldr	r2, [pc, #88]	@ (8005928 <HAL_RCC_OscConfig+0x4fc>)
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058d4:	f7fd fb7c 	bl	8002fd0 <HAL_GetTick>
 80058d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0x00u)
 80058da:	e008      	b.n	80058ee <HAL_RCC_OscConfig+0x4c2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058dc:	f7fd fb78 	bl	8002fd0 <HAL_GetTick>
 80058e0:	4602      	mov	r2, r0
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	1ad3      	subs	r3, r2, r3
 80058e6:	2b14      	cmp	r3, #20
 80058e8:	d901      	bls.n	80058ee <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 80058ea:	2303      	movs	r3, #3
 80058ec:	e0e8      	b.n	8005ac0 <HAL_RCC_OscConfig+0x694>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0x00u)
 80058ee:	4b0e      	ldr	r3, [pc, #56]	@ (8005928 <HAL_RCC_OscConfig+0x4fc>)
 80058f0:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80058f4:	f003 0302 	and.w	r3, r3, #2
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d0ef      	beq.n	80058dc <HAL_RCC_OscConfig+0x4b0>
 80058fc:	e01f      	b.n	800593e <HAL_RCC_OscConfig+0x512>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator */
      tmpreg1 &= ~RCC_CSR_LSION;
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	f023 0301 	bic.w	r3, r3, #1
 8005904:	61fb      	str	r3, [r7, #28]
      RCC->CSR = tmpreg1;
 8005906:	4a08      	ldr	r2, [pc, #32]	@ (8005928 <HAL_RCC_OscConfig+0x4fc>)
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800590e:	f7fd fb5f 	bl	8002fd0 <HAL_GetTick>
 8005912:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0x00u)
 8005914:	e00c      	b.n	8005930 <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005916:	f7fd fb5b 	bl	8002fd0 <HAL_GetTick>
 800591a:	4602      	mov	r2, r0
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	1ad3      	subs	r3, r2, r3
 8005920:	2b14      	cmp	r3, #20
 8005922:	d905      	bls.n	8005930 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8005924:	2303      	movs	r3, #3
 8005926:	e0cb      	b.n	8005ac0 <HAL_RCC_OscConfig+0x694>
 8005928:	40030c00 	.word	0x40030c00
 800592c:	40030800 	.word	0x40030800
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0x00u)
 8005930:	4b65      	ldr	r3, [pc, #404]	@ (8005ac8 <HAL_RCC_OscConfig+0x69c>)
 8005932:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8005936:	f003 0302 	and.w	r3, r3, #2
 800593a:	2b00      	cmp	r3, #0
 800593c:	d1eb      	bne.n	8005916 <HAL_RCC_OscConfig+0x4ea>
      }
    }
  }

  /*------------------------------ MSIS Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIS) != 0x00u)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 0320 	and.w	r3, r3, #32
 8005946:	2b00      	cmp	r3, #0
 8005948:	d068      	beq.n	8005a1c <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSISState));

    /* Check if MSIS is asked to be turn off */
    if (RCC_OscInitStruct->MSISState == RCC_MSI_OFF)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a1b      	ldr	r3, [r3, #32]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d10d      	bne.n	800596e <HAL_RCC_OscConfig+0x542>
    {
      /* When MSIS is used as system clock it will not be disabled */
      if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSIS)
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d101      	bne.n	800595c <HAL_RCC_OscConfig+0x530>
      {
        return HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	e0b1      	b.n	8005ac0 <HAL_RCC_OscConfig+0x694>
      }
      else
      {
        /* Disable the MSIS */
        __HAL_RCC_MSIS_DISABLE();
 800595c:	4b5a      	ldr	r3, [pc, #360]	@ (8005ac8 <HAL_RCC_OscConfig+0x69c>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a59      	ldr	r2, [pc, #356]	@ (8005ac8 <HAL_RCC_OscConfig+0x69c>)
 8005962:	f023 0301 	bic.w	r3, r3, #1
 8005966:	6013      	str	r3, [r2, #0]

        /* Store ready bit value for timeout */
        tmpreg1 = 0x00u;
 8005968:	2300      	movs	r3, #0
 800596a:	61fb      	str	r3, [r7, #28]
 800596c:	e03b      	b.n	80059e6 <HAL_RCC_OscConfig+0x5ba>
      /* Otherwise, turn it ON or if already ON, changing source and range is allowed */
      assert_param(IS_RCC_MSI_SOURCE(RCC_OscInitStruct->MSISSource));
      assert_param(IS_RCC_MSI_DIV(RCC_OscInitStruct->MSISDiv));

      /* Changing source and range is not possible when osnillator is ON but not Ready */
      if ((RCC->CR & (RCC_CR_MSISON | RCC_CR_MSISRDY)) == RCC_CR_MSISON)
 800596e:	4b56      	ldr	r3, [pc, #344]	@ (8005ac8 <HAL_RCC_OscConfig+0x69c>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 0305 	and.w	r3, r3, #5
 8005976:	2b01      	cmp	r3, #1
 8005978:	d101      	bne.n	800597e <HAL_RCC_OscConfig+0x552>
      {
        return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e0a0      	b.n	8005ac0 <HAL_RCC_OscConfig+0x694>
      }
      else
      {
        /* Adjusts the MSIS source and divider, and force MSI selection to ICSCR1 */
        tmpreg1 = RCC->ICSCR1 & ~(RCC_ICSCR1_MSISSEL | RCC_ICSCR1_MSISDIV);
 800597e:	4b52      	ldr	r3, [pc, #328]	@ (8005ac8 <HAL_RCC_OscConfig+0x69c>)
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 8005986:	61fb      	str	r3, [r7, #28]
        tmpreg1 |= (RCC_ICSCR1_MSIRGSEL | RCC_OscInitStruct->MSISSource | RCC_OscInitStruct->MSISDiv);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005990:	431a      	orrs	r2, r3
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	4313      	orrs	r3, r2
 8005996:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800599a:	61fb      	str	r3, [r7, #28]
        RCC->ICSCR1 = tmpreg1;
 800599c:	4a4a      	ldr	r2, [pc, #296]	@ (8005ac8 <HAL_RCC_OscConfig+0x69c>)
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	6093      	str	r3, [r2, #8]

        /* If MSIS is already selected as system clock, update Systick */
        if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSIS)
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d116      	bne.n	80059d6 <HAL_RCC_OscConfig+0x5aa>
        {
          /* Update the SystemCoreClock global variable */
          SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80059a8:	f000 f9ca 	bl	8005d40 <HAL_RCC_GetSysClockFreq>
 80059ac:	4602      	mov	r2, r0
 80059ae:	4b46      	ldr	r3, [pc, #280]	@ (8005ac8 <HAL_RCC_OscConfig+0x69c>)
 80059b0:	6a1b      	ldr	r3, [r3, #32]
 80059b2:	f003 030f 	and.w	r3, r3, #15
 80059b6:	4945      	ldr	r1, [pc, #276]	@ (8005acc <HAL_RCC_OscConfig+0x6a0>)
 80059b8:	5ccb      	ldrb	r3, [r1, r3]
 80059ba:	fa22 f303 	lsr.w	r3, r2, r3
 80059be:	4a44      	ldr	r2, [pc, #272]	@ (8005ad0 <HAL_RCC_OscConfig+0x6a4>)
 80059c0:	6013      	str	r3, [r2, #0]

          /* Configure the source of time base considering new system clocks settings*/
          if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80059c2:	4b44      	ldr	r3, [pc, #272]	@ (8005ad4 <HAL_RCC_OscConfig+0x6a8>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4618      	mov	r0, r3
 80059c8:	f7fd fa70 	bl	8002eac <HAL_InitTick>
 80059cc:	4603      	mov	r3, r0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d007      	beq.n	80059e2 <HAL_RCC_OscConfig+0x5b6>
          {
            return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e074      	b.n	8005ac0 <HAL_RCC_OscConfig+0x694>
          }
        }
        else
        {
          /* Enable the MSIS */
          __HAL_RCC_MSIS_ENABLE();
 80059d6:	4b3c      	ldr	r3, [pc, #240]	@ (8005ac8 <HAL_RCC_OscConfig+0x69c>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a3b      	ldr	r2, [pc, #236]	@ (8005ac8 <HAL_RCC_OscConfig+0x69c>)
 80059dc:	f043 0301 	orr.w	r3, r3, #1
 80059e0:	6013      	str	r3, [r2, #0]
        }

        /* Store ready bit value for timeout */
        tmpreg1 = RCC_CR_MSISRDY;
 80059e2:	2304      	movs	r3, #4
 80059e4:	61fb      	str	r3, [r7, #28]
      }
    }

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059e6:	f7fd faf3 	bl	8002fd0 <HAL_GetTick>
 80059ea:	6138      	str	r0, [r7, #16]

    /* Wait till HSI48 is disabled */
    while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != tmpreg1)
 80059ec:	e00f      	b.n	8005a0e <HAL_RCC_OscConfig+0x5e2>
    {
      if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80059ee:	f7fd faef 	bl	8002fd0 <HAL_GetTick>
 80059f2:	4602      	mov	r2, r0
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	1ad3      	subs	r3, r2, r3
 80059f8:	2b02      	cmp	r3, #2
 80059fa:	d908      	bls.n	8005a0e <HAL_RCC_OscConfig+0x5e2>
      {
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != tmpreg1)
 80059fc:	4b32      	ldr	r3, [pc, #200]	@ (8005ac8 <HAL_RCC_OscConfig+0x69c>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 0304 	and.w	r3, r3, #4
 8005a04:	69fa      	ldr	r2, [r7, #28]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d001      	beq.n	8005a0e <HAL_RCC_OscConfig+0x5e2>
        {
          return HAL_TIMEOUT;
 8005a0a:	2303      	movs	r3, #3
 8005a0c:	e058      	b.n	8005ac0 <HAL_RCC_OscConfig+0x694>
    while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != tmpreg1)
 8005a0e:	4b2e      	ldr	r3, [pc, #184]	@ (8005ac8 <HAL_RCC_OscConfig+0x69c>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 0304 	and.w	r3, r3, #4
 8005a16:	69fa      	ldr	r2, [r7, #28]
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d1e8      	bne.n	80059ee <HAL_RCC_OscConfig+0x5c2>
      }
    }
  }

  /*------------------------------ MSIK Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) != 0x00u)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d04a      	beq.n	8005abe <HAL_RCC_OscConfig+0x692>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIKState));

    /* Check if MSIK is asked to be turn off */
    if (RCC_OscInitStruct->MSIKState == RCC_MSI_OFF)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d108      	bne.n	8005a42 <HAL_RCC_OscConfig+0x616>
    {
      /* Disable the MSIK */
      __HAL_RCC_MSIK_DISABLE();
 8005a30:	4b25      	ldr	r3, [pc, #148]	@ (8005ac8 <HAL_RCC_OscConfig+0x69c>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a24      	ldr	r2, [pc, #144]	@ (8005ac8 <HAL_RCC_OscConfig+0x69c>)
 8005a36:	f023 0308 	bic.w	r3, r3, #8
 8005a3a:	6013      	str	r3, [r2, #0]

      /* Store ready bit value for timeout */
      tmpreg1 = 0x00u;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	61fb      	str	r3, [r7, #28]
 8005a40:	e022      	b.n	8005a88 <HAL_RCC_OscConfig+0x65c>
      /* Otherwise, turn it ON or if already ON, changing source and range is allowed */
      assert_param(IS_RCC_MSI_SOURCE(RCC_OscInitStruct->MSIKSource));
      assert_param(IS_RCC_MSI_DIV(RCC_OscInitStruct->MSIKDiv));

      /* Changing source and range is not possible when osnillator is ON but not Ready */
      if ((RCC->CR & (RCC_CR_MSIKON | RCC_CR_MSIKRDY)) == RCC_CR_MSIKON)
 8005a42:	4b21      	ldr	r3, [pc, #132]	@ (8005ac8 <HAL_RCC_OscConfig+0x69c>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 0318 	and.w	r3, r3, #24
 8005a4a:	2b08      	cmp	r3, #8
 8005a4c:	d101      	bne.n	8005a52 <HAL_RCC_OscConfig+0x626>
      {
        return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e036      	b.n	8005ac0 <HAL_RCC_OscConfig+0x694>
      }
      else
      {
        /* Adjusts the MSIK source and divider, and force MSI selection to ICSCR1 */
        tmpreg1 = RCC->ICSCR1 & ~(RCC_ICSCR1_MSIKSEL | RCC_ICSCR1_MSIKDIV);
 8005a52:	4b1d      	ldr	r3, [pc, #116]	@ (8005ac8 <HAL_RCC_OscConfig+0x69c>)
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	f023 53e0 	bic.w	r3, r3, #469762048	@ 0x1c000000
 8005a5a:	61fb      	str	r3, [r7, #28]
        tmpreg1 |= (RCC_ICSCR1_MSIRGSEL | ((RCC_OscInitStruct->MSIKSource | RCC_OscInitStruct->MSIKDiv) >> (RCC_ICSCR1_MSISSEL_Pos - RCC_ICSCR1_MSIKSEL_Pos)));
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a64:	4313      	orrs	r3, r2
 8005a66:	08da      	lsrs	r2, r3, #3
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005a70:	61fb      	str	r3, [r7, #28]
        RCC->ICSCR1 = tmpreg1;
 8005a72:	4a15      	ldr	r2, [pc, #84]	@ (8005ac8 <HAL_RCC_OscConfig+0x69c>)
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	6093      	str	r3, [r2, #8]

        /* Enable the MSIK */
        __HAL_RCC_MSIK_ENABLE();
 8005a78:	4b13      	ldr	r3, [pc, #76]	@ (8005ac8 <HAL_RCC_OscConfig+0x69c>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a12      	ldr	r2, [pc, #72]	@ (8005ac8 <HAL_RCC_OscConfig+0x69c>)
 8005a7e:	f043 0308 	orr.w	r3, r3, #8
 8005a82:	6013      	str	r3, [r2, #0]

        /* Store ready bit value for timeout */
        tmpreg1 = RCC_CR_MSIKRDY;
 8005a84:	2310      	movs	r3, #16
 8005a86:	61fb      	str	r3, [r7, #28]
      }
    }

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a88:	f7fd faa2 	bl	8002fd0 <HAL_GetTick>
 8005a8c:	6138      	str	r0, [r7, #16]

    /* Wait till HSI48 is disabled */
    while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != tmpreg1)
 8005a8e:	e00f      	b.n	8005ab0 <HAL_RCC_OscConfig+0x684>
    {
      if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005a90:	f7fd fa9e 	bl	8002fd0 <HAL_GetTick>
 8005a94:	4602      	mov	r2, r0
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	1ad3      	subs	r3, r2, r3
 8005a9a:	2b02      	cmp	r3, #2
 8005a9c:	d908      	bls.n	8005ab0 <HAL_RCC_OscConfig+0x684>
      {
        if (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != tmpreg1)
 8005a9e:	4b0a      	ldr	r3, [pc, #40]	@ (8005ac8 <HAL_RCC_OscConfig+0x69c>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 0310 	and.w	r3, r3, #16
 8005aa6:	69fa      	ldr	r2, [r7, #28]
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d001      	beq.n	8005ab0 <HAL_RCC_OscConfig+0x684>
        {
          return HAL_TIMEOUT;
 8005aac:	2303      	movs	r3, #3
 8005aae:	e007      	b.n	8005ac0 <HAL_RCC_OscConfig+0x694>
    while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != tmpreg1)
 8005ab0:	4b05      	ldr	r3, [pc, #20]	@ (8005ac8 <HAL_RCC_OscConfig+0x69c>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f003 0310 	and.w	r3, r3, #16
 8005ab8:	69fa      	ldr	r2, [r7, #28]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d1e8      	bne.n	8005a90 <HAL_RCC_OscConfig+0x664>
        }
      }
    }
  }

  return HAL_OK;
 8005abe:	2300      	movs	r3, #0
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3720      	adds	r7, #32
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}
 8005ac8:	40030c00 	.word	0x40030c00
 8005acc:	08022d48 	.word	0x08022d48
 8005ad0:	20000004 	.word	0x20000004
 8005ad4:	20000018 	.word	0x20000018

08005ad8 <HAL_RCC_ClockConfig>:
  * @note   You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval None
  */
HAL_StatusTypeDef  HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b086      	sub	sp, #24
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;
  uint32_t update;
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d101      	bne.n	8005aec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	e0d2      	b.n	8005c92 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005aec:	4b6b      	ldr	r3, [pc, #428]	@ (8005c9c <HAL_RCC_ClockConfig+0x1c4>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f003 030f 	and.w	r3, r3, #15
 8005af4:	683a      	ldr	r2, [r7, #0]
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d910      	bls.n	8005b1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005afa:	4b68      	ldr	r3, [pc, #416]	@ (8005c9c <HAL_RCC_ClockConfig+0x1c4>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f023 020f 	bic.w	r2, r3, #15
 8005b02:	4966      	ldr	r1, [pc, #408]	@ (8005c9c <HAL_RCC_ClockConfig+0x1c4>)
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b0a:	4b64      	ldr	r3, [pc, #400]	@ (8005c9c <HAL_RCC_ClockConfig+0x1c4>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 030f 	and.w	r3, r3, #15
 8005b12:	683a      	ldr	r2, [r7, #0]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d001      	beq.n	8005b1c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e0ba      	b.n	8005c92 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 0301 	and.w	r3, r3, #1
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d040      	beq.n	8005baa <HAL_RCC_ClockConfig+0xd2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* Read CR register */
    tmpreg1 = RCC->CR;
 8005b28:	4b5d      	ldr	r3, [pc, #372]	@ (8005ca0 <HAL_RCC_ClockConfig+0x1c8>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	617b      	str	r3, [r7, #20]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	2b02      	cmp	r3, #2
 8005b34:	d106      	bne.n	8005b44 <HAL_RCC_ClockConfig+0x6c>
    {
      /* Check the HSE ready flag */
      if ((tmpreg1 & RCC_CR_HSERDY) == 0U)
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d113      	bne.n	8005b68 <HAL_RCC_ClockConfig+0x90>
      {
        return HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	e0a6      	b.n	8005c92 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d106      	bne.n	8005b5a <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSI ready flag */
      if ((tmpreg1 & RCC_CR_HSIRDY) == 0U)
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d108      	bne.n	8005b68 <HAL_RCC_ClockConfig+0x90>
      {
        return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e09b      	b.n	8005c92 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* MSIS is selected as System Clock Source */
    else
    {
      /* Check the MSIS ready flag */
      if ((tmpreg1 & RCC_CR_MSISRDY) == 0U)
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	f003 0304 	and.w	r3, r3, #4
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d101      	bne.n	8005b68 <HAL_RCC_ClockConfig+0x90>
      {
        return HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	e094      	b.n	8005c92 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    /* Switch System clock source */
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005b68:	4b4d      	ldr	r3, [pc, #308]	@ (8005ca0 <HAL_RCC_ClockConfig+0x1c8>)
 8005b6a:	69db      	ldr	r3, [r3, #28]
 8005b6c:	f023 0203 	bic.w	r2, r3, #3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	494a      	ldr	r1, [pc, #296]	@ (8005ca0 <HAL_RCC_ClockConfig+0x1c8>)
 8005b76:	4313      	orrs	r3, r2
 8005b78:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b7a:	f7fd fa29 	bl	8002fd0 <HAL_GetTick>
 8005b7e:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR1_SWS_Pos))
 8005b80:	e00a      	b.n	8005b98 <HAL_RCC_ClockConfig+0xc0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b82:	f7fd fa25 	bl	8002fd0 <HAL_GetTick>
 8005b86:	4602      	mov	r2, r0
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	1ad3      	subs	r3, r2, r3
 8005b8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d901      	bls.n	8005b98 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_TIMEOUT;
 8005b94:	2303      	movs	r3, #3
 8005b96:	e07c      	b.n	8005c92 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR1_SWS_Pos))
 8005b98:	4b41      	ldr	r3, [pc, #260]	@ (8005ca0 <HAL_RCC_ClockConfig+0x1c8>)
 8005b9a:	69db      	ldr	r3, [r3, #28]
 8005b9c:	f003 020c 	and.w	r2, r3, #12
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d1eb      	bne.n	8005b82 <HAL_RCC_ClockConfig+0xaa>
      }
    }
  }

  /* Get CFGR2 content value, and reset update variable */
  tmpreg1 = RCC->CFGR2;
 8005baa:	4b3d      	ldr	r3, [pc, #244]	@ (8005ca0 <HAL_RCC_ClockConfig+0x1c8>)
 8005bac:	6a1b      	ldr	r3, [r3, #32]
 8005bae:	617b      	str	r3, [r7, #20]
  update = 0x00u;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	613b      	str	r3, [r7, #16]

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 0302 	and.w	r3, r3, #2
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d00a      	beq.n	8005bd6 <HAL_RCC_ClockConfig+0xfe>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    /* update HCLK1 divider and notify register is required */
    tmpreg1 &= ~RCC_CFGR2_HPRE;
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	f023 030f 	bic.w	r3, r3, #15
 8005bc6:	617b      	str	r3, [r7, #20]
    tmpreg1 |= RCC_ClkInitStruct->AHBCLKDivider;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	697a      	ldr	r2, [r7, #20]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	617b      	str	r3, [r7, #20]
    update = 0x01u;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	613b      	str	r3, [r7, #16]
  }


  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 0304 	and.w	r3, r3, #4
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d00a      	beq.n	8005bf8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));

    /* update PCLK1 divider and notify register is required */
    tmpreg1 &= ~RCC_CFGR2_PPRE1;
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005be8:	617b      	str	r3, [r7, #20]
    tmpreg1 |= RCC_ClkInitStruct->APB1CLKDivider;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	697a      	ldr	r2, [r7, #20]
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	617b      	str	r3, [r7, #20]
    update = 0x01u;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	613b      	str	r3, [r7, #16]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 0308 	and.w	r3, r3, #8
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d00b      	beq.n	8005c1c <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));

    /* update PCLK2 divider and notify register is required */
    tmpreg1 &= ~RCC_CFGR2_PPRE2;
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005c0a:	617b      	str	r3, [r7, #20]
    tmpreg1 |= (RCC_ClkInitStruct->APB2CLKDivider << (RCC_CFGR2_PPRE2_Pos - RCC_CFGR2_PPRE1_Pos));
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	691b      	ldr	r3, [r3, #16]
 8005c10:	011b      	lsls	r3, r3, #4
 8005c12:	697a      	ldr	r2, [r7, #20]
 8005c14:	4313      	orrs	r3, r2
 8005c16:	617b      	str	r3, [r7, #20]
    update = 0x01u;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	613b      	str	r3, [r7, #16]
  }

  /* update CFGR2 if required */
  if (update != 0x00u)
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d002      	beq.n	8005c28 <HAL_RCC_ClockConfig+0x150>
  {
    RCC->CFGR2 = tmpreg1;
 8005c22:	4a1f      	ldr	r2, [pc, #124]	@ (8005ca0 <HAL_RCC_ClockConfig+0x1c8>)
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	6213      	str	r3, [r2, #32]
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 0310 	and.w	r3, r3, #16
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d003      	beq.n	8005c3c <HAL_RCC_ClockConfig+0x164>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB3CLKDivider));
    WRITE_REG(RCC->CFGR3, RCC_ClkInitStruct->APB3CLKDivider);
 8005c34:	4a1a      	ldr	r2, [pc, #104]	@ (8005ca0 <HAL_RCC_ClockConfig+0x1c8>)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	695b      	ldr	r3, [r3, #20]
 8005c3a:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c3c:	4b17      	ldr	r3, [pc, #92]	@ (8005c9c <HAL_RCC_ClockConfig+0x1c4>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 030f 	and.w	r3, r3, #15
 8005c44:	683a      	ldr	r2, [r7, #0]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d210      	bcs.n	8005c6c <HAL_RCC_ClockConfig+0x194>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c4a:	4b14      	ldr	r3, [pc, #80]	@ (8005c9c <HAL_RCC_ClockConfig+0x1c4>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f023 020f 	bic.w	r2, r3, #15
 8005c52:	4912      	ldr	r1, [pc, #72]	@ (8005c9c <HAL_RCC_ClockConfig+0x1c4>)
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c5a:	4b10      	ldr	r3, [pc, #64]	@ (8005c9c <HAL_RCC_ClockConfig+0x1c4>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f003 030f 	and.w	r3, r3, #15
 8005c62:	683a      	ldr	r2, [r7, #0]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d001      	beq.n	8005c6c <HAL_RCC_ClockConfig+0x194>
    {
      return HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e012      	b.n	8005c92 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005c6c:	f000 f868 	bl	8005d40 <HAL_RCC_GetSysClockFreq>
 8005c70:	4602      	mov	r2, r0
 8005c72:	4b0b      	ldr	r3, [pc, #44]	@ (8005ca0 <HAL_RCC_ClockConfig+0x1c8>)
 8005c74:	6a1b      	ldr	r3, [r3, #32]
 8005c76:	f003 030f 	and.w	r3, r3, #15
 8005c7a:	490a      	ldr	r1, [pc, #40]	@ (8005ca4 <HAL_RCC_ClockConfig+0x1cc>)
 8005c7c:	5ccb      	ldrb	r3, [r1, r3]
 8005c7e:	fa22 f303 	lsr.w	r3, r2, r3
 8005c82:	4a09      	ldr	r2, [pc, #36]	@ (8005ca8 <HAL_RCC_ClockConfig+0x1d0>)
 8005c84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005c86:	4b09      	ldr	r3, [pc, #36]	@ (8005cac <HAL_RCC_ClockConfig+0x1d4>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f7fd f90e 	bl	8002eac <HAL_InitTick>
 8005c90:	4603      	mov	r3, r0
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3718      	adds	r7, #24
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	40022000 	.word	0x40022000
 8005ca0:	40030c00 	.word	0x40030c00
 8005ca4:	08022d48 	.word	0x08022d48
 8005ca8:	20000004 	.word	0x20000004
 8005cac:	20000018 	.word	0x20000018

08005cb0 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCO2DIV_64  division by 64 applied to MCO2 clock
  *            @arg @ref RCC_MCO2DIV_128 division by 128 applied to MCO2 clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b08c      	sub	sp, #48	@ 0x30
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	60f8      	str	r0, [r7, #12]
 8005cb8:	60b9      	str	r1, [r7, #8]
 8005cba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));

  /* MCO Clock Enable. On U3, MCO1 and MCO2 are always on GPIOA */
  __MCO_CLK_ENABLE();
 8005cbc:	4b1e      	ldr	r3, [pc, #120]	@ (8005d38 <HAL_RCC_MCOConfig+0x88>)
 8005cbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005cc2:	4a1d      	ldr	r2, [pc, #116]	@ (8005d38 <HAL_RCC_MCOConfig+0x88>)
 8005cc4:	f043 0301 	orr.w	r3, r3, #1
 8005cc8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8005ccc:	4b1a      	ldr	r3, [pc, #104]	@ (8005d38 <HAL_RCC_MCOConfig+0x88>)
 8005cce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005cd2:	f003 0301 	and.w	r3, r3, #1
 8005cd6:	617b      	str	r3, [r7, #20]
 8005cd8:	697b      	ldr	r3, [r7, #20]

  /* Configure the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin = (RCC_MCOx & RCC_MCO_GPIOPIN_MASK);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ce0:	2302      	movs	r3, #2
 8005ce2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ce4:	2303      	movs	r3, #3
 8005ce6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = ((RCC_MCOx & RCC_MCO_GPIOAF_MASK) >> RCC_MCO_GPIOAF_POS);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	0d1b      	lsrs	r3, r3, #20
 8005cf0:	f003 030f 	and.w	r3, r3, #15
 8005cf4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(MCO_GPIO_PORT, &GPIO_InitStruct);
 8005cf6:	f107 0318 	add.w	r3, r7, #24
 8005cfa:	4619      	mov	r1, r3
 8005cfc:	480f      	ldr	r0, [pc, #60]	@ (8005d3c <HAL_RCC_MCOConfig+0x8c>)
 8005cfe:	f7ff f84b 	bl	8004d98 <HAL_GPIO_Init>

  if ((RCC_MCOx & RCC_MCO_INDEX_MASK) != 0x00u)
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d003      	beq.n	8005d14 <HAL_RCC_MCOConfig+0x64>
  {
    assert_param(IS_RCC_MCO2DIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO2SOURCE(RCC_MCOSource));
    clearmask = (RCC_CFGR1_MCO2SEL | RCC_CFGR1_MCO2PRE);
 8005d0c:	f44f 03fe 	mov.w	r3, #8323072	@ 0x7f0000
 8005d10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d12:	e002      	b.n	8005d1a <HAL_RCC_MCOConfig+0x6a>
  }
  else
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    clearmask = (RCC_CFGR1_MCOSEL | RCC_CFGR1_MCOPRE);
 8005d14:	f04f 43fe 	mov.w	r3, #2130706432	@ 0x7f000000
 8005d18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Mask MCOxSEL[] and MCOxPRE[] bits then set MCOx clock source and prescaler */
  MODIFY_REG(RCC->CFGR1, clearmask, (RCC_MCOSource | RCC_MCODiv));
 8005d1a:	4b07      	ldr	r3, [pc, #28]	@ (8005d38 <HAL_RCC_MCOConfig+0x88>)
 8005d1c:	69da      	ldr	r2, [r3, #28]
 8005d1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d20:	43db      	mvns	r3, r3
 8005d22:	401a      	ands	r2, r3
 8005d24:	68b9      	ldr	r1, [r7, #8]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	430b      	orrs	r3, r1
 8005d2a:	4903      	ldr	r1, [pc, #12]	@ (8005d38 <HAL_RCC_MCOConfig+0x88>)
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	61cb      	str	r3, [r1, #28]
}
 8005d30:	bf00      	nop
 8005d32:	3730      	adds	r7, #48	@ 0x30
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}
 8005d38:	40030c00 	.word	0x40030c00
 8005d3c:	42020000 	.word	0x42020000

08005d40 <HAL_RCC_GetSysClockFreq>:
  * @note   This function can be used by the user application to compute the
  *         baudrate for the communication peripherals or configure other parameters.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
  uint32_t tmpcfgr;
  uint32_t sysclk;

  /* Get SYSCLK source */
  tmpcfgr = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d46:	4b1e      	ldr	r3, [pc, #120]	@ (8005dc0 <HAL_RCC_GetSysClockFreq+0x80>)
 8005d48:	69db      	ldr	r3, [r3, #28]
 8005d4a:	f003 030c 	and.w	r3, r3, #12
 8005d4e:	607b      	str	r3, [r7, #4]

  if (tmpcfgr == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2b08      	cmp	r3, #8
 8005d54:	d102      	bne.n	8005d5c <HAL_RCC_GetSysClockFreq+0x1c>
  {
    /* HSE used as system clock source */
    sysclk = HSE_VALUE;
 8005d56:	4b1b      	ldr	r3, [pc, #108]	@ (8005dc4 <HAL_RCC_GetSysClockFreq+0x84>)
 8005d58:	603b      	str	r3, [r7, #0]
 8005d5a:	e029      	b.n	8005db0 <HAL_RCC_GetSysClockFreq+0x70>
  }
  else if (tmpcfgr == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2b04      	cmp	r3, #4
 8005d60:	d102      	bne.n	8005d68 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* HSI used as system clock source */
    sysclk = HSI_VALUE;
 8005d62:	4b18      	ldr	r3, [pc, #96]	@ (8005dc4 <HAL_RCC_GetSysClockFreq+0x84>)
 8005d64:	603b      	str	r3, [r7, #0]
 8005d66:	e023      	b.n	8005db0 <HAL_RCC_GetSysClockFreq+0x70>
  }
  else
  {
    /* MSIS used as system clock source. Read ICSR1 register */
    tmpcfgr = RCC->ICSCR1;
 8005d68:	4b15      	ldr	r3, [pc, #84]	@ (8005dc0 <HAL_RCC_GetSysClockFreq+0x80>)
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	607b      	str	r3, [r7, #4]

    /* Check which MSIS Range is selected */
    if ((tmpcfgr & RCC_ICSCR1_MSIRGSEL) != 0x00u)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d00d      	beq.n	8005d94 <HAL_RCC_GetSysClockFreq+0x54>
    {
      /* Check which MSIRCx is selected as MSIS source */
      if ((tmpcfgr & RCC_ICSCR1_MSISSEL) != 0x00u)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	da02      	bge.n	8005d84 <HAL_RCC_GetSysClockFreq+0x44>
      {
        /* MSI RC1 is selected */
        sysclk = MSIRC1_VALUE;
 8005d7e:	4b12      	ldr	r3, [pc, #72]	@ (8005dc8 <HAL_RCC_GetSysClockFreq+0x88>)
 8005d80:	603b      	str	r3, [r7, #0]
 8005d82:	e001      	b.n	8005d88 <HAL_RCC_GetSysClockFreq+0x48>
      }
      else
      {
        /* MSI RC0 is selected */
        sysclk = MSIRC0_VALUE;
 8005d84:	4b11      	ldr	r3, [pc, #68]	@ (8005dcc <HAL_RCC_GetSysClockFreq+0x8c>)
 8005d86:	603b      	str	r3, [r7, #0]
      }

      /* Get MSIS range */
      tmpcfgr = (tmpcfgr & RCC_ICSCR1_MSISDIV) >> RCC_ICSCR1_MSISDIV_Pos;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	0f5b      	lsrs	r3, r3, #29
 8005d8c:	f003 0303 	and.w	r3, r3, #3
 8005d90:	607b      	str	r3, [r7, #4]
 8005d92:	e008      	b.n	8005da6 <HAL_RCC_GetSysClockFreq+0x66>
    }
    else
    {
      /* MSI RC1 is selected */
      sysclk = MSIRC1_VALUE;
 8005d94:	4b0c      	ldr	r3, [pc, #48]	@ (8005dc8 <HAL_RCC_GetSysClockFreq+0x88>)
 8005d96:	603b      	str	r3, [r7, #0]

      /* Get MSIS range */
      tmpcfgr = (RCC->CSR & (RCC_CSR_MSISDIVS_1 | RCC_CSR_MSISDIVS_0)) >> RCC_CSR_MSISDIVS_Pos;
 8005d98:	4b09      	ldr	r3, [pc, #36]	@ (8005dc0 <HAL_RCC_GetSysClockFreq+0x80>)
 8005d9a:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8005d9e:	0b1b      	lsrs	r3, r3, #12
 8005da0:	f003 0303 	and.w	r3, r3, #3
 8005da4:	607b      	str	r3, [r7, #4]
    }

    /* MSIS frequency in HZ*/
    sysclk >>= tmpcfgr;
 8005da6:	683a      	ldr	r2, [r7, #0]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	fa22 f303 	lsr.w	r3, r2, r3
 8005dae:	603b      	str	r3, [r7, #0]
  }

  return sysclk;
 8005db0:	683b      	ldr	r3, [r7, #0]
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	370c      	adds	r7, #12
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr
 8005dbe:	bf00      	nop
 8005dc0:	40030c00 	.word	0x40030c00
 8005dc4:	00f42400 	.word	0x00f42400
 8005dc8:	016e3600 	.word	0x016e3600
 8005dcc:	05b8d800 	.word	0x05b8d800

08005dd0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005dd4:	f7ff ffb4 	bl	8005d40 <HAL_RCC_GetSysClockFreq>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	4b07      	ldr	r3, [pc, #28]	@ (8005df8 <HAL_RCC_GetHCLKFreq+0x28>)
 8005ddc:	6a1b      	ldr	r3, [r3, #32]
 8005dde:	f003 030f 	and.w	r3, r3, #15
 8005de2:	4906      	ldr	r1, [pc, #24]	@ (8005dfc <HAL_RCC_GetHCLKFreq+0x2c>)
 8005de4:	5ccb      	ldrb	r3, [r1, r3]
 8005de6:	fa22 f303 	lsr.w	r3, r2, r3
 8005dea:	4a05      	ldr	r2, [pc, #20]	@ (8005e00 <HAL_RCC_GetHCLKFreq+0x30>)
 8005dec:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8005dee:	4b04      	ldr	r3, [pc, #16]	@ (8005e00 <HAL_RCC_GetHCLKFreq+0x30>)
 8005df0:	681b      	ldr	r3, [r3, #0]
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	40030c00 	.word	0x40030c00
 8005dfc:	08022d48 	.word	0x08022d48
 8005e00:	20000004 	.word	0x20000004

08005e04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8005e08:	f7ff ffe2 	bl	8005dd0 <HAL_RCC_GetHCLKFreq>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	4b05      	ldr	r3, [pc, #20]	@ (8005e24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e10:	6a1b      	ldr	r3, [r3, #32]
 8005e12:	091b      	lsrs	r3, r3, #4
 8005e14:	f003 0307 	and.w	r3, r3, #7
 8005e18:	4903      	ldr	r1, [pc, #12]	@ (8005e28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e1a:	5ccb      	ldrb	r3, [r1, r3]
 8005e1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	bd80      	pop	{r7, pc}
 8005e24:	40030c00 	.word	0x40030c00
 8005e28:	08022d58 	.word	0x08022d58

08005e2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8005e30:	f7ff ffce 	bl	8005dd0 <HAL_RCC_GetHCLKFreq>
 8005e34:	4602      	mov	r2, r0
 8005e36:	4b05      	ldr	r3, [pc, #20]	@ (8005e4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005e38:	6a1b      	ldr	r3, [r3, #32]
 8005e3a:	0a1b      	lsrs	r3, r3, #8
 8005e3c:	f003 0307 	and.w	r3, r3, #7
 8005e40:	4903      	ldr	r1, [pc, #12]	@ (8005e50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e42:	5ccb      	ldrb	r3, [r1, r3]
 8005e44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	bd80      	pop	{r7, pc}
 8005e4c:	40030c00 	.word	0x40030c00
 8005e50:	08022d58 	.word	0x08022d58

08005e54 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8005e58:	f7ff ffba 	bl	8005dd0 <HAL_RCC_GetHCLKFreq>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	4b05      	ldr	r3, [pc, #20]	@ (8005e74 <HAL_RCC_GetPCLK3Freq+0x20>)
 8005e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e62:	091b      	lsrs	r3, r3, #4
 8005e64:	f003 0307 	and.w	r3, r3, #7
 8005e68:	4903      	ldr	r1, [pc, #12]	@ (8005e78 <HAL_RCC_GetPCLK3Freq+0x24>)
 8005e6a:	5ccb      	ldrb	r3, [r1, r3]
 8005e6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	bd80      	pop	{r7, pc}
 8005e74:	40030c00 	.word	0x40030c00
 8005e78:	08022d58 	.word	0x08022d58

08005e7c <HAL_RCC_GetMSIKFreq>:
/**
  * @brief  Return the MSIK frequency.
  * @retval MSIK frequency in Hz
  */
uint32_t HAL_RCC_GetMSIKFreq(void)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b083      	sub	sp, #12
 8005e80:	af00      	add	r7, sp, #0
  uint32_t tmp;
  uint32_t msirange;

  /* Compute MSIK frequency ------------------------------------------------*/
  /* Read RCC ICSR1 register */
  tmp = RCC->ICSCR1;
 8005e82:	4b16      	ldr	r3, [pc, #88]	@ (8005edc <HAL_RCC_GetMSIKFreq+0x60>)
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	607b      	str	r3, [r7, #4]

  /* Check which MSIK Range is selected */
  if ((tmp & RCC_ICSCR1_MSIRGSEL) != 0x00u)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d00f      	beq.n	8005eb2 <HAL_RCC_GetMSIKFreq+0x36>
  {
    /* Get MSIK range */
    msirange = (tmp & RCC_ICSCR1_MSIKDIV) >> RCC_ICSCR1_MSIKDIV_Pos;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	0e9b      	lsrs	r3, r3, #26
 8005e96:	f003 0303 	and.w	r3, r3, #3
 8005e9a:	603b      	str	r3, [r7, #0]

    /* Check which MSIRCx is selected as MSIK source */
    if ((tmp & RCC_ICSCR1_MSIKSEL) != 0x00u)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d002      	beq.n	8005eac <HAL_RCC_GetMSIKFreq+0x30>
    {
      /* MSI RC1 is selected */
      tmp = MSIRC1_VALUE;
 8005ea6:	4b0e      	ldr	r3, [pc, #56]	@ (8005ee0 <HAL_RCC_GetMSIKFreq+0x64>)
 8005ea8:	607b      	str	r3, [r7, #4]
 8005eaa:	e00b      	b.n	8005ec4 <HAL_RCC_GetMSIKFreq+0x48>
    }
    else
    {
      /* MSI RC0 is selected */
      tmp = MSIRC0_VALUE;
 8005eac:	4b0d      	ldr	r3, [pc, #52]	@ (8005ee4 <HAL_RCC_GetMSIKFreq+0x68>)
 8005eae:	607b      	str	r3, [r7, #4]
 8005eb0:	e008      	b.n	8005ec4 <HAL_RCC_GetMSIKFreq+0x48>
    }
  }
  else
  {
    /* MSI RC1 is selected */
    tmp = MSIRC1_VALUE;
 8005eb2:	4b0b      	ldr	r3, [pc, #44]	@ (8005ee0 <HAL_RCC_GetMSIKFreq+0x64>)
 8005eb4:	607b      	str	r3, [r7, #4]

    /* Get MSIK range */
    msirange = (RCC->CSR & (RCC_CSR_MSIKDIVS_1 | RCC_CSR_MSIKDIVS_0)) >> RCC_CSR_MSIKDIVS_Pos;
 8005eb6:	4b09      	ldr	r3, [pc, #36]	@ (8005edc <HAL_RCC_GetMSIKFreq+0x60>)
 8005eb8:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8005ebc:	0a1b      	lsrs	r3, r3, #8
 8005ebe:	f003 0303 	and.w	r3, r3, #3
 8005ec2:	603b      	str	r3, [r7, #0]
  }

  /*MSIK frequency in HZ*/
  tmp >>= msirange;
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	fa22 f303 	lsr.w	r3, r2, r3
 8005ecc:	607b      	str	r3, [r7, #4]

  return tmp;
 8005ece:	687b      	ldr	r3, [r7, #4]
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	370c      	adds	r7, #12
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr
 8005edc:	40030c00 	.word	0x40030c00
 8005ee0:	016e3600 	.word	0x016e3600
 8005ee4:	05b8d800 	.word	0x05b8d800

08005ee8 <HAL_RCCEx_PeriphCLKConfig>:
  * @note   Care must be taken when HAL_RCCEx_PeriphCLKConfig() is used to select
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef *PeriphClkInit)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b088      	sub	sp, #32
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f003 0301 	and.w	r3, r3, #1
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d00a      	beq.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005efc:	4bad      	ldr	r3, [pc, #692]	@ (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005efe:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005f02:	f023 0201 	bic.w	r2, r3, #1
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	49aa      	ldr	r1, [pc, #680]	@ (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f003 0302 	and.w	r3, r3, #2
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d00a      	beq.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005f1e:	4ba5      	ldr	r3, [pc, #660]	@ (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005f20:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005f24:	f023 0204 	bic.w	r2, r3, #4
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	49a1      	ldr	r1, [pc, #644]	@ (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- UART4 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f003 0304 	and.w	r3, r3, #4
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d00a      	beq.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005f40:	4b9c      	ldr	r3, [pc, #624]	@ (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005f42:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005f46:	f023 0210 	bic.w	r2, r3, #16
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	4999      	ldr	r1, [pc, #612]	@ (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005f50:	4313      	orrs	r3, r2
 8005f52:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- UART5 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f003 0308 	and.w	r3, r3, #8
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d00a      	beq.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005f62:	4b94      	ldr	r3, [pc, #592]	@ (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005f64:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005f68:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	691b      	ldr	r3, [r3, #16]
 8005f70:	4990      	ldr	r1, [pc, #576]	@ (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005f72:	4313      	orrs	r3, r2
 8005f74:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 0310 	and.w	r3, r3, #16
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d00a      	beq.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(PeriphClkInit->I3c1ClockSelection));

    /* Configure the I3C1 clock source */
    __HAL_RCC_I3C1_CONFIG(PeriphClkInit->I3c1ClockSelection);
 8005f84:	4b8b      	ldr	r3, [pc, #556]	@ (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005f86:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005f8a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	695b      	ldr	r3, [r3, #20]
 8005f92:	4988      	ldr	r1, [pc, #544]	@ (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005f94:	4313      	orrs	r3, r2
 8005f96:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f003 0320 	and.w	r3, r3, #32
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d00a      	beq.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005fa6:	4b83      	ldr	r3, [pc, #524]	@ (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005fa8:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005fac:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	699b      	ldr	r3, [r3, #24]
 8005fb4:	497f      	ldr	r1, [pc, #508]	@ (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

#if defined(I2C2)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d00a      	beq.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0xf6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005fc8:	4b7a      	ldr	r3, [pc, #488]	@ (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005fca:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005fce:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	69db      	ldr	r3, [r3, #28]
 8005fd6:	4977      	ldr	r1, [pc, #476]	@ (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }
#endif /* I2C2 */

#if defined(I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d00a      	beq.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(PeriphClkInit->I3c2ClockSelection));

    /* Configure the I3C2 clock source */
    __HAL_RCC_I3C2_CONFIG(PeriphClkInit->I3c2ClockSelection);
 8005fea:	4b72      	ldr	r3, [pc, #456]	@ (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005fec:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005ff0:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6a1b      	ldr	r3, [r3, #32]
 8005ff8:	496e      	ldr	r1, [pc, #440]	@ (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }
#endif /* I3C2 */

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006008:	2b00      	cmp	r3, #0
 800600a:	d00a      	beq.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(PeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(PeriphClkInit->Spi2ClockSelection);
 800600c:	4b69      	ldr	r3, [pc, #420]	@ (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800600e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8006012:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800601a:	4966      	ldr	r1, [pc, #408]	@ (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800601c:	4313      	orrs	r3, r2
 800601e:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800602a:	2b00      	cmp	r3, #0
 800602c:	d00a      	beq.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800602e:	4b61      	ldr	r3, [pc, #388]	@ (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8006030:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8006034:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800603c:	495d      	ldr	r1, [pc, #372]	@ (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800603e:	4313      	orrs	r3, r2
 8006040:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800604c:	2b00      	cmp	r3, #0
 800604e:	d00a      	beq.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x17e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(PeriphClkInit->Spi1ClockSelection);
 8006050:	4b58      	ldr	r3, [pc, #352]	@ (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8006052:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8006056:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800605e:	4955      	ldr	r1, [pc, #340]	@ (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8006060:	4313      	orrs	r3, r2
 8006062:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- SYSTICK clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SYSTICK) == RCC_PERIPHCLK_SYSTICK)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800606e:	2b00      	cmp	r3, #0
 8006070:	d00a      	beq.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SYSTICKCLKSOURCE(PeriphClkInit->SystickClockSelection));

    /* Configure the SYSTICK clock source */
    __HAL_RCC_SYSTICK_CONFIG(PeriphClkInit->SystickClockSelection);
 8006072:	4b50      	ldr	r3, [pc, #320]	@ (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8006074:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8006078:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006080:	494c      	ldr	r1, [pc, #304]	@ (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8006082:	4313      	orrs	r3, r2
 8006084:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006090:	2b00      	cmp	r3, #0
 8006092:	d00a      	beq.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN1 clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006094:	4b47      	ldr	r3, [pc, #284]	@ (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8006096:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800609a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060a2:	4944      	ldr	r1, [pc, #272]	@ (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80060a4:	4313      	orrs	r3, r2
 80060a6:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }
#endif /* FDCAN1 */

  /*-------------------------- ICLK clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d00a      	beq.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(PeriphClkInit->IclkClockSelection));

    /* Set the source of ICLK clock*/
    __HAL_RCC_ICLK_CONFIG(PeriphClkInit->IclkClockSelection);
 80060b6:	4b3f      	ldr	r3, [pc, #252]	@ (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80060b8:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80060bc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060c4:	493b      	ldr	r1, [pc, #236]	@ (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80060c6:	4313      	orrs	r3, r2
 80060c8:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- USB1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB1) == RCC_PERIPHCLK_USB1)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d00a      	beq.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USB1CLKSOURCE(PeriphClkInit->Usb1ClockSelection));

    /* Set the source of USB1 clock*/
    __HAL_RCC_USB1_CONFIG(PeriphClkInit->Usb1ClockSelection);
 80060d8:	4b36      	ldr	r3, [pc, #216]	@ (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80060da:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80060de:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060e6:	4933      	ldr	r1, [pc, #204]	@ (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80060e8:	4313      	orrs	r3, r2
 80060ea:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- TIMIC clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIMIC) == RCC_PERIPHCLK_TIMIC)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d00a      	beq.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMICCLKSOURCE(PeriphClkInit->TimIcClockSelection));

    /* Configure the TIMIC clock source */
    __HAL_RCC_TIMIC_CONFIG(PeriphClkInit->TimIcClockSelection);
 80060fa:	4b2e      	ldr	r3, [pc, #184]	@ (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80060fc:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8006100:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006108:	492a      	ldr	r1, [pc, #168]	@ (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800610a:	4313      	orrs	r3, r2
 800610c:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

#if defined(ADF1)
  /*-------------------------- ADF1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006118:	2b00      	cmp	r3, #0
 800611a:	d00a      	beq.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(PeriphClkInit->Adf1ClockSelection));

    /* Set the source of ADF1 clock*/
    __HAL_RCC_ADF1_CONFIG(PeriphClkInit->Adf1ClockSelection);
 800611c:	4b25      	ldr	r3, [pc, #148]	@ (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800611e:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8006122:	f023 0203 	bic.w	r2, r3, #3
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800612a:	4922      	ldr	r1, [pc, #136]	@ (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800612c:	4313      	orrs	r3, r2
 800612e:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }
#endif /* ADF1 */

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800613a:	2b00      	cmp	r3, #0
 800613c:	d00a      	beq.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(PeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(PeriphClkInit->Spi3ClockSelection);
 800613e:	4b1d      	ldr	r3, [pc, #116]	@ (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8006140:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8006144:	f023 0208 	bic.w	r2, r3, #8
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800614c:	4919      	ldr	r1, [pc, #100]	@ (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800614e:	4313      	orrs	r3, r2
 8006150:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800615c:	2b00      	cmp	r3, #0
 800615e:	d00a      	beq.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Set the source of SAI1 clock*/
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006160:	4b14      	ldr	r3, [pc, #80]	@ (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8006162:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8006166:	f023 0260 	bic.w	r2, r3, #96	@ 0x60
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800616e:	4911      	ldr	r1, [pc, #68]	@ (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8006170:	4313      	orrs	r3, r2
 8006172:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }
#endif /* SAI1 */

  /*-------------------------- RNG clock source configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800617e:	2b00      	cmp	r3, #0
 8006180:	d00a      	beq.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Set the source of RNG clock*/
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006182:	4b0c      	ldr	r3, [pc, #48]	@ (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8006184:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8006188:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006190:	4908      	ldr	r1, [pc, #32]	@ (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8006192:	4313      	orrs	r3, r2
 8006194:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d019      	beq.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(PeriphClkInit->AdcDacClockSelection));
    assert_param(IS_RCC_ADCDAC_DIV(PeriphClkInit->AdcDacClockDivider));

    /* Configure the ADC12 and DAC1 interface clock source */
    __HAL_RCC_ADCDAC_CONFIG(PeriphClkInit->AdcDacClockSelection);
 80061a4:	4b03      	ldr	r3, [pc, #12]	@ (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80061a6:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80061aa:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	e002      	b.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80061b2:	bf00      	nop
 80061b4:	40030c00 	.word	0x40030c00
 80061b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061ba:	4980      	ldr	r1, [pc, #512]	@ (80063bc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80061bc:	4313      	orrs	r3, r2
 80061be:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104

    /* Configure the ADC12 and DAC1 interface clock divider */
    __HAL_RCC_ADCDAC_DIV_CONFIG(PeriphClkInit->AdcDacClockDivider);
 80061c2:	4b7e      	ldr	r3, [pc, #504]	@ (80063bc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80061c4:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80061c8:	f423 4270 	bic.w	r2, r3, #61440	@ 0xf000
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061d0:	497a      	ldr	r1, [pc, #488]	@ (80063bc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80061d2:	4313      	orrs	r3, r2
 80061d4:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }

  /*-------------------------- DAC1SH clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1SH) == RCC_PERIPHCLK_DAC1SH)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d00a      	beq.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DAC1SHCLKSOURCE(PeriphClkInit->Dac1SampleHoldClockSelection));

    /* Configure the DAC1 sample and hold interface clock source */
    __HAL_RCC_DAC1SH_CONFIG(PeriphClkInit->Dac1SampleHoldClockSelection);
 80061e4:	4b75      	ldr	r3, [pc, #468]	@ (80063bc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80061e6:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80061ea:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061f2:	4972      	ldr	r1, [pc, #456]	@ (80063bc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80061f4:	4313      	orrs	r3, r2
 80061f6:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }

  /*-------------------------- OCTOSPI1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OCTOSPI1) == RCC_PERIPHCLK_OCTOSPI1)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006202:	2b00      	cmp	r3, #0
 8006204:	d00a      	beq.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OCTOSPICLKSOURCE(PeriphClkInit->Octospi1ClockSelection));

    /* Configure the OCTOSPI1 clock source */
    __HAL_RCC_OCTOSPI_CONFIG(PeriphClkInit->Octospi1ClockSelection);
 8006206:	4b6d      	ldr	r3, [pc, #436]	@ (80063bc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8006208:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800620c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006214:	4969      	ldr	r1, [pc, #420]	@ (80063bc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8006216:	4313      	orrs	r3, r2
 8006218:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006224:	2b00      	cmp	r3, #0
 8006226:	d00a      	beq.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x356>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006228:	4b64      	ldr	r3, [pc, #400]	@ (80063bc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800622a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800622e:	f023 0203 	bic.w	r2, r3, #3
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006236:	4961      	ldr	r1, [pc, #388]	@ (80063bc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8006238:	4313      	orrs	r3, r2
 800623a:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00a      	beq.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x378>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800624a:	4b5c      	ldr	r3, [pc, #368]	@ (80063bc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800624c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006250:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006258:	4958      	ldr	r1, [pc, #352]	@ (80063bc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800625a:	4313      	orrs	r3, r2
 800625c:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006268:	2b00      	cmp	r3, #0
 800626a:	d00a      	beq.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x39a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM34CLKSOURCE(PeriphClkInit->Lptim34ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_LPTIM34_CONFIG(PeriphClkInit->Lptim34ClockSelection);
 800626c:	4b53      	ldr	r3, [pc, #332]	@ (80063bc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800626e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006272:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800627a:	4950      	ldr	r1, [pc, #320]	@ (80063bc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800627c:	4313      	orrs	r3, r2
 800627e:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800628a:	2b00      	cmp	r3, #0
 800628c:	d00a      	beq.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800628e:	4b4b      	ldr	r3, [pc, #300]	@ (80063bc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8006290:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006294:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800629c:	4947      	ldr	r1, [pc, #284]	@ (80063bc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800629e:	4313      	orrs	r3, r2
 80062a0:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
    __HAL_RCC_SPI4_CONFIG(PeriphClkInit->Spi4ClockSelection);
  }
#endif /* SPI4 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	f280 8082 	bge.w	80063b2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Reset the Backup domain only if the RTC Clock source selection is different then axisting one */
    tmpreg1 = RCC->BDCR;
 80062ae:	4b43      	ldr	r3, [pc, #268]	@ (80063bc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80062b0:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80062b4:	61fb      	str	r3, [r7, #28]
    tmpreg2 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80062b6:	4b41      	ldr	r3, [pc, #260]	@ (80063bc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80062b8:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80062bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062c0:	617b      	str	r3, [r7, #20]

    /* Check if RTC clock source needs to be changed */
    if (tmpreg2 != PeriphClkInit->RTCClockSelection)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062c6:	697a      	ldr	r2, [r7, #20]
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d072      	beq.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      FlagStatus       pwrclkchanged = RESET;
 80062cc:	2300      	movs	r3, #0
 80062ce:	76fb      	strb	r3, [r7, #27]

      /* Enable Power Clock */
      if (__HAL_RCC_PWR_IS_CLK_ENABLED() != 0x01u)
 80062d0:	4b3a      	ldr	r3, [pc, #232]	@ (80063bc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80062d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80062d6:	f003 0304 	and.w	r3, r3, #4
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d110      	bne.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x418>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80062de:	4b37      	ldr	r3, [pc, #220]	@ (80063bc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80062e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80062e4:	4a35      	ldr	r2, [pc, #212]	@ (80063bc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80062e6:	f043 0304 	orr.w	r3, r3, #4
 80062ea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80062ee:	4b33      	ldr	r3, [pc, #204]	@ (80063bc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80062f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80062f4:	f003 0304 	and.w	r3, r3, #4
 80062f8:	60fb      	str	r3, [r7, #12]
 80062fa:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80062fc:	2301      	movs	r3, #1
 80062fe:	76fb      	strb	r3, [r7, #27]
      }

      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006300:	4b2f      	ldr	r3, [pc, #188]	@ (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 8006302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006304:	4a2e      	ldr	r2, [pc, #184]	@ (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 8006306:	f043 0301 	orr.w	r3, r3, #1
 800630a:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Check if a backup domain reset is required */
      if (tmpreg2 != RCC_RTCCLKSOURCE_DISABLE)
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d00f      	beq.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006312:	4b2a      	ldr	r3, [pc, #168]	@ (80063bc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8006314:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8006318:	4a28      	ldr	r2, [pc, #160]	@ (80063bc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800631a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800631e:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006322:	4b26      	ldr	r3, [pc, #152]	@ (80063bc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8006324:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8006328:	4a24      	ldr	r2, [pc, #144]	@ (80063bc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800632a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800632e:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
      }

      /* Apply new RTC clock source selection */
      tmpreg1 &= ~(RCC_BDCR_RTCSEL | RCC_BDCR_RTCEN);
 8006332:	69fb      	ldr	r3, [r7, #28]
 8006334:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8006338:	61fb      	str	r3, [r7, #28]

      /* Check is RTC disable is asked */
      if (PeriphClkInit->RTCClockSelection != RCC_RTCCLKSOURCE_DISABLE)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800633e:	2b00      	cmp	r3, #0
 8006340:	d006      	beq.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x468>
      {
        tmpreg1 |= (RCC_BDCR_RTCEN | PeriphClkInit->RTCClockSelection);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8006346:	69fb      	ldr	r3, [r7, #28]
 8006348:	4313      	orrs	r3, r2
 800634a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800634e:	61fb      	str	r3, [r7, #28]
      }
      RCC->BDCR = tmpreg1;
 8006350:	4a1a      	ldr	r2, [pc, #104]	@ (80063bc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8006352:	69fb      	ldr	r3, [r7, #28]
 8006354:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110

      /* Check if an oscillator was enable */
      if ((tmpreg1 & RCC_BDCR_LSEON) != 0x00u)
 8006358:	69fb      	ldr	r3, [r7, #28]
 800635a:	f003 0301 	and.w	r3, r3, #1
 800635e:	2b00      	cmp	r3, #0
 8006360:	d01c      	beq.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x4b4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006362:	f7fc fe35 	bl	8002fd0 <HAL_GetTick>
 8006366:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0x00u)
 8006368:	e011      	b.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800636a:	f7fc fe31 	bl	8002fd0 <HAL_GetTick>
 800636e:	4602      	mov	r2, r0
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	1ad3      	subs	r3, r2, r3
 8006374:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006378:	4293      	cmp	r3, r2
 800637a:	d908      	bls.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
          {
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0x00u)
 800637c:	4b0f      	ldr	r3, [pc, #60]	@ (80063bc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800637e:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8006382:	f003 0302 	and.w	r3, r3, #2
 8006386:	2b00      	cmp	r3, #0
 8006388:	d101      	bne.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
            {
              return HAL_TIMEOUT;
 800638a:	2303      	movs	r3, #3
 800638c:	e012      	b.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0x00u)
 800638e:	4b0b      	ldr	r3, [pc, #44]	@ (80063bc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8006390:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8006394:	f003 0302 	and.w	r3, r3, #2
 8006398:	2b00      	cmp	r3, #0
 800639a:	d0e6      	beq.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x482>
            }
          }
        }
      }
      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800639c:	7efb      	ldrb	r3, [r7, #27]
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d107      	bne.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80063a2:	4b06      	ldr	r3, [pc, #24]	@ (80063bc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80063a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80063a8:	4a04      	ldr	r2, [pc, #16]	@ (80063bc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80063aa:	f023 0304 	bic.w	r3, r3, #4
 80063ae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }
    }
  }

  return HAL_OK;
 80063b2:	2300      	movs	r3, #0
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3720      	adds	r7, #32
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}
 80063bc:	40030c00 	.word	0x40030c00
 80063c0:	40030800 	.word	0x40030800

080063c4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *
  *            (*) value not defined in all devices.
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b084      	sub	sp, #16
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0;
 80063cc:	2300      	movs	r3, #0
 80063ce:	60fb      	str	r3, [r7, #12]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80063d6:	f000 8469 	beq.w	8006cac <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80063e0:	f200 84a0 	bhi.w	8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80063ea:	f000 8420 	beq.w	8006c2e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80063f4:	f200 8496 	bhi.w	8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80063fe:	f000 83d3 	beq.w	8006ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006408:	f200 848c 	bhi.w	8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006412:	f000 83b8 	beq.w	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x7c2>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800641c:	f200 8482 	bhi.w	8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006426:	f000 8378 	beq.w	8006b1a <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006430:	f200 8478 	bhi.w	8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800643a:	f000 835d 	beq.w	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006444:	f200 846e 	bhi.w	8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800644e:	f000 8326 	beq.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006458:	f200 8464 	bhi.w	8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006462:	f000 82db 	beq.w	8006a1c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800646c:	f200 845a 	bhi.w	8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006476:	f000 82b9 	beq.w	80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x628>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006480:	f200 8450 	bhi.w	8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800648a:	f000 828c 	beq.w	80069a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006494:	f200 8446 	bhi.w	8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800649e:	f000 8271 	beq.w	8006984 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80064a8:	f200 843c 	bhi.w	8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064b2:	f000 8246 	beq.w	8006942 <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064bc:	f200 8432 	bhi.w	8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80064c6:	f000 8228 	beq.w	800691a <HAL_RCCEx_GetPeriphCLKFreq+0x556>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80064d0:	f200 8428 	bhi.w	8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064da:	f000 81ef 	beq.w	80068bc <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064e4:	f200 841e 	bhi.w	8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064ee:	f000 81ce 	beq.w	800688e <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064f8:	f200 8414 	bhi.w	8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006502:	f000 8189 	beq.w	8006818 <HAL_RCCEx_GetPeriphCLKFreq+0x454>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800650c:	f200 840a 	bhi.w	8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006516:	f000 816e 	beq.w	80067f6 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006520:	f200 8400 	bhi.w	8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800652a:	f000 8121 	beq.w	8006770 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006534:	f200 83f6 	bhi.w	8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800653e:	f000 8106 	beq.w	800674e <HAL_RCCEx_GetPeriphCLKFreq+0x38a>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006548:	f200 83ec 	bhi.w	8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2b80      	cmp	r3, #128	@ 0x80
 8006550:	f000 80ec 	beq.w	800672c <HAL_RCCEx_GetPeriphCLKFreq+0x368>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2b80      	cmp	r3, #128	@ 0x80
 8006558:	f200 83e4 	bhi.w	8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2b20      	cmp	r3, #32
 8006560:	d84c      	bhi.n	80065fc <HAL_RCCEx_GetPeriphCLKFreq+0x238>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2b00      	cmp	r3, #0
 8006566:	f000 83dd 	beq.w	8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	3b01      	subs	r3, #1
 800656e:	2b1f      	cmp	r3, #31
 8006570:	f200 83d8 	bhi.w	8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8006574:	a201      	add	r2, pc, #4	@ (adr r2, 800657c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8006576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800657a:	bf00      	nop
 800657c:	08006607 	.word	0x08006607
 8006580:	08006637 	.word	0x08006637
 8006584:	08006d25 	.word	0x08006d25
 8006588:	08006667 	.word	0x08006667
 800658c:	08006d25 	.word	0x08006d25
 8006590:	08006d25 	.word	0x08006d25
 8006594:	08006d25 	.word	0x08006d25
 8006598:	08006697 	.word	0x08006697
 800659c:	08006d25 	.word	0x08006d25
 80065a0:	08006d25 	.word	0x08006d25
 80065a4:	08006d25 	.word	0x08006d25
 80065a8:	08006d25 	.word	0x08006d25
 80065ac:	08006d25 	.word	0x08006d25
 80065b0:	08006d25 	.word	0x08006d25
 80065b4:	08006d25 	.word	0x08006d25
 80065b8:	080066c7 	.word	0x080066c7
 80065bc:	08006d25 	.word	0x08006d25
 80065c0:	08006d25 	.word	0x08006d25
 80065c4:	08006d25 	.word	0x08006d25
 80065c8:	08006d25 	.word	0x08006d25
 80065cc:	08006d25 	.word	0x08006d25
 80065d0:	08006d25 	.word	0x08006d25
 80065d4:	08006d25 	.word	0x08006d25
 80065d8:	08006d25 	.word	0x08006d25
 80065dc:	08006d25 	.word	0x08006d25
 80065e0:	08006d25 	.word	0x08006d25
 80065e4:	08006d25 	.word	0x08006d25
 80065e8:	08006d25 	.word	0x08006d25
 80065ec:	08006d25 	.word	0x08006d25
 80065f0:	08006d25 	.word	0x08006d25
 80065f4:	08006d25 	.word	0x08006d25
 80065f8:	080066e9 	.word	0x080066e9
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2b40      	cmp	r3, #64	@ 0x40
 8006600:	f000 8083 	beq.w	800670a <HAL_RCCEx_GetPeriphCLKFreq+0x346>
      break;

    /* Do nothing for Timer input capture as clock source is selected in timer block */
    case RCC_PERIPHCLK_TIMIC:
    default:
      break;
 8006604:	e38e      	b.n	8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
      srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006606:	4ba9      	ldr	r3, [pc, #676]	@ (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8006608:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800660c:	f003 0301 	and.w	r3, r3, #1
 8006610:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d103      	bne.n	8006620 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
        frequency = HAL_RCC_GetPCLK2Freq();
 8006618:	f7ff fc08 	bl	8005e2c <HAL_RCC_GetPCLK2Freq>
 800661c:	60f8      	str	r0, [r7, #12]
      break;
 800661e:	e383      	b.n	8006d28 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006620:	4ba2      	ldr	r3, [pc, #648]	@ (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006628:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800662c:	f040 837c 	bne.w	8006d28 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
          frequency = HSI_VALUE;
 8006630:	4b9f      	ldr	r3, [pc, #636]	@ (80068b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8006632:	60fb      	str	r3, [r7, #12]
      break;
 8006634:	e378      	b.n	8006d28 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
      srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006636:	4b9d      	ldr	r3, [pc, #628]	@ (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8006638:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800663c:	f003 0304 	and.w	r3, r3, #4
 8006640:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d103      	bne.n	8006650 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
        frequency = HAL_RCC_GetPCLK1Freq();
 8006648:	f7ff fbdc 	bl	8005e04 <HAL_RCC_GetPCLK1Freq>
 800664c:	60f8      	str	r0, [r7, #12]
      break;
 800664e:	e36d      	b.n	8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x968>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006650:	4b96      	ldr	r3, [pc, #600]	@ (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006658:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800665c:	f040 8366 	bne.w	8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x968>
          frequency = HSI_VALUE;
 8006660:	4b93      	ldr	r3, [pc, #588]	@ (80068b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8006662:	60fb      	str	r3, [r7, #12]
      break;
 8006664:	e362      	b.n	8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x968>
      srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006666:	4b91      	ldr	r3, [pc, #580]	@ (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8006668:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800666c:	f003 0310 	and.w	r3, r3, #16
 8006670:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d103      	bne.n	8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
        frequency = HAL_RCC_GetPCLK1Freq();
 8006678:	f7ff fbc4 	bl	8005e04 <HAL_RCC_GetPCLK1Freq>
 800667c:	60f8      	str	r0, [r7, #12]
      break;
 800667e:	e357      	b.n	8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006680:	4b8a      	ldr	r3, [pc, #552]	@ (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006688:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800668c:	f040 8350 	bne.w	8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
          frequency = HSI_VALUE;
 8006690:	4b87      	ldr	r3, [pc, #540]	@ (80068b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8006692:	60fb      	str	r3, [r7, #12]
      break;
 8006694:	e34c      	b.n	8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
      srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006696:	4b85      	ldr	r3, [pc, #532]	@ (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8006698:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800669c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066a0:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d103      	bne.n	80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>
        frequency = HAL_RCC_GetPCLK1Freq();
 80066a8:	f7ff fbac 	bl	8005e04 <HAL_RCC_GetPCLK1Freq>
 80066ac:	60f8      	str	r0, [r7, #12]
      break;
 80066ae:	e341      	b.n	8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0x970>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80066b0:	4b7e      	ldr	r3, [pc, #504]	@ (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80066b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066bc:	f040 833a 	bne.w	8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0x970>
          frequency = HSI_VALUE;
 80066c0:	4b7b      	ldr	r3, [pc, #492]	@ (80068b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80066c2:	60fb      	str	r3, [r7, #12]
      break;
 80066c4:	e336      	b.n	8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0x970>
      srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 80066c6:	4b79      	ldr	r3, [pc, #484]	@ (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80066c8:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80066cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066d0:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d103      	bne.n	80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x31c>
        frequency = HAL_RCC_GetPCLK1Freq();
 80066d8:	f7ff fb94 	bl	8005e04 <HAL_RCC_GetPCLK1Freq>
 80066dc:	60f8      	str	r0, [r7, #12]
      break;
 80066de:	e340      	b.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 80066e0:	f7ff fbcc 	bl	8005e7c <HAL_RCC_GetMSIKFreq>
 80066e4:	60f8      	str	r0, [r7, #12]
      break;
 80066e6:	e33c      	b.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80066e8:	4b70      	ldr	r3, [pc, #448]	@ (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80066ea:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80066ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066f2:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d103      	bne.n	8006702 <HAL_RCCEx_GetPeriphCLKFreq+0x33e>
        frequency = HAL_RCC_GetPCLK1Freq();
 80066fa:	f7ff fb83 	bl	8005e04 <HAL_RCC_GetPCLK1Freq>
 80066fe:	60f8      	str	r0, [r7, #12]
      break;
 8006700:	e32f      	b.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 8006702:	f7ff fbbb 	bl	8005e7c <HAL_RCC_GetMSIKFreq>
 8006706:	60f8      	str	r0, [r7, #12]
      break;
 8006708:	e32b      	b.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800670a:	4b68      	ldr	r3, [pc, #416]	@ (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800670c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8006710:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006714:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d103      	bne.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        frequency = HAL_RCC_GetPCLK1Freq();
 800671c:	f7ff fb72 	bl	8005e04 <HAL_RCC_GetPCLK1Freq>
 8006720:	60f8      	str	r0, [r7, #12]
      break;
 8006722:	e31e      	b.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 8006724:	f7ff fbaa 	bl	8005e7c <HAL_RCC_GetMSIKFreq>
 8006728:	60f8      	str	r0, [r7, #12]
      break;
 800672a:	e31a      	b.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 800672c:	4b5f      	ldr	r3, [pc, #380]	@ (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800672e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8006732:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006736:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_I3C2CLKSOURCE_PCLK2)
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d103      	bne.n	8006746 <HAL_RCCEx_GetPeriphCLKFreq+0x382>
        frequency = HAL_RCC_GetPCLK2Freq();
 800673e:	f7ff fb75 	bl	8005e2c <HAL_RCC_GetPCLK2Freq>
 8006742:	60f8      	str	r0, [r7, #12]
      break;
 8006744:	e30d      	b.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 8006746:	f7ff fb99 	bl	8005e7c <HAL_RCC_GetMSIKFreq>
 800674a:	60f8      	str	r0, [r7, #12]
      break;
 800674c:	e309      	b.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800674e:	4b57      	ldr	r3, [pc, #348]	@ (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8006750:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8006754:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006758:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_SPI2CLKSOURCE_PCLK1)
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d103      	bne.n	8006768 <HAL_RCCEx_GetPeriphCLKFreq+0x3a4>
        frequency = HAL_RCC_GetPCLK1Freq();
 8006760:	f7ff fb50 	bl	8005e04 <HAL_RCC_GetPCLK1Freq>
 8006764:	60f8      	str	r0, [r7, #12]
      break;
 8006766:	e2fc      	b.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 8006768:	f7ff fb88 	bl	8005e7c <HAL_RCC_GetMSIKFreq>
 800676c:	60f8      	str	r0, [r7, #12]
      break;
 800676e:	e2f8      	b.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006770:	4b4e      	ldr	r3, [pc, #312]	@ (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8006772:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8006776:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800677a:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d103      	bne.n	800678a <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
        frequency = HAL_RCC_GetPCLK1Freq();
 8006782:	f7ff fb3f 	bl	8005e04 <HAL_RCC_GetPCLK1Freq>
 8006786:	60f8      	str	r0, [r7, #12]
      break;
 8006788:	e2d6      	b.n	8006d38 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
      else if (srcclk == RCC_LPTIM2CLKSOURCE_LSI)
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006790:	d116      	bne.n	80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006792:	4b46      	ldr	r3, [pc, #280]	@ (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8006794:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8006798:	f003 0302 	and.w	r3, r3, #2
 800679c:	2b02      	cmp	r3, #2
 800679e:	f040 82cb 	bne.w	8006d38 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = LSI_VALUE;
 80067a2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80067a6:	60fb      	str	r3, [r7, #12]
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 80067a8:	4b40      	ldr	r3, [pc, #256]	@ (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80067aa:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80067ae:	f003 0304 	and.w	r3, r3, #4
 80067b2:	2b04      	cmp	r3, #4
 80067b4:	f040 82c0 	bne.w	8006d38 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
            frequency /= 128U;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	09db      	lsrs	r3, r3, #7
 80067bc:	60fb      	str	r3, [r7, #12]
      break;
 80067be:	e2bb      	b.n	8006d38 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
      else if (srcclk == RCC_LPTIM2CLKSOURCE_HSI)
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80067c6:	d10a      	bne.n	80067de <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80067c8:	4b38      	ldr	r3, [pc, #224]	@ (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80067d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067d4:	f040 82b0 	bne.w	8006d38 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = HSI_VALUE;
 80067d8:	4b35      	ldr	r3, [pc, #212]	@ (80068b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80067da:	60fb      	str	r3, [r7, #12]
      break;
 80067dc:	e2ac      	b.n	8006d38 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80067de:	4b33      	ldr	r3, [pc, #204]	@ (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80067e0:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80067e4:	f003 0302 	and.w	r3, r3, #2
 80067e8:	2b02      	cmp	r3, #2
 80067ea:	f040 82a5 	bne.w	8006d38 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = LSE_VALUE;
 80067ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80067f2:	60fb      	str	r3, [r7, #12]
      break;
 80067f4:	e2a0      	b.n	8006d38 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
      srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80067f6:	4b2d      	ldr	r3, [pc, #180]	@ (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80067f8:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80067fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006800:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_SPI1CLKSOURCE_PCLK2)
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d103      	bne.n	8006810 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
        frequency = HAL_RCC_GetPCLK2Freq();
 8006808:	f7ff fb10 	bl	8005e2c <HAL_RCC_GetPCLK2Freq>
 800680c:	60f8      	str	r0, [r7, #12]
      break;
 800680e:	e2a8      	b.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 8006810:	f7ff fb34 	bl	8005e7c <HAL_RCC_GetMSIKFreq>
 8006814:	60f8      	str	r0, [r7, #12]
      break;
 8006816:	e2a4      	b.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_SYSTICK_SOURCE();
 8006818:	4b24      	ldr	r3, [pc, #144]	@ (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800681a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800681e:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8006822:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_SYSTICKCLKSOURCE_HCLK_DIV8)
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d105      	bne.n	8006836 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
        frequency = (HAL_RCC_GetHCLKFreq() / 8u);
 800682a:	f7ff fad1 	bl	8005dd0 <HAL_RCC_GetHCLKFreq>
 800682e:	4603      	mov	r3, r0
 8006830:	08db      	lsrs	r3, r3, #3
 8006832:	60fb      	str	r3, [r7, #12]
      break;
 8006834:	e282      	b.n	8006d3c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
      else if (srcclk == RCC_SYSTICKCLKSOURCE_LSE)
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800683c:	d10b      	bne.n	8006856 <HAL_RCCEx_GetPeriphCLKFreq+0x492>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800683e:	4b1b      	ldr	r3, [pc, #108]	@ (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8006840:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8006844:	f003 0302 	and.w	r3, r3, #2
 8006848:	2b02      	cmp	r3, #2
 800684a:	f040 8277 	bne.w	8006d3c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = LSE_VALUE;
 800684e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006852:	60fb      	str	r3, [r7, #12]
      break;
 8006854:	e272      	b.n	8006d3c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
      else if (srcclk == RCC_SYSTICKCLKSOURCE_LSI)
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800685c:	f040 826e 	bne.w	8006d3c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006860:	4b12      	ldr	r3, [pc, #72]	@ (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8006862:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8006866:	f003 0302 	and.w	r3, r3, #2
 800686a:	2b02      	cmp	r3, #2
 800686c:	f040 8266 	bne.w	8006d3c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = LSI_VALUE;
 8006870:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006874:	60fb      	str	r3, [r7, #12]
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8006876:	4b0d      	ldr	r3, [pc, #52]	@ (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8006878:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800687c:	f003 0304 	and.w	r3, r3, #4
 8006880:	2b04      	cmp	r3, #4
 8006882:	f040 825b 	bne.w	8006d3c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
            frequency /= 128u;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	09db      	lsrs	r3, r3, #7
 800688a:	60fb      	str	r3, [r7, #12]
      break;
 800688c:	e256      	b.n	8006d3c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
      srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800688e:	4b07      	ldr	r3, [pc, #28]	@ (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8006890:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8006894:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006898:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_FDCANCLKSOURCE_MSIK)
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80068a0:	d108      	bne.n	80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>
        frequency = HAL_RCC_GetMSIKFreq();
 80068a2:	f7ff faeb 	bl	8005e7c <HAL_RCC_GetMSIKFreq>
 80068a6:	60f8      	str	r0, [r7, #12]
      break;
 80068a8:	e25b      	b.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 80068aa:	bf00      	nop
 80068ac:	40030c00 	.word	0x40030c00
 80068b0:	00f42400 	.word	0x00f42400
        frequency = HAL_RCC_GetSysClockFreq();
 80068b4:	f7ff fa44 	bl	8005d40 <HAL_RCC_GetSysClockFreq>
 80068b8:	60f8      	str	r0, [r7, #12]
      break;
 80068ba:	e252      	b.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80068bc:	4ba4      	ldr	r3, [pc, #656]	@ (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80068be:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80068c2:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80068c6:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_ICLKCLKSOURCE_HSI48)
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d10a      	bne.n	80068e4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80068ce:	4ba0      	ldr	r3, [pc, #640]	@ (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80068d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80068da:	f040 8231 	bne.w	8006d40 <HAL_RCCEx_GetPeriphCLKFreq+0x97c>
          frequency = HSI48_VALUE;
 80068de:	4b9d      	ldr	r3, [pc, #628]	@ (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 80068e0:	60fb      	str	r3, [r7, #12]
      break;
 80068e2:	e22d      	b.n	8006d40 <HAL_RCCEx_GetPeriphCLKFreq+0x97c>
      else if (srcclk == RCC_ICLKCLKSOURCE_MSIK)
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80068ea:	d103      	bne.n	80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>
        frequency = HAL_RCC_GetMSIKFreq();
 80068ec:	f7ff fac6 	bl	8005e7c <HAL_RCC_GetMSIKFreq>
 80068f0:	60f8      	str	r0, [r7, #12]
      break;
 80068f2:	e225      	b.n	8006d40 <HAL_RCCEx_GetPeriphCLKFreq+0x97c>
      else if (srcclk == RCC_ICLKCLKSOURCE_HSE)
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80068fa:	d10a      	bne.n	8006912 <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80068fc:	4b94      	ldr	r3, [pc, #592]	@ (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006904:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006908:	f040 821a 	bne.w	8006d40 <HAL_RCCEx_GetPeriphCLKFreq+0x97c>
          frequency = HSE_VALUE;
 800690c:	4b92      	ldr	r3, [pc, #584]	@ (8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800690e:	60fb      	str	r3, [r7, #12]
      break;
 8006910:	e216      	b.n	8006d40 <HAL_RCCEx_GetPeriphCLKFreq+0x97c>
        frequency = HAL_RCC_GetSysClockFreq();
 8006912:	f7ff fa15 	bl	8005d40 <HAL_RCC_GetSysClockFreq>
 8006916:	60f8      	str	r0, [r7, #12]
      break;
 8006918:	e212      	b.n	8006d40 <HAL_RCCEx_GetPeriphCLKFreq+0x97c>
      frequency = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ICLK);
 800691a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800691e:	f7ff fd51 	bl	80063c4 <HAL_RCCEx_GetPeriphCLKFreq>
 8006922:	60f8      	str	r0, [r7, #12]
      srcclk = __HAL_RCC_GET_USB1_SOURCE();
 8006924:	4b8a      	ldr	r3, [pc, #552]	@ (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006926:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800692a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800692e:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_USB1CLKSOURCE_ICLK_DIV2)
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006936:	f040 8205 	bne.w	8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
        frequency = (frequency >> 1u);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	085b      	lsrs	r3, r3, #1
 800693e:	60fb      	str	r3, [r7, #12]
      break;
 8006940:	e200      	b.n	8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8006942:	4b83      	ldr	r3, [pc, #524]	@ (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006944:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8006948:	f003 0303 	and.w	r3, r3, #3
 800694c:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_ADF1CLKSOURCE_HCLK)
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d103      	bne.n	800695c <HAL_RCCEx_GetPeriphCLKFreq+0x598>
        frequency = HAL_RCC_GetHCLKFreq();
 8006954:	f7ff fa3c 	bl	8005dd0 <HAL_RCC_GetHCLKFreq>
 8006958:	60f8      	str	r0, [r7, #12]
      break;
 800695a:	e202      	b.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      else if (srcclk == RCC_ADF1CLKSOURCE_PIN)
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	2b01      	cmp	r3, #1
 8006960:	d103      	bne.n	800696a <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006962:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006966:	60fb      	str	r3, [r7, #12]
      break;
 8006968:	e1fb      	b.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      else if (srcclk == RCC_ADF1CLKSOURCE_MSIK)
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	2b02      	cmp	r3, #2
 800696e:	d103      	bne.n	8006978 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
        frequency = HAL_RCC_GetMSIKFreq();
 8006970:	f7ff fa84 	bl	8005e7c <HAL_RCC_GetMSIKFreq>
 8006974:	60f8      	str	r0, [r7, #12]
      break;
 8006976:	e1f4      	b.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8006978:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800697c:	f7ff fd22 	bl	80063c4 <HAL_RCCEx_GetPeriphCLKFreq>
 8006980:	60f8      	str	r0, [r7, #12]
      break;
 8006982:	e1ee      	b.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8006984:	4b72      	ldr	r3, [pc, #456]	@ (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006986:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800698a:	f003 0308 	and.w	r3, r3, #8
 800698e:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_SPI3CLKSOURCE_PCLK1)
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d103      	bne.n	800699e <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
        frequency = HAL_RCC_GetPCLK1Freq();
 8006996:	f7ff fa35 	bl	8005e04 <HAL_RCC_GetPCLK1Freq>
 800699a:	60f8      	str	r0, [r7, #12]
      break;
 800699c:	e1e1      	b.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 800699e:	f7ff fa6d 	bl	8005e7c <HAL_RCC_GetMSIKFreq>
 80069a2:	60f8      	str	r0, [r7, #12]
      break;
 80069a4:	e1dd      	b.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80069a6:	4b6a      	ldr	r3, [pc, #424]	@ (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80069a8:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80069ac:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80069b0:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_SAI1CLKSOURCE_MSIK)
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d103      	bne.n	80069c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
        frequency = HAL_RCC_GetMSIKFreq();
 80069b8:	f7ff fa60 	bl	8005e7c <HAL_RCC_GetMSIKFreq>
 80069bc:	60f8      	str	r0, [r7, #12]
      break;
 80069be:	e1c3      	b.n	8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
      else if (srcclk == RCC_SAI1CLKSOURCE_PIN)
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	2b20      	cmp	r3, #32
 80069c4:	d103      	bne.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80069c6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80069ca:	60fb      	str	r3, [r7, #12]
      break;
 80069cc:	e1bc      	b.n	8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
      else if (srcclk == RCC_SAI1CLKSOURCE_HSE)
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	2b40      	cmp	r3, #64	@ 0x40
 80069d2:	f040 81b9 	bne.w	8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80069d6:	4b5e      	ldr	r3, [pc, #376]	@ (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80069e2:	f040 81b1 	bne.w	8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
          frequency = HSE_VALUE;
 80069e6:	4b5c      	ldr	r3, [pc, #368]	@ (8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 80069e8:	60fb      	str	r3, [r7, #12]
      break;
 80069ea:	e1ad      	b.n	8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
      srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80069ec:	4b58      	ldr	r3, [pc, #352]	@ (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80069ee:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80069f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80069f6:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_RNGCLKSOURCE_HSI48)
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d10a      	bne.n	8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80069fe:	4b54      	ldr	r3, [pc, #336]	@ (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006a06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a0a:	f040 819f 	bne.w	8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = HSI48_VALUE;
 8006a0e:	4b51      	ldr	r3, [pc, #324]	@ (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8006a10:	60fb      	str	r3, [r7, #12]
      break;
 8006a12:	e19b      	b.n	8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        frequency = HAL_RCC_GetMSIKFreq();
 8006a14:	f7ff fa32 	bl	8005e7c <HAL_RCC_GetMSIKFreq>
 8006a18:	60f8      	str	r0, [r7, #12]
      break;
 8006a1a:	e197      	b.n	8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
      srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8006a1c:	4b4c      	ldr	r3, [pc, #304]	@ (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006a1e:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8006a22:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006a26:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d103      	bne.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
        frequency = HAL_RCC_GetHCLKFreq();
 8006a2e:	f7ff f9cf 	bl	8005dd0 <HAL_RCC_GetHCLKFreq>
 8006a32:	60f8      	str	r0, [r7, #12]
 8006a34:	e014      	b.n	8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
      else if (srcclk == RCC_ADCDACCLKSOURCE_HSE)
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a3c:	d109      	bne.n	8006a52 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006a3e:	4b44      	ldr	r3, [pc, #272]	@ (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a46:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006a4a:	d109      	bne.n	8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
          frequency = HSE_VALUE;
 8006a4c:	4b42      	ldr	r3, [pc, #264]	@ (8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8006a4e:	60fb      	str	r3, [r7, #12]
 8006a50:	e006      	b.n	8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
      else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006a58:	d102      	bne.n	8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
        frequency = HAL_RCC_GetMSIKFreq();
 8006a5a:	f7ff fa0f 	bl	8005e7c <HAL_RCC_GetMSIKFreq>
 8006a5e:	60f8      	str	r0, [r7, #12]
      srcclk = __HAL_RCC_GET_ADCDAC_DIV();
 8006a60:	4b3b      	ldr	r3, [pc, #236]	@ (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006a62:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8006a66:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8006a6a:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_ADCDACCLK_DIV1)
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d102      	bne.n	8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
        srcclk = 0u;
 8006a72:	2300      	movs	r3, #0
 8006a74:	60bb      	str	r3, [r7, #8]
 8006a76:	e00c      	b.n	8006a92 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
      else if (srcclk < RCC_CCIPR2_ADCDACPRE_3)
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a7e:	d202      	bcs.n	8006a86 <HAL_RCCEx_GetPeriphCLKFreq+0x6c2>
        srcclk = 1u;
 8006a80:	2301      	movs	r3, #1
 8006a82:	60bb      	str	r3, [r7, #8]
 8006a84:	e005      	b.n	8006a92 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        srcclk = ((srcclk & ~RCC_CCIPR2_ADCDACPRE_3) >> RCC_CCIPR2_ADCDACPRE_Pos) + 2u;
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	0b1a      	lsrs	r2, r3, #12
 8006a8a:	4b34      	ldr	r3, [pc, #208]	@ (8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006a8c:	4013      	ands	r3, r2
 8006a8e:	3302      	adds	r3, #2
 8006a90:	60bb      	str	r3, [r7, #8]
      frequency = (frequency >> srcclk);
 8006a92:	68fa      	ldr	r2, [r7, #12]
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	fa22 f303 	lsr.w	r3, r2, r3
 8006a9a:	60fb      	str	r3, [r7, #12]
      break;
 8006a9c:	e161      	b.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_DAC1SH_SOURCE();
 8006a9e:	4b2c      	ldr	r3, [pc, #176]	@ (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006aa0:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8006aa4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006aa8:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_DAC1SHCLKSOURCE_LSI)
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006ab0:	d116      	bne.n	8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006ab2:	4b27      	ldr	r3, [pc, #156]	@ (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006ab4:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8006ab8:	f003 0302 	and.w	r3, r3, #2
 8006abc:	2b02      	cmp	r3, #2
 8006abe:	f040 8147 	bne.w	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
          frequency = LSI_VALUE;
 8006ac2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006ac6:	60fb      	str	r3, [r7, #12]
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8006ac8:	4b21      	ldr	r3, [pc, #132]	@ (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006aca:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8006ace:	f003 0304 	and.w	r3, r3, #4
 8006ad2:	2b04      	cmp	r3, #4
 8006ad4:	f040 813c 	bne.w	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
            frequency /= 128u;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	09db      	lsrs	r3, r3, #7
 8006adc:	60fb      	str	r3, [r7, #12]
      break;
 8006ade:	e137      	b.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006ae0:	4b1b      	ldr	r3, [pc, #108]	@ (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006ae2:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8006ae6:	f003 0302 	and.w	r3, r3, #2
 8006aea:	2b02      	cmp	r3, #2
 8006aec:	f040 8130 	bne.w	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
          frequency = LSE_VALUE;
 8006af0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006af4:	60fb      	str	r3, [r7, #12]
      break;
 8006af6:	e12b      	b.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
      srcclk = __HAL_RCC_GET_OCTOSPI_SOURCE();
 8006af8:	4b15      	ldr	r3, [pc, #84]	@ (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006afa:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8006afe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006b02:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_OCTOSPICLKSOURCE_SYSCLK)
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d103      	bne.n	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
        frequency = HAL_RCC_GetSysClockFreq();
 8006b0a:	f7ff f919 	bl	8005d40 <HAL_RCC_GetSysClockFreq>
 8006b0e:	60f8      	str	r0, [r7, #12]
      break;
 8006b10:	e127      	b.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 8006b12:	f7ff f9b3 	bl	8005e7c <HAL_RCC_GetMSIKFreq>
 8006b16:	60f8      	str	r0, [r7, #12]
      break;
 8006b18:	e123      	b.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006b1a:	4b0d      	ldr	r3, [pc, #52]	@ (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006b1c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006b20:	f003 0303 	and.w	r3, r3, #3
 8006b24:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d103      	bne.n	8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
        frequency = HAL_RCC_GetPCLK3Freq();
 8006b2c:	f7ff f992 	bl	8005e54 <HAL_RCC_GetPCLK3Freq>
 8006b30:	60f8      	str	r0, [r7, #12]
      break;
 8006b32:	e10f      	b.n	8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
      else if (srcclk == RCC_LPUART1CLKSOURCE_HSI)
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d112      	bne.n	8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006b3a:	4b05      	ldr	r3, [pc, #20]	@ (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006b42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b46:	f040 8105 	bne.w	8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
          frequency = HSI_VALUE;
 8006b4a:	4b03      	ldr	r3, [pc, #12]	@ (8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8006b4c:	60fb      	str	r3, [r7, #12]
      break;
 8006b4e:	e101      	b.n	8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
 8006b50:	40030c00 	.word	0x40030c00
 8006b54:	02dc6c00 	.word	0x02dc6c00
 8006b58:	00f42400 	.word	0x00f42400
 8006b5c:	000ffff7 	.word	0x000ffff7
      else if (srcclk == RCC_LPUART1CLKSOURCE_LSE)
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	2b02      	cmp	r3, #2
 8006b64:	d10b      	bne.n	8006b7e <HAL_RCCEx_GetPeriphCLKFreq+0x7ba>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006b66:	4b81      	ldr	r3, [pc, #516]	@ (8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8006b68:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8006b6c:	f003 0302 	and.w	r3, r3, #2
 8006b70:	2b02      	cmp	r3, #2
 8006b72:	f040 80ef 	bne.w	8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
          frequency = LSE_VALUE;
 8006b76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b7a:	60fb      	str	r3, [r7, #12]
      break;
 8006b7c:	e0ea      	b.n	8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
        frequency = HAL_RCC_GetMSIKFreq();
 8006b7e:	f7ff f97d 	bl	8005e7c <HAL_RCC_GetMSIKFreq>
 8006b82:	60f8      	str	r0, [r7, #12]
      break;
 8006b84:	e0e6      	b.n	8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
      srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006b86:	4b79      	ldr	r3, [pc, #484]	@ (8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8006b88:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006b8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b90:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d103      	bne.n	8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
        frequency = HAL_RCC_GetPCLK3Freq();
 8006b98:	f7ff f95c 	bl	8005e54 <HAL_RCC_GetPCLK3Freq>
 8006b9c:	60f8      	str	r0, [r7, #12]
      break;
 8006b9e:	e0e0      	b.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 8006ba0:	f7ff f96c 	bl	8005e7c <HAL_RCC_GetMSIKFreq>
 8006ba4:	60f8      	str	r0, [r7, #12]
      break;
 8006ba6:	e0dc      	b.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8006ba8:	4b70      	ldr	r3, [pc, #448]	@ (8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8006baa:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006bae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006bb2:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d103      	bne.n	8006bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
        frequency = HAL_RCC_GetMSIKFreq();
 8006bba:	f7ff f95f 	bl	8005e7c <HAL_RCC_GetMSIKFreq>
 8006bbe:	60f8      	str	r0, [r7, #12]
      break;
 8006bc0:	e0ca      	b.n	8006d58 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
      else if (srcclk == RCC_LPTIM34CLKSOURCE_LSI)
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006bc8:	d116      	bne.n	8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006bca:	4b68      	ldr	r3, [pc, #416]	@ (8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8006bcc:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8006bd0:	f003 0302 	and.w	r3, r3, #2
 8006bd4:	2b02      	cmp	r3, #2
 8006bd6:	f040 80bf 	bne.w	8006d58 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
          frequency = LSI_VALUE;
 8006bda:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006bde:	60fb      	str	r3, [r7, #12]
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8006be0:	4b62      	ldr	r3, [pc, #392]	@ (8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8006be2:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8006be6:	f003 0304 	and.w	r3, r3, #4
 8006bea:	2b04      	cmp	r3, #4
 8006bec:	f040 80b4 	bne.w	8006d58 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
            frequency /= 128u;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	09db      	lsrs	r3, r3, #7
 8006bf4:	60fb      	str	r3, [r7, #12]
      break;
 8006bf6:	e0af      	b.n	8006d58 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
      else if (srcclk == RCC_LPTIM34CLKSOURCE_HSI)
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006bfe:	d10a      	bne.n	8006c16 <HAL_RCCEx_GetPeriphCLKFreq+0x852>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006c00:	4b5a      	ldr	r3, [pc, #360]	@ (8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006c08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c0c:	f040 80a4 	bne.w	8006d58 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
          frequency = HSI_VALUE;
 8006c10:	4b57      	ldr	r3, [pc, #348]	@ (8006d70 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 8006c12:	60fb      	str	r3, [r7, #12]
      break;
 8006c14:	e0a0      	b.n	8006d58 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006c16:	4b55      	ldr	r3, [pc, #340]	@ (8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8006c18:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8006c1c:	f003 0302 	and.w	r3, r3, #2
 8006c20:	2b02      	cmp	r3, #2
 8006c22:	f040 8099 	bne.w	8006d58 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
          frequency = LSE_VALUE;
 8006c26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c2a:	60fb      	str	r3, [r7, #12]
      break;
 8006c2c:	e094      	b.n	8006d58 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
      srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006c2e:	4b4f      	ldr	r3, [pc, #316]	@ (8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8006c30:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006c34:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006c38:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d103      	bne.n	8006c48 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        frequency = HAL_RCC_GetMSIKFreq();
 8006c40:	f7ff f91c 	bl	8005e7c <HAL_RCC_GetMSIKFreq>
 8006c44:	60f8      	str	r0, [r7, #12]
      break;
 8006c46:	e089      	b.n	8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0x998>
      else if (srcclk == RCC_LPTIM1CLKSOURCE_LSI)
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c4e:	d114      	bne.n	8006c7a <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006c50:	4b46      	ldr	r3, [pc, #280]	@ (8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8006c52:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8006c56:	f003 0302 	and.w	r3, r3, #2
 8006c5a:	2b02      	cmp	r3, #2
 8006c5c:	d17e      	bne.n	8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0x998>
          frequency = LSI_VALUE;
 8006c5e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006c62:	60fb      	str	r3, [r7, #12]
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8006c64:	4b41      	ldr	r3, [pc, #260]	@ (8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8006c66:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8006c6a:	f003 0304 	and.w	r3, r3, #4
 8006c6e:	2b04      	cmp	r3, #4
 8006c70:	d174      	bne.n	8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0x998>
            frequency /= 128u;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	09db      	lsrs	r3, r3, #7
 8006c76:	60fb      	str	r3, [r7, #12]
      break;
 8006c78:	e070      	b.n	8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0x998>
      else if (srcclk == RCC_LPTIM1CLKSOURCE_HSI)
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c80:	d109      	bne.n	8006c96 <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006c82:	4b3a      	ldr	r3, [pc, #232]	@ (8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006c8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c8e:	d165      	bne.n	8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0x998>
          frequency = HSI_VALUE;
 8006c90:	4b37      	ldr	r3, [pc, #220]	@ (8006d70 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 8006c92:	60fb      	str	r3, [r7, #12]
      break;
 8006c94:	e062      	b.n	8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0x998>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006c96:	4b35      	ldr	r3, [pc, #212]	@ (8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8006c98:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8006c9c:	f003 0302 	and.w	r3, r3, #2
 8006ca0:	2b02      	cmp	r3, #2
 8006ca2:	d15b      	bne.n	8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0x998>
          frequency = LSE_VALUE;
 8006ca4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ca8:	60fb      	str	r3, [r7, #12]
      break;
 8006caa:	e057      	b.n	8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0x998>
      srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006cac:	4b2f      	ldr	r3, [pc, #188]	@ (8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8006cae:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8006cb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006cb6:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_RTCCLKSOURCE_LSE)
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006cbe:	d10a      	bne.n	8006cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x912>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006cc0:	4b2a      	ldr	r3, [pc, #168]	@ (8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8006cc2:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8006cc6:	f003 0302 	and.w	r3, r3, #2
 8006cca:	2b02      	cmp	r3, #2
 8006ccc:	d148      	bne.n	8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
          frequency = LSE_VALUE;
 8006cce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006cd2:	60fb      	str	r3, [r7, #12]
      break;
 8006cd4:	e044      	b.n	8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
      else if (srcclk == RCC_RTCCLKSOURCE_LSI)
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006cdc:	d114      	bne.n	8006d08 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006cde:	4b23      	ldr	r3, [pc, #140]	@ (8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8006ce0:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8006ce4:	f003 0302 	and.w	r3, r3, #2
 8006ce8:	2b02      	cmp	r3, #2
 8006cea:	d139      	bne.n	8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
          frequency = LSI_VALUE;
 8006cec:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006cf0:	60fb      	str	r3, [r7, #12]
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8006cf2:	4b1e      	ldr	r3, [pc, #120]	@ (8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8006cf4:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8006cf8:	f003 0304 	and.w	r3, r3, #4
 8006cfc:	2b04      	cmp	r3, #4
 8006cfe:	d12f      	bne.n	8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
            frequency /= 128u;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	09db      	lsrs	r3, r3, #7
 8006d04:	60fb      	str	r3, [r7, #12]
      break;
 8006d06:	e02b      	b.n	8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
      else if (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32)
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d0e:	d127      	bne.n	8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006d10:	4b16      	ldr	r3, [pc, #88]	@ (8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d1c:	d120      	bne.n	8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
          frequency = HSE_VALUE / 32u;
 8006d1e:	4b15      	ldr	r3, [pc, #84]	@ (8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x9b0>)
 8006d20:	60fb      	str	r3, [r7, #12]
      break;
 8006d22:	e01d      	b.n	8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
      break;
 8006d24:	bf00      	nop
 8006d26:	e01c      	b.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8006d28:	bf00      	nop
 8006d2a:	e01a      	b.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8006d2c:	bf00      	nop
 8006d2e:	e018      	b.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8006d30:	bf00      	nop
 8006d32:	e016      	b.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8006d34:	bf00      	nop
 8006d36:	e014      	b.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8006d38:	bf00      	nop
 8006d3a:	e012      	b.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8006d3c:	bf00      	nop
 8006d3e:	e010      	b.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8006d40:	bf00      	nop
 8006d42:	e00e      	b.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8006d44:	bf00      	nop
 8006d46:	e00c      	b.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8006d48:	bf00      	nop
 8006d4a:	e00a      	b.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8006d4c:	bf00      	nop
 8006d4e:	e008      	b.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8006d50:	bf00      	nop
 8006d52:	e006      	b.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8006d54:	bf00      	nop
 8006d56:	e004      	b.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8006d58:	bf00      	nop
 8006d5a:	e002      	b.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8006d5c:	bf00      	nop
 8006d5e:	e000      	b.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8006d60:	bf00      	nop
  }

  return (frequency);
 8006d62:	68fb      	ldr	r3, [r7, #12]
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3710      	adds	r7, #16
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}
 8006d6c:	40030c00 	.word	0x40030c00
 8006d70:	00f42400 	.word	0x00f42400
 8006d74:	0007a120 	.word	0x0007a120

08006d78 <HAL_RCCEx_EpodBoosterClkConfig>:
  *         will be ignored
  * @note   When booster is not user, clock source shall be set to RCC_EPODBOOSTER_SOURCE_NONE to save power.
  * @retval None
  */
HAL_StatusTypeDef HAL_RCCEx_EpodBoosterClkConfig(uint32_t Source, uint32_t Divider)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b085      	sub	sp, #20
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]

  assert_param(IS_RCC_EPODBOOSTER_SOURCE(Source));
  assert_param(IS_RCC_EPODBOOSTER_DIV(Divider));

  /* check if any source is selected and ready */
  tmpreg1 = RCC->CR;
 8006d82:	4b1e      	ldr	r3, [pc, #120]	@ (8006dfc <HAL_RCCEx_EpodBoosterClkConfig+0x84>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	60bb      	str	r3, [r7, #8]

  /* MSIS is selected as EPOD Booster clock source, check if MSIS is ready */
  if ((Source == RCC_EPODBOOSTER_SOURCE_MSIS) && ((tmpreg1 & RCC_CR_MSISRDY) == 0U))
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	d107      	bne.n	8006d9e <HAL_RCCEx_EpodBoosterClkConfig+0x26>
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	f003 0304 	and.w	r3, r3, #4
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d102      	bne.n	8006d9e <HAL_RCCEx_EpodBoosterClkConfig+0x26>
  {
    status = HAL_ERROR;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	73fb      	strb	r3, [r7, #15]
 8006d9c:	e027      	b.n	8006dee <HAL_RCCEx_EpodBoosterClkConfig+0x76>
  }
  /* HSI is selected as EPOD Booster clock source, check if HSI is ready */
  else if ((Source == RCC_EPODBOOSTER_SOURCE_HSI) && ((tmpreg1 & RCC_CR_HSIRDY) == 0U))
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2b02      	cmp	r3, #2
 8006da2:	d107      	bne.n	8006db4 <HAL_RCCEx_EpodBoosterClkConfig+0x3c>
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d102      	bne.n	8006db4 <HAL_RCCEx_EpodBoosterClkConfig+0x3c>
  {
    status = HAL_ERROR;
 8006dae:	2301      	movs	r3, #1
 8006db0:	73fb      	strb	r3, [r7, #15]
 8006db2:	e01c      	b.n	8006dee <HAL_RCCEx_EpodBoosterClkConfig+0x76>
  }
  /* HSE is selected as EPOD Booster clock source, check if HSE is ready */
  else if ((Source == RCC_EPODBOOSTER_SOURCE_HSE) && ((tmpreg1 & RCC_CR_HSERDY) == 0U))
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2b03      	cmp	r3, #3
 8006db8:	d107      	bne.n	8006dca <HAL_RCCEx_EpodBoosterClkConfig+0x52>
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d102      	bne.n	8006dca <HAL_RCCEx_EpodBoosterClkConfig+0x52>
  {
    status = HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	73fb      	strb	r3, [r7, #15]
 8006dc8:	e011      	b.n	8006dee <HAL_RCCEx_EpodBoosterClkConfig+0x76>
  }
  else
  {
    /* Apply configuration */
    tmpreg1 = (RCC->CFGR4 & ~(RCC_CFGR4_BOOSTDIV | RCC_CFGR4_BOOSTSEL));
 8006dca:	4b0c      	ldr	r3, [pc, #48]	@ (8006dfc <HAL_RCCEx_EpodBoosterClkConfig+0x84>)
 8006dcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dce:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006dd2:	f023 0303 	bic.w	r3, r3, #3
 8006dd6:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= (Divider | Source);
 8006dd8:	683a      	ldr	r2, [r7, #0]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	68ba      	ldr	r2, [r7, #8]
 8006de0:	4313      	orrs	r3, r2
 8006de2:	60bb      	str	r3, [r7, #8]
    RCC->CFGR4 = tmpreg1;
 8006de4:	4a05      	ldr	r2, [pc, #20]	@ (8006dfc <HAL_RCCEx_EpodBoosterClkConfig+0x84>)
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* update status is ok */
    status = HAL_OK;
 8006dea:	2300      	movs	r3, #0
 8006dec:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3714      	adds	r7, #20
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr
 8006dfc:	40030c00 	.word	0x40030c00

08006e00 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b084      	sub	sp, #16
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d101      	bne.n	8006e12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e0dc      	b.n	8006fcc <HAL_SPI_Init+0x1cc>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a6d      	ldr	r2, [pc, #436]	@ (8006fd4 <HAL_SPI_Init+0x1d4>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d105      	bne.n	8006e2e <HAL_SPI_Init+0x2e>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	68db      	ldr	r3, [r3, #12]
 8006e26:	2b0f      	cmp	r3, #15
 8006e28:	d901      	bls.n	8006e2e <HAL_SPI_Init+0x2e>
  {
    return HAL_ERROR;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	e0ce      	b.n	8006fcc <HAL_SPI_Init+0x1cc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 fba6 	bl	8007580 <SPI_GetPacketSize>
 8006e34:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a66      	ldr	r2, [pc, #408]	@ (8006fd4 <HAL_SPI_Init+0x1d4>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d102      	bne.n	8006e46 <HAL_SPI_Init+0x46>
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2b08      	cmp	r3, #8
 8006e44:	d80c      	bhi.n	8006e60 <HAL_SPI_Init+0x60>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006e4a:	4a63      	ldr	r2, [pc, #396]	@ (8006fd8 <HAL_SPI_Init+0x1d8>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d004      	beq.n	8006e5a <HAL_SPI_Init+0x5a>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a61      	ldr	r2, [pc, #388]	@ (8006fdc <HAL_SPI_Init+0x1dc>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d104      	bne.n	8006e64 <HAL_SPI_Init+0x64>
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2b10      	cmp	r3, #16
 8006e5e:	d901      	bls.n	8006e64 <HAL_SPI_Init+0x64>
  {
    return HAL_ERROR;
 8006e60:	2301      	movs	r3, #1
 8006e62:	e0b3      	b.n	8006fcc <HAL_SPI_Init+0x1cc>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d106      	bne.n	8006e7e <HAL_SPI_Init+0x7e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2200      	movs	r2, #0
 8006e74:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f7fb fb15 	bl	80024a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2202      	movs	r2, #2
 8006e82:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f022 0201 	bic.w	r2, r2, #1
 8006e94:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8006ea0:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	699b      	ldr	r3, [r3, #24]
 8006ea6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006eaa:	d119      	bne.n	8006ee0 <HAL_SPI_Init+0xe0>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006eb4:	d103      	bne.n	8006ebe <HAL_SPI_Init+0xbe>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d008      	beq.n	8006ed0 <HAL_SPI_Init+0xd0>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d10c      	bne.n	8006ee0 <HAL_SPI_Init+0xe0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006eca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ece:	d107      	bne.n	8006ee0 <HAL_SPI_Init+0xe0>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006ede:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d00f      	beq.n	8006f0c <HAL_SPI_Init+0x10c>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	68db      	ldr	r3, [r3, #12]
 8006ef0:	2b06      	cmp	r3, #6
 8006ef2:	d90b      	bls.n	8006f0c <HAL_SPI_Init+0x10c>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	430a      	orrs	r2, r1
 8006f08:	601a      	str	r2, [r3, #0]
 8006f0a:	e007      	b.n	8006f1c <HAL_SPI_Init+0x11c>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	681a      	ldr	r2, [r3, #0]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006f1a:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	69da      	ldr	r2, [r3, #28]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f24:	431a      	orrs	r2, r3
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	431a      	orrs	r2, r3
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f2e:	ea42 0103 	orr.w	r1, r2, r3
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	68da      	ldr	r2, [r3, #12]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	430a      	orrs	r2, r1
 8006f3c:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f46:	431a      	orrs	r2, r3
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f4c:	431a      	orrs	r2, r3
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	699b      	ldr	r3, [r3, #24]
 8006f52:	431a      	orrs	r2, r3
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	691b      	ldr	r3, [r3, #16]
 8006f58:	431a      	orrs	r2, r3
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	695b      	ldr	r3, [r3, #20]
 8006f5e:	431a      	orrs	r2, r3
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6a1b      	ldr	r3, [r3, #32]
 8006f64:	431a      	orrs	r2, r3
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	431a      	orrs	r2, r3
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f70:	431a      	orrs	r2, r3
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	689b      	ldr	r3, [r3, #8]
 8006f76:	431a      	orrs	r2, r3
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f7c:	431a      	orrs	r2, r3
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f82:	431a      	orrs	r2, r3
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f88:	ea42 0103 	orr.w	r1, r2, r3
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	430a      	orrs	r2, r1
 8006f96:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d00a      	beq.n	8006fba <HAL_SPI_Init+0x1ba>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	68db      	ldr	r3, [r3, #12]
 8006faa:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	430a      	orrs	r2, r1
 8006fb8:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 8006fca:	2300      	movs	r3, #0
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3710      	adds	r7, #16
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}
 8006fd4:	40002000 	.word	0x40002000
 8006fd8:	40013000 	.word	0x40013000
 8006fdc:	40003800 	.word	0x40003800

08006fe0 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b088      	sub	sp, #32
 8006fe4:	af02      	add	r7, sp, #8
 8006fe6:	60f8      	str	r0, [r7, #12]
 8006fe8:	60b9      	str	r1, [r7, #8]
 8006fea:	603b      	str	r3, [r7, #0]
 8006fec:	4613      	mov	r3, r2
 8006fee:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	3320      	adds	r3, #32
 8006ff6:	617b      	str	r3, [r7, #20]
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ff8:	f7fb ffea 	bl	8002fd0 <HAL_GetTick>
 8006ffc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007004:	b2db      	uxtb	r3, r3
 8007006:	2b01      	cmp	r3, #1
 8007008:	d001      	beq.n	800700e <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800700a:	2302      	movs	r3, #2
 800700c:	e1e5      	b.n	80073da <HAL_SPI_Transmit+0x3fa>
  }

  if ((pData == NULL) || (Size == 0UL))
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d002      	beq.n	800701a <HAL_SPI_Transmit+0x3a>
 8007014:	88fb      	ldrh	r3, [r7, #6]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d101      	bne.n	800701e <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800701a:	2301      	movs	r3, #1
 800701c:	e1dd      	b.n	80073da <HAL_SPI_Transmit+0x3fa>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8007024:	2b01      	cmp	r3, #1
 8007026:	d101      	bne.n	800702c <HAL_SPI_Transmit+0x4c>
 8007028:	2302      	movs	r3, #2
 800702a:	e1d6      	b.n	80073da <HAL_SPI_Transmit+0x3fa>
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2201      	movs	r2, #1
 8007030:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2203      	movs	r2, #3
 8007038:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2200      	movs	r2, #0
 8007040:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	68ba      	ldr	r2, [r7, #8]
 8007048:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	88fa      	ldrh	r2, [r7, #6]
 800704e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	88fa      	ldrh	r2, [r7, #6]
 8007056:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2200      	movs	r2, #0
 800705e:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2200      	movs	r2, #0
 8007064:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2200      	movs	r2, #0
 800706c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2200      	movs	r2, #0
 8007074:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2200      	movs	r2, #0
 800707a:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	689b      	ldr	r3, [r3, #8]
 8007080:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8007084:	d108      	bne.n	8007098 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007094:	601a      	str	r2, [r3, #0]
 8007096:	e009      	b.n	80070ac <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	68db      	ldr	r3, [r3, #12]
 800709e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80070aa:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	0c1b      	lsrs	r3, r3, #16
 80070b4:	041b      	lsls	r3, r3, #16
 80070b6:	88f9      	ldrh	r1, [r7, #6]
 80070b8:	68fa      	ldr	r2, [r7, #12]
 80070ba:	6812      	ldr	r2, [r2, #0]
 80070bc:	430b      	orrs	r3, r1
 80070be:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f042 0201 	orr.w	r2, r2, #1
 80070ce:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	69db      	ldr	r3, [r3, #28]
 80070d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d10c      	bne.n	80070f8 <HAL_SPI_Transmit+0x118>
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80070e6:	d107      	bne.n	80070f8 <HAL_SPI_Transmit+0x118>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80070f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	2b0f      	cmp	r3, #15
 80070fe:	d951      	bls.n	80071a4 <HAL_SPI_Transmit+0x1c4>
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a8a      	ldr	r2, [pc, #552]	@ (8007330 <HAL_SPI_Transmit+0x350>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d045      	beq.n	8007196 <HAL_SPI_Transmit+0x1b6>
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a89      	ldr	r2, [pc, #548]	@ (8007334 <HAL_SPI_Transmit+0x354>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d147      	bne.n	80071a4 <HAL_SPI_Transmit+0x1c4>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007114:	e03f      	b.n	8007196 <HAL_SPI_Transmit+0x1b6>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	695b      	ldr	r3, [r3, #20]
 800711c:	f003 0302 	and.w	r3, r3, #2
 8007120:	2b02      	cmp	r3, #2
 8007122:	d114      	bne.n	800714e <HAL_SPI_Transmit+0x16e>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	6812      	ldr	r2, [r2, #0]
 800712e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007134:	1d1a      	adds	r2, r3, #4
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007140:	b29b      	uxth	r3, r3
 8007142:	3b01      	subs	r3, #1
 8007144:	b29a      	uxth	r2, r3
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800714c:	e023      	b.n	8007196 <HAL_SPI_Transmit+0x1b6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800714e:	f7fb ff3f 	bl	8002fd0 <HAL_GetTick>
 8007152:	4602      	mov	r2, r0
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	1ad3      	subs	r3, r2, r3
 8007158:	683a      	ldr	r2, [r7, #0]
 800715a:	429a      	cmp	r2, r3
 800715c:	d803      	bhi.n	8007166 <HAL_SPI_Transmit+0x186>
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007164:	d102      	bne.n	800716c <HAL_SPI_Transmit+0x18c>
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d114      	bne.n	8007196 <HAL_SPI_Transmit+0x1b6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800716c:	68f8      	ldr	r0, [r7, #12]
 800716e:	f000 f939 	bl	80073e4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007178:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2201      	movs	r2, #1
 8007186:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2200      	movs	r2, #0
 800718e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8007192:	2303      	movs	r3, #3
 8007194:	e121      	b.n	80073da <HAL_SPI_Transmit+0x3fa>
    while (hspi->TxXferCount > 0UL)
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800719c:	b29b      	uxth	r3, r3
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d1b9      	bne.n	8007116 <HAL_SPI_Transmit+0x136>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80071a2:	e0f4      	b.n	800738e <HAL_SPI_Transmit+0x3ae>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	68db      	ldr	r3, [r3, #12]
 80071a8:	2b07      	cmp	r3, #7
 80071aa:	f240 80e9 	bls.w	8007380 <HAL_SPI_Transmit+0x3a0>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80071ae:	e05d      	b.n	800726c <HAL_SPI_Transmit+0x28c>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	695b      	ldr	r3, [r3, #20]
 80071b6:	f003 0302 	and.w	r3, r3, #2
 80071ba:	2b02      	cmp	r3, #2
 80071bc:	d132      	bne.n	8007224 <HAL_SPI_Transmit+0x244>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80071c4:	b29b      	uxth	r3, r3
 80071c6:	2b01      	cmp	r3, #1
 80071c8:	d918      	bls.n	80071fc <HAL_SPI_Transmit+0x21c>
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d014      	beq.n	80071fc <HAL_SPI_Transmit+0x21c>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	6812      	ldr	r2, [r2, #0]
 80071dc:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071e2:	1d1a      	adds	r2, r3, #4
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80071ee:	b29b      	uxth	r3, r3
 80071f0:	3b02      	subs	r3, #2
 80071f2:	b29a      	uxth	r2, r3
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80071fa:	e037      	b.n	800726c <HAL_SPI_Transmit+0x28c>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007200:	881a      	ldrh	r2, [r3, #0]
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800720a:	1c9a      	adds	r2, r3, #2
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007216:	b29b      	uxth	r3, r3
 8007218:	3b01      	subs	r3, #1
 800721a:	b29a      	uxth	r2, r3
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007222:	e023      	b.n	800726c <HAL_SPI_Transmit+0x28c>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007224:	f7fb fed4 	bl	8002fd0 <HAL_GetTick>
 8007228:	4602      	mov	r2, r0
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	1ad3      	subs	r3, r2, r3
 800722e:	683a      	ldr	r2, [r7, #0]
 8007230:	429a      	cmp	r2, r3
 8007232:	d803      	bhi.n	800723c <HAL_SPI_Transmit+0x25c>
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800723a:	d102      	bne.n	8007242 <HAL_SPI_Transmit+0x262>
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d114      	bne.n	800726c <HAL_SPI_Transmit+0x28c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007242:	68f8      	ldr	r0, [r7, #12]
 8007244:	f000 f8ce 	bl	80073e4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800724e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2201      	movs	r2, #1
 800725c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2200      	movs	r2, #0
 8007264:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8007268:	2303      	movs	r3, #3
 800726a:	e0b6      	b.n	80073da <HAL_SPI_Transmit+0x3fa>
    while (hspi->TxXferCount > 0UL)
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007272:	b29b      	uxth	r3, r3
 8007274:	2b00      	cmp	r3, #0
 8007276:	d19b      	bne.n	80071b0 <HAL_SPI_Transmit+0x1d0>
 8007278:	e089      	b.n	800738e <HAL_SPI_Transmit+0x3ae>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	695b      	ldr	r3, [r3, #20]
 8007280:	f003 0302 	and.w	r3, r3, #2
 8007284:	2b02      	cmp	r3, #2
 8007286:	d157      	bne.n	8007338 <HAL_SPI_Transmit+0x358>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800728e:	b29b      	uxth	r3, r3
 8007290:	2b03      	cmp	r3, #3
 8007292:	d918      	bls.n	80072c6 <HAL_SPI_Transmit+0x2e6>
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007298:	2b40      	cmp	r3, #64	@ 0x40
 800729a:	d914      	bls.n	80072c6 <HAL_SPI_Transmit+0x2e6>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	6812      	ldr	r2, [r2, #0]
 80072a6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80072ac:	1d1a      	adds	r2, r3, #4
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	3b04      	subs	r3, #4
 80072bc:	b29a      	uxth	r2, r3
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80072c4:	e05c      	b.n	8007380 <HAL_SPI_Transmit+0x3a0>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	d917      	bls.n	8007302 <HAL_SPI_Transmit+0x322>
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d013      	beq.n	8007302 <HAL_SPI_Transmit+0x322>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80072de:	881a      	ldrh	r2, [r3, #0]
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80072e8:	1c9a      	adds	r2, r3, #2
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	3b02      	subs	r3, #2
 80072f8:	b29a      	uxth	r2, r3
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007300:	e03e      	b.n	8007380 <HAL_SPI_Transmit+0x3a0>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	3320      	adds	r3, #32
 800730c:	7812      	ldrb	r2, [r2, #0]
 800730e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007314:	1c5a      	adds	r2, r3, #1
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007320:	b29b      	uxth	r3, r3
 8007322:	3b01      	subs	r3, #1
 8007324:	b29a      	uxth	r2, r3
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800732c:	e028      	b.n	8007380 <HAL_SPI_Transmit+0x3a0>
 800732e:	bf00      	nop
 8007330:	40013000 	.word	0x40013000
 8007334:	40003800 	.word	0x40003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007338:	f7fb fe4a 	bl	8002fd0 <HAL_GetTick>
 800733c:	4602      	mov	r2, r0
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	1ad3      	subs	r3, r2, r3
 8007342:	683a      	ldr	r2, [r7, #0]
 8007344:	429a      	cmp	r2, r3
 8007346:	d803      	bhi.n	8007350 <HAL_SPI_Transmit+0x370>
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800734e:	d102      	bne.n	8007356 <HAL_SPI_Transmit+0x376>
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d114      	bne.n	8007380 <HAL_SPI_Transmit+0x3a0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007356:	68f8      	ldr	r0, [r7, #12]
 8007358:	f000 f844 	bl	80073e4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007362:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2201      	movs	r2, #1
 8007370:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2200      	movs	r2, #0
 8007378:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800737c:	2303      	movs	r3, #3
 800737e:	e02c      	b.n	80073da <HAL_SPI_Transmit+0x3fa>
    while (hspi->TxXferCount > 0UL)
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007386:	b29b      	uxth	r3, r3
 8007388:	2b00      	cmp	r3, #0
 800738a:	f47f af76 	bne.w	800727a <HAL_SPI_Transmit+0x29a>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	9300      	str	r3, [sp, #0]
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	2200      	movs	r2, #0
 8007396:	2108      	movs	r1, #8
 8007398:	68f8      	ldr	r0, [r7, #12]
 800739a:	f000 f8c3 	bl	8007524 <SPI_WaitOnFlagUntilTimeout>
 800739e:	4603      	mov	r3, r0
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d007      	beq.n	80073b4 <HAL_SPI_Transmit+0x3d4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80073aa:	f043 0220 	orr.w	r2, r3, #32
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80073b4:	68f8      	ldr	r0, [r7, #12]
 80073b6:	f000 f815 	bl	80073e4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2201      	movs	r2, #1
 80073be:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2200      	movs	r2, #0
 80073c6:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d001      	beq.n	80073d8 <HAL_SPI_Transmit+0x3f8>
  {
    return HAL_ERROR;
 80073d4:	2301      	movs	r3, #1
 80073d6:	e000      	b.n	80073da <HAL_SPI_Transmit+0x3fa>
  }
  else
  {
    return HAL_OK;
 80073d8:	2300      	movs	r3, #0
  }
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3718      	adds	r7, #24
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}
 80073e2:	bf00      	nop

080073e4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b085      	sub	sp, #20
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	695b      	ldr	r3, [r3, #20]
 80073f2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	699a      	ldr	r2, [r3, #24]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f042 0208 	orr.w	r2, r2, #8
 8007402:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	699a      	ldr	r2, [r3, #24]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f042 0210 	orr.w	r2, r2, #16
 8007412:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f022 0201 	bic.w	r2, r2, #1
 8007422:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	691b      	ldr	r3, [r3, #16]
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	6812      	ldr	r2, [r2, #0]
 800742e:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 8007432:	f023 0303 	bic.w	r3, r3, #3
 8007436:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	689a      	ldr	r2, [r3, #8]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8007446:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800744e:	b2db      	uxtb	r3, r3
 8007450:	2b04      	cmp	r3, #4
 8007452:	d014      	beq.n	800747e <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f003 0320 	and.w	r3, r3, #32
 800745a:	2b00      	cmp	r3, #0
 800745c:	d00f      	beq.n	800747e <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007464:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	699a      	ldr	r2, [r3, #24]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f042 0220 	orr.w	r2, r2, #32
 800747c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007484:	b2db      	uxtb	r3, r3
 8007486:	2b03      	cmp	r3, #3
 8007488:	d014      	beq.n	80074b4 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007490:	2b00      	cmp	r3, #0
 8007492:	d00f      	beq.n	80074b4 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800749a:	f043 0204 	orr.w	r2, r3, #4
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	699a      	ldr	r2, [r3, #24]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80074b2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d00f      	beq.n	80074de <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80074c4:	f043 0201 	orr.w	r2, r3, #1
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	699a      	ldr	r2, [r3, #24]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80074dc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d00f      	beq.n	8007508 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80074ee:	f043 0208 	orr.w	r2, r3, #8
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	699a      	ldr	r2, [r3, #24]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007506:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2200      	movs	r2, #0
 800750c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2200      	movs	r2, #0
 8007514:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 8007518:	bf00      	nop
 800751a:	3714      	adds	r7, #20
 800751c:	46bd      	mov	sp, r7
 800751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007522:	4770      	bx	lr

08007524 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b084      	sub	sp, #16
 8007528:	af00      	add	r7, sp, #0
 800752a:	60f8      	str	r0, [r7, #12]
 800752c:	60b9      	str	r1, [r7, #8]
 800752e:	603b      	str	r3, [r7, #0]
 8007530:	4613      	mov	r3, r2
 8007532:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007534:	e010      	b.n	8007558 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007536:	f7fb fd4b 	bl	8002fd0 <HAL_GetTick>
 800753a:	4602      	mov	r2, r0
 800753c:	69bb      	ldr	r3, [r7, #24]
 800753e:	1ad3      	subs	r3, r2, r3
 8007540:	683a      	ldr	r2, [r7, #0]
 8007542:	429a      	cmp	r2, r3
 8007544:	d803      	bhi.n	800754e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800754c:	d102      	bne.n	8007554 <SPI_WaitOnFlagUntilTimeout+0x30>
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d101      	bne.n	8007558 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8007554:	2303      	movs	r3, #3
 8007556:	e00f      	b.n	8007578 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	695a      	ldr	r2, [r3, #20]
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	4013      	ands	r3, r2
 8007562:	68ba      	ldr	r2, [r7, #8]
 8007564:	429a      	cmp	r2, r3
 8007566:	bf0c      	ite	eq
 8007568:	2301      	moveq	r3, #1
 800756a:	2300      	movne	r3, #0
 800756c:	b2db      	uxtb	r3, r3
 800756e:	461a      	mov	r2, r3
 8007570:	79fb      	ldrb	r3, [r7, #7]
 8007572:	429a      	cmp	r2, r3
 8007574:	d0df      	beq.n	8007536 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8007576:	2300      	movs	r3, #0
}
 8007578:	4618      	mov	r0, r3
 800757a:	3710      	adds	r7, #16
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}

08007580 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8007580:	b480      	push	{r7}
 8007582:	b085      	sub	sp, #20
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800758c:	095b      	lsrs	r3, r3, #5
 800758e:	3301      	adds	r3, #1
 8007590:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	68db      	ldr	r3, [r3, #12]
 8007596:	3301      	adds	r3, #1
 8007598:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	3307      	adds	r3, #7
 800759e:	08db      	lsrs	r3, r3, #3
 80075a0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	68fa      	ldr	r2, [r7, #12]
 80075a6:	fb02 f303 	mul.w	r3, r2, r3
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3714      	adds	r7, #20
 80075ae:	46bd      	mov	sp, r7
 80075b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b4:	4770      	bx	lr

080075b6 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 80075b6:	b480      	push	{r7}
 80075b8:	b083      	sub	sp, #12
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	6078      	str	r0, [r7, #4]
 80075be:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80075c6:	b2db      	uxtb	r3, r3
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d12e      	bne.n	800762a <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80075d2:	2b01      	cmp	r3, #1
 80075d4:	d101      	bne.n	80075da <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 80075d6:	2302      	movs	r3, #2
 80075d8:	e028      	b.n	800762c <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2201      	movs	r2, #1
 80075de:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2202      	movs	r2, #2
 80075e6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	681a      	ldr	r2, [r3, #0]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f022 0201 	bic.w	r2, r2, #1
 80075f8:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	681a      	ldr	r2, [r3, #0]
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8007606:	ea42 0103 	orr.w	r1, r2, r3
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	689a      	ldr	r2, [r3, #8]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	430a      	orrs	r2, r1
 8007614:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2201      	movs	r2, #1
 800761a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2200      	movs	r2, #0
 8007622:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007626:	2300      	movs	r3, #0
 8007628:	e000      	b.n	800762c <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800762a:	2301      	movs	r3, #1
  }
}
 800762c:	4618      	mov	r0, r3
 800762e:	370c      	adds	r7, #12
 8007630:	46bd      	mov	sp, r7
 8007632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007636:	4770      	bx	lr

08007638 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b082      	sub	sp, #8
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d101      	bne.n	800764a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007646:	2301      	movs	r3, #1
 8007648:	e049      	b.n	80076de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007650:	b2db      	uxtb	r3, r3
 8007652:	2b00      	cmp	r3, #0
 8007654:	d106      	bne.n	8007664 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2200      	movs	r2, #0
 800765a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f7fb f80e 	bl	8002680 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2202      	movs	r2, #2
 8007668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681a      	ldr	r2, [r3, #0]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	3304      	adds	r3, #4
 8007674:	4619      	mov	r1, r3
 8007676:	4610      	mov	r0, r2
 8007678:	f000 fa92 	bl	8007ba0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2201      	movs	r2, #1
 8007680:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2201      	movs	r2, #1
 8007688:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2201      	movs	r2, #1
 8007690:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2201      	movs	r2, #1
 8007698:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2201      	movs	r2, #1
 80076a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2201      	movs	r2, #1
 80076a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2201      	movs	r2, #1
 80076b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2201      	movs	r2, #1
 80076b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2201      	movs	r2, #1
 80076c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2201      	movs	r2, #1
 80076c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2201      	movs	r2, #1
 80076d0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2201      	movs	r2, #1
 80076d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80076dc:	2300      	movs	r3, #0
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3708      	adds	r7, #8
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}

080076e6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80076e6:	b580      	push	{r7, lr}
 80076e8:	b082      	sub	sp, #8
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d101      	bne.n	80076f8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80076f4:	2301      	movs	r3, #1
 80076f6:	e049      	b.n	800778c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80076fe:	b2db      	uxtb	r3, r3
 8007700:	2b00      	cmp	r3, #0
 8007702:	d106      	bne.n	8007712 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2200      	movs	r2, #0
 8007708:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f000 f841 	bl	8007794 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2202      	movs	r2, #2
 8007716:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681a      	ldr	r2, [r3, #0]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	3304      	adds	r3, #4
 8007722:	4619      	mov	r1, r3
 8007724:	4610      	mov	r0, r2
 8007726:	f000 fa3b 	bl	8007ba0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2201      	movs	r2, #1
 800772e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2201      	movs	r2, #1
 8007736:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2201      	movs	r2, #1
 800773e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2201      	movs	r2, #1
 8007746:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2201      	movs	r2, #1
 800774e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2201      	movs	r2, #1
 8007756:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2201      	movs	r2, #1
 800775e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2201      	movs	r2, #1
 8007766:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2201      	movs	r2, #1
 800776e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2201      	movs	r2, #1
 8007776:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2201      	movs	r2, #1
 800777e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2201      	movs	r2, #1
 8007786:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800778a:	2300      	movs	r3, #0
}
 800778c:	4618      	mov	r0, r3
 800778e:	3708      	adds	r7, #8
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007794:	b480      	push	{r7}
 8007796:	b083      	sub	sp, #12
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800779c:	bf00      	nop
 800779e:	370c      	adds	r7, #12
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr

080077a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b086      	sub	sp, #24
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	60f8      	str	r0, [r7, #12]
 80077b0:	60b9      	str	r1, [r7, #8]
 80077b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80077b4:	2300      	movs	r3, #0
 80077b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80077be:	2b01      	cmp	r3, #1
 80077c0:	d101      	bne.n	80077c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80077c2:	2302      	movs	r3, #2
 80077c4:	e0ff      	b.n	80079c6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2201      	movs	r2, #1
 80077ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2b14      	cmp	r3, #20
 80077d2:	f200 80f0 	bhi.w	80079b6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80077d6:	a201      	add	r2, pc, #4	@ (adr r2, 80077dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80077d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077dc:	08007831 	.word	0x08007831
 80077e0:	080079b7 	.word	0x080079b7
 80077e4:	080079b7 	.word	0x080079b7
 80077e8:	080079b7 	.word	0x080079b7
 80077ec:	08007871 	.word	0x08007871
 80077f0:	080079b7 	.word	0x080079b7
 80077f4:	080079b7 	.word	0x080079b7
 80077f8:	080079b7 	.word	0x080079b7
 80077fc:	080078b3 	.word	0x080078b3
 8007800:	080079b7 	.word	0x080079b7
 8007804:	080079b7 	.word	0x080079b7
 8007808:	080079b7 	.word	0x080079b7
 800780c:	080078f3 	.word	0x080078f3
 8007810:	080079b7 	.word	0x080079b7
 8007814:	080079b7 	.word	0x080079b7
 8007818:	080079b7 	.word	0x080079b7
 800781c:	08007935 	.word	0x08007935
 8007820:	080079b7 	.word	0x080079b7
 8007824:	080079b7 	.word	0x080079b7
 8007828:	080079b7 	.word	0x080079b7
 800782c:	08007975 	.word	0x08007975
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	68b9      	ldr	r1, [r7, #8]
 8007836:	4618      	mov	r0, r3
 8007838:	f000 fa3a 	bl	8007cb0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	699a      	ldr	r2, [r3, #24]
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f042 0208 	orr.w	r2, r2, #8
 800784a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	699a      	ldr	r2, [r3, #24]
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f022 0204 	bic.w	r2, r2, #4
 800785a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	6999      	ldr	r1, [r3, #24]
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	691a      	ldr	r2, [r3, #16]
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	430a      	orrs	r2, r1
 800786c:	619a      	str	r2, [r3, #24]
      break;
 800786e:	e0a5      	b.n	80079bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	68b9      	ldr	r1, [r7, #8]
 8007876:	4618      	mov	r0, r3
 8007878:	f000 faa0 	bl	8007dbc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	699a      	ldr	r2, [r3, #24]
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800788a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	699a      	ldr	r2, [r3, #24]
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800789a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	6999      	ldr	r1, [r3, #24]
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	691b      	ldr	r3, [r3, #16]
 80078a6:	021a      	lsls	r2, r3, #8
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	430a      	orrs	r2, r1
 80078ae:	619a      	str	r2, [r3, #24]
      break;
 80078b0:	e084      	b.n	80079bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	68b9      	ldr	r1, [r7, #8]
 80078b8:	4618      	mov	r0, r3
 80078ba:	f000 faff 	bl	8007ebc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	69da      	ldr	r2, [r3, #28]
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f042 0208 	orr.w	r2, r2, #8
 80078cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	69da      	ldr	r2, [r3, #28]
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f022 0204 	bic.w	r2, r2, #4
 80078dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	69d9      	ldr	r1, [r3, #28]
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	691a      	ldr	r2, [r3, #16]
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	430a      	orrs	r2, r1
 80078ee:	61da      	str	r2, [r3, #28]
      break;
 80078f0:	e064      	b.n	80079bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	68b9      	ldr	r1, [r7, #8]
 80078f8:	4618      	mov	r0, r3
 80078fa:	f000 fb5d 	bl	8007fb8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	69da      	ldr	r2, [r3, #28]
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800790c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	69da      	ldr	r2, [r3, #28]
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800791c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	69d9      	ldr	r1, [r3, #28]
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	691b      	ldr	r3, [r3, #16]
 8007928:	021a      	lsls	r2, r3, #8
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	430a      	orrs	r2, r1
 8007930:	61da      	str	r2, [r3, #28]
      break;
 8007932:	e043      	b.n	80079bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	68b9      	ldr	r1, [r7, #8]
 800793a:	4618      	mov	r0, r3
 800793c:	f000 fbbc 	bl	80080b8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f042 0208 	orr.w	r2, r2, #8
 800794e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f022 0204 	bic.w	r2, r2, #4
 800795e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	691a      	ldr	r2, [r3, #16]
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	430a      	orrs	r2, r1
 8007970:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007972:	e023      	b.n	80079bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	68b9      	ldr	r1, [r7, #8]
 800797a:	4618      	mov	r0, r3
 800797c:	f000 fbfa 	bl	8008174 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800798e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800799e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	691b      	ldr	r3, [r3, #16]
 80079aa:	021a      	lsls	r2, r3, #8
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	430a      	orrs	r2, r1
 80079b2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80079b4:	e002      	b.n	80079bc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80079b6:	2301      	movs	r3, #1
 80079b8:	75fb      	strb	r3, [r7, #23]
      break;
 80079ba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2200      	movs	r2, #0
 80079c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80079c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3718      	adds	r7, #24
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}
 80079ce:	bf00      	nop

080079d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b084      	sub	sp, #16
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80079da:	2300      	movs	r3, #0
 80079dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d101      	bne.n	80079ec <HAL_TIM_ConfigClockSource+0x1c>
 80079e8:	2302      	movs	r3, #2
 80079ea:	e0ce      	b.n	8007b8a <HAL_TIM_ConfigClockSource+0x1ba>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2201      	movs	r2, #1
 80079f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2202      	movs	r2, #2
 80079f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	689b      	ldr	r3, [r3, #8]
 8007a02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8007a0a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007a0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007a16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	68ba      	ldr	r2, [r7, #8]
 8007a1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a5b      	ldr	r2, [pc, #364]	@ (8007b94 <HAL_TIM_ConfigClockSource+0x1c4>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	f000 8099 	beq.w	8007b5e <HAL_TIM_ConfigClockSource+0x18e>
 8007a2c:	4a59      	ldr	r2, [pc, #356]	@ (8007b94 <HAL_TIM_ConfigClockSource+0x1c4>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	f200 809e 	bhi.w	8007b70 <HAL_TIM_ConfigClockSource+0x1a0>
 8007a34:	4a58      	ldr	r2, [pc, #352]	@ (8007b98 <HAL_TIM_ConfigClockSource+0x1c8>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	f000 8091 	beq.w	8007b5e <HAL_TIM_ConfigClockSource+0x18e>
 8007a3c:	4a56      	ldr	r2, [pc, #344]	@ (8007b98 <HAL_TIM_ConfigClockSource+0x1c8>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	f200 8096 	bhi.w	8007b70 <HAL_TIM_ConfigClockSource+0x1a0>
 8007a44:	4a55      	ldr	r2, [pc, #340]	@ (8007b9c <HAL_TIM_ConfigClockSource+0x1cc>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	f000 8089 	beq.w	8007b5e <HAL_TIM_ConfigClockSource+0x18e>
 8007a4c:	4a53      	ldr	r2, [pc, #332]	@ (8007b9c <HAL_TIM_ConfigClockSource+0x1cc>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	f200 808e 	bhi.w	8007b70 <HAL_TIM_ConfigClockSource+0x1a0>
 8007a54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a58:	d03e      	beq.n	8007ad8 <HAL_TIM_ConfigClockSource+0x108>
 8007a5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a5e:	f200 8087 	bhi.w	8007b70 <HAL_TIM_ConfigClockSource+0x1a0>
 8007a62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a66:	f000 8086 	beq.w	8007b76 <HAL_TIM_ConfigClockSource+0x1a6>
 8007a6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a6e:	d87f      	bhi.n	8007b70 <HAL_TIM_ConfigClockSource+0x1a0>
 8007a70:	2b70      	cmp	r3, #112	@ 0x70
 8007a72:	d01a      	beq.n	8007aaa <HAL_TIM_ConfigClockSource+0xda>
 8007a74:	2b70      	cmp	r3, #112	@ 0x70
 8007a76:	d87b      	bhi.n	8007b70 <HAL_TIM_ConfigClockSource+0x1a0>
 8007a78:	2b60      	cmp	r3, #96	@ 0x60
 8007a7a:	d050      	beq.n	8007b1e <HAL_TIM_ConfigClockSource+0x14e>
 8007a7c:	2b60      	cmp	r3, #96	@ 0x60
 8007a7e:	d877      	bhi.n	8007b70 <HAL_TIM_ConfigClockSource+0x1a0>
 8007a80:	2b50      	cmp	r3, #80	@ 0x50
 8007a82:	d03c      	beq.n	8007afe <HAL_TIM_ConfigClockSource+0x12e>
 8007a84:	2b50      	cmp	r3, #80	@ 0x50
 8007a86:	d873      	bhi.n	8007b70 <HAL_TIM_ConfigClockSource+0x1a0>
 8007a88:	2b40      	cmp	r3, #64	@ 0x40
 8007a8a:	d058      	beq.n	8007b3e <HAL_TIM_ConfigClockSource+0x16e>
 8007a8c:	2b40      	cmp	r3, #64	@ 0x40
 8007a8e:	d86f      	bhi.n	8007b70 <HAL_TIM_ConfigClockSource+0x1a0>
 8007a90:	2b30      	cmp	r3, #48	@ 0x30
 8007a92:	d064      	beq.n	8007b5e <HAL_TIM_ConfigClockSource+0x18e>
 8007a94:	2b30      	cmp	r3, #48	@ 0x30
 8007a96:	d86b      	bhi.n	8007b70 <HAL_TIM_ConfigClockSource+0x1a0>
 8007a98:	2b20      	cmp	r3, #32
 8007a9a:	d060      	beq.n	8007b5e <HAL_TIM_ConfigClockSource+0x18e>
 8007a9c:	2b20      	cmp	r3, #32
 8007a9e:	d867      	bhi.n	8007b70 <HAL_TIM_ConfigClockSource+0x1a0>
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d05c      	beq.n	8007b5e <HAL_TIM_ConfigClockSource+0x18e>
 8007aa4:	2b10      	cmp	r3, #16
 8007aa6:	d05a      	beq.n	8007b5e <HAL_TIM_ConfigClockSource+0x18e>
 8007aa8:	e062      	b.n	8007b70 <HAL_TIM_ConfigClockSource+0x1a0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007aba:	f000 fc37 	bl	800832c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	689b      	ldr	r3, [r3, #8]
 8007ac4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007acc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	68ba      	ldr	r2, [r7, #8]
 8007ad4:	609a      	str	r2, [r3, #8]
      break;
 8007ad6:	e04f      	b.n	8007b78 <HAL_TIM_ConfigClockSource+0x1a8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007ae8:	f000 fc20 	bl	800832c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	689a      	ldr	r2, [r3, #8]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007afa:	609a      	str	r2, [r3, #8]
      break;
 8007afc:	e03c      	b.n	8007b78 <HAL_TIM_ConfigClockSource+0x1a8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b0a:	461a      	mov	r2, r3
 8007b0c:	f000 fb92 	bl	8008234 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	2150      	movs	r1, #80	@ 0x50
 8007b16:	4618      	mov	r0, r3
 8007b18:	f000 fbeb 	bl	80082f2 <TIM_ITRx_SetConfig>
      break;
 8007b1c:	e02c      	b.n	8007b78 <HAL_TIM_ConfigClockSource+0x1a8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	f000 fbb1 	bl	8008292 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	2160      	movs	r1, #96	@ 0x60
 8007b36:	4618      	mov	r0, r3
 8007b38:	f000 fbdb 	bl	80082f2 <TIM_ITRx_SetConfig>
      break;
 8007b3c:	e01c      	b.n	8007b78 <HAL_TIM_ConfigClockSource+0x1a8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b4a:	461a      	mov	r2, r3
 8007b4c:	f000 fb72 	bl	8008234 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	2140      	movs	r1, #64	@ 0x40
 8007b56:	4618      	mov	r0, r3
 8007b58:	f000 fbcb 	bl	80082f2 <TIM_ITRx_SetConfig>
      break;
 8007b5c:	e00c      	b.n	8007b78 <HAL_TIM_ConfigClockSource+0x1a8>
#endif /* TIM12 */
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681a      	ldr	r2, [r3, #0]
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4619      	mov	r1, r3
 8007b68:	4610      	mov	r0, r2
 8007b6a:	f000 fbc2 	bl	80082f2 <TIM_ITRx_SetConfig>
      break;
 8007b6e:	e003      	b.n	8007b78 <HAL_TIM_ConfigClockSource+0x1a8>
    }

    default:
      status = HAL_ERROR;
 8007b70:	2301      	movs	r3, #1
 8007b72:	73fb      	strb	r3, [r7, #15]
      break;
 8007b74:	e000      	b.n	8007b78 <HAL_TIM_ConfigClockSource+0x1a8>
      break;
 8007b76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2200      	movs	r2, #0
 8007b84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3710      	adds	r7, #16
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}
 8007b92:	bf00      	nop
 8007b94:	00100040 	.word	0x00100040
 8007b98:	00100030 	.word	0x00100030
 8007b9c:	00100020 	.word	0x00100020

08007ba0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b085      	sub	sp, #20
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	4a39      	ldr	r2, [pc, #228]	@ (8007c98 <TIM_Base_SetConfig+0xf8>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d00b      	beq.n	8007bd0 <TIM_Base_SetConfig+0x30>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bbe:	d007      	beq.n	8007bd0 <TIM_Base_SetConfig+0x30>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	4a36      	ldr	r2, [pc, #216]	@ (8007c9c <TIM_Base_SetConfig+0xfc>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d003      	beq.n	8007bd0 <TIM_Base_SetConfig+0x30>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	4a35      	ldr	r2, [pc, #212]	@ (8007ca0 <TIM_Base_SetConfig+0x100>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d108      	bne.n	8007be2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	68fa      	ldr	r2, [r7, #12]
 8007bde:	4313      	orrs	r3, r2
 8007be0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	4a2c      	ldr	r2, [pc, #176]	@ (8007c98 <TIM_Base_SetConfig+0xf8>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d017      	beq.n	8007c1a <TIM_Base_SetConfig+0x7a>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bf0:	d013      	beq.n	8007c1a <TIM_Base_SetConfig+0x7a>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	4a29      	ldr	r2, [pc, #164]	@ (8007c9c <TIM_Base_SetConfig+0xfc>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d00f      	beq.n	8007c1a <TIM_Base_SetConfig+0x7a>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	4a28      	ldr	r2, [pc, #160]	@ (8007ca0 <TIM_Base_SetConfig+0x100>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d00b      	beq.n	8007c1a <TIM_Base_SetConfig+0x7a>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	4a27      	ldr	r2, [pc, #156]	@ (8007ca4 <TIM_Base_SetConfig+0x104>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d007      	beq.n	8007c1a <TIM_Base_SetConfig+0x7a>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	4a26      	ldr	r2, [pc, #152]	@ (8007ca8 <TIM_Base_SetConfig+0x108>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d003      	beq.n	8007c1a <TIM_Base_SetConfig+0x7a>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	4a25      	ldr	r2, [pc, #148]	@ (8007cac <TIM_Base_SetConfig+0x10c>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d108      	bne.n	8007c2c <TIM_Base_SetConfig+0x8c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	68db      	ldr	r3, [r3, #12]
 8007c26:	68fa      	ldr	r2, [r7, #12]
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	695b      	ldr	r3, [r3, #20]
 8007c36:	4313      	orrs	r3, r2
 8007c38:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	689a      	ldr	r2, [r3, #8]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	681a      	ldr	r2, [r3, #0]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	4a12      	ldr	r2, [pc, #72]	@ (8007c98 <TIM_Base_SetConfig+0xf8>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d00b      	beq.n	8007c6a <TIM_Base_SetConfig+0xca>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	4a13      	ldr	r2, [pc, #76]	@ (8007ca4 <TIM_Base_SetConfig+0x104>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d007      	beq.n	8007c6a <TIM_Base_SetConfig+0xca>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	4a12      	ldr	r2, [pc, #72]	@ (8007ca8 <TIM_Base_SetConfig+0x108>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d003      	beq.n	8007c6a <TIM_Base_SetConfig+0xca>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	4a11      	ldr	r2, [pc, #68]	@ (8007cac <TIM_Base_SetConfig+0x10c>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d103      	bne.n	8007c72 <TIM_Base_SetConfig+0xd2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	691a      	ldr	r2, [r3, #16]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f043 0204 	orr.w	r2, r3, #4
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2201      	movs	r2, #1
 8007c82:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	68fa      	ldr	r2, [r7, #12]
 8007c88:	601a      	str	r2, [r3, #0]
}
 8007c8a:	bf00      	nop
 8007c8c:	3714      	adds	r7, #20
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c94:	4770      	bx	lr
 8007c96:	bf00      	nop
 8007c98:	40012c00 	.word	0x40012c00
 8007c9c:	40000400 	.word	0x40000400
 8007ca0:	40000800 	.word	0x40000800
 8007ca4:	40014000 	.word	0x40014000
 8007ca8:	40014400 	.word	0x40014400
 8007cac:	40014800 	.word	0x40014800

08007cb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b087      	sub	sp, #28
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6a1b      	ldr	r3, [r3, #32]
 8007cbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6a1b      	ldr	r3, [r3, #32]
 8007cc4:	f023 0201 	bic.w	r2, r3, #1
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	699b      	ldr	r3, [r3, #24]
 8007cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007cde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ce2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f023 0303 	bic.w	r3, r3, #3
 8007cea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	68fa      	ldr	r2, [r7, #12]
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	f023 0302 	bic.w	r3, r3, #2
 8007cfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	689b      	ldr	r3, [r3, #8]
 8007d02:	697a      	ldr	r2, [r7, #20]
 8007d04:	4313      	orrs	r3, r2
 8007d06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	4a28      	ldr	r2, [pc, #160]	@ (8007dac <TIM_OC1_SetConfig+0xfc>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d00b      	beq.n	8007d28 <TIM_OC1_SetConfig+0x78>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	4a27      	ldr	r2, [pc, #156]	@ (8007db0 <TIM_OC1_SetConfig+0x100>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d007      	beq.n	8007d28 <TIM_OC1_SetConfig+0x78>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	4a26      	ldr	r2, [pc, #152]	@ (8007db4 <TIM_OC1_SetConfig+0x104>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d003      	beq.n	8007d28 <TIM_OC1_SetConfig+0x78>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	4a25      	ldr	r2, [pc, #148]	@ (8007db8 <TIM_OC1_SetConfig+0x108>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d10c      	bne.n	8007d42 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	f023 0308 	bic.w	r3, r3, #8
 8007d2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	68db      	ldr	r3, [r3, #12]
 8007d34:	697a      	ldr	r2, [r7, #20]
 8007d36:	4313      	orrs	r3, r2
 8007d38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	f023 0304 	bic.w	r3, r3, #4
 8007d40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	4a19      	ldr	r2, [pc, #100]	@ (8007dac <TIM_OC1_SetConfig+0xfc>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d00b      	beq.n	8007d62 <TIM_OC1_SetConfig+0xb2>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	4a18      	ldr	r2, [pc, #96]	@ (8007db0 <TIM_OC1_SetConfig+0x100>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d007      	beq.n	8007d62 <TIM_OC1_SetConfig+0xb2>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	4a17      	ldr	r2, [pc, #92]	@ (8007db4 <TIM_OC1_SetConfig+0x104>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d003      	beq.n	8007d62 <TIM_OC1_SetConfig+0xb2>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	4a16      	ldr	r2, [pc, #88]	@ (8007db8 <TIM_OC1_SetConfig+0x108>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d111      	bne.n	8007d86 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007d68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007d70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	695b      	ldr	r3, [r3, #20]
 8007d76:	693a      	ldr	r2, [r7, #16]
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	699b      	ldr	r3, [r3, #24]
 8007d80:	693a      	ldr	r2, [r7, #16]
 8007d82:	4313      	orrs	r3, r2
 8007d84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	693a      	ldr	r2, [r7, #16]
 8007d8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	68fa      	ldr	r2, [r7, #12]
 8007d90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	685a      	ldr	r2, [r3, #4]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	697a      	ldr	r2, [r7, #20]
 8007d9e:	621a      	str	r2, [r3, #32]
}
 8007da0:	bf00      	nop
 8007da2:	371c      	adds	r7, #28
 8007da4:	46bd      	mov	sp, r7
 8007da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007daa:	4770      	bx	lr
 8007dac:	40012c00 	.word	0x40012c00
 8007db0:	40014000 	.word	0x40014000
 8007db4:	40014400 	.word	0x40014400
 8007db8:	40014800 	.word	0x40014800

08007dbc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b087      	sub	sp, #28
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6a1b      	ldr	r3, [r3, #32]
 8007dca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6a1b      	ldr	r3, [r3, #32]
 8007dd0:	f023 0210 	bic.w	r2, r3, #16
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	699b      	ldr	r3, [r3, #24]
 8007de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007dea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007dee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007df6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	021b      	lsls	r3, r3, #8
 8007dfe:	68fa      	ldr	r2, [r7, #12]
 8007e00:	4313      	orrs	r3, r2
 8007e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	f023 0320 	bic.w	r3, r3, #32
 8007e0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	011b      	lsls	r3, r3, #4
 8007e12:	697a      	ldr	r2, [r7, #20]
 8007e14:	4313      	orrs	r3, r2
 8007e16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	4a24      	ldr	r2, [pc, #144]	@ (8007eac <TIM_OC2_SetConfig+0xf0>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d10d      	bne.n	8007e3c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007e26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	68db      	ldr	r3, [r3, #12]
 8007e2c:	011b      	lsls	r3, r3, #4
 8007e2e:	697a      	ldr	r2, [r7, #20]
 8007e30:	4313      	orrs	r3, r2
 8007e32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e3a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	4a1b      	ldr	r2, [pc, #108]	@ (8007eac <TIM_OC2_SetConfig+0xf0>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d00b      	beq.n	8007e5c <TIM_OC2_SetConfig+0xa0>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	4a1a      	ldr	r2, [pc, #104]	@ (8007eb0 <TIM_OC2_SetConfig+0xf4>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d007      	beq.n	8007e5c <TIM_OC2_SetConfig+0xa0>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	4a19      	ldr	r2, [pc, #100]	@ (8007eb4 <TIM_OC2_SetConfig+0xf8>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d003      	beq.n	8007e5c <TIM_OC2_SetConfig+0xa0>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	4a18      	ldr	r2, [pc, #96]	@ (8007eb8 <TIM_OC2_SetConfig+0xfc>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d113      	bne.n	8007e84 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007e62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007e6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	695b      	ldr	r3, [r3, #20]
 8007e70:	009b      	lsls	r3, r3, #2
 8007e72:	693a      	ldr	r2, [r7, #16]
 8007e74:	4313      	orrs	r3, r2
 8007e76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	699b      	ldr	r3, [r3, #24]
 8007e7c:	009b      	lsls	r3, r3, #2
 8007e7e:	693a      	ldr	r2, [r7, #16]
 8007e80:	4313      	orrs	r3, r2
 8007e82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	693a      	ldr	r2, [r7, #16]
 8007e88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	68fa      	ldr	r2, [r7, #12]
 8007e8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	685a      	ldr	r2, [r3, #4]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	697a      	ldr	r2, [r7, #20]
 8007e9c:	621a      	str	r2, [r3, #32]
}
 8007e9e:	bf00      	nop
 8007ea0:	371c      	adds	r7, #28
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea8:	4770      	bx	lr
 8007eaa:	bf00      	nop
 8007eac:	40012c00 	.word	0x40012c00
 8007eb0:	40014000 	.word	0x40014000
 8007eb4:	40014400 	.word	0x40014400
 8007eb8:	40014800 	.word	0x40014800

08007ebc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b087      	sub	sp, #28
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6a1b      	ldr	r3, [r3, #32]
 8007eca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6a1b      	ldr	r3, [r3, #32]
 8007ed0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	69db      	ldr	r3, [r3, #28]
 8007ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007eea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007eee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f023 0303 	bic.w	r3, r3, #3
 8007ef6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	68fa      	ldr	r2, [r7, #12]
 8007efe:	4313      	orrs	r3, r2
 8007f00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007f08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	689b      	ldr	r3, [r3, #8]
 8007f0e:	021b      	lsls	r3, r3, #8
 8007f10:	697a      	ldr	r2, [r7, #20]
 8007f12:	4313      	orrs	r3, r2
 8007f14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	4a23      	ldr	r2, [pc, #140]	@ (8007fa8 <TIM_OC3_SetConfig+0xec>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d10d      	bne.n	8007f3a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007f24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	68db      	ldr	r3, [r3, #12]
 8007f2a:	021b      	lsls	r3, r3, #8
 8007f2c:	697a      	ldr	r2, [r7, #20]
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007f38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	4a1a      	ldr	r2, [pc, #104]	@ (8007fa8 <TIM_OC3_SetConfig+0xec>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d00b      	beq.n	8007f5a <TIM_OC3_SetConfig+0x9e>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	4a19      	ldr	r2, [pc, #100]	@ (8007fac <TIM_OC3_SetConfig+0xf0>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d007      	beq.n	8007f5a <TIM_OC3_SetConfig+0x9e>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	4a18      	ldr	r2, [pc, #96]	@ (8007fb0 <TIM_OC3_SetConfig+0xf4>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d003      	beq.n	8007f5a <TIM_OC3_SetConfig+0x9e>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	4a17      	ldr	r2, [pc, #92]	@ (8007fb4 <TIM_OC3_SetConfig+0xf8>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d113      	bne.n	8007f82 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007f60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007f68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	695b      	ldr	r3, [r3, #20]
 8007f6e:	011b      	lsls	r3, r3, #4
 8007f70:	693a      	ldr	r2, [r7, #16]
 8007f72:	4313      	orrs	r3, r2
 8007f74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	699b      	ldr	r3, [r3, #24]
 8007f7a:	011b      	lsls	r3, r3, #4
 8007f7c:	693a      	ldr	r2, [r7, #16]
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	693a      	ldr	r2, [r7, #16]
 8007f86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	68fa      	ldr	r2, [r7, #12]
 8007f8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	685a      	ldr	r2, [r3, #4]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	697a      	ldr	r2, [r7, #20]
 8007f9a:	621a      	str	r2, [r3, #32]
}
 8007f9c:	bf00      	nop
 8007f9e:	371c      	adds	r7, #28
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa6:	4770      	bx	lr
 8007fa8:	40012c00 	.word	0x40012c00
 8007fac:	40014000 	.word	0x40014000
 8007fb0:	40014400 	.word	0x40014400
 8007fb4:	40014800 	.word	0x40014800

08007fb8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b087      	sub	sp, #28
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
 8007fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6a1b      	ldr	r3, [r3, #32]
 8007fc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6a1b      	ldr	r3, [r3, #32]
 8007fcc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	685b      	ldr	r3, [r3, #4]
 8007fd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	69db      	ldr	r3, [r3, #28]
 8007fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007fe6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007fea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ff2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	021b      	lsls	r3, r3, #8
 8007ffa:	68fa      	ldr	r2, [r7, #12]
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008006:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	689b      	ldr	r3, [r3, #8]
 800800c:	031b      	lsls	r3, r3, #12
 800800e:	697a      	ldr	r2, [r7, #20]
 8008010:	4313      	orrs	r3, r2
 8008012:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	4a24      	ldr	r2, [pc, #144]	@ (80080a8 <TIM_OC4_SetConfig+0xf0>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d10d      	bne.n	8008038 <TIM_OC4_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008022:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	68db      	ldr	r3, [r3, #12]
 8008028:	031b      	lsls	r3, r3, #12
 800802a:	697a      	ldr	r2, [r7, #20]
 800802c:	4313      	orrs	r3, r2
 800802e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008036:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	4a1b      	ldr	r2, [pc, #108]	@ (80080a8 <TIM_OC4_SetConfig+0xf0>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d00b      	beq.n	8008058 <TIM_OC4_SetConfig+0xa0>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	4a1a      	ldr	r2, [pc, #104]	@ (80080ac <TIM_OC4_SetConfig+0xf4>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d007      	beq.n	8008058 <TIM_OC4_SetConfig+0xa0>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	4a19      	ldr	r2, [pc, #100]	@ (80080b0 <TIM_OC4_SetConfig+0xf8>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d003      	beq.n	8008058 <TIM_OC4_SetConfig+0xa0>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	4a18      	ldr	r2, [pc, #96]	@ (80080b4 <TIM_OC4_SetConfig+0xfc>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d113      	bne.n	8008080 <TIM_OC4_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800805e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008066:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	695b      	ldr	r3, [r3, #20]
 800806c:	019b      	lsls	r3, r3, #6
 800806e:	693a      	ldr	r2, [r7, #16]
 8008070:	4313      	orrs	r3, r2
 8008072:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	699b      	ldr	r3, [r3, #24]
 8008078:	019b      	lsls	r3, r3, #6
 800807a:	693a      	ldr	r2, [r7, #16]
 800807c:	4313      	orrs	r3, r2
 800807e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	693a      	ldr	r2, [r7, #16]
 8008084:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	68fa      	ldr	r2, [r7, #12]
 800808a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	685a      	ldr	r2, [r3, #4]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	697a      	ldr	r2, [r7, #20]
 8008098:	621a      	str	r2, [r3, #32]
}
 800809a:	bf00      	nop
 800809c:	371c      	adds	r7, #28
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr
 80080a6:	bf00      	nop
 80080a8:	40012c00 	.word	0x40012c00
 80080ac:	40014000 	.word	0x40014000
 80080b0:	40014400 	.word	0x40014400
 80080b4:	40014800 	.word	0x40014800

080080b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b087      	sub	sp, #28
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
 80080c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6a1b      	ldr	r3, [r3, #32]
 80080c6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6a1b      	ldr	r3, [r3, #32]
 80080cc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80080e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	68fa      	ldr	r2, [r7, #12]
 80080f2:	4313      	orrs	r3, r2
 80080f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80080fc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	689b      	ldr	r3, [r3, #8]
 8008102:	041b      	lsls	r3, r3, #16
 8008104:	693a      	ldr	r2, [r7, #16]
 8008106:	4313      	orrs	r3, r2
 8008108:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	4a15      	ldr	r2, [pc, #84]	@ (8008164 <TIM_OC5_SetConfig+0xac>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d00b      	beq.n	800812a <TIM_OC5_SetConfig+0x72>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	4a14      	ldr	r2, [pc, #80]	@ (8008168 <TIM_OC5_SetConfig+0xb0>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d007      	beq.n	800812a <TIM_OC5_SetConfig+0x72>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	4a13      	ldr	r2, [pc, #76]	@ (800816c <TIM_OC5_SetConfig+0xb4>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d003      	beq.n	800812a <TIM_OC5_SetConfig+0x72>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	4a12      	ldr	r2, [pc, #72]	@ (8008170 <TIM_OC5_SetConfig+0xb8>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d109      	bne.n	800813e <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008130:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	695b      	ldr	r3, [r3, #20]
 8008136:	021b      	lsls	r3, r3, #8
 8008138:	697a      	ldr	r2, [r7, #20]
 800813a:	4313      	orrs	r3, r2
 800813c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	697a      	ldr	r2, [r7, #20]
 8008142:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	68fa      	ldr	r2, [r7, #12]
 8008148:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	685a      	ldr	r2, [r3, #4]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	693a      	ldr	r2, [r7, #16]
 8008156:	621a      	str	r2, [r3, #32]
}
 8008158:	bf00      	nop
 800815a:	371c      	adds	r7, #28
 800815c:	46bd      	mov	sp, r7
 800815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008162:	4770      	bx	lr
 8008164:	40012c00 	.word	0x40012c00
 8008168:	40014000 	.word	0x40014000
 800816c:	40014400 	.word	0x40014400
 8008170:	40014800 	.word	0x40014800

08008174 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008174:	b480      	push	{r7}
 8008176:	b087      	sub	sp, #28
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
 800817c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6a1b      	ldr	r3, [r3, #32]
 8008182:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6a1b      	ldr	r3, [r3, #32]
 8008188:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	685b      	ldr	r3, [r3, #4]
 8008194:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800819a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80081a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80081a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	021b      	lsls	r3, r3, #8
 80081ae:	68fa      	ldr	r2, [r7, #12]
 80081b0:	4313      	orrs	r3, r2
 80081b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80081ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	689b      	ldr	r3, [r3, #8]
 80081c0:	051b      	lsls	r3, r3, #20
 80081c2:	693a      	ldr	r2, [r7, #16]
 80081c4:	4313      	orrs	r3, r2
 80081c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	4a16      	ldr	r2, [pc, #88]	@ (8008224 <TIM_OC6_SetConfig+0xb0>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d00b      	beq.n	80081e8 <TIM_OC6_SetConfig+0x74>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	4a15      	ldr	r2, [pc, #84]	@ (8008228 <TIM_OC6_SetConfig+0xb4>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d007      	beq.n	80081e8 <TIM_OC6_SetConfig+0x74>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	4a14      	ldr	r2, [pc, #80]	@ (800822c <TIM_OC6_SetConfig+0xb8>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d003      	beq.n	80081e8 <TIM_OC6_SetConfig+0x74>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	4a13      	ldr	r2, [pc, #76]	@ (8008230 <TIM_OC6_SetConfig+0xbc>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d109      	bne.n	80081fc <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80081ee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	695b      	ldr	r3, [r3, #20]
 80081f4:	029b      	lsls	r3, r3, #10
 80081f6:	697a      	ldr	r2, [r7, #20]
 80081f8:	4313      	orrs	r3, r2
 80081fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	697a      	ldr	r2, [r7, #20]
 8008200:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	68fa      	ldr	r2, [r7, #12]
 8008206:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	685a      	ldr	r2, [r3, #4]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	693a      	ldr	r2, [r7, #16]
 8008214:	621a      	str	r2, [r3, #32]
}
 8008216:	bf00      	nop
 8008218:	371c      	adds	r7, #28
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr
 8008222:	bf00      	nop
 8008224:	40012c00 	.word	0x40012c00
 8008228:	40014000 	.word	0x40014000
 800822c:	40014400 	.word	0x40014400
 8008230:	40014800 	.word	0x40014800

08008234 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008234:	b480      	push	{r7}
 8008236:	b087      	sub	sp, #28
 8008238:	af00      	add	r7, sp, #0
 800823a:	60f8      	str	r0, [r7, #12]
 800823c:	60b9      	str	r1, [r7, #8]
 800823e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	6a1b      	ldr	r3, [r3, #32]
 8008244:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	6a1b      	ldr	r3, [r3, #32]
 800824a:	f023 0201 	bic.w	r2, r3, #1
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	699b      	ldr	r3, [r3, #24]
 8008256:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800825e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	011b      	lsls	r3, r3, #4
 8008264:	693a      	ldr	r2, [r7, #16]
 8008266:	4313      	orrs	r3, r2
 8008268:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	f023 030a 	bic.w	r3, r3, #10
 8008270:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008272:	697a      	ldr	r2, [r7, #20]
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	4313      	orrs	r3, r2
 8008278:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	693a      	ldr	r2, [r7, #16]
 800827e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	697a      	ldr	r2, [r7, #20]
 8008284:	621a      	str	r2, [r3, #32]
}
 8008286:	bf00      	nop
 8008288:	371c      	adds	r7, #28
 800828a:	46bd      	mov	sp, r7
 800828c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008290:	4770      	bx	lr

08008292 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008292:	b480      	push	{r7}
 8008294:	b087      	sub	sp, #28
 8008296:	af00      	add	r7, sp, #0
 8008298:	60f8      	str	r0, [r7, #12]
 800829a:	60b9      	str	r1, [r7, #8]
 800829c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	6a1b      	ldr	r3, [r3, #32]
 80082a2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	6a1b      	ldr	r3, [r3, #32]
 80082a8:	f023 0210 	bic.w	r2, r3, #16
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	699b      	ldr	r3, [r3, #24]
 80082b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80082b6:	693b      	ldr	r3, [r7, #16]
 80082b8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80082bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	031b      	lsls	r3, r3, #12
 80082c2:	693a      	ldr	r2, [r7, #16]
 80082c4:	4313      	orrs	r3, r2
 80082c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80082ce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	011b      	lsls	r3, r3, #4
 80082d4:	697a      	ldr	r2, [r7, #20]
 80082d6:	4313      	orrs	r3, r2
 80082d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	693a      	ldr	r2, [r7, #16]
 80082de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	697a      	ldr	r2, [r7, #20]
 80082e4:	621a      	str	r2, [r3, #32]
}
 80082e6:	bf00      	nop
 80082e8:	371c      	adds	r7, #28
 80082ea:	46bd      	mov	sp, r7
 80082ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f0:	4770      	bx	lr

080082f2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80082f2:	b480      	push	{r7}
 80082f4:	b085      	sub	sp, #20
 80082f6:	af00      	add	r7, sp, #0
 80082f8:	6078      	str	r0, [r7, #4]
 80082fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	689b      	ldr	r3, [r3, #8]
 8008300:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008308:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800830c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800830e:	683a      	ldr	r2, [r7, #0]
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	4313      	orrs	r3, r2
 8008314:	f043 0307 	orr.w	r3, r3, #7
 8008318:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	68fa      	ldr	r2, [r7, #12]
 800831e:	609a      	str	r2, [r3, #8]
}
 8008320:	bf00      	nop
 8008322:	3714      	adds	r7, #20
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr

0800832c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800832c:	b480      	push	{r7}
 800832e:	b087      	sub	sp, #28
 8008330:	af00      	add	r7, sp, #0
 8008332:	60f8      	str	r0, [r7, #12]
 8008334:	60b9      	str	r1, [r7, #8]
 8008336:	607a      	str	r2, [r7, #4]
 8008338:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	689b      	ldr	r3, [r3, #8]
 800833e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008346:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	021a      	lsls	r2, r3, #8
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	431a      	orrs	r2, r3
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	4313      	orrs	r3, r2
 8008354:	697a      	ldr	r2, [r7, #20]
 8008356:	4313      	orrs	r3, r2
 8008358:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	697a      	ldr	r2, [r7, #20]
 800835e:	609a      	str	r2, [r3, #8]
}
 8008360:	bf00      	nop
 8008362:	371c      	adds	r7, #28
 8008364:	46bd      	mov	sp, r7
 8008366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836a:	4770      	bx	lr

0800836c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800836c:	b480      	push	{r7}
 800836e:	b085      	sub	sp, #20
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800837c:	2b01      	cmp	r3, #1
 800837e:	d101      	bne.n	8008384 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008380:	2302      	movs	r3, #2
 8008382:	e05b      	b.n	800843c <HAL_TIMEx_MasterConfigSynchronization+0xd0>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2201      	movs	r2, #1
 8008388:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2202      	movs	r2, #2
 8008390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	689b      	ldr	r3, [r3, #8]
 80083a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	4a27      	ldr	r2, [pc, #156]	@ (8008448 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d108      	bne.n	80083c0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80083b4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	685b      	ldr	r3, [r3, #4]
 80083ba:	68fa      	ldr	r2, [r7, #12]
 80083bc:	4313      	orrs	r3, r2
 80083be:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80083c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	68fa      	ldr	r2, [r7, #12]
 80083d2:	4313      	orrs	r3, r2
 80083d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	68fa      	ldr	r2, [r7, #12]
 80083dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4a19      	ldr	r2, [pc, #100]	@ (8008448 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d013      	beq.n	8008410 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083f0:	d00e      	beq.n	8008410 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4a15      	ldr	r2, [pc, #84]	@ (800844c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d009      	beq.n	8008410 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a13      	ldr	r2, [pc, #76]	@ (8008450 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d004      	beq.n	8008410 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4a12      	ldr	r2, [pc, #72]	@ (8008454 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d10c      	bne.n	800842a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008416:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	689b      	ldr	r3, [r3, #8]
 800841c:	68ba      	ldr	r2, [r7, #8]
 800841e:	4313      	orrs	r3, r2
 8008420:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	68ba      	ldr	r2, [r7, #8]
 8008428:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2201      	movs	r2, #1
 800842e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2200      	movs	r2, #0
 8008436:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800843a:	2300      	movs	r3, #0
}
 800843c:	4618      	mov	r0, r3
 800843e:	3714      	adds	r7, #20
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr
 8008448:	40012c00 	.word	0x40012c00
 800844c:	40000400 	.word	0x40000400
 8008450:	40000800 	.word	0x40000800
 8008454:	40014000 	.word	0x40014000

08008458 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b082      	sub	sp, #8
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d101      	bne.n	800846a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008466:	2301      	movs	r3, #1
 8008468:	e042      	b.n	80084f0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008470:	2b00      	cmp	r3, #0
 8008472:	d106      	bne.n	8008482 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2200      	movs	r2, #0
 8008478:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f7fa f95d 	bl	800273c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2224      	movs	r2, #36	@ 0x24
 8008486:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	681a      	ldr	r2, [r3, #0]
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f022 0201 	bic.w	r2, r2, #1
 8008498:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d002      	beq.n	80084a8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f000 fa2a 	bl	80088fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f000 f8b3 	bl	8008614 <UART_SetConfig>
 80084ae:	4603      	mov	r3, r0
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	d101      	bne.n	80084b8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80084b4:	2301      	movs	r3, #1
 80084b6:	e01b      	b.n	80084f0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	685a      	ldr	r2, [r3, #4]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80084c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	689a      	ldr	r2, [r3, #8]
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80084d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	681a      	ldr	r2, [r3, #0]
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f042 0201 	orr.w	r2, r2, #1
 80084e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f000 faa9 	bl	8008a40 <UART_CheckIdleState>
 80084ee:	4603      	mov	r3, r0
}
 80084f0:	4618      	mov	r0, r3
 80084f2:	3708      	adds	r7, #8
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}

080084f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b08a      	sub	sp, #40	@ 0x28
 80084fc:	af02      	add	r7, sp, #8
 80084fe:	60f8      	str	r0, [r7, #12]
 8008500:	60b9      	str	r1, [r7, #8]
 8008502:	603b      	str	r3, [r7, #0]
 8008504:	4613      	mov	r3, r2
 8008506:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800850e:	2b20      	cmp	r3, #32
 8008510:	d17b      	bne.n	800860a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d002      	beq.n	800851e <HAL_UART_Transmit+0x26>
 8008518:	88fb      	ldrh	r3, [r7, #6]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d101      	bne.n	8008522 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800851e:	2301      	movs	r3, #1
 8008520:	e074      	b.n	800860c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	2200      	movs	r2, #0
 8008526:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	2221      	movs	r2, #33	@ 0x21
 800852e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008532:	f7fa fd4d 	bl	8002fd0 <HAL_GetTick>
 8008536:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	88fa      	ldrh	r2, [r7, #6]
 800853c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	88fa      	ldrh	r2, [r7, #6]
 8008544:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	689b      	ldr	r3, [r3, #8]
 800854c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008550:	d108      	bne.n	8008564 <HAL_UART_Transmit+0x6c>
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	691b      	ldr	r3, [r3, #16]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d104      	bne.n	8008564 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800855a:	2300      	movs	r3, #0
 800855c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	61bb      	str	r3, [r7, #24]
 8008562:	e003      	b.n	800856c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008568:	2300      	movs	r3, #0
 800856a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800856c:	e030      	b.n	80085d0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	9300      	str	r3, [sp, #0]
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	2200      	movs	r2, #0
 8008576:	2180      	movs	r1, #128	@ 0x80
 8008578:	68f8      	ldr	r0, [r7, #12]
 800857a:	f000 fb0b 	bl	8008b94 <UART_WaitOnFlagUntilTimeout>
 800857e:	4603      	mov	r3, r0
 8008580:	2b00      	cmp	r3, #0
 8008582:	d005      	beq.n	8008590 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2220      	movs	r2, #32
 8008588:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800858c:	2303      	movs	r3, #3
 800858e:	e03d      	b.n	800860c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008590:	69fb      	ldr	r3, [r7, #28]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d10b      	bne.n	80085ae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008596:	69bb      	ldr	r3, [r7, #24]
 8008598:	881b      	ldrh	r3, [r3, #0]
 800859a:	461a      	mov	r2, r3
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80085a4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80085a6:	69bb      	ldr	r3, [r7, #24]
 80085a8:	3302      	adds	r3, #2
 80085aa:	61bb      	str	r3, [r7, #24]
 80085ac:	e007      	b.n	80085be <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80085ae:	69fb      	ldr	r3, [r7, #28]
 80085b0:	781a      	ldrb	r2, [r3, #0]
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80085b8:	69fb      	ldr	r3, [r7, #28]
 80085ba:	3301      	adds	r3, #1
 80085bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80085c4:	b29b      	uxth	r3, r3
 80085c6:	3b01      	subs	r3, #1
 80085c8:	b29a      	uxth	r2, r3
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80085d6:	b29b      	uxth	r3, r3
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d1c8      	bne.n	800856e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	9300      	str	r3, [sp, #0]
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	2200      	movs	r2, #0
 80085e4:	2140      	movs	r1, #64	@ 0x40
 80085e6:	68f8      	ldr	r0, [r7, #12]
 80085e8:	f000 fad4 	bl	8008b94 <UART_WaitOnFlagUntilTimeout>
 80085ec:	4603      	mov	r3, r0
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d005      	beq.n	80085fe <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	2220      	movs	r2, #32
 80085f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80085fa:	2303      	movs	r3, #3
 80085fc:	e006      	b.n	800860c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	2220      	movs	r2, #32
 8008602:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008606:	2300      	movs	r3, #0
 8008608:	e000      	b.n	800860c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800860a:	2302      	movs	r3, #2
  }
}
 800860c:	4618      	mov	r0, r3
 800860e:	3720      	adds	r7, #32
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}

08008614 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008614:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008618:	b08e      	sub	sp, #56	@ 0x38
 800861a:	af00      	add	r7, sp, #0
 800861c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800861e:	2300      	movs	r3, #0
 8008620:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	689a      	ldr	r2, [r3, #8]
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	691b      	ldr	r3, [r3, #16]
 800862c:	431a      	orrs	r2, r3
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	695b      	ldr	r3, [r3, #20]
 8008632:	431a      	orrs	r2, r3
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	69db      	ldr	r3, [r3, #28]
 8008638:	4313      	orrs	r3, r2
 800863a:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	681a      	ldr	r2, [r3, #0]
 8008642:	4b9b      	ldr	r3, [pc, #620]	@ (80088b0 <UART_SetConfig+0x29c>)
 8008644:	4013      	ands	r3, r2
 8008646:	697a      	ldr	r2, [r7, #20]
 8008648:	6812      	ldr	r2, [r2, #0]
 800864a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800864c:	430b      	orrs	r3, r1
 800864e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	68da      	ldr	r2, [r3, #12]
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	430a      	orrs	r2, r1
 8008664:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	699b      	ldr	r3, [r3, #24]
 800866a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4a90      	ldr	r2, [pc, #576]	@ (80088b4 <UART_SetConfig+0x2a0>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d004      	beq.n	8008680 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	6a1b      	ldr	r3, [r3, #32]
 800867a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800867c:	4313      	orrs	r3, r2
 800867e:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	689b      	ldr	r3, [r3, #8]
 8008686:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800868a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800868e:	697a      	ldr	r2, [r7, #20]
 8008690:	6812      	ldr	r2, [r2, #0]
 8008692:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008694:	430b      	orrs	r3, r1
 8008696:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800869e:	f023 010f 	bic.w	r1, r3, #15
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	430a      	orrs	r2, r1
 80086ac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a81      	ldr	r2, [pc, #516]	@ (80088b8 <UART_SetConfig+0x2a4>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d102      	bne.n	80086be <UART_SetConfig+0xaa>
 80086b8:	2301      	movs	r3, #1
 80086ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80086bc:	e022      	b.n	8008704 <UART_SetConfig+0xf0>
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4a7e      	ldr	r2, [pc, #504]	@ (80088bc <UART_SetConfig+0x2a8>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d102      	bne.n	80086ce <UART_SetConfig+0xba>
 80086c8:	2302      	movs	r3, #2
 80086ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80086cc:	e01a      	b.n	8008704 <UART_SetConfig+0xf0>
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	4a7b      	ldr	r2, [pc, #492]	@ (80088c0 <UART_SetConfig+0x2ac>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d102      	bne.n	80086de <UART_SetConfig+0xca>
 80086d8:	2304      	movs	r3, #4
 80086da:	633b      	str	r3, [r7, #48]	@ 0x30
 80086dc:	e012      	b.n	8008704 <UART_SetConfig+0xf0>
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	4a78      	ldr	r2, [pc, #480]	@ (80088c4 <UART_SetConfig+0x2b0>)
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d102      	bne.n	80086ee <UART_SetConfig+0xda>
 80086e8:	2308      	movs	r3, #8
 80086ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80086ec:	e00a      	b.n	8008704 <UART_SetConfig+0xf0>
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4a70      	ldr	r2, [pc, #448]	@ (80088b4 <UART_SetConfig+0x2a0>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d103      	bne.n	8008700 <UART_SetConfig+0xec>
 80086f8:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80086fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80086fe:	e001      	b.n	8008704 <UART_SetConfig+0xf0>
 8008700:	2300      	movs	r3, #0
 8008702:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4a6a      	ldr	r2, [pc, #424]	@ (80088b4 <UART_SetConfig+0x2a0>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d16c      	bne.n	80087e8 <UART_SetConfig+0x1d4>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800870e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008710:	f7fd fe58 	bl	80063c4 <HAL_RCCEx_GetPeriphCLKFreq>
 8008714:	62b8      	str	r0, [r7, #40]	@ 0x28

    /* If proper clock source reported */
    if (pclk != 0U)
 8008716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008718:	2b00      	cmp	r3, #0
 800871a:	f000 80da 	beq.w	80088d2 <UART_SetConfig+0x2be>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008722:	4a69      	ldr	r2, [pc, #420]	@ (80088c8 <UART_SetConfig+0x2b4>)
 8008724:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008728:	461a      	mov	r2, r3
 800872a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800872c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008730:	61fb      	str	r3, [r7, #28]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	685a      	ldr	r2, [r3, #4]
 8008736:	4613      	mov	r3, r2
 8008738:	005b      	lsls	r3, r3, #1
 800873a:	4413      	add	r3, r2
 800873c:	69fa      	ldr	r2, [r7, #28]
 800873e:	429a      	cmp	r2, r3
 8008740:	d305      	bcc.n	800874e <UART_SetConfig+0x13a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	685b      	ldr	r3, [r3, #4]
 8008746:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008748:	69fa      	ldr	r2, [r7, #28]
 800874a:	429a      	cmp	r2, r3
 800874c:	d903      	bls.n	8008756 <UART_SetConfig+0x142>
      {
        ret = HAL_ERROR;
 800874e:	2301      	movs	r3, #1
 8008750:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8008754:	e0bd      	b.n	80088d2 <UART_SetConfig+0x2be>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008758:	2200      	movs	r2, #0
 800875a:	60bb      	str	r3, [r7, #8]
 800875c:	60fa      	str	r2, [r7, #12]
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008762:	4a59      	ldr	r2, [pc, #356]	@ (80088c8 <UART_SetConfig+0x2b4>)
 8008764:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008768:	b29b      	uxth	r3, r3
 800876a:	2200      	movs	r2, #0
 800876c:	603b      	str	r3, [r7, #0]
 800876e:	607a      	str	r2, [r7, #4]
 8008770:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008774:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008778:	f7f8 fa1a 	bl	8000bb0 <__aeabi_uldivmod>
 800877c:	4602      	mov	r2, r0
 800877e:	460b      	mov	r3, r1
 8008780:	4610      	mov	r0, r2
 8008782:	4619      	mov	r1, r3
 8008784:	f04f 0200 	mov.w	r2, #0
 8008788:	f04f 0300 	mov.w	r3, #0
 800878c:	020b      	lsls	r3, r1, #8
 800878e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008792:	0202      	lsls	r2, r0, #8
 8008794:	6979      	ldr	r1, [r7, #20]
 8008796:	6849      	ldr	r1, [r1, #4]
 8008798:	0849      	lsrs	r1, r1, #1
 800879a:	2000      	movs	r0, #0
 800879c:	460c      	mov	r4, r1
 800879e:	4605      	mov	r5, r0
 80087a0:	eb12 0804 	adds.w	r8, r2, r4
 80087a4:	eb43 0905 	adc.w	r9, r3, r5
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	2200      	movs	r2, #0
 80087ae:	469a      	mov	sl, r3
 80087b0:	4693      	mov	fp, r2
 80087b2:	4652      	mov	r2, sl
 80087b4:	465b      	mov	r3, fp
 80087b6:	4640      	mov	r0, r8
 80087b8:	4649      	mov	r1, r9
 80087ba:	f7f8 f9f9 	bl	8000bb0 <__aeabi_uldivmod>
 80087be:	4602      	mov	r2, r0
 80087c0:	460b      	mov	r3, r1
 80087c2:	4613      	mov	r3, r2
 80087c4:	627b      	str	r3, [r7, #36]	@ 0x24
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80087c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80087cc:	d308      	bcc.n	80087e0 <UART_SetConfig+0x1cc>
 80087ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087d0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80087d4:	d204      	bcs.n	80087e0 <UART_SetConfig+0x1cc>
        {
          huart->Instance->BRR = usartdiv;
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80087dc:	60da      	str	r2, [r3, #12]
 80087de:	e078      	b.n	80088d2 <UART_SetConfig+0x2be>
        }
        else
        {
          ret = HAL_ERROR;
 80087e0:	2301      	movs	r3, #1
 80087e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80087e6:	e074      	b.n	80088d2 <UART_SetConfig+0x2be>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	69db      	ldr	r3, [r3, #28]
 80087ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80087f0:	d137      	bne.n	8008862 <UART_SetConfig+0x24e>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80087f2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80087f4:	f7fd fde6 	bl	80063c4 <HAL_RCCEx_GetPeriphCLKFreq>
 80087f8:	62b8      	str	r0, [r7, #40]	@ 0x28

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80087fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d068      	beq.n	80088d2 <UART_SetConfig+0x2be>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008804:	4a30      	ldr	r2, [pc, #192]	@ (80088c8 <UART_SetConfig+0x2b4>)
 8008806:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800880a:	461a      	mov	r2, r3
 800880c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800880e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008812:	005a      	lsls	r2, r3, #1
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	085b      	lsrs	r3, r3, #1
 800881a:	441a      	add	r2, r3
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	fbb2 f3f3 	udiv	r3, r2, r3
 8008824:	627b      	str	r3, [r7, #36]	@ 0x24
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008828:	2b0f      	cmp	r3, #15
 800882a:	d916      	bls.n	800885a <UART_SetConfig+0x246>
 800882c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800882e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008832:	d212      	bcs.n	800885a <UART_SetConfig+0x246>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008836:	b29b      	uxth	r3, r3
 8008838:	f023 030f 	bic.w	r3, r3, #15
 800883c:	847b      	strh	r3, [r7, #34]	@ 0x22
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800883e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008840:	085b      	lsrs	r3, r3, #1
 8008842:	b29b      	uxth	r3, r3
 8008844:	f003 0307 	and.w	r3, r3, #7
 8008848:	b29a      	uxth	r2, r3
 800884a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800884c:	4313      	orrs	r3, r2
 800884e:	847b      	strh	r3, [r7, #34]	@ 0x22
        huart->Instance->BRR = brrtemp;
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8008856:	60da      	str	r2, [r3, #12]
 8008858:	e03b      	b.n	80088d2 <UART_SetConfig+0x2be>
      }
      else
      {
        ret = HAL_ERROR;
 800885a:	2301      	movs	r3, #1
 800885c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8008860:	e037      	b.n	80088d2 <UART_SetConfig+0x2be>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008862:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008864:	f7fd fdae 	bl	80063c4 <HAL_RCCEx_GetPeriphCLKFreq>
 8008868:	62b8      	str	r0, [r7, #40]	@ 0x28

    if (pclk != 0U)
 800886a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800886c:	2b00      	cmp	r3, #0
 800886e:	d030      	beq.n	80088d2 <UART_SetConfig+0x2be>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008874:	4a14      	ldr	r2, [pc, #80]	@ (80088c8 <UART_SetConfig+0x2b4>)
 8008876:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800887a:	461a      	mov	r2, r3
 800887c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800887e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	685b      	ldr	r3, [r3, #4]
 8008886:	085b      	lsrs	r3, r3, #1
 8008888:	441a      	add	r2, r3
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008892:	627b      	str	r3, [r7, #36]	@ 0x24
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008896:	2b0f      	cmp	r3, #15
 8008898:	d918      	bls.n	80088cc <UART_SetConfig+0x2b8>
 800889a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800889c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80088a0:	d214      	bcs.n	80088cc <UART_SetConfig+0x2b8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80088a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088a4:	b29a      	uxth	r2, r3
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	60da      	str	r2, [r3, #12]
 80088ac:	e011      	b.n	80088d2 <UART_SetConfig+0x2be>
 80088ae:	bf00      	nop
 80088b0:	cfff69f3 	.word	0xcfff69f3
 80088b4:	40042400 	.word	0x40042400
 80088b8:	40013800 	.word	0x40013800
 80088bc:	40004800 	.word	0x40004800
 80088c0:	40004c00 	.word	0x40004c00
 80088c4:	40005000 	.word	0x40005000
 80088c8:	08022db0 	.word	0x08022db0
      }
      else
      {
        ret = HAL_ERROR;
 80088cc:	2301      	movs	r3, #1
 80088ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	2201      	movs	r2, #1
 80088d6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	2201      	movs	r2, #1
 80088de:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	2200      	movs	r2, #0
 80088e6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80088e8:	697b      	ldr	r3, [r7, #20]
 80088ea:	2200      	movs	r2, #0
 80088ec:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80088ee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3738      	adds	r7, #56	@ 0x38
 80088f6:	46bd      	mov	sp, r7
 80088f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080088fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b083      	sub	sp, #12
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008908:	f003 0308 	and.w	r3, r3, #8
 800890c:	2b00      	cmp	r3, #0
 800890e:	d00a      	beq.n	8008926 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	685b      	ldr	r3, [r3, #4]
 8008916:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	430a      	orrs	r2, r1
 8008924:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800892a:	f003 0301 	and.w	r3, r3, #1
 800892e:	2b00      	cmp	r3, #0
 8008930:	d00a      	beq.n	8008948 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	430a      	orrs	r2, r1
 8008946:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800894c:	f003 0302 	and.w	r3, r3, #2
 8008950:	2b00      	cmp	r3, #0
 8008952:	d00a      	beq.n	800896a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	685b      	ldr	r3, [r3, #4]
 800895a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	430a      	orrs	r2, r1
 8008968:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800896e:	f003 0304 	and.w	r3, r3, #4
 8008972:	2b00      	cmp	r3, #0
 8008974:	d00a      	beq.n	800898c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	685b      	ldr	r3, [r3, #4]
 800897c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	430a      	orrs	r2, r1
 800898a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008990:	f003 0310 	and.w	r3, r3, #16
 8008994:	2b00      	cmp	r3, #0
 8008996:	d00a      	beq.n	80089ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	689b      	ldr	r3, [r3, #8]
 800899e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	430a      	orrs	r2, r1
 80089ac:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089b2:	f003 0320 	and.w	r3, r3, #32
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d00a      	beq.n	80089d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	689b      	ldr	r3, [r3, #8]
 80089c0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	430a      	orrs	r2, r1
 80089ce:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d01a      	beq.n	8008a12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	685b      	ldr	r3, [r3, #4]
 80089e2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	430a      	orrs	r2, r1
 80089f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80089fa:	d10a      	bne.n	8008a12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	685b      	ldr	r3, [r3, #4]
 8008a02:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	430a      	orrs	r2, r1
 8008a10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d00a      	beq.n	8008a34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	685b      	ldr	r3, [r3, #4]
 8008a24:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	430a      	orrs	r2, r1
 8008a32:	605a      	str	r2, [r3, #4]
  }
}
 8008a34:	bf00      	nop
 8008a36:	370c      	adds	r7, #12
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3e:	4770      	bx	lr

08008a40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b098      	sub	sp, #96	@ 0x60
 8008a44:	af02      	add	r7, sp, #8
 8008a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008a50:	f7fa fabe 	bl	8002fd0 <HAL_GetTick>
 8008a54:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f003 0308 	and.w	r3, r3, #8
 8008a60:	2b08      	cmp	r3, #8
 8008a62:	d12f      	bne.n	8008ac4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a64:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008a68:	9300      	str	r3, [sp, #0]
 8008a6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f000 f88e 	bl	8008b94 <UART_WaitOnFlagUntilTimeout>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d022      	beq.n	8008ac4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a86:	e853 3f00 	ldrex	r3, [r3]
 8008a8a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008a8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a92:	653b      	str	r3, [r7, #80]	@ 0x50
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	461a      	mov	r2, r3
 8008a9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a9e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aa0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008aa2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008aa4:	e841 2300 	strex	r3, r2, [r1]
 8008aa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008aaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d1e6      	bne.n	8008a7e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2220      	movs	r2, #32
 8008ab4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2200      	movs	r2, #0
 8008abc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ac0:	2303      	movs	r3, #3
 8008ac2:	e063      	b.n	8008b8c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f003 0304 	and.w	r3, r3, #4
 8008ace:	2b04      	cmp	r3, #4
 8008ad0:	d149      	bne.n	8008b66 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ad2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008ad6:	9300      	str	r3, [sp, #0]
 8008ad8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008ada:	2200      	movs	r2, #0
 8008adc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f000 f857 	bl	8008b94 <UART_WaitOnFlagUntilTimeout>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d03c      	beq.n	8008b66 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008af4:	e853 3f00 	ldrex	r3, [r3]
 8008af8:	623b      	str	r3, [r7, #32]
   return(result);
 8008afa:	6a3b      	ldr	r3, [r7, #32]
 8008afc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008b00:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	461a      	mov	r2, r3
 8008b08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b0a:	633b      	str	r3, [r7, #48]	@ 0x30
 8008b0c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008b10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b12:	e841 2300 	strex	r3, r2, [r1]
 8008b16:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d1e6      	bne.n	8008aec <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	3308      	adds	r3, #8
 8008b24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	e853 3f00 	ldrex	r3, [r3]
 8008b2c:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	f023 0301 	bic.w	r3, r3, #1
 8008b34:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	3308      	adds	r3, #8
 8008b3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008b3e:	61fa      	str	r2, [r7, #28]
 8008b40:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b42:	69b9      	ldr	r1, [r7, #24]
 8008b44:	69fa      	ldr	r2, [r7, #28]
 8008b46:	e841 2300 	strex	r3, r2, [r1]
 8008b4a:	617b      	str	r3, [r7, #20]
   return(result);
 8008b4c:	697b      	ldr	r3, [r7, #20]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d1e5      	bne.n	8008b1e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2220      	movs	r2, #32
 8008b56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b62:	2303      	movs	r3, #3
 8008b64:	e012      	b.n	8008b8c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2220      	movs	r2, #32
 8008b6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2220      	movs	r2, #32
 8008b72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2200      	movs	r2, #0
 8008b86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008b8a:	2300      	movs	r3, #0
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	3758      	adds	r7, #88	@ 0x58
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}

08008b94 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b084      	sub	sp, #16
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	60f8      	str	r0, [r7, #12]
 8008b9c:	60b9      	str	r1, [r7, #8]
 8008b9e:	603b      	str	r3, [r7, #0]
 8008ba0:	4613      	mov	r3, r2
 8008ba2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ba4:	e04f      	b.n	8008c46 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ba6:	69bb      	ldr	r3, [r7, #24]
 8008ba8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008bac:	d04b      	beq.n	8008c46 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008bae:	f7fa fa0f 	bl	8002fd0 <HAL_GetTick>
 8008bb2:	4602      	mov	r2, r0
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	1ad3      	subs	r3, r2, r3
 8008bb8:	69ba      	ldr	r2, [r7, #24]
 8008bba:	429a      	cmp	r2, r3
 8008bbc:	d302      	bcc.n	8008bc4 <UART_WaitOnFlagUntilTimeout+0x30>
 8008bbe:	69bb      	ldr	r3, [r7, #24]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d101      	bne.n	8008bc8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008bc4:	2303      	movs	r3, #3
 8008bc6:	e04e      	b.n	8008c66 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f003 0304 	and.w	r3, r3, #4
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d037      	beq.n	8008c46 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	2b80      	cmp	r3, #128	@ 0x80
 8008bda:	d034      	beq.n	8008c46 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	2b40      	cmp	r3, #64	@ 0x40
 8008be0:	d031      	beq.n	8008c46 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	69db      	ldr	r3, [r3, #28]
 8008be8:	f003 0308 	and.w	r3, r3, #8
 8008bec:	2b08      	cmp	r3, #8
 8008bee:	d110      	bne.n	8008c12 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	2208      	movs	r2, #8
 8008bf6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008bf8:	68f8      	ldr	r0, [r7, #12]
 8008bfa:	f000 f838 	bl	8008c6e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	2208      	movs	r2, #8
 8008c02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008c0e:	2301      	movs	r3, #1
 8008c10:	e029      	b.n	8008c66 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	69db      	ldr	r3, [r3, #28]
 8008c18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008c1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008c20:	d111      	bne.n	8008c46 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008c2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008c2c:	68f8      	ldr	r0, [r7, #12]
 8008c2e:	f000 f81e 	bl	8008c6e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	2220      	movs	r2, #32
 8008c36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008c42:	2303      	movs	r3, #3
 8008c44:	e00f      	b.n	8008c66 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	69da      	ldr	r2, [r3, #28]
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	4013      	ands	r3, r2
 8008c50:	68ba      	ldr	r2, [r7, #8]
 8008c52:	429a      	cmp	r2, r3
 8008c54:	bf0c      	ite	eq
 8008c56:	2301      	moveq	r3, #1
 8008c58:	2300      	movne	r3, #0
 8008c5a:	b2db      	uxtb	r3, r3
 8008c5c:	461a      	mov	r2, r3
 8008c5e:	79fb      	ldrb	r3, [r7, #7]
 8008c60:	429a      	cmp	r2, r3
 8008c62:	d0a0      	beq.n	8008ba6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008c64:	2300      	movs	r3, #0
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	3710      	adds	r7, #16
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}

08008c6e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008c6e:	b480      	push	{r7}
 8008c70:	b095      	sub	sp, #84	@ 0x54
 8008c72:	af00      	add	r7, sp, #0
 8008c74:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c7e:	e853 3f00 	ldrex	r3, [r3]
 8008c82:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c86:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	461a      	mov	r2, r3
 8008c92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c94:	643b      	str	r3, [r7, #64]	@ 0x40
 8008c96:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c98:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008c9a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008c9c:	e841 2300 	strex	r3, r2, [r1]
 8008ca0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d1e6      	bne.n	8008c76 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	3308      	adds	r3, #8
 8008cae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cb0:	6a3b      	ldr	r3, [r7, #32]
 8008cb2:	e853 3f00 	ldrex	r3, [r3]
 8008cb6:	61fb      	str	r3, [r7, #28]
   return(result);
 8008cb8:	69fb      	ldr	r3, [r7, #28]
 8008cba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008cbe:	f023 0301 	bic.w	r3, r3, #1
 8008cc2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	3308      	adds	r3, #8
 8008cca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008ccc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008cce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cd0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008cd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008cd4:	e841 2300 	strex	r3, r2, [r1]
 8008cd8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d1e3      	bne.n	8008ca8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ce4:	2b01      	cmp	r3, #1
 8008ce6:	d118      	bne.n	8008d1a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	e853 3f00 	ldrex	r3, [r3]
 8008cf4:	60bb      	str	r3, [r7, #8]
   return(result);
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	f023 0310 	bic.w	r3, r3, #16
 8008cfc:	647b      	str	r3, [r7, #68]	@ 0x44
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	461a      	mov	r2, r3
 8008d04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008d06:	61bb      	str	r3, [r7, #24]
 8008d08:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d0a:	6979      	ldr	r1, [r7, #20]
 8008d0c:	69ba      	ldr	r2, [r7, #24]
 8008d0e:	e841 2300 	strex	r3, r2, [r1]
 8008d12:	613b      	str	r3, [r7, #16]
   return(result);
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d1e6      	bne.n	8008ce8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2220      	movs	r2, #32
 8008d1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2200      	movs	r2, #0
 8008d26:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008d2e:	bf00      	nop
 8008d30:	3754      	adds	r7, #84	@ 0x54
 8008d32:	46bd      	mov	sp, r7
 8008d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d38:	4770      	bx	lr

08008d3a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008d3a:	b480      	push	{r7}
 8008d3c:	b085      	sub	sp, #20
 8008d3e:	af00      	add	r7, sp, #0
 8008d40:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008d48:	2b01      	cmp	r3, #1
 8008d4a:	d101      	bne.n	8008d50 <HAL_UARTEx_DisableFifoMode+0x16>
 8008d4c:	2302      	movs	r3, #2
 8008d4e:	e027      	b.n	8008da0 <HAL_UARTEx_DisableFifoMode+0x66>
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2201      	movs	r2, #1
 8008d54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2224      	movs	r2, #36	@ 0x24
 8008d5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	681a      	ldr	r2, [r3, #0]
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f022 0201 	bic.w	r2, r2, #1
 8008d76:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008d7e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2200      	movs	r2, #0
 8008d84:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	68fa      	ldr	r2, [r7, #12]
 8008d8c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2220      	movs	r2, #32
 8008d92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008d9e:	2300      	movs	r3, #0
}
 8008da0:	4618      	mov	r0, r3
 8008da2:	3714      	adds	r7, #20
 8008da4:	46bd      	mov	sp, r7
 8008da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008daa:	4770      	bx	lr

08008dac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b084      	sub	sp, #16
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
 8008db4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	d101      	bne.n	8008dc4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008dc0:	2302      	movs	r3, #2
 8008dc2:	e02d      	b.n	8008e20 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2201      	movs	r2, #1
 8008dc8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2224      	movs	r2, #36	@ 0x24
 8008dd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	681a      	ldr	r2, [r3, #0]
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f022 0201 	bic.w	r2, r2, #1
 8008dea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	689b      	ldr	r3, [r3, #8]
 8008df2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	683a      	ldr	r2, [r7, #0]
 8008dfc:	430a      	orrs	r2, r1
 8008dfe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f000 f84f 	bl	8008ea4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	68fa      	ldr	r2, [r7, #12]
 8008e0c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2220      	movs	r2, #32
 8008e12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008e1e:	2300      	movs	r3, #0
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3710      	adds	r7, #16
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}

08008e28 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b084      	sub	sp, #16
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008e38:	2b01      	cmp	r3, #1
 8008e3a:	d101      	bne.n	8008e40 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008e3c:	2302      	movs	r3, #2
 8008e3e:	e02d      	b.n	8008e9c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2201      	movs	r2, #1
 8008e44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2224      	movs	r2, #36	@ 0x24
 8008e4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	681a      	ldr	r2, [r3, #0]
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f022 0201 	bic.w	r2, r2, #1
 8008e66:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	689b      	ldr	r3, [r3, #8]
 8008e6e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	683a      	ldr	r2, [r7, #0]
 8008e78:	430a      	orrs	r2, r1
 8008e7a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f000 f811 	bl	8008ea4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	68fa      	ldr	r2, [r7, #12]
 8008e88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2220      	movs	r2, #32
 8008e8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2200      	movs	r2, #0
 8008e96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008e9a:	2300      	movs	r3, #0
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3710      	adds	r7, #16
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}

08008ea4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b085      	sub	sp, #20
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d108      	bne.n	8008ec6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2201      	movs	r2, #1
 8008eb8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2201      	movs	r2, #1
 8008ec0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008ec4:	e031      	b.n	8008f2a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008ec6:	2308      	movs	r3, #8
 8008ec8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008eca:	2308      	movs	r3, #8
 8008ecc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	689b      	ldr	r3, [r3, #8]
 8008ed4:	0e5b      	lsrs	r3, r3, #25
 8008ed6:	b2db      	uxtb	r3, r3
 8008ed8:	f003 0307 	and.w	r3, r3, #7
 8008edc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	689b      	ldr	r3, [r3, #8]
 8008ee4:	0f5b      	lsrs	r3, r3, #29
 8008ee6:	b2db      	uxtb	r3, r3
 8008ee8:	f003 0307 	and.w	r3, r3, #7
 8008eec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008eee:	7bbb      	ldrb	r3, [r7, #14]
 8008ef0:	7b3a      	ldrb	r2, [r7, #12]
 8008ef2:	4911      	ldr	r1, [pc, #68]	@ (8008f38 <UARTEx_SetNbDataToProcess+0x94>)
 8008ef4:	5c8a      	ldrb	r2, [r1, r2]
 8008ef6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008efa:	7b3a      	ldrb	r2, [r7, #12]
 8008efc:	490f      	ldr	r1, [pc, #60]	@ (8008f3c <UARTEx_SetNbDataToProcess+0x98>)
 8008efe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008f00:	fb93 f3f2 	sdiv	r3, r3, r2
 8008f04:	b29a      	uxth	r2, r3
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008f0c:	7bfb      	ldrb	r3, [r7, #15]
 8008f0e:	7b7a      	ldrb	r2, [r7, #13]
 8008f10:	4909      	ldr	r1, [pc, #36]	@ (8008f38 <UARTEx_SetNbDataToProcess+0x94>)
 8008f12:	5c8a      	ldrb	r2, [r1, r2]
 8008f14:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008f18:	7b7a      	ldrb	r2, [r7, #13]
 8008f1a:	4908      	ldr	r1, [pc, #32]	@ (8008f3c <UARTEx_SetNbDataToProcess+0x98>)
 8008f1c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008f1e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008f22:	b29a      	uxth	r2, r3
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008f2a:	bf00      	nop
 8008f2c:	3714      	adds	r7, #20
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f34:	4770      	bx	lr
 8008f36:	bf00      	nop
 8008f38:	08022dc8 	.word	0x08022dc8
 8008f3c:	08022dd0 	.word	0x08022dd0

08008f40 <__cvt>:
 8008f40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f44:	ec57 6b10 	vmov	r6, r7, d0
 8008f48:	2f00      	cmp	r7, #0
 8008f4a:	460c      	mov	r4, r1
 8008f4c:	4619      	mov	r1, r3
 8008f4e:	463b      	mov	r3, r7
 8008f50:	bfb4      	ite	lt
 8008f52:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008f56:	2300      	movge	r3, #0
 8008f58:	4691      	mov	r9, r2
 8008f5a:	bfbf      	itttt	lt
 8008f5c:	4632      	movlt	r2, r6
 8008f5e:	461f      	movlt	r7, r3
 8008f60:	232d      	movlt	r3, #45	@ 0x2d
 8008f62:	4616      	movlt	r6, r2
 8008f64:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008f68:	700b      	strb	r3, [r1, #0]
 8008f6a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008f6c:	f023 0820 	bic.w	r8, r3, #32
 8008f70:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008f74:	d005      	beq.n	8008f82 <__cvt+0x42>
 8008f76:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008f7a:	d100      	bne.n	8008f7e <__cvt+0x3e>
 8008f7c:	3401      	adds	r4, #1
 8008f7e:	2102      	movs	r1, #2
 8008f80:	e000      	b.n	8008f84 <__cvt+0x44>
 8008f82:	2103      	movs	r1, #3
 8008f84:	ab03      	add	r3, sp, #12
 8008f86:	4622      	mov	r2, r4
 8008f88:	9301      	str	r3, [sp, #4]
 8008f8a:	ab02      	add	r3, sp, #8
 8008f8c:	ec47 6b10 	vmov	d0, r6, r7
 8008f90:	9300      	str	r3, [sp, #0]
 8008f92:	4653      	mov	r3, sl
 8008f94:	f000 fe78 	bl	8009c88 <_dtoa_r>
 8008f98:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008f9c:	4605      	mov	r5, r0
 8008f9e:	d119      	bne.n	8008fd4 <__cvt+0x94>
 8008fa0:	f019 0f01 	tst.w	r9, #1
 8008fa4:	d00e      	beq.n	8008fc4 <__cvt+0x84>
 8008fa6:	eb00 0904 	add.w	r9, r0, r4
 8008faa:	2200      	movs	r2, #0
 8008fac:	2300      	movs	r3, #0
 8008fae:	4630      	mov	r0, r6
 8008fb0:	4639      	mov	r1, r7
 8008fb2:	f7f7 fd8d 	bl	8000ad0 <__aeabi_dcmpeq>
 8008fb6:	b108      	cbz	r0, 8008fbc <__cvt+0x7c>
 8008fb8:	f8cd 900c 	str.w	r9, [sp, #12]
 8008fbc:	2230      	movs	r2, #48	@ 0x30
 8008fbe:	9b03      	ldr	r3, [sp, #12]
 8008fc0:	454b      	cmp	r3, r9
 8008fc2:	d31e      	bcc.n	8009002 <__cvt+0xc2>
 8008fc4:	9b03      	ldr	r3, [sp, #12]
 8008fc6:	4628      	mov	r0, r5
 8008fc8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008fca:	1b5b      	subs	r3, r3, r5
 8008fcc:	6013      	str	r3, [r2, #0]
 8008fce:	b004      	add	sp, #16
 8008fd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fd4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008fd8:	eb00 0904 	add.w	r9, r0, r4
 8008fdc:	d1e5      	bne.n	8008faa <__cvt+0x6a>
 8008fde:	7803      	ldrb	r3, [r0, #0]
 8008fe0:	2b30      	cmp	r3, #48	@ 0x30
 8008fe2:	d10a      	bne.n	8008ffa <__cvt+0xba>
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	4630      	mov	r0, r6
 8008fea:	4639      	mov	r1, r7
 8008fec:	f7f7 fd70 	bl	8000ad0 <__aeabi_dcmpeq>
 8008ff0:	b918      	cbnz	r0, 8008ffa <__cvt+0xba>
 8008ff2:	f1c4 0401 	rsb	r4, r4, #1
 8008ff6:	f8ca 4000 	str.w	r4, [sl]
 8008ffa:	f8da 3000 	ldr.w	r3, [sl]
 8008ffe:	4499      	add	r9, r3
 8009000:	e7d3      	b.n	8008faa <__cvt+0x6a>
 8009002:	1c59      	adds	r1, r3, #1
 8009004:	9103      	str	r1, [sp, #12]
 8009006:	701a      	strb	r2, [r3, #0]
 8009008:	e7d9      	b.n	8008fbe <__cvt+0x7e>

0800900a <__exponent>:
 800900a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800900c:	2900      	cmp	r1, #0
 800900e:	7002      	strb	r2, [r0, #0]
 8009010:	bfba      	itte	lt
 8009012:	4249      	neglt	r1, r1
 8009014:	232d      	movlt	r3, #45	@ 0x2d
 8009016:	232b      	movge	r3, #43	@ 0x2b
 8009018:	2909      	cmp	r1, #9
 800901a:	7043      	strb	r3, [r0, #1]
 800901c:	dd28      	ble.n	8009070 <__exponent+0x66>
 800901e:	f10d 0307 	add.w	r3, sp, #7
 8009022:	270a      	movs	r7, #10
 8009024:	461d      	mov	r5, r3
 8009026:	461a      	mov	r2, r3
 8009028:	3b01      	subs	r3, #1
 800902a:	fbb1 f6f7 	udiv	r6, r1, r7
 800902e:	fb07 1416 	mls	r4, r7, r6, r1
 8009032:	3430      	adds	r4, #48	@ 0x30
 8009034:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009038:	460c      	mov	r4, r1
 800903a:	4631      	mov	r1, r6
 800903c:	2c63      	cmp	r4, #99	@ 0x63
 800903e:	dcf2      	bgt.n	8009026 <__exponent+0x1c>
 8009040:	3130      	adds	r1, #48	@ 0x30
 8009042:	1e94      	subs	r4, r2, #2
 8009044:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009048:	1c41      	adds	r1, r0, #1
 800904a:	4623      	mov	r3, r4
 800904c:	42ab      	cmp	r3, r5
 800904e:	d30a      	bcc.n	8009066 <__exponent+0x5c>
 8009050:	f10d 0309 	add.w	r3, sp, #9
 8009054:	1a9b      	subs	r3, r3, r2
 8009056:	42ac      	cmp	r4, r5
 8009058:	bf88      	it	hi
 800905a:	2300      	movhi	r3, #0
 800905c:	3302      	adds	r3, #2
 800905e:	4403      	add	r3, r0
 8009060:	1a18      	subs	r0, r3, r0
 8009062:	b003      	add	sp, #12
 8009064:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009066:	f813 6b01 	ldrb.w	r6, [r3], #1
 800906a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800906e:	e7ed      	b.n	800904c <__exponent+0x42>
 8009070:	2330      	movs	r3, #48	@ 0x30
 8009072:	3130      	adds	r1, #48	@ 0x30
 8009074:	7083      	strb	r3, [r0, #2]
 8009076:	1d03      	adds	r3, r0, #4
 8009078:	70c1      	strb	r1, [r0, #3]
 800907a:	e7f1      	b.n	8009060 <__exponent+0x56>

0800907c <_printf_float>:
 800907c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009080:	b08d      	sub	sp, #52	@ 0x34
 8009082:	460c      	mov	r4, r1
 8009084:	4616      	mov	r6, r2
 8009086:	461f      	mov	r7, r3
 8009088:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800908c:	4605      	mov	r5, r0
 800908e:	f000 fd4d 	bl	8009b2c <_localeconv_r>
 8009092:	6803      	ldr	r3, [r0, #0]
 8009094:	4618      	mov	r0, r3
 8009096:	9304      	str	r3, [sp, #16]
 8009098:	f7f7 f8ee 	bl	8000278 <strlen>
 800909c:	2300      	movs	r3, #0
 800909e:	9005      	str	r0, [sp, #20]
 80090a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80090a2:	f8d8 3000 	ldr.w	r3, [r8]
 80090a6:	f894 a018 	ldrb.w	sl, [r4, #24]
 80090aa:	3307      	adds	r3, #7
 80090ac:	f8d4 b000 	ldr.w	fp, [r4]
 80090b0:	f023 0307 	bic.w	r3, r3, #7
 80090b4:	f103 0208 	add.w	r2, r3, #8
 80090b8:	f8c8 2000 	str.w	r2, [r8]
 80090bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80090c0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80090c4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80090c8:	f8cd 8018 	str.w	r8, [sp, #24]
 80090cc:	9307      	str	r3, [sp, #28]
 80090ce:	4b9d      	ldr	r3, [pc, #628]	@ (8009344 <_printf_float+0x2c8>)
 80090d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80090d4:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80090d8:	f7f7 fd2c 	bl	8000b34 <__aeabi_dcmpun>
 80090dc:	bb70      	cbnz	r0, 800913c <_printf_float+0xc0>
 80090de:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80090e2:	4b98      	ldr	r3, [pc, #608]	@ (8009344 <_printf_float+0x2c8>)
 80090e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80090e8:	f7f7 fd06 	bl	8000af8 <__aeabi_dcmple>
 80090ec:	bb30      	cbnz	r0, 800913c <_printf_float+0xc0>
 80090ee:	2200      	movs	r2, #0
 80090f0:	2300      	movs	r3, #0
 80090f2:	4640      	mov	r0, r8
 80090f4:	4649      	mov	r1, r9
 80090f6:	f7f7 fcf5 	bl	8000ae4 <__aeabi_dcmplt>
 80090fa:	b110      	cbz	r0, 8009102 <_printf_float+0x86>
 80090fc:	232d      	movs	r3, #45	@ 0x2d
 80090fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009102:	4a91      	ldr	r2, [pc, #580]	@ (8009348 <_printf_float+0x2cc>)
 8009104:	4b91      	ldr	r3, [pc, #580]	@ (800934c <_printf_float+0x2d0>)
 8009106:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800910a:	bf8c      	ite	hi
 800910c:	4690      	movhi	r8, r2
 800910e:	4698      	movls	r8, r3
 8009110:	2303      	movs	r3, #3
 8009112:	f04f 0900 	mov.w	r9, #0
 8009116:	6123      	str	r3, [r4, #16]
 8009118:	f02b 0304 	bic.w	r3, fp, #4
 800911c:	6023      	str	r3, [r4, #0]
 800911e:	4633      	mov	r3, r6
 8009120:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009122:	4621      	mov	r1, r4
 8009124:	4628      	mov	r0, r5
 8009126:	9700      	str	r7, [sp, #0]
 8009128:	f000 f9d2 	bl	80094d0 <_printf_common>
 800912c:	3001      	adds	r0, #1
 800912e:	f040 808d 	bne.w	800924c <_printf_float+0x1d0>
 8009132:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009136:	b00d      	add	sp, #52	@ 0x34
 8009138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800913c:	4642      	mov	r2, r8
 800913e:	464b      	mov	r3, r9
 8009140:	4640      	mov	r0, r8
 8009142:	4649      	mov	r1, r9
 8009144:	f7f7 fcf6 	bl	8000b34 <__aeabi_dcmpun>
 8009148:	b140      	cbz	r0, 800915c <_printf_float+0xe0>
 800914a:	464b      	mov	r3, r9
 800914c:	4a80      	ldr	r2, [pc, #512]	@ (8009350 <_printf_float+0x2d4>)
 800914e:	2b00      	cmp	r3, #0
 8009150:	bfbc      	itt	lt
 8009152:	232d      	movlt	r3, #45	@ 0x2d
 8009154:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009158:	4b7e      	ldr	r3, [pc, #504]	@ (8009354 <_printf_float+0x2d8>)
 800915a:	e7d4      	b.n	8009106 <_printf_float+0x8a>
 800915c:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009160:	6863      	ldr	r3, [r4, #4]
 8009162:	9206      	str	r2, [sp, #24]
 8009164:	1c5a      	adds	r2, r3, #1
 8009166:	d13b      	bne.n	80091e0 <_printf_float+0x164>
 8009168:	2306      	movs	r3, #6
 800916a:	6063      	str	r3, [r4, #4]
 800916c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009170:	2300      	movs	r3, #0
 8009172:	4628      	mov	r0, r5
 8009174:	6022      	str	r2, [r4, #0]
 8009176:	9303      	str	r3, [sp, #12]
 8009178:	ab0a      	add	r3, sp, #40	@ 0x28
 800917a:	e9cd a301 	strd	sl, r3, [sp, #4]
 800917e:	ab09      	add	r3, sp, #36	@ 0x24
 8009180:	ec49 8b10 	vmov	d0, r8, r9
 8009184:	9300      	str	r3, [sp, #0]
 8009186:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800918a:	6861      	ldr	r1, [r4, #4]
 800918c:	f7ff fed8 	bl	8008f40 <__cvt>
 8009190:	9b06      	ldr	r3, [sp, #24]
 8009192:	4680      	mov	r8, r0
 8009194:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009196:	2b47      	cmp	r3, #71	@ 0x47
 8009198:	d129      	bne.n	80091ee <_printf_float+0x172>
 800919a:	1cc8      	adds	r0, r1, #3
 800919c:	db02      	blt.n	80091a4 <_printf_float+0x128>
 800919e:	6863      	ldr	r3, [r4, #4]
 80091a0:	4299      	cmp	r1, r3
 80091a2:	dd41      	ble.n	8009228 <_printf_float+0x1ac>
 80091a4:	f1aa 0a02 	sub.w	sl, sl, #2
 80091a8:	fa5f fa8a 	uxtb.w	sl, sl
 80091ac:	3901      	subs	r1, #1
 80091ae:	4652      	mov	r2, sl
 80091b0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80091b4:	9109      	str	r1, [sp, #36]	@ 0x24
 80091b6:	f7ff ff28 	bl	800900a <__exponent>
 80091ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80091bc:	4681      	mov	r9, r0
 80091be:	1813      	adds	r3, r2, r0
 80091c0:	2a01      	cmp	r2, #1
 80091c2:	6123      	str	r3, [r4, #16]
 80091c4:	dc02      	bgt.n	80091cc <_printf_float+0x150>
 80091c6:	6822      	ldr	r2, [r4, #0]
 80091c8:	07d2      	lsls	r2, r2, #31
 80091ca:	d501      	bpl.n	80091d0 <_printf_float+0x154>
 80091cc:	3301      	adds	r3, #1
 80091ce:	6123      	str	r3, [r4, #16]
 80091d0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d0a2      	beq.n	800911e <_printf_float+0xa2>
 80091d8:	232d      	movs	r3, #45	@ 0x2d
 80091da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80091de:	e79e      	b.n	800911e <_printf_float+0xa2>
 80091e0:	9a06      	ldr	r2, [sp, #24]
 80091e2:	2a47      	cmp	r2, #71	@ 0x47
 80091e4:	d1c2      	bne.n	800916c <_printf_float+0xf0>
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d1c0      	bne.n	800916c <_printf_float+0xf0>
 80091ea:	2301      	movs	r3, #1
 80091ec:	e7bd      	b.n	800916a <_printf_float+0xee>
 80091ee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80091f2:	d9db      	bls.n	80091ac <_printf_float+0x130>
 80091f4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80091f8:	d118      	bne.n	800922c <_printf_float+0x1b0>
 80091fa:	2900      	cmp	r1, #0
 80091fc:	6863      	ldr	r3, [r4, #4]
 80091fe:	dd0b      	ble.n	8009218 <_printf_float+0x19c>
 8009200:	6121      	str	r1, [r4, #16]
 8009202:	b913      	cbnz	r3, 800920a <_printf_float+0x18e>
 8009204:	6822      	ldr	r2, [r4, #0]
 8009206:	07d0      	lsls	r0, r2, #31
 8009208:	d502      	bpl.n	8009210 <_printf_float+0x194>
 800920a:	3301      	adds	r3, #1
 800920c:	440b      	add	r3, r1
 800920e:	6123      	str	r3, [r4, #16]
 8009210:	f04f 0900 	mov.w	r9, #0
 8009214:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009216:	e7db      	b.n	80091d0 <_printf_float+0x154>
 8009218:	b913      	cbnz	r3, 8009220 <_printf_float+0x1a4>
 800921a:	6822      	ldr	r2, [r4, #0]
 800921c:	07d2      	lsls	r2, r2, #31
 800921e:	d501      	bpl.n	8009224 <_printf_float+0x1a8>
 8009220:	3302      	adds	r3, #2
 8009222:	e7f4      	b.n	800920e <_printf_float+0x192>
 8009224:	2301      	movs	r3, #1
 8009226:	e7f2      	b.n	800920e <_printf_float+0x192>
 8009228:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800922c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800922e:	4299      	cmp	r1, r3
 8009230:	db05      	blt.n	800923e <_printf_float+0x1c2>
 8009232:	6823      	ldr	r3, [r4, #0]
 8009234:	6121      	str	r1, [r4, #16]
 8009236:	07d8      	lsls	r0, r3, #31
 8009238:	d5ea      	bpl.n	8009210 <_printf_float+0x194>
 800923a:	1c4b      	adds	r3, r1, #1
 800923c:	e7e7      	b.n	800920e <_printf_float+0x192>
 800923e:	2900      	cmp	r1, #0
 8009240:	bfd4      	ite	le
 8009242:	f1c1 0202 	rsble	r2, r1, #2
 8009246:	2201      	movgt	r2, #1
 8009248:	4413      	add	r3, r2
 800924a:	e7e0      	b.n	800920e <_printf_float+0x192>
 800924c:	6823      	ldr	r3, [r4, #0]
 800924e:	055a      	lsls	r2, r3, #21
 8009250:	d407      	bmi.n	8009262 <_printf_float+0x1e6>
 8009252:	6923      	ldr	r3, [r4, #16]
 8009254:	4642      	mov	r2, r8
 8009256:	4631      	mov	r1, r6
 8009258:	4628      	mov	r0, r5
 800925a:	47b8      	blx	r7
 800925c:	3001      	adds	r0, #1
 800925e:	d12b      	bne.n	80092b8 <_printf_float+0x23c>
 8009260:	e767      	b.n	8009132 <_printf_float+0xb6>
 8009262:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009266:	f240 80dd 	bls.w	8009424 <_printf_float+0x3a8>
 800926a:	2200      	movs	r2, #0
 800926c:	2300      	movs	r3, #0
 800926e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009272:	f7f7 fc2d 	bl	8000ad0 <__aeabi_dcmpeq>
 8009276:	2800      	cmp	r0, #0
 8009278:	d033      	beq.n	80092e2 <_printf_float+0x266>
 800927a:	2301      	movs	r3, #1
 800927c:	4a36      	ldr	r2, [pc, #216]	@ (8009358 <_printf_float+0x2dc>)
 800927e:	4631      	mov	r1, r6
 8009280:	4628      	mov	r0, r5
 8009282:	47b8      	blx	r7
 8009284:	3001      	adds	r0, #1
 8009286:	f43f af54 	beq.w	8009132 <_printf_float+0xb6>
 800928a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800928e:	4543      	cmp	r3, r8
 8009290:	db02      	blt.n	8009298 <_printf_float+0x21c>
 8009292:	6823      	ldr	r3, [r4, #0]
 8009294:	07d8      	lsls	r0, r3, #31
 8009296:	d50f      	bpl.n	80092b8 <_printf_float+0x23c>
 8009298:	4631      	mov	r1, r6
 800929a:	4628      	mov	r0, r5
 800929c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80092a0:	47b8      	blx	r7
 80092a2:	3001      	adds	r0, #1
 80092a4:	f43f af45 	beq.w	8009132 <_printf_float+0xb6>
 80092a8:	f04f 0900 	mov.w	r9, #0
 80092ac:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80092b0:	f104 0a1a 	add.w	sl, r4, #26
 80092b4:	45c8      	cmp	r8, r9
 80092b6:	dc09      	bgt.n	80092cc <_printf_float+0x250>
 80092b8:	6823      	ldr	r3, [r4, #0]
 80092ba:	079b      	lsls	r3, r3, #30
 80092bc:	f100 8103 	bmi.w	80094c6 <_printf_float+0x44a>
 80092c0:	68e0      	ldr	r0, [r4, #12]
 80092c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80092c4:	4298      	cmp	r0, r3
 80092c6:	bfb8      	it	lt
 80092c8:	4618      	movlt	r0, r3
 80092ca:	e734      	b.n	8009136 <_printf_float+0xba>
 80092cc:	2301      	movs	r3, #1
 80092ce:	4652      	mov	r2, sl
 80092d0:	4631      	mov	r1, r6
 80092d2:	4628      	mov	r0, r5
 80092d4:	47b8      	blx	r7
 80092d6:	3001      	adds	r0, #1
 80092d8:	f43f af2b 	beq.w	8009132 <_printf_float+0xb6>
 80092dc:	f109 0901 	add.w	r9, r9, #1
 80092e0:	e7e8      	b.n	80092b4 <_printf_float+0x238>
 80092e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	dc39      	bgt.n	800935c <_printf_float+0x2e0>
 80092e8:	2301      	movs	r3, #1
 80092ea:	4a1b      	ldr	r2, [pc, #108]	@ (8009358 <_printf_float+0x2dc>)
 80092ec:	4631      	mov	r1, r6
 80092ee:	4628      	mov	r0, r5
 80092f0:	47b8      	blx	r7
 80092f2:	3001      	adds	r0, #1
 80092f4:	f43f af1d 	beq.w	8009132 <_printf_float+0xb6>
 80092f8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80092fc:	ea59 0303 	orrs.w	r3, r9, r3
 8009300:	d102      	bne.n	8009308 <_printf_float+0x28c>
 8009302:	6823      	ldr	r3, [r4, #0]
 8009304:	07d9      	lsls	r1, r3, #31
 8009306:	d5d7      	bpl.n	80092b8 <_printf_float+0x23c>
 8009308:	4631      	mov	r1, r6
 800930a:	4628      	mov	r0, r5
 800930c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009310:	47b8      	blx	r7
 8009312:	3001      	adds	r0, #1
 8009314:	f43f af0d 	beq.w	8009132 <_printf_float+0xb6>
 8009318:	f04f 0a00 	mov.w	sl, #0
 800931c:	f104 0b1a 	add.w	fp, r4, #26
 8009320:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009322:	425b      	negs	r3, r3
 8009324:	4553      	cmp	r3, sl
 8009326:	dc01      	bgt.n	800932c <_printf_float+0x2b0>
 8009328:	464b      	mov	r3, r9
 800932a:	e793      	b.n	8009254 <_printf_float+0x1d8>
 800932c:	2301      	movs	r3, #1
 800932e:	465a      	mov	r2, fp
 8009330:	4631      	mov	r1, r6
 8009332:	4628      	mov	r0, r5
 8009334:	47b8      	blx	r7
 8009336:	3001      	adds	r0, #1
 8009338:	f43f aefb 	beq.w	8009132 <_printf_float+0xb6>
 800933c:	f10a 0a01 	add.w	sl, sl, #1
 8009340:	e7ee      	b.n	8009320 <_printf_float+0x2a4>
 8009342:	bf00      	nop
 8009344:	7fefffff 	.word	0x7fefffff
 8009348:	08022ddc 	.word	0x08022ddc
 800934c:	08022dd8 	.word	0x08022dd8
 8009350:	08022de4 	.word	0x08022de4
 8009354:	08022de0 	.word	0x08022de0
 8009358:	08022de8 	.word	0x08022de8
 800935c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800935e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009362:	4553      	cmp	r3, sl
 8009364:	bfa8      	it	ge
 8009366:	4653      	movge	r3, sl
 8009368:	2b00      	cmp	r3, #0
 800936a:	4699      	mov	r9, r3
 800936c:	dc36      	bgt.n	80093dc <_printf_float+0x360>
 800936e:	f04f 0b00 	mov.w	fp, #0
 8009372:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009376:	f104 021a 	add.w	r2, r4, #26
 800937a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800937c:	9306      	str	r3, [sp, #24]
 800937e:	eba3 0309 	sub.w	r3, r3, r9
 8009382:	455b      	cmp	r3, fp
 8009384:	dc31      	bgt.n	80093ea <_printf_float+0x36e>
 8009386:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009388:	459a      	cmp	sl, r3
 800938a:	dc3a      	bgt.n	8009402 <_printf_float+0x386>
 800938c:	6823      	ldr	r3, [r4, #0]
 800938e:	07da      	lsls	r2, r3, #31
 8009390:	d437      	bmi.n	8009402 <_printf_float+0x386>
 8009392:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009394:	ebaa 0903 	sub.w	r9, sl, r3
 8009398:	9b06      	ldr	r3, [sp, #24]
 800939a:	ebaa 0303 	sub.w	r3, sl, r3
 800939e:	4599      	cmp	r9, r3
 80093a0:	bfa8      	it	ge
 80093a2:	4699      	movge	r9, r3
 80093a4:	f1b9 0f00 	cmp.w	r9, #0
 80093a8:	dc33      	bgt.n	8009412 <_printf_float+0x396>
 80093aa:	f04f 0800 	mov.w	r8, #0
 80093ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80093b2:	f104 0b1a 	add.w	fp, r4, #26
 80093b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093b8:	ebaa 0303 	sub.w	r3, sl, r3
 80093bc:	eba3 0309 	sub.w	r3, r3, r9
 80093c0:	4543      	cmp	r3, r8
 80093c2:	f77f af79 	ble.w	80092b8 <_printf_float+0x23c>
 80093c6:	2301      	movs	r3, #1
 80093c8:	465a      	mov	r2, fp
 80093ca:	4631      	mov	r1, r6
 80093cc:	4628      	mov	r0, r5
 80093ce:	47b8      	blx	r7
 80093d0:	3001      	adds	r0, #1
 80093d2:	f43f aeae 	beq.w	8009132 <_printf_float+0xb6>
 80093d6:	f108 0801 	add.w	r8, r8, #1
 80093da:	e7ec      	b.n	80093b6 <_printf_float+0x33a>
 80093dc:	4642      	mov	r2, r8
 80093de:	4631      	mov	r1, r6
 80093e0:	4628      	mov	r0, r5
 80093e2:	47b8      	blx	r7
 80093e4:	3001      	adds	r0, #1
 80093e6:	d1c2      	bne.n	800936e <_printf_float+0x2f2>
 80093e8:	e6a3      	b.n	8009132 <_printf_float+0xb6>
 80093ea:	2301      	movs	r3, #1
 80093ec:	4631      	mov	r1, r6
 80093ee:	4628      	mov	r0, r5
 80093f0:	9206      	str	r2, [sp, #24]
 80093f2:	47b8      	blx	r7
 80093f4:	3001      	adds	r0, #1
 80093f6:	f43f ae9c 	beq.w	8009132 <_printf_float+0xb6>
 80093fa:	f10b 0b01 	add.w	fp, fp, #1
 80093fe:	9a06      	ldr	r2, [sp, #24]
 8009400:	e7bb      	b.n	800937a <_printf_float+0x2fe>
 8009402:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009406:	4631      	mov	r1, r6
 8009408:	4628      	mov	r0, r5
 800940a:	47b8      	blx	r7
 800940c:	3001      	adds	r0, #1
 800940e:	d1c0      	bne.n	8009392 <_printf_float+0x316>
 8009410:	e68f      	b.n	8009132 <_printf_float+0xb6>
 8009412:	9a06      	ldr	r2, [sp, #24]
 8009414:	464b      	mov	r3, r9
 8009416:	4631      	mov	r1, r6
 8009418:	4628      	mov	r0, r5
 800941a:	4442      	add	r2, r8
 800941c:	47b8      	blx	r7
 800941e:	3001      	adds	r0, #1
 8009420:	d1c3      	bne.n	80093aa <_printf_float+0x32e>
 8009422:	e686      	b.n	8009132 <_printf_float+0xb6>
 8009424:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009428:	f1ba 0f01 	cmp.w	sl, #1
 800942c:	dc01      	bgt.n	8009432 <_printf_float+0x3b6>
 800942e:	07db      	lsls	r3, r3, #31
 8009430:	d536      	bpl.n	80094a0 <_printf_float+0x424>
 8009432:	2301      	movs	r3, #1
 8009434:	4642      	mov	r2, r8
 8009436:	4631      	mov	r1, r6
 8009438:	4628      	mov	r0, r5
 800943a:	47b8      	blx	r7
 800943c:	3001      	adds	r0, #1
 800943e:	f43f ae78 	beq.w	8009132 <_printf_float+0xb6>
 8009442:	4631      	mov	r1, r6
 8009444:	4628      	mov	r0, r5
 8009446:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800944a:	47b8      	blx	r7
 800944c:	3001      	adds	r0, #1
 800944e:	f43f ae70 	beq.w	8009132 <_printf_float+0xb6>
 8009452:	2200      	movs	r2, #0
 8009454:	2300      	movs	r3, #0
 8009456:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800945a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800945e:	f7f7 fb37 	bl	8000ad0 <__aeabi_dcmpeq>
 8009462:	b9c0      	cbnz	r0, 8009496 <_printf_float+0x41a>
 8009464:	4653      	mov	r3, sl
 8009466:	f108 0201 	add.w	r2, r8, #1
 800946a:	4631      	mov	r1, r6
 800946c:	4628      	mov	r0, r5
 800946e:	47b8      	blx	r7
 8009470:	3001      	adds	r0, #1
 8009472:	d10c      	bne.n	800948e <_printf_float+0x412>
 8009474:	e65d      	b.n	8009132 <_printf_float+0xb6>
 8009476:	2301      	movs	r3, #1
 8009478:	465a      	mov	r2, fp
 800947a:	4631      	mov	r1, r6
 800947c:	4628      	mov	r0, r5
 800947e:	47b8      	blx	r7
 8009480:	3001      	adds	r0, #1
 8009482:	f43f ae56 	beq.w	8009132 <_printf_float+0xb6>
 8009486:	f108 0801 	add.w	r8, r8, #1
 800948a:	45d0      	cmp	r8, sl
 800948c:	dbf3      	blt.n	8009476 <_printf_float+0x3fa>
 800948e:	464b      	mov	r3, r9
 8009490:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009494:	e6df      	b.n	8009256 <_printf_float+0x1da>
 8009496:	f04f 0800 	mov.w	r8, #0
 800949a:	f104 0b1a 	add.w	fp, r4, #26
 800949e:	e7f4      	b.n	800948a <_printf_float+0x40e>
 80094a0:	2301      	movs	r3, #1
 80094a2:	4642      	mov	r2, r8
 80094a4:	e7e1      	b.n	800946a <_printf_float+0x3ee>
 80094a6:	2301      	movs	r3, #1
 80094a8:	464a      	mov	r2, r9
 80094aa:	4631      	mov	r1, r6
 80094ac:	4628      	mov	r0, r5
 80094ae:	47b8      	blx	r7
 80094b0:	3001      	adds	r0, #1
 80094b2:	f43f ae3e 	beq.w	8009132 <_printf_float+0xb6>
 80094b6:	f108 0801 	add.w	r8, r8, #1
 80094ba:	68e3      	ldr	r3, [r4, #12]
 80094bc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80094be:	1a5b      	subs	r3, r3, r1
 80094c0:	4543      	cmp	r3, r8
 80094c2:	dcf0      	bgt.n	80094a6 <_printf_float+0x42a>
 80094c4:	e6fc      	b.n	80092c0 <_printf_float+0x244>
 80094c6:	f04f 0800 	mov.w	r8, #0
 80094ca:	f104 0919 	add.w	r9, r4, #25
 80094ce:	e7f4      	b.n	80094ba <_printf_float+0x43e>

080094d0 <_printf_common>:
 80094d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094d4:	4616      	mov	r6, r2
 80094d6:	4698      	mov	r8, r3
 80094d8:	688a      	ldr	r2, [r1, #8]
 80094da:	4607      	mov	r7, r0
 80094dc:	690b      	ldr	r3, [r1, #16]
 80094de:	460c      	mov	r4, r1
 80094e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80094e4:	4293      	cmp	r3, r2
 80094e6:	bfb8      	it	lt
 80094e8:	4613      	movlt	r3, r2
 80094ea:	6033      	str	r3, [r6, #0]
 80094ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80094f0:	b10a      	cbz	r2, 80094f6 <_printf_common+0x26>
 80094f2:	3301      	adds	r3, #1
 80094f4:	6033      	str	r3, [r6, #0]
 80094f6:	6823      	ldr	r3, [r4, #0]
 80094f8:	0699      	lsls	r1, r3, #26
 80094fa:	bf42      	ittt	mi
 80094fc:	6833      	ldrmi	r3, [r6, #0]
 80094fe:	3302      	addmi	r3, #2
 8009500:	6033      	strmi	r3, [r6, #0]
 8009502:	6825      	ldr	r5, [r4, #0]
 8009504:	f015 0506 	ands.w	r5, r5, #6
 8009508:	d106      	bne.n	8009518 <_printf_common+0x48>
 800950a:	f104 0a19 	add.w	sl, r4, #25
 800950e:	68e3      	ldr	r3, [r4, #12]
 8009510:	6832      	ldr	r2, [r6, #0]
 8009512:	1a9b      	subs	r3, r3, r2
 8009514:	42ab      	cmp	r3, r5
 8009516:	dc2b      	bgt.n	8009570 <_printf_common+0xa0>
 8009518:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800951c:	6822      	ldr	r2, [r4, #0]
 800951e:	3b00      	subs	r3, #0
 8009520:	bf18      	it	ne
 8009522:	2301      	movne	r3, #1
 8009524:	0692      	lsls	r2, r2, #26
 8009526:	d430      	bmi.n	800958a <_printf_common+0xba>
 8009528:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800952c:	4641      	mov	r1, r8
 800952e:	4638      	mov	r0, r7
 8009530:	47c8      	blx	r9
 8009532:	3001      	adds	r0, #1
 8009534:	d023      	beq.n	800957e <_printf_common+0xae>
 8009536:	6823      	ldr	r3, [r4, #0]
 8009538:	341a      	adds	r4, #26
 800953a:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800953e:	f003 0306 	and.w	r3, r3, #6
 8009542:	2b04      	cmp	r3, #4
 8009544:	bf0a      	itet	eq
 8009546:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800954a:	2500      	movne	r5, #0
 800954c:	6833      	ldreq	r3, [r6, #0]
 800954e:	f04f 0600 	mov.w	r6, #0
 8009552:	bf08      	it	eq
 8009554:	1aed      	subeq	r5, r5, r3
 8009556:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800955a:	bf08      	it	eq
 800955c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009560:	4293      	cmp	r3, r2
 8009562:	bfc4      	itt	gt
 8009564:	1a9b      	subgt	r3, r3, r2
 8009566:	18ed      	addgt	r5, r5, r3
 8009568:	42b5      	cmp	r5, r6
 800956a:	d11a      	bne.n	80095a2 <_printf_common+0xd2>
 800956c:	2000      	movs	r0, #0
 800956e:	e008      	b.n	8009582 <_printf_common+0xb2>
 8009570:	2301      	movs	r3, #1
 8009572:	4652      	mov	r2, sl
 8009574:	4641      	mov	r1, r8
 8009576:	4638      	mov	r0, r7
 8009578:	47c8      	blx	r9
 800957a:	3001      	adds	r0, #1
 800957c:	d103      	bne.n	8009586 <_printf_common+0xb6>
 800957e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009586:	3501      	adds	r5, #1
 8009588:	e7c1      	b.n	800950e <_printf_common+0x3e>
 800958a:	18e1      	adds	r1, r4, r3
 800958c:	1c5a      	adds	r2, r3, #1
 800958e:	2030      	movs	r0, #48	@ 0x30
 8009590:	3302      	adds	r3, #2
 8009592:	4422      	add	r2, r4
 8009594:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009598:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800959c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80095a0:	e7c2      	b.n	8009528 <_printf_common+0x58>
 80095a2:	2301      	movs	r3, #1
 80095a4:	4622      	mov	r2, r4
 80095a6:	4641      	mov	r1, r8
 80095a8:	4638      	mov	r0, r7
 80095aa:	47c8      	blx	r9
 80095ac:	3001      	adds	r0, #1
 80095ae:	d0e6      	beq.n	800957e <_printf_common+0xae>
 80095b0:	3601      	adds	r6, #1
 80095b2:	e7d9      	b.n	8009568 <_printf_common+0x98>

080095b4 <_printf_i>:
 80095b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80095b8:	7e0f      	ldrb	r7, [r1, #24]
 80095ba:	4691      	mov	r9, r2
 80095bc:	4680      	mov	r8, r0
 80095be:	460c      	mov	r4, r1
 80095c0:	2f78      	cmp	r7, #120	@ 0x78
 80095c2:	469a      	mov	sl, r3
 80095c4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80095c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80095ca:	d807      	bhi.n	80095dc <_printf_i+0x28>
 80095cc:	2f62      	cmp	r7, #98	@ 0x62
 80095ce:	d80a      	bhi.n	80095e6 <_printf_i+0x32>
 80095d0:	2f00      	cmp	r7, #0
 80095d2:	f000 80d1 	beq.w	8009778 <_printf_i+0x1c4>
 80095d6:	2f58      	cmp	r7, #88	@ 0x58
 80095d8:	f000 80b8 	beq.w	800974c <_printf_i+0x198>
 80095dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80095e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80095e4:	e03a      	b.n	800965c <_printf_i+0xa8>
 80095e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80095ea:	2b15      	cmp	r3, #21
 80095ec:	d8f6      	bhi.n	80095dc <_printf_i+0x28>
 80095ee:	a101      	add	r1, pc, #4	@ (adr r1, 80095f4 <_printf_i+0x40>)
 80095f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80095f4:	0800964d 	.word	0x0800964d
 80095f8:	08009661 	.word	0x08009661
 80095fc:	080095dd 	.word	0x080095dd
 8009600:	080095dd 	.word	0x080095dd
 8009604:	080095dd 	.word	0x080095dd
 8009608:	080095dd 	.word	0x080095dd
 800960c:	08009661 	.word	0x08009661
 8009610:	080095dd 	.word	0x080095dd
 8009614:	080095dd 	.word	0x080095dd
 8009618:	080095dd 	.word	0x080095dd
 800961c:	080095dd 	.word	0x080095dd
 8009620:	0800975f 	.word	0x0800975f
 8009624:	0800968b 	.word	0x0800968b
 8009628:	08009719 	.word	0x08009719
 800962c:	080095dd 	.word	0x080095dd
 8009630:	080095dd 	.word	0x080095dd
 8009634:	08009781 	.word	0x08009781
 8009638:	080095dd 	.word	0x080095dd
 800963c:	0800968b 	.word	0x0800968b
 8009640:	080095dd 	.word	0x080095dd
 8009644:	080095dd 	.word	0x080095dd
 8009648:	08009721 	.word	0x08009721
 800964c:	6833      	ldr	r3, [r6, #0]
 800964e:	1d1a      	adds	r2, r3, #4
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	6032      	str	r2, [r6, #0]
 8009654:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009658:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800965c:	2301      	movs	r3, #1
 800965e:	e09c      	b.n	800979a <_printf_i+0x1e6>
 8009660:	6833      	ldr	r3, [r6, #0]
 8009662:	6820      	ldr	r0, [r4, #0]
 8009664:	1d19      	adds	r1, r3, #4
 8009666:	6031      	str	r1, [r6, #0]
 8009668:	0606      	lsls	r6, r0, #24
 800966a:	d501      	bpl.n	8009670 <_printf_i+0xbc>
 800966c:	681d      	ldr	r5, [r3, #0]
 800966e:	e003      	b.n	8009678 <_printf_i+0xc4>
 8009670:	0645      	lsls	r5, r0, #25
 8009672:	d5fb      	bpl.n	800966c <_printf_i+0xb8>
 8009674:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009678:	2d00      	cmp	r5, #0
 800967a:	da03      	bge.n	8009684 <_printf_i+0xd0>
 800967c:	232d      	movs	r3, #45	@ 0x2d
 800967e:	426d      	negs	r5, r5
 8009680:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009684:	4858      	ldr	r0, [pc, #352]	@ (80097e8 <_printf_i+0x234>)
 8009686:	230a      	movs	r3, #10
 8009688:	e011      	b.n	80096ae <_printf_i+0xfa>
 800968a:	6821      	ldr	r1, [r4, #0]
 800968c:	6833      	ldr	r3, [r6, #0]
 800968e:	0608      	lsls	r0, r1, #24
 8009690:	f853 5b04 	ldr.w	r5, [r3], #4
 8009694:	d402      	bmi.n	800969c <_printf_i+0xe8>
 8009696:	0649      	lsls	r1, r1, #25
 8009698:	bf48      	it	mi
 800969a:	b2ad      	uxthmi	r5, r5
 800969c:	2f6f      	cmp	r7, #111	@ 0x6f
 800969e:	6033      	str	r3, [r6, #0]
 80096a0:	4851      	ldr	r0, [pc, #324]	@ (80097e8 <_printf_i+0x234>)
 80096a2:	bf14      	ite	ne
 80096a4:	230a      	movne	r3, #10
 80096a6:	2308      	moveq	r3, #8
 80096a8:	2100      	movs	r1, #0
 80096aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80096ae:	6866      	ldr	r6, [r4, #4]
 80096b0:	2e00      	cmp	r6, #0
 80096b2:	60a6      	str	r6, [r4, #8]
 80096b4:	db05      	blt.n	80096c2 <_printf_i+0x10e>
 80096b6:	6821      	ldr	r1, [r4, #0]
 80096b8:	432e      	orrs	r6, r5
 80096ba:	f021 0104 	bic.w	r1, r1, #4
 80096be:	6021      	str	r1, [r4, #0]
 80096c0:	d04b      	beq.n	800975a <_printf_i+0x1a6>
 80096c2:	4616      	mov	r6, r2
 80096c4:	fbb5 f1f3 	udiv	r1, r5, r3
 80096c8:	fb03 5711 	mls	r7, r3, r1, r5
 80096cc:	5dc7      	ldrb	r7, [r0, r7]
 80096ce:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80096d2:	462f      	mov	r7, r5
 80096d4:	460d      	mov	r5, r1
 80096d6:	42bb      	cmp	r3, r7
 80096d8:	d9f4      	bls.n	80096c4 <_printf_i+0x110>
 80096da:	2b08      	cmp	r3, #8
 80096dc:	d10b      	bne.n	80096f6 <_printf_i+0x142>
 80096de:	6823      	ldr	r3, [r4, #0]
 80096e0:	07df      	lsls	r7, r3, #31
 80096e2:	d508      	bpl.n	80096f6 <_printf_i+0x142>
 80096e4:	6923      	ldr	r3, [r4, #16]
 80096e6:	6861      	ldr	r1, [r4, #4]
 80096e8:	4299      	cmp	r1, r3
 80096ea:	bfde      	ittt	le
 80096ec:	2330      	movle	r3, #48	@ 0x30
 80096ee:	f806 3c01 	strble.w	r3, [r6, #-1]
 80096f2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80096f6:	1b92      	subs	r2, r2, r6
 80096f8:	6122      	str	r2, [r4, #16]
 80096fa:	464b      	mov	r3, r9
 80096fc:	aa03      	add	r2, sp, #12
 80096fe:	4621      	mov	r1, r4
 8009700:	4640      	mov	r0, r8
 8009702:	f8cd a000 	str.w	sl, [sp]
 8009706:	f7ff fee3 	bl	80094d0 <_printf_common>
 800970a:	3001      	adds	r0, #1
 800970c:	d14a      	bne.n	80097a4 <_printf_i+0x1f0>
 800970e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009712:	b004      	add	sp, #16
 8009714:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009718:	6823      	ldr	r3, [r4, #0]
 800971a:	f043 0320 	orr.w	r3, r3, #32
 800971e:	6023      	str	r3, [r4, #0]
 8009720:	2778      	movs	r7, #120	@ 0x78
 8009722:	4832      	ldr	r0, [pc, #200]	@ (80097ec <_printf_i+0x238>)
 8009724:	6823      	ldr	r3, [r4, #0]
 8009726:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800972a:	061f      	lsls	r7, r3, #24
 800972c:	6831      	ldr	r1, [r6, #0]
 800972e:	f851 5b04 	ldr.w	r5, [r1], #4
 8009732:	d402      	bmi.n	800973a <_printf_i+0x186>
 8009734:	065f      	lsls	r7, r3, #25
 8009736:	bf48      	it	mi
 8009738:	b2ad      	uxthmi	r5, r5
 800973a:	6031      	str	r1, [r6, #0]
 800973c:	07d9      	lsls	r1, r3, #31
 800973e:	bf44      	itt	mi
 8009740:	f043 0320 	orrmi.w	r3, r3, #32
 8009744:	6023      	strmi	r3, [r4, #0]
 8009746:	b11d      	cbz	r5, 8009750 <_printf_i+0x19c>
 8009748:	2310      	movs	r3, #16
 800974a:	e7ad      	b.n	80096a8 <_printf_i+0xf4>
 800974c:	4826      	ldr	r0, [pc, #152]	@ (80097e8 <_printf_i+0x234>)
 800974e:	e7e9      	b.n	8009724 <_printf_i+0x170>
 8009750:	6823      	ldr	r3, [r4, #0]
 8009752:	f023 0320 	bic.w	r3, r3, #32
 8009756:	6023      	str	r3, [r4, #0]
 8009758:	e7f6      	b.n	8009748 <_printf_i+0x194>
 800975a:	4616      	mov	r6, r2
 800975c:	e7bd      	b.n	80096da <_printf_i+0x126>
 800975e:	6833      	ldr	r3, [r6, #0]
 8009760:	6825      	ldr	r5, [r4, #0]
 8009762:	1d18      	adds	r0, r3, #4
 8009764:	6961      	ldr	r1, [r4, #20]
 8009766:	6030      	str	r0, [r6, #0]
 8009768:	062e      	lsls	r6, r5, #24
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	d501      	bpl.n	8009772 <_printf_i+0x1be>
 800976e:	6019      	str	r1, [r3, #0]
 8009770:	e002      	b.n	8009778 <_printf_i+0x1c4>
 8009772:	0668      	lsls	r0, r5, #25
 8009774:	d5fb      	bpl.n	800976e <_printf_i+0x1ba>
 8009776:	8019      	strh	r1, [r3, #0]
 8009778:	2300      	movs	r3, #0
 800977a:	4616      	mov	r6, r2
 800977c:	6123      	str	r3, [r4, #16]
 800977e:	e7bc      	b.n	80096fa <_printf_i+0x146>
 8009780:	6833      	ldr	r3, [r6, #0]
 8009782:	2100      	movs	r1, #0
 8009784:	1d1a      	adds	r2, r3, #4
 8009786:	6032      	str	r2, [r6, #0]
 8009788:	681e      	ldr	r6, [r3, #0]
 800978a:	6862      	ldr	r2, [r4, #4]
 800978c:	4630      	mov	r0, r6
 800978e:	f000 f9d1 	bl	8009b34 <memchr>
 8009792:	b108      	cbz	r0, 8009798 <_printf_i+0x1e4>
 8009794:	1b80      	subs	r0, r0, r6
 8009796:	6060      	str	r0, [r4, #4]
 8009798:	6863      	ldr	r3, [r4, #4]
 800979a:	6123      	str	r3, [r4, #16]
 800979c:	2300      	movs	r3, #0
 800979e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80097a2:	e7aa      	b.n	80096fa <_printf_i+0x146>
 80097a4:	6923      	ldr	r3, [r4, #16]
 80097a6:	4632      	mov	r2, r6
 80097a8:	4649      	mov	r1, r9
 80097aa:	4640      	mov	r0, r8
 80097ac:	47d0      	blx	sl
 80097ae:	3001      	adds	r0, #1
 80097b0:	d0ad      	beq.n	800970e <_printf_i+0x15a>
 80097b2:	6823      	ldr	r3, [r4, #0]
 80097b4:	079b      	lsls	r3, r3, #30
 80097b6:	d413      	bmi.n	80097e0 <_printf_i+0x22c>
 80097b8:	68e0      	ldr	r0, [r4, #12]
 80097ba:	9b03      	ldr	r3, [sp, #12]
 80097bc:	4298      	cmp	r0, r3
 80097be:	bfb8      	it	lt
 80097c0:	4618      	movlt	r0, r3
 80097c2:	e7a6      	b.n	8009712 <_printf_i+0x15e>
 80097c4:	2301      	movs	r3, #1
 80097c6:	4632      	mov	r2, r6
 80097c8:	4649      	mov	r1, r9
 80097ca:	4640      	mov	r0, r8
 80097cc:	47d0      	blx	sl
 80097ce:	3001      	adds	r0, #1
 80097d0:	d09d      	beq.n	800970e <_printf_i+0x15a>
 80097d2:	3501      	adds	r5, #1
 80097d4:	68e3      	ldr	r3, [r4, #12]
 80097d6:	9903      	ldr	r1, [sp, #12]
 80097d8:	1a5b      	subs	r3, r3, r1
 80097da:	42ab      	cmp	r3, r5
 80097dc:	dcf2      	bgt.n	80097c4 <_printf_i+0x210>
 80097de:	e7eb      	b.n	80097b8 <_printf_i+0x204>
 80097e0:	2500      	movs	r5, #0
 80097e2:	f104 0619 	add.w	r6, r4, #25
 80097e6:	e7f5      	b.n	80097d4 <_printf_i+0x220>
 80097e8:	08022dea 	.word	0x08022dea
 80097ec:	08022dfb 	.word	0x08022dfb

080097f0 <sniprintf>:
 80097f0:	b40c      	push	{r2, r3}
 80097f2:	4b19      	ldr	r3, [pc, #100]	@ (8009858 <sniprintf+0x68>)
 80097f4:	b530      	push	{r4, r5, lr}
 80097f6:	1e0c      	subs	r4, r1, #0
 80097f8:	b09d      	sub	sp, #116	@ 0x74
 80097fa:	681d      	ldr	r5, [r3, #0]
 80097fc:	da08      	bge.n	8009810 <sniprintf+0x20>
 80097fe:	238b      	movs	r3, #139	@ 0x8b
 8009800:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009804:	602b      	str	r3, [r5, #0]
 8009806:	b01d      	add	sp, #116	@ 0x74
 8009808:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800980c:	b002      	add	sp, #8
 800980e:	4770      	bx	lr
 8009810:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009814:	9002      	str	r0, [sp, #8]
 8009816:	9006      	str	r0, [sp, #24]
 8009818:	a902      	add	r1, sp, #8
 800981a:	f8ad 3014 	strh.w	r3, [sp, #20]
 800981e:	f04f 0300 	mov.w	r3, #0
 8009822:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009824:	4628      	mov	r0, r5
 8009826:	931b      	str	r3, [sp, #108]	@ 0x6c
 8009828:	bf14      	ite	ne
 800982a:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800982e:	4623      	moveq	r3, r4
 8009830:	9304      	str	r3, [sp, #16]
 8009832:	9307      	str	r3, [sp, #28]
 8009834:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009838:	f8ad 3016 	strh.w	r3, [sp, #22]
 800983c:	ab21      	add	r3, sp, #132	@ 0x84
 800983e:	9301      	str	r3, [sp, #4]
 8009840:	f001 f850 	bl	800a8e4 <_svfiprintf_r>
 8009844:	1c43      	adds	r3, r0, #1
 8009846:	bfbc      	itt	lt
 8009848:	238b      	movlt	r3, #139	@ 0x8b
 800984a:	602b      	strlt	r3, [r5, #0]
 800984c:	2c00      	cmp	r4, #0
 800984e:	d0da      	beq.n	8009806 <sniprintf+0x16>
 8009850:	9b02      	ldr	r3, [sp, #8]
 8009852:	2200      	movs	r2, #0
 8009854:	701a      	strb	r2, [r3, #0]
 8009856:	e7d6      	b.n	8009806 <sniprintf+0x16>
 8009858:	2000002c 	.word	0x2000002c

0800985c <std>:
 800985c:	2300      	movs	r3, #0
 800985e:	b510      	push	{r4, lr}
 8009860:	4604      	mov	r4, r0
 8009862:	6083      	str	r3, [r0, #8]
 8009864:	8181      	strh	r1, [r0, #12]
 8009866:	4619      	mov	r1, r3
 8009868:	6643      	str	r3, [r0, #100]	@ 0x64
 800986a:	81c2      	strh	r2, [r0, #14]
 800986c:	2208      	movs	r2, #8
 800986e:	6183      	str	r3, [r0, #24]
 8009870:	e9c0 3300 	strd	r3, r3, [r0]
 8009874:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009878:	305c      	adds	r0, #92	@ 0x5c
 800987a:	f000 f921 	bl	8009ac0 <memset>
 800987e:	4b0d      	ldr	r3, [pc, #52]	@ (80098b4 <std+0x58>)
 8009880:	6224      	str	r4, [r4, #32]
 8009882:	6263      	str	r3, [r4, #36]	@ 0x24
 8009884:	4b0c      	ldr	r3, [pc, #48]	@ (80098b8 <std+0x5c>)
 8009886:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009888:	4b0c      	ldr	r3, [pc, #48]	@ (80098bc <std+0x60>)
 800988a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800988c:	4b0c      	ldr	r3, [pc, #48]	@ (80098c0 <std+0x64>)
 800988e:	6323      	str	r3, [r4, #48]	@ 0x30
 8009890:	4b0c      	ldr	r3, [pc, #48]	@ (80098c4 <std+0x68>)
 8009892:	429c      	cmp	r4, r3
 8009894:	d006      	beq.n	80098a4 <std+0x48>
 8009896:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800989a:	4294      	cmp	r4, r2
 800989c:	d002      	beq.n	80098a4 <std+0x48>
 800989e:	33d0      	adds	r3, #208	@ 0xd0
 80098a0:	429c      	cmp	r4, r3
 80098a2:	d105      	bne.n	80098b0 <std+0x54>
 80098a4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80098a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098ac:	f000 b93a 	b.w	8009b24 <__retarget_lock_init_recursive>
 80098b0:	bd10      	pop	{r4, pc}
 80098b2:	bf00      	nop
 80098b4:	0800b729 	.word	0x0800b729
 80098b8:	0800b74b 	.word	0x0800b74b
 80098bc:	0800b783 	.word	0x0800b783
 80098c0:	0800b7a7 	.word	0x0800b7a7
 80098c4:	20000668 	.word	0x20000668

080098c8 <stdio_exit_handler>:
 80098c8:	4a02      	ldr	r2, [pc, #8]	@ (80098d4 <stdio_exit_handler+0xc>)
 80098ca:	4903      	ldr	r1, [pc, #12]	@ (80098d8 <stdio_exit_handler+0x10>)
 80098cc:	4803      	ldr	r0, [pc, #12]	@ (80098dc <stdio_exit_handler+0x14>)
 80098ce:	f000 b869 	b.w	80099a4 <_fwalk_sglue>
 80098d2:	bf00      	nop
 80098d4:	20000020 	.word	0x20000020
 80098d8:	0800afbd 	.word	0x0800afbd
 80098dc:	20000030 	.word	0x20000030

080098e0 <cleanup_stdio>:
 80098e0:	6841      	ldr	r1, [r0, #4]
 80098e2:	4b0c      	ldr	r3, [pc, #48]	@ (8009914 <cleanup_stdio+0x34>)
 80098e4:	4299      	cmp	r1, r3
 80098e6:	b510      	push	{r4, lr}
 80098e8:	4604      	mov	r4, r0
 80098ea:	d001      	beq.n	80098f0 <cleanup_stdio+0x10>
 80098ec:	f001 fb66 	bl	800afbc <_fflush_r>
 80098f0:	68a1      	ldr	r1, [r4, #8]
 80098f2:	4b09      	ldr	r3, [pc, #36]	@ (8009918 <cleanup_stdio+0x38>)
 80098f4:	4299      	cmp	r1, r3
 80098f6:	d002      	beq.n	80098fe <cleanup_stdio+0x1e>
 80098f8:	4620      	mov	r0, r4
 80098fa:	f001 fb5f 	bl	800afbc <_fflush_r>
 80098fe:	68e1      	ldr	r1, [r4, #12]
 8009900:	4b06      	ldr	r3, [pc, #24]	@ (800991c <cleanup_stdio+0x3c>)
 8009902:	4299      	cmp	r1, r3
 8009904:	d004      	beq.n	8009910 <cleanup_stdio+0x30>
 8009906:	4620      	mov	r0, r4
 8009908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800990c:	f001 bb56 	b.w	800afbc <_fflush_r>
 8009910:	bd10      	pop	{r4, pc}
 8009912:	bf00      	nop
 8009914:	20000668 	.word	0x20000668
 8009918:	200006d0 	.word	0x200006d0
 800991c:	20000738 	.word	0x20000738

08009920 <global_stdio_init.part.0>:
 8009920:	b510      	push	{r4, lr}
 8009922:	4b0b      	ldr	r3, [pc, #44]	@ (8009950 <global_stdio_init.part.0+0x30>)
 8009924:	2104      	movs	r1, #4
 8009926:	4c0b      	ldr	r4, [pc, #44]	@ (8009954 <global_stdio_init.part.0+0x34>)
 8009928:	4a0b      	ldr	r2, [pc, #44]	@ (8009958 <global_stdio_init.part.0+0x38>)
 800992a:	4620      	mov	r0, r4
 800992c:	601a      	str	r2, [r3, #0]
 800992e:	2200      	movs	r2, #0
 8009930:	f7ff ff94 	bl	800985c <std>
 8009934:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009938:	2201      	movs	r2, #1
 800993a:	2109      	movs	r1, #9
 800993c:	f7ff ff8e 	bl	800985c <std>
 8009940:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009944:	2202      	movs	r2, #2
 8009946:	2112      	movs	r1, #18
 8009948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800994c:	f7ff bf86 	b.w	800985c <std>
 8009950:	200007a0 	.word	0x200007a0
 8009954:	20000668 	.word	0x20000668
 8009958:	080098c9 	.word	0x080098c9

0800995c <__sfp_lock_acquire>:
 800995c:	4801      	ldr	r0, [pc, #4]	@ (8009964 <__sfp_lock_acquire+0x8>)
 800995e:	f000 b8e2 	b.w	8009b26 <__retarget_lock_acquire_recursive>
 8009962:	bf00      	nop
 8009964:	200007a5 	.word	0x200007a5

08009968 <__sfp_lock_release>:
 8009968:	4801      	ldr	r0, [pc, #4]	@ (8009970 <__sfp_lock_release+0x8>)
 800996a:	f000 b8dd 	b.w	8009b28 <__retarget_lock_release_recursive>
 800996e:	bf00      	nop
 8009970:	200007a5 	.word	0x200007a5

08009974 <__sinit>:
 8009974:	b510      	push	{r4, lr}
 8009976:	4604      	mov	r4, r0
 8009978:	f7ff fff0 	bl	800995c <__sfp_lock_acquire>
 800997c:	6a23      	ldr	r3, [r4, #32]
 800997e:	b11b      	cbz	r3, 8009988 <__sinit+0x14>
 8009980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009984:	f7ff bff0 	b.w	8009968 <__sfp_lock_release>
 8009988:	4b04      	ldr	r3, [pc, #16]	@ (800999c <__sinit+0x28>)
 800998a:	6223      	str	r3, [r4, #32]
 800998c:	4b04      	ldr	r3, [pc, #16]	@ (80099a0 <__sinit+0x2c>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d1f5      	bne.n	8009980 <__sinit+0xc>
 8009994:	f7ff ffc4 	bl	8009920 <global_stdio_init.part.0>
 8009998:	e7f2      	b.n	8009980 <__sinit+0xc>
 800999a:	bf00      	nop
 800999c:	080098e1 	.word	0x080098e1
 80099a0:	200007a0 	.word	0x200007a0

080099a4 <_fwalk_sglue>:
 80099a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099a8:	4607      	mov	r7, r0
 80099aa:	4688      	mov	r8, r1
 80099ac:	4614      	mov	r4, r2
 80099ae:	2600      	movs	r6, #0
 80099b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80099b4:	f1b9 0901 	subs.w	r9, r9, #1
 80099b8:	d505      	bpl.n	80099c6 <_fwalk_sglue+0x22>
 80099ba:	6824      	ldr	r4, [r4, #0]
 80099bc:	2c00      	cmp	r4, #0
 80099be:	d1f7      	bne.n	80099b0 <_fwalk_sglue+0xc>
 80099c0:	4630      	mov	r0, r6
 80099c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099c6:	89ab      	ldrh	r3, [r5, #12]
 80099c8:	2b01      	cmp	r3, #1
 80099ca:	d907      	bls.n	80099dc <_fwalk_sglue+0x38>
 80099cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80099d0:	3301      	adds	r3, #1
 80099d2:	d003      	beq.n	80099dc <_fwalk_sglue+0x38>
 80099d4:	4629      	mov	r1, r5
 80099d6:	4638      	mov	r0, r7
 80099d8:	47c0      	blx	r8
 80099da:	4306      	orrs	r6, r0
 80099dc:	3568      	adds	r5, #104	@ 0x68
 80099de:	e7e9      	b.n	80099b4 <_fwalk_sglue+0x10>

080099e0 <iprintf>:
 80099e0:	b40f      	push	{r0, r1, r2, r3}
 80099e2:	b507      	push	{r0, r1, r2, lr}
 80099e4:	4906      	ldr	r1, [pc, #24]	@ (8009a00 <iprintf+0x20>)
 80099e6:	ab04      	add	r3, sp, #16
 80099e8:	6808      	ldr	r0, [r1, #0]
 80099ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80099ee:	6881      	ldr	r1, [r0, #8]
 80099f0:	9301      	str	r3, [sp, #4]
 80099f2:	f001 f89d 	bl	800ab30 <_vfiprintf_r>
 80099f6:	b003      	add	sp, #12
 80099f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80099fc:	b004      	add	sp, #16
 80099fe:	4770      	bx	lr
 8009a00:	2000002c 	.word	0x2000002c

08009a04 <_puts_r>:
 8009a04:	6a03      	ldr	r3, [r0, #32]
 8009a06:	b570      	push	{r4, r5, r6, lr}
 8009a08:	4605      	mov	r5, r0
 8009a0a:	460e      	mov	r6, r1
 8009a0c:	6884      	ldr	r4, [r0, #8]
 8009a0e:	b90b      	cbnz	r3, 8009a14 <_puts_r+0x10>
 8009a10:	f7ff ffb0 	bl	8009974 <__sinit>
 8009a14:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009a16:	07db      	lsls	r3, r3, #31
 8009a18:	d405      	bmi.n	8009a26 <_puts_r+0x22>
 8009a1a:	89a3      	ldrh	r3, [r4, #12]
 8009a1c:	0598      	lsls	r0, r3, #22
 8009a1e:	d402      	bmi.n	8009a26 <_puts_r+0x22>
 8009a20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009a22:	f000 f880 	bl	8009b26 <__retarget_lock_acquire_recursive>
 8009a26:	89a3      	ldrh	r3, [r4, #12]
 8009a28:	0719      	lsls	r1, r3, #28
 8009a2a:	d502      	bpl.n	8009a32 <_puts_r+0x2e>
 8009a2c:	6923      	ldr	r3, [r4, #16]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d135      	bne.n	8009a9e <_puts_r+0x9a>
 8009a32:	4621      	mov	r1, r4
 8009a34:	4628      	mov	r0, r5
 8009a36:	f001 ff27 	bl	800b888 <__swsetup_r>
 8009a3a:	b380      	cbz	r0, 8009a9e <_puts_r+0x9a>
 8009a3c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8009a40:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009a42:	07da      	lsls	r2, r3, #31
 8009a44:	d405      	bmi.n	8009a52 <_puts_r+0x4e>
 8009a46:	89a3      	ldrh	r3, [r4, #12]
 8009a48:	059b      	lsls	r3, r3, #22
 8009a4a:	d402      	bmi.n	8009a52 <_puts_r+0x4e>
 8009a4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009a4e:	f000 f86b 	bl	8009b28 <__retarget_lock_release_recursive>
 8009a52:	4628      	mov	r0, r5
 8009a54:	bd70      	pop	{r4, r5, r6, pc}
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	da04      	bge.n	8009a64 <_puts_r+0x60>
 8009a5a:	69a2      	ldr	r2, [r4, #24]
 8009a5c:	429a      	cmp	r2, r3
 8009a5e:	dc17      	bgt.n	8009a90 <_puts_r+0x8c>
 8009a60:	290a      	cmp	r1, #10
 8009a62:	d015      	beq.n	8009a90 <_puts_r+0x8c>
 8009a64:	6823      	ldr	r3, [r4, #0]
 8009a66:	1c5a      	adds	r2, r3, #1
 8009a68:	6022      	str	r2, [r4, #0]
 8009a6a:	7019      	strb	r1, [r3, #0]
 8009a6c:	68a3      	ldr	r3, [r4, #8]
 8009a6e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009a72:	3b01      	subs	r3, #1
 8009a74:	60a3      	str	r3, [r4, #8]
 8009a76:	2900      	cmp	r1, #0
 8009a78:	d1ed      	bne.n	8009a56 <_puts_r+0x52>
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	da11      	bge.n	8009aa2 <_puts_r+0x9e>
 8009a7e:	4622      	mov	r2, r4
 8009a80:	210a      	movs	r1, #10
 8009a82:	4628      	mov	r0, r5
 8009a84:	f001 fec1 	bl	800b80a <__swbuf_r>
 8009a88:	3001      	adds	r0, #1
 8009a8a:	d0d7      	beq.n	8009a3c <_puts_r+0x38>
 8009a8c:	250a      	movs	r5, #10
 8009a8e:	e7d7      	b.n	8009a40 <_puts_r+0x3c>
 8009a90:	4622      	mov	r2, r4
 8009a92:	4628      	mov	r0, r5
 8009a94:	f001 feb9 	bl	800b80a <__swbuf_r>
 8009a98:	3001      	adds	r0, #1
 8009a9a:	d1e7      	bne.n	8009a6c <_puts_r+0x68>
 8009a9c:	e7ce      	b.n	8009a3c <_puts_r+0x38>
 8009a9e:	3e01      	subs	r6, #1
 8009aa0:	e7e4      	b.n	8009a6c <_puts_r+0x68>
 8009aa2:	6823      	ldr	r3, [r4, #0]
 8009aa4:	1c5a      	adds	r2, r3, #1
 8009aa6:	6022      	str	r2, [r4, #0]
 8009aa8:	220a      	movs	r2, #10
 8009aaa:	701a      	strb	r2, [r3, #0]
 8009aac:	e7ee      	b.n	8009a8c <_puts_r+0x88>
	...

08009ab0 <puts>:
 8009ab0:	4b02      	ldr	r3, [pc, #8]	@ (8009abc <puts+0xc>)
 8009ab2:	4601      	mov	r1, r0
 8009ab4:	6818      	ldr	r0, [r3, #0]
 8009ab6:	f7ff bfa5 	b.w	8009a04 <_puts_r>
 8009aba:	bf00      	nop
 8009abc:	2000002c 	.word	0x2000002c

08009ac0 <memset>:
 8009ac0:	4402      	add	r2, r0
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	4293      	cmp	r3, r2
 8009ac6:	d100      	bne.n	8009aca <memset+0xa>
 8009ac8:	4770      	bx	lr
 8009aca:	f803 1b01 	strb.w	r1, [r3], #1
 8009ace:	e7f9      	b.n	8009ac4 <memset+0x4>

08009ad0 <__errno>:
 8009ad0:	4b01      	ldr	r3, [pc, #4]	@ (8009ad8 <__errno+0x8>)
 8009ad2:	6818      	ldr	r0, [r3, #0]
 8009ad4:	4770      	bx	lr
 8009ad6:	bf00      	nop
 8009ad8:	2000002c 	.word	0x2000002c

08009adc <__libc_init_array>:
 8009adc:	b570      	push	{r4, r5, r6, lr}
 8009ade:	4d0d      	ldr	r5, [pc, #52]	@ (8009b14 <__libc_init_array+0x38>)
 8009ae0:	2600      	movs	r6, #0
 8009ae2:	4c0d      	ldr	r4, [pc, #52]	@ (8009b18 <__libc_init_array+0x3c>)
 8009ae4:	1b64      	subs	r4, r4, r5
 8009ae6:	10a4      	asrs	r4, r4, #2
 8009ae8:	42a6      	cmp	r6, r4
 8009aea:	d109      	bne.n	8009b00 <__libc_init_array+0x24>
 8009aec:	4d0b      	ldr	r5, [pc, #44]	@ (8009b1c <__libc_init_array+0x40>)
 8009aee:	2600      	movs	r6, #0
 8009af0:	4c0b      	ldr	r4, [pc, #44]	@ (8009b20 <__libc_init_array+0x44>)
 8009af2:	f002 f913 	bl	800bd1c <_init>
 8009af6:	1b64      	subs	r4, r4, r5
 8009af8:	10a4      	asrs	r4, r4, #2
 8009afa:	42a6      	cmp	r6, r4
 8009afc:	d105      	bne.n	8009b0a <__libc_init_array+0x2e>
 8009afe:	bd70      	pop	{r4, r5, r6, pc}
 8009b00:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b04:	3601      	adds	r6, #1
 8009b06:	4798      	blx	r3
 8009b08:	e7ee      	b.n	8009ae8 <__libc_init_array+0xc>
 8009b0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b0e:	3601      	adds	r6, #1
 8009b10:	4798      	blx	r3
 8009b12:	e7f2      	b.n	8009afa <__libc_init_array+0x1e>
 8009b14:	08023154 	.word	0x08023154
 8009b18:	08023154 	.word	0x08023154
 8009b1c:	08023154 	.word	0x08023154
 8009b20:	08023158 	.word	0x08023158

08009b24 <__retarget_lock_init_recursive>:
 8009b24:	4770      	bx	lr

08009b26 <__retarget_lock_acquire_recursive>:
 8009b26:	4770      	bx	lr

08009b28 <__retarget_lock_release_recursive>:
 8009b28:	4770      	bx	lr
	...

08009b2c <_localeconv_r>:
 8009b2c:	4800      	ldr	r0, [pc, #0]	@ (8009b30 <_localeconv_r+0x4>)
 8009b2e:	4770      	bx	lr
 8009b30:	2000016c 	.word	0x2000016c

08009b34 <memchr>:
 8009b34:	b2c9      	uxtb	r1, r1
 8009b36:	4603      	mov	r3, r0
 8009b38:	4402      	add	r2, r0
 8009b3a:	b510      	push	{r4, lr}
 8009b3c:	4293      	cmp	r3, r2
 8009b3e:	4618      	mov	r0, r3
 8009b40:	d101      	bne.n	8009b46 <memchr+0x12>
 8009b42:	2000      	movs	r0, #0
 8009b44:	e003      	b.n	8009b4e <memchr+0x1a>
 8009b46:	7804      	ldrb	r4, [r0, #0]
 8009b48:	3301      	adds	r3, #1
 8009b4a:	428c      	cmp	r4, r1
 8009b4c:	d1f6      	bne.n	8009b3c <memchr+0x8>
 8009b4e:	bd10      	pop	{r4, pc}

08009b50 <memcpy>:
 8009b50:	440a      	add	r2, r1
 8009b52:	1e43      	subs	r3, r0, #1
 8009b54:	4291      	cmp	r1, r2
 8009b56:	d100      	bne.n	8009b5a <memcpy+0xa>
 8009b58:	4770      	bx	lr
 8009b5a:	b510      	push	{r4, lr}
 8009b5c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b60:	4291      	cmp	r1, r2
 8009b62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b66:	d1f9      	bne.n	8009b5c <memcpy+0xc>
 8009b68:	bd10      	pop	{r4, pc}

08009b6a <quorem>:
 8009b6a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b6e:	6903      	ldr	r3, [r0, #16]
 8009b70:	4607      	mov	r7, r0
 8009b72:	690c      	ldr	r4, [r1, #16]
 8009b74:	42a3      	cmp	r3, r4
 8009b76:	f2c0 8083 	blt.w	8009c80 <quorem+0x116>
 8009b7a:	3c01      	subs	r4, #1
 8009b7c:	f100 0514 	add.w	r5, r0, #20
 8009b80:	f101 0814 	add.w	r8, r1, #20
 8009b84:	00a3      	lsls	r3, r4, #2
 8009b86:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009b8a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009b8e:	9300      	str	r3, [sp, #0]
 8009b90:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009b94:	9301      	str	r3, [sp, #4]
 8009b96:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009b9a:	3301      	adds	r3, #1
 8009b9c:	429a      	cmp	r2, r3
 8009b9e:	fbb2 f6f3 	udiv	r6, r2, r3
 8009ba2:	d331      	bcc.n	8009c08 <quorem+0x9e>
 8009ba4:	f04f 0a00 	mov.w	sl, #0
 8009ba8:	46c4      	mov	ip, r8
 8009baa:	46ae      	mov	lr, r5
 8009bac:	46d3      	mov	fp, sl
 8009bae:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009bb2:	b298      	uxth	r0, r3
 8009bb4:	45e1      	cmp	r9, ip
 8009bb6:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8009bba:	fb06 a000 	mla	r0, r6, r0, sl
 8009bbe:	ea4f 4210 	mov.w	r2, r0, lsr #16
 8009bc2:	b280      	uxth	r0, r0
 8009bc4:	fb06 2303 	mla	r3, r6, r3, r2
 8009bc8:	f8de 2000 	ldr.w	r2, [lr]
 8009bcc:	b292      	uxth	r2, r2
 8009bce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009bd2:	eba2 0200 	sub.w	r2, r2, r0
 8009bd6:	b29b      	uxth	r3, r3
 8009bd8:	f8de 0000 	ldr.w	r0, [lr]
 8009bdc:	445a      	add	r2, fp
 8009bde:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009be2:	b292      	uxth	r2, r2
 8009be4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009be8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009bec:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009bf0:	f84e 2b04 	str.w	r2, [lr], #4
 8009bf4:	d2db      	bcs.n	8009bae <quorem+0x44>
 8009bf6:	9b00      	ldr	r3, [sp, #0]
 8009bf8:	58eb      	ldr	r3, [r5, r3]
 8009bfa:	b92b      	cbnz	r3, 8009c08 <quorem+0x9e>
 8009bfc:	9b01      	ldr	r3, [sp, #4]
 8009bfe:	3b04      	subs	r3, #4
 8009c00:	429d      	cmp	r5, r3
 8009c02:	461a      	mov	r2, r3
 8009c04:	d330      	bcc.n	8009c68 <quorem+0xfe>
 8009c06:	613c      	str	r4, [r7, #16]
 8009c08:	4638      	mov	r0, r7
 8009c0a:	f001 fc81 	bl	800b510 <__mcmp>
 8009c0e:	2800      	cmp	r0, #0
 8009c10:	db26      	blt.n	8009c60 <quorem+0xf6>
 8009c12:	4629      	mov	r1, r5
 8009c14:	2000      	movs	r0, #0
 8009c16:	f858 2b04 	ldr.w	r2, [r8], #4
 8009c1a:	f8d1 c000 	ldr.w	ip, [r1]
 8009c1e:	fa1f fe82 	uxth.w	lr, r2
 8009c22:	45c1      	cmp	r9, r8
 8009c24:	fa1f f38c 	uxth.w	r3, ip
 8009c28:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8009c2c:	eba3 030e 	sub.w	r3, r3, lr
 8009c30:	4403      	add	r3, r0
 8009c32:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009c36:	b29b      	uxth	r3, r3
 8009c38:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009c3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009c40:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009c44:	f841 3b04 	str.w	r3, [r1], #4
 8009c48:	d2e5      	bcs.n	8009c16 <quorem+0xac>
 8009c4a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009c4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009c52:	b922      	cbnz	r2, 8009c5e <quorem+0xf4>
 8009c54:	3b04      	subs	r3, #4
 8009c56:	429d      	cmp	r5, r3
 8009c58:	461a      	mov	r2, r3
 8009c5a:	d30b      	bcc.n	8009c74 <quorem+0x10a>
 8009c5c:	613c      	str	r4, [r7, #16]
 8009c5e:	3601      	adds	r6, #1
 8009c60:	4630      	mov	r0, r6
 8009c62:	b003      	add	sp, #12
 8009c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c68:	6812      	ldr	r2, [r2, #0]
 8009c6a:	3b04      	subs	r3, #4
 8009c6c:	2a00      	cmp	r2, #0
 8009c6e:	d1ca      	bne.n	8009c06 <quorem+0x9c>
 8009c70:	3c01      	subs	r4, #1
 8009c72:	e7c5      	b.n	8009c00 <quorem+0x96>
 8009c74:	6812      	ldr	r2, [r2, #0]
 8009c76:	3b04      	subs	r3, #4
 8009c78:	2a00      	cmp	r2, #0
 8009c7a:	d1ef      	bne.n	8009c5c <quorem+0xf2>
 8009c7c:	3c01      	subs	r4, #1
 8009c7e:	e7ea      	b.n	8009c56 <quorem+0xec>
 8009c80:	2000      	movs	r0, #0
 8009c82:	e7ee      	b.n	8009c62 <quorem+0xf8>
 8009c84:	0000      	movs	r0, r0
	...

08009c88 <_dtoa_r>:
 8009c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c8c:	69c7      	ldr	r7, [r0, #28]
 8009c8e:	b097      	sub	sp, #92	@ 0x5c
 8009c90:	4681      	mov	r9, r0
 8009c92:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8009c94:	9107      	str	r1, [sp, #28]
 8009c96:	920c      	str	r2, [sp, #48]	@ 0x30
 8009c98:	9311      	str	r3, [sp, #68]	@ 0x44
 8009c9a:	ec55 4b10 	vmov	r4, r5, d0
 8009c9e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8009ca2:	b97f      	cbnz	r7, 8009cc4 <_dtoa_r+0x3c>
 8009ca4:	2010      	movs	r0, #16
 8009ca6:	f001 f85b 	bl	800ad60 <malloc>
 8009caa:	4602      	mov	r2, r0
 8009cac:	f8c9 001c 	str.w	r0, [r9, #28]
 8009cb0:	b920      	cbnz	r0, 8009cbc <_dtoa_r+0x34>
 8009cb2:	4ba9      	ldr	r3, [pc, #676]	@ (8009f58 <_dtoa_r+0x2d0>)
 8009cb4:	21ef      	movs	r1, #239	@ 0xef
 8009cb6:	48a9      	ldr	r0, [pc, #676]	@ (8009f5c <_dtoa_r+0x2d4>)
 8009cb8:	f001 ff30 	bl	800bb1c <__assert_func>
 8009cbc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009cc0:	6007      	str	r7, [r0, #0]
 8009cc2:	60c7      	str	r7, [r0, #12]
 8009cc4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009cc8:	6819      	ldr	r1, [r3, #0]
 8009cca:	b159      	cbz	r1, 8009ce4 <_dtoa_r+0x5c>
 8009ccc:	685a      	ldr	r2, [r3, #4]
 8009cce:	2301      	movs	r3, #1
 8009cd0:	4648      	mov	r0, r9
 8009cd2:	4093      	lsls	r3, r2
 8009cd4:	604a      	str	r2, [r1, #4]
 8009cd6:	608b      	str	r3, [r1, #8]
 8009cd8:	f001 f9e4 	bl	800b0a4 <_Bfree>
 8009cdc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	601a      	str	r2, [r3, #0]
 8009ce4:	1e2b      	subs	r3, r5, #0
 8009ce6:	bfb7      	itett	lt
 8009ce8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009cec:	2300      	movge	r3, #0
 8009cee:	2201      	movlt	r2, #1
 8009cf0:	9305      	strlt	r3, [sp, #20]
 8009cf2:	bfa8      	it	ge
 8009cf4:	6033      	strge	r3, [r6, #0]
 8009cf6:	9f05      	ldr	r7, [sp, #20]
 8009cf8:	4b99      	ldr	r3, [pc, #612]	@ (8009f60 <_dtoa_r+0x2d8>)
 8009cfa:	bfb8      	it	lt
 8009cfc:	6032      	strlt	r2, [r6, #0]
 8009cfe:	43bb      	bics	r3, r7
 8009d00:	d112      	bne.n	8009d28 <_dtoa_r+0xa0>
 8009d02:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009d06:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009d08:	6013      	str	r3, [r2, #0]
 8009d0a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009d0e:	4323      	orrs	r3, r4
 8009d10:	f000 855a 	beq.w	800a7c8 <_dtoa_r+0xb40>
 8009d14:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009d16:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8009f74 <_dtoa_r+0x2ec>
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	f000 855c 	beq.w	800a7d8 <_dtoa_r+0xb50>
 8009d20:	f10a 0303 	add.w	r3, sl, #3
 8009d24:	f000 bd56 	b.w	800a7d4 <_dtoa_r+0xb4c>
 8009d28:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	2300      	movs	r3, #0
 8009d30:	ec51 0b17 	vmov	r0, r1, d7
 8009d34:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8009d38:	f7f6 feca 	bl	8000ad0 <__aeabi_dcmpeq>
 8009d3c:	4680      	mov	r8, r0
 8009d3e:	b158      	cbz	r0, 8009d58 <_dtoa_r+0xd0>
 8009d40:	2301      	movs	r3, #1
 8009d42:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009d44:	6013      	str	r3, [r2, #0]
 8009d46:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009d48:	b113      	cbz	r3, 8009d50 <_dtoa_r+0xc8>
 8009d4a:	4b86      	ldr	r3, [pc, #536]	@ (8009f64 <_dtoa_r+0x2dc>)
 8009d4c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009d4e:	6013      	str	r3, [r2, #0]
 8009d50:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8009f78 <_dtoa_r+0x2f0>
 8009d54:	f000 bd40 	b.w	800a7d8 <_dtoa_r+0xb50>
 8009d58:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009d5c:	aa14      	add	r2, sp, #80	@ 0x50
 8009d5e:	a915      	add	r1, sp, #84	@ 0x54
 8009d60:	4648      	mov	r0, r9
 8009d62:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8009d66:	f001 fc87 	bl	800b678 <__d2b>
 8009d6a:	9002      	str	r0, [sp, #8]
 8009d6c:	2e00      	cmp	r6, #0
 8009d6e:	d076      	beq.n	8009e5e <_dtoa_r+0x1d6>
 8009d70:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d72:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009d76:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8009d7a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d7e:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009d82:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009d86:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009d8a:	4619      	mov	r1, r3
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	4b76      	ldr	r3, [pc, #472]	@ (8009f68 <_dtoa_r+0x2e0>)
 8009d90:	f7f6 fa7e 	bl	8000290 <__aeabi_dsub>
 8009d94:	a36a      	add	r3, pc, #424	@ (adr r3, 8009f40 <_dtoa_r+0x2b8>)
 8009d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d9a:	f7f6 fc31 	bl	8000600 <__aeabi_dmul>
 8009d9e:	a36a      	add	r3, pc, #424	@ (adr r3, 8009f48 <_dtoa_r+0x2c0>)
 8009da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da4:	f7f6 fa76 	bl	8000294 <__adddf3>
 8009da8:	4604      	mov	r4, r0
 8009daa:	460d      	mov	r5, r1
 8009dac:	4630      	mov	r0, r6
 8009dae:	f7f6 fbbd 	bl	800052c <__aeabi_i2d>
 8009db2:	a367      	add	r3, pc, #412	@ (adr r3, 8009f50 <_dtoa_r+0x2c8>)
 8009db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009db8:	f7f6 fc22 	bl	8000600 <__aeabi_dmul>
 8009dbc:	4602      	mov	r2, r0
 8009dbe:	460b      	mov	r3, r1
 8009dc0:	4620      	mov	r0, r4
 8009dc2:	4629      	mov	r1, r5
 8009dc4:	f7f6 fa66 	bl	8000294 <__adddf3>
 8009dc8:	4604      	mov	r4, r0
 8009dca:	460d      	mov	r5, r1
 8009dcc:	f7f6 fec8 	bl	8000b60 <__aeabi_d2iz>
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	4607      	mov	r7, r0
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	4620      	mov	r0, r4
 8009dd8:	4629      	mov	r1, r5
 8009dda:	f7f6 fe83 	bl	8000ae4 <__aeabi_dcmplt>
 8009dde:	b140      	cbz	r0, 8009df2 <_dtoa_r+0x16a>
 8009de0:	4638      	mov	r0, r7
 8009de2:	f7f6 fba3 	bl	800052c <__aeabi_i2d>
 8009de6:	4622      	mov	r2, r4
 8009de8:	462b      	mov	r3, r5
 8009dea:	f7f6 fe71 	bl	8000ad0 <__aeabi_dcmpeq>
 8009dee:	b900      	cbnz	r0, 8009df2 <_dtoa_r+0x16a>
 8009df0:	3f01      	subs	r7, #1
 8009df2:	2f16      	cmp	r7, #22
 8009df4:	d852      	bhi.n	8009e9c <_dtoa_r+0x214>
 8009df6:	4b5d      	ldr	r3, [pc, #372]	@ (8009f6c <_dtoa_r+0x2e4>)
 8009df8:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009dfc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e04:	f7f6 fe6e 	bl	8000ae4 <__aeabi_dcmplt>
 8009e08:	2800      	cmp	r0, #0
 8009e0a:	d049      	beq.n	8009ea0 <_dtoa_r+0x218>
 8009e0c:	3f01      	subs	r7, #1
 8009e0e:	2300      	movs	r3, #0
 8009e10:	9310      	str	r3, [sp, #64]	@ 0x40
 8009e12:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009e14:	1b9b      	subs	r3, r3, r6
 8009e16:	1e5a      	subs	r2, r3, #1
 8009e18:	bf4c      	ite	mi
 8009e1a:	f1c3 0301 	rsbmi	r3, r3, #1
 8009e1e:	2300      	movpl	r3, #0
 8009e20:	9206      	str	r2, [sp, #24]
 8009e22:	bf45      	ittet	mi
 8009e24:	9300      	strmi	r3, [sp, #0]
 8009e26:	2300      	movmi	r3, #0
 8009e28:	9300      	strpl	r3, [sp, #0]
 8009e2a:	9306      	strmi	r3, [sp, #24]
 8009e2c:	2f00      	cmp	r7, #0
 8009e2e:	db39      	blt.n	8009ea4 <_dtoa_r+0x21c>
 8009e30:	9b06      	ldr	r3, [sp, #24]
 8009e32:	970d      	str	r7, [sp, #52]	@ 0x34
 8009e34:	443b      	add	r3, r7
 8009e36:	9306      	str	r3, [sp, #24]
 8009e38:	2300      	movs	r3, #0
 8009e3a:	9308      	str	r3, [sp, #32]
 8009e3c:	9b07      	ldr	r3, [sp, #28]
 8009e3e:	2b09      	cmp	r3, #9
 8009e40:	d863      	bhi.n	8009f0a <_dtoa_r+0x282>
 8009e42:	2b05      	cmp	r3, #5
 8009e44:	bfc5      	ittet	gt
 8009e46:	3b04      	subgt	r3, #4
 8009e48:	2400      	movgt	r4, #0
 8009e4a:	2401      	movle	r4, #1
 8009e4c:	9307      	strgt	r3, [sp, #28]
 8009e4e:	9b07      	ldr	r3, [sp, #28]
 8009e50:	3b02      	subs	r3, #2
 8009e52:	2b03      	cmp	r3, #3
 8009e54:	d865      	bhi.n	8009f22 <_dtoa_r+0x29a>
 8009e56:	e8df f003 	tbb	[pc, r3]
 8009e5a:	5654      	.short	0x5654
 8009e5c:	2d39      	.short	0x2d39
 8009e5e:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009e62:	441e      	add	r6, r3
 8009e64:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009e68:	2b20      	cmp	r3, #32
 8009e6a:	bfc9      	itett	gt
 8009e6c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009e70:	f1c3 0320 	rsble	r3, r3, #32
 8009e74:	409f      	lslgt	r7, r3
 8009e76:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009e7a:	bfd8      	it	le
 8009e7c:	fa04 f003 	lslle.w	r0, r4, r3
 8009e80:	f106 36ff 	add.w	r6, r6, #4294967295	@ 0xffffffff
 8009e84:	bfc4      	itt	gt
 8009e86:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009e8a:	ea47 0003 	orrgt.w	r0, r7, r3
 8009e8e:	f7f6 fb3d 	bl	800050c <__aeabi_ui2d>
 8009e92:	2201      	movs	r2, #1
 8009e94:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009e98:	9212      	str	r2, [sp, #72]	@ 0x48
 8009e9a:	e776      	b.n	8009d8a <_dtoa_r+0x102>
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	e7b7      	b.n	8009e10 <_dtoa_r+0x188>
 8009ea0:	9010      	str	r0, [sp, #64]	@ 0x40
 8009ea2:	e7b6      	b.n	8009e12 <_dtoa_r+0x18a>
 8009ea4:	9b00      	ldr	r3, [sp, #0]
 8009ea6:	1bdb      	subs	r3, r3, r7
 8009ea8:	9300      	str	r3, [sp, #0]
 8009eaa:	427b      	negs	r3, r7
 8009eac:	9308      	str	r3, [sp, #32]
 8009eae:	2300      	movs	r3, #0
 8009eb0:	930d      	str	r3, [sp, #52]	@ 0x34
 8009eb2:	e7c3      	b.n	8009e3c <_dtoa_r+0x1b4>
 8009eb4:	2301      	movs	r3, #1
 8009eb6:	9309      	str	r3, [sp, #36]	@ 0x24
 8009eb8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009eba:	eb07 0b03 	add.w	fp, r7, r3
 8009ebe:	f10b 0301 	add.w	r3, fp, #1
 8009ec2:	2b01      	cmp	r3, #1
 8009ec4:	9303      	str	r3, [sp, #12]
 8009ec6:	bfb8      	it	lt
 8009ec8:	2301      	movlt	r3, #1
 8009eca:	e006      	b.n	8009eda <_dtoa_r+0x252>
 8009ecc:	2301      	movs	r3, #1
 8009ece:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ed0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	dd28      	ble.n	8009f28 <_dtoa_r+0x2a0>
 8009ed6:	469b      	mov	fp, r3
 8009ed8:	9303      	str	r3, [sp, #12]
 8009eda:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8009ede:	2100      	movs	r1, #0
 8009ee0:	2204      	movs	r2, #4
 8009ee2:	f102 0514 	add.w	r5, r2, #20
 8009ee6:	429d      	cmp	r5, r3
 8009ee8:	d926      	bls.n	8009f38 <_dtoa_r+0x2b0>
 8009eea:	6041      	str	r1, [r0, #4]
 8009eec:	4648      	mov	r0, r9
 8009eee:	f001 f899 	bl	800b024 <_Balloc>
 8009ef2:	4682      	mov	sl, r0
 8009ef4:	2800      	cmp	r0, #0
 8009ef6:	d141      	bne.n	8009f7c <_dtoa_r+0x2f4>
 8009ef8:	4b1d      	ldr	r3, [pc, #116]	@ (8009f70 <_dtoa_r+0x2e8>)
 8009efa:	4602      	mov	r2, r0
 8009efc:	f240 11af 	movw	r1, #431	@ 0x1af
 8009f00:	e6d9      	b.n	8009cb6 <_dtoa_r+0x2e>
 8009f02:	2300      	movs	r3, #0
 8009f04:	e7e3      	b.n	8009ece <_dtoa_r+0x246>
 8009f06:	2300      	movs	r3, #0
 8009f08:	e7d5      	b.n	8009eb6 <_dtoa_r+0x22e>
 8009f0a:	2401      	movs	r4, #1
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	9409      	str	r4, [sp, #36]	@ 0x24
 8009f10:	9307      	str	r3, [sp, #28]
 8009f12:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8009f16:	2200      	movs	r2, #0
 8009f18:	2312      	movs	r3, #18
 8009f1a:	f8cd b00c 	str.w	fp, [sp, #12]
 8009f1e:	920c      	str	r2, [sp, #48]	@ 0x30
 8009f20:	e7db      	b.n	8009eda <_dtoa_r+0x252>
 8009f22:	2301      	movs	r3, #1
 8009f24:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f26:	e7f4      	b.n	8009f12 <_dtoa_r+0x28a>
 8009f28:	f04f 0b01 	mov.w	fp, #1
 8009f2c:	465b      	mov	r3, fp
 8009f2e:	f8cd b00c 	str.w	fp, [sp, #12]
 8009f32:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8009f36:	e7d0      	b.n	8009eda <_dtoa_r+0x252>
 8009f38:	3101      	adds	r1, #1
 8009f3a:	0052      	lsls	r2, r2, #1
 8009f3c:	e7d1      	b.n	8009ee2 <_dtoa_r+0x25a>
 8009f3e:	bf00      	nop
 8009f40:	636f4361 	.word	0x636f4361
 8009f44:	3fd287a7 	.word	0x3fd287a7
 8009f48:	8b60c8b3 	.word	0x8b60c8b3
 8009f4c:	3fc68a28 	.word	0x3fc68a28
 8009f50:	509f79fb 	.word	0x509f79fb
 8009f54:	3fd34413 	.word	0x3fd34413
 8009f58:	08022e19 	.word	0x08022e19
 8009f5c:	08022e30 	.word	0x08022e30
 8009f60:	7ff00000 	.word	0x7ff00000
 8009f64:	08022de9 	.word	0x08022de9
 8009f68:	3ff80000 	.word	0x3ff80000
 8009f6c:	08022f80 	.word	0x08022f80
 8009f70:	08022e88 	.word	0x08022e88
 8009f74:	08022e15 	.word	0x08022e15
 8009f78:	08022de8 	.word	0x08022de8
 8009f7c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009f80:	6018      	str	r0, [r3, #0]
 8009f82:	9b03      	ldr	r3, [sp, #12]
 8009f84:	2b0e      	cmp	r3, #14
 8009f86:	f200 80a1 	bhi.w	800a0cc <_dtoa_r+0x444>
 8009f8a:	2c00      	cmp	r4, #0
 8009f8c:	f000 809e 	beq.w	800a0cc <_dtoa_r+0x444>
 8009f90:	2f00      	cmp	r7, #0
 8009f92:	dd33      	ble.n	8009ffc <_dtoa_r+0x374>
 8009f94:	f007 020f 	and.w	r2, r7, #15
 8009f98:	4b9b      	ldr	r3, [pc, #620]	@ (800a208 <_dtoa_r+0x580>)
 8009f9a:	05f8      	lsls	r0, r7, #23
 8009f9c:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009fa0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009fa4:	ed93 7b00 	vldr	d7, [r3]
 8009fa8:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8009fac:	d516      	bpl.n	8009fdc <_dtoa_r+0x354>
 8009fae:	4b97      	ldr	r3, [pc, #604]	@ (800a20c <_dtoa_r+0x584>)
 8009fb0:	f004 040f 	and.w	r4, r4, #15
 8009fb4:	2603      	movs	r6, #3
 8009fb6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009fba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009fbe:	f7f6 fc49 	bl	8000854 <__aeabi_ddiv>
 8009fc2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009fc6:	4d91      	ldr	r5, [pc, #580]	@ (800a20c <_dtoa_r+0x584>)
 8009fc8:	b954      	cbnz	r4, 8009fe0 <_dtoa_r+0x358>
 8009fca:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009fce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009fd2:	f7f6 fc3f 	bl	8000854 <__aeabi_ddiv>
 8009fd6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009fda:	e028      	b.n	800a02e <_dtoa_r+0x3a6>
 8009fdc:	2602      	movs	r6, #2
 8009fde:	e7f2      	b.n	8009fc6 <_dtoa_r+0x33e>
 8009fe0:	07e1      	lsls	r1, r4, #31
 8009fe2:	d508      	bpl.n	8009ff6 <_dtoa_r+0x36e>
 8009fe4:	3601      	adds	r6, #1
 8009fe6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009fea:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009fee:	f7f6 fb07 	bl	8000600 <__aeabi_dmul>
 8009ff2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009ff6:	1064      	asrs	r4, r4, #1
 8009ff8:	3508      	adds	r5, #8
 8009ffa:	e7e5      	b.n	8009fc8 <_dtoa_r+0x340>
 8009ffc:	f000 80af 	beq.w	800a15e <_dtoa_r+0x4d6>
 800a000:	427c      	negs	r4, r7
 800a002:	4b81      	ldr	r3, [pc, #516]	@ (800a208 <_dtoa_r+0x580>)
 800a004:	4d81      	ldr	r5, [pc, #516]	@ (800a20c <_dtoa_r+0x584>)
 800a006:	2602      	movs	r6, #2
 800a008:	f004 020f 	and.w	r2, r4, #15
 800a00c:	1124      	asrs	r4, r4, #4
 800a00e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a012:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a01a:	f7f6 faf1 	bl	8000600 <__aeabi_dmul>
 800a01e:	2300      	movs	r3, #0
 800a020:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a024:	2c00      	cmp	r4, #0
 800a026:	f040 808f 	bne.w	800a148 <_dtoa_r+0x4c0>
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d1d3      	bne.n	8009fd6 <_dtoa_r+0x34e>
 800a02e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a030:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800a034:	2b00      	cmp	r3, #0
 800a036:	f000 8094 	beq.w	800a162 <_dtoa_r+0x4da>
 800a03a:	2200      	movs	r2, #0
 800a03c:	4b74      	ldr	r3, [pc, #464]	@ (800a210 <_dtoa_r+0x588>)
 800a03e:	4620      	mov	r0, r4
 800a040:	4629      	mov	r1, r5
 800a042:	f7f6 fd4f 	bl	8000ae4 <__aeabi_dcmplt>
 800a046:	2800      	cmp	r0, #0
 800a048:	f000 808b 	beq.w	800a162 <_dtoa_r+0x4da>
 800a04c:	9b03      	ldr	r3, [sp, #12]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	f000 8087 	beq.w	800a162 <_dtoa_r+0x4da>
 800a054:	f1bb 0f00 	cmp.w	fp, #0
 800a058:	dd34      	ble.n	800a0c4 <_dtoa_r+0x43c>
 800a05a:	4620      	mov	r0, r4
 800a05c:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800a060:	3601      	adds	r6, #1
 800a062:	465c      	mov	r4, fp
 800a064:	2200      	movs	r2, #0
 800a066:	4b6b      	ldr	r3, [pc, #428]	@ (800a214 <_dtoa_r+0x58c>)
 800a068:	4629      	mov	r1, r5
 800a06a:	f7f6 fac9 	bl	8000600 <__aeabi_dmul>
 800a06e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a072:	4630      	mov	r0, r6
 800a074:	f7f6 fa5a 	bl	800052c <__aeabi_i2d>
 800a078:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a07c:	f7f6 fac0 	bl	8000600 <__aeabi_dmul>
 800a080:	2200      	movs	r2, #0
 800a082:	4b65      	ldr	r3, [pc, #404]	@ (800a218 <_dtoa_r+0x590>)
 800a084:	f7f6 f906 	bl	8000294 <__adddf3>
 800a088:	4605      	mov	r5, r0
 800a08a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a08e:	2c00      	cmp	r4, #0
 800a090:	d16a      	bne.n	800a168 <_dtoa_r+0x4e0>
 800a092:	2200      	movs	r2, #0
 800a094:	4b61      	ldr	r3, [pc, #388]	@ (800a21c <_dtoa_r+0x594>)
 800a096:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a09a:	f7f6 f8f9 	bl	8000290 <__aeabi_dsub>
 800a09e:	4602      	mov	r2, r0
 800a0a0:	460b      	mov	r3, r1
 800a0a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a0a6:	462a      	mov	r2, r5
 800a0a8:	4633      	mov	r3, r6
 800a0aa:	f7f6 fd39 	bl	8000b20 <__aeabi_dcmpgt>
 800a0ae:	2800      	cmp	r0, #0
 800a0b0:	f040 8298 	bne.w	800a5e4 <_dtoa_r+0x95c>
 800a0b4:	462a      	mov	r2, r5
 800a0b6:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a0ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a0be:	f7f6 fd11 	bl	8000ae4 <__aeabi_dcmplt>
 800a0c2:	bb38      	cbnz	r0, 800a114 <_dtoa_r+0x48c>
 800a0c4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800a0c8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a0cc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	f2c0 8157 	blt.w	800a382 <_dtoa_r+0x6fa>
 800a0d4:	2f0e      	cmp	r7, #14
 800a0d6:	f300 8154 	bgt.w	800a382 <_dtoa_r+0x6fa>
 800a0da:	4b4b      	ldr	r3, [pc, #300]	@ (800a208 <_dtoa_r+0x580>)
 800a0dc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a0e0:	ed93 7b00 	vldr	d7, [r3]
 800a0e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	ed8d 7b00 	vstr	d7, [sp]
 800a0ec:	f280 80e5 	bge.w	800a2ba <_dtoa_r+0x632>
 800a0f0:	9b03      	ldr	r3, [sp, #12]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	f300 80e1 	bgt.w	800a2ba <_dtoa_r+0x632>
 800a0f8:	d10c      	bne.n	800a114 <_dtoa_r+0x48c>
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	4b47      	ldr	r3, [pc, #284]	@ (800a21c <_dtoa_r+0x594>)
 800a0fe:	ec51 0b17 	vmov	r0, r1, d7
 800a102:	f7f6 fa7d 	bl	8000600 <__aeabi_dmul>
 800a106:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a10a:	f7f6 fcff 	bl	8000b0c <__aeabi_dcmpge>
 800a10e:	2800      	cmp	r0, #0
 800a110:	f000 8266 	beq.w	800a5e0 <_dtoa_r+0x958>
 800a114:	2400      	movs	r4, #0
 800a116:	4625      	mov	r5, r4
 800a118:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a11a:	4656      	mov	r6, sl
 800a11c:	ea6f 0803 	mvn.w	r8, r3
 800a120:	2700      	movs	r7, #0
 800a122:	4621      	mov	r1, r4
 800a124:	4648      	mov	r0, r9
 800a126:	f000 ffbd 	bl	800b0a4 <_Bfree>
 800a12a:	2d00      	cmp	r5, #0
 800a12c:	f000 80bd 	beq.w	800a2aa <_dtoa_r+0x622>
 800a130:	b12f      	cbz	r7, 800a13e <_dtoa_r+0x4b6>
 800a132:	42af      	cmp	r7, r5
 800a134:	d003      	beq.n	800a13e <_dtoa_r+0x4b6>
 800a136:	4639      	mov	r1, r7
 800a138:	4648      	mov	r0, r9
 800a13a:	f000 ffb3 	bl	800b0a4 <_Bfree>
 800a13e:	4629      	mov	r1, r5
 800a140:	4648      	mov	r0, r9
 800a142:	f000 ffaf 	bl	800b0a4 <_Bfree>
 800a146:	e0b0      	b.n	800a2aa <_dtoa_r+0x622>
 800a148:	07e2      	lsls	r2, r4, #31
 800a14a:	d505      	bpl.n	800a158 <_dtoa_r+0x4d0>
 800a14c:	3601      	adds	r6, #1
 800a14e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a152:	f7f6 fa55 	bl	8000600 <__aeabi_dmul>
 800a156:	2301      	movs	r3, #1
 800a158:	1064      	asrs	r4, r4, #1
 800a15a:	3508      	adds	r5, #8
 800a15c:	e762      	b.n	800a024 <_dtoa_r+0x39c>
 800a15e:	2602      	movs	r6, #2
 800a160:	e765      	b.n	800a02e <_dtoa_r+0x3a6>
 800a162:	46b8      	mov	r8, r7
 800a164:	9c03      	ldr	r4, [sp, #12]
 800a166:	e784      	b.n	800a072 <_dtoa_r+0x3ea>
 800a168:	4b27      	ldr	r3, [pc, #156]	@ (800a208 <_dtoa_r+0x580>)
 800a16a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a16c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a170:	4454      	add	r4, sl
 800a172:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a176:	2900      	cmp	r1, #0
 800a178:	d054      	beq.n	800a224 <_dtoa_r+0x59c>
 800a17a:	2000      	movs	r0, #0
 800a17c:	4928      	ldr	r1, [pc, #160]	@ (800a220 <_dtoa_r+0x598>)
 800a17e:	f7f6 fb69 	bl	8000854 <__aeabi_ddiv>
 800a182:	4633      	mov	r3, r6
 800a184:	4656      	mov	r6, sl
 800a186:	462a      	mov	r2, r5
 800a188:	f7f6 f882 	bl	8000290 <__aeabi_dsub>
 800a18c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a190:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a194:	f7f6 fce4 	bl	8000b60 <__aeabi_d2iz>
 800a198:	4605      	mov	r5, r0
 800a19a:	f7f6 f9c7 	bl	800052c <__aeabi_i2d>
 800a19e:	4602      	mov	r2, r0
 800a1a0:	460b      	mov	r3, r1
 800a1a2:	3530      	adds	r5, #48	@ 0x30
 800a1a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a1a8:	f7f6 f872 	bl	8000290 <__aeabi_dsub>
 800a1ac:	4602      	mov	r2, r0
 800a1ae:	460b      	mov	r3, r1
 800a1b0:	f806 5b01 	strb.w	r5, [r6], #1
 800a1b4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a1b8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a1bc:	f7f6 fc92 	bl	8000ae4 <__aeabi_dcmplt>
 800a1c0:	2800      	cmp	r0, #0
 800a1c2:	d172      	bne.n	800a2aa <_dtoa_r+0x622>
 800a1c4:	2000      	movs	r0, #0
 800a1c6:	4912      	ldr	r1, [pc, #72]	@ (800a210 <_dtoa_r+0x588>)
 800a1c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a1cc:	f7f6 f860 	bl	8000290 <__aeabi_dsub>
 800a1d0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a1d4:	f7f6 fc86 	bl	8000ae4 <__aeabi_dcmplt>
 800a1d8:	2800      	cmp	r0, #0
 800a1da:	f040 80b4 	bne.w	800a346 <_dtoa_r+0x6be>
 800a1de:	42a6      	cmp	r6, r4
 800a1e0:	f43f af70 	beq.w	800a0c4 <_dtoa_r+0x43c>
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	4b0b      	ldr	r3, [pc, #44]	@ (800a214 <_dtoa_r+0x58c>)
 800a1e8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a1ec:	f7f6 fa08 	bl	8000600 <__aeabi_dmul>
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	4b08      	ldr	r3, [pc, #32]	@ (800a214 <_dtoa_r+0x58c>)
 800a1f4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a1f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a1fc:	f7f6 fa00 	bl	8000600 <__aeabi_dmul>
 800a200:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a204:	e7c4      	b.n	800a190 <_dtoa_r+0x508>
 800a206:	bf00      	nop
 800a208:	08022f80 	.word	0x08022f80
 800a20c:	08022f58 	.word	0x08022f58
 800a210:	3ff00000 	.word	0x3ff00000
 800a214:	40240000 	.word	0x40240000
 800a218:	401c0000 	.word	0x401c0000
 800a21c:	40140000 	.word	0x40140000
 800a220:	3fe00000 	.word	0x3fe00000
 800a224:	4631      	mov	r1, r6
 800a226:	4656      	mov	r6, sl
 800a228:	4628      	mov	r0, r5
 800a22a:	f7f6 f9e9 	bl	8000600 <__aeabi_dmul>
 800a22e:	9413      	str	r4, [sp, #76]	@ 0x4c
 800a230:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a234:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a238:	f7f6 fc92 	bl	8000b60 <__aeabi_d2iz>
 800a23c:	4605      	mov	r5, r0
 800a23e:	f7f6 f975 	bl	800052c <__aeabi_i2d>
 800a242:	4602      	mov	r2, r0
 800a244:	3530      	adds	r5, #48	@ 0x30
 800a246:	460b      	mov	r3, r1
 800a248:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a24c:	f7f6 f820 	bl	8000290 <__aeabi_dsub>
 800a250:	f806 5b01 	strb.w	r5, [r6], #1
 800a254:	4602      	mov	r2, r0
 800a256:	460b      	mov	r3, r1
 800a258:	42a6      	cmp	r6, r4
 800a25a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a25e:	f04f 0200 	mov.w	r2, #0
 800a262:	d124      	bne.n	800a2ae <_dtoa_r+0x626>
 800a264:	4baf      	ldr	r3, [pc, #700]	@ (800a524 <_dtoa_r+0x89c>)
 800a266:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a26a:	f7f6 f813 	bl	8000294 <__adddf3>
 800a26e:	4602      	mov	r2, r0
 800a270:	460b      	mov	r3, r1
 800a272:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a276:	f7f6 fc53 	bl	8000b20 <__aeabi_dcmpgt>
 800a27a:	2800      	cmp	r0, #0
 800a27c:	d163      	bne.n	800a346 <_dtoa_r+0x6be>
 800a27e:	2000      	movs	r0, #0
 800a280:	49a8      	ldr	r1, [pc, #672]	@ (800a524 <_dtoa_r+0x89c>)
 800a282:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a286:	f7f6 f803 	bl	8000290 <__aeabi_dsub>
 800a28a:	4602      	mov	r2, r0
 800a28c:	460b      	mov	r3, r1
 800a28e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a292:	f7f6 fc27 	bl	8000ae4 <__aeabi_dcmplt>
 800a296:	2800      	cmp	r0, #0
 800a298:	f43f af14 	beq.w	800a0c4 <_dtoa_r+0x43c>
 800a29c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800a29e:	1e73      	subs	r3, r6, #1
 800a2a0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a2a2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a2a6:	2b30      	cmp	r3, #48	@ 0x30
 800a2a8:	d0f8      	beq.n	800a29c <_dtoa_r+0x614>
 800a2aa:	4647      	mov	r7, r8
 800a2ac:	e03b      	b.n	800a326 <_dtoa_r+0x69e>
 800a2ae:	4b9e      	ldr	r3, [pc, #632]	@ (800a528 <_dtoa_r+0x8a0>)
 800a2b0:	f7f6 f9a6 	bl	8000600 <__aeabi_dmul>
 800a2b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a2b8:	e7bc      	b.n	800a234 <_dtoa_r+0x5ac>
 800a2ba:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800a2be:	4656      	mov	r6, sl
 800a2c0:	4620      	mov	r0, r4
 800a2c2:	4629      	mov	r1, r5
 800a2c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a2c8:	f7f6 fac4 	bl	8000854 <__aeabi_ddiv>
 800a2cc:	f7f6 fc48 	bl	8000b60 <__aeabi_d2iz>
 800a2d0:	4680      	mov	r8, r0
 800a2d2:	f7f6 f92b 	bl	800052c <__aeabi_i2d>
 800a2d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a2da:	f7f6 f991 	bl	8000600 <__aeabi_dmul>
 800a2de:	4602      	mov	r2, r0
 800a2e0:	4620      	mov	r0, r4
 800a2e2:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a2e6:	460b      	mov	r3, r1
 800a2e8:	4629      	mov	r1, r5
 800a2ea:	f7f5 ffd1 	bl	8000290 <__aeabi_dsub>
 800a2ee:	9d03      	ldr	r5, [sp, #12]
 800a2f0:	f806 4b01 	strb.w	r4, [r6], #1
 800a2f4:	eba6 040a 	sub.w	r4, r6, sl
 800a2f8:	4602      	mov	r2, r0
 800a2fa:	460b      	mov	r3, r1
 800a2fc:	42a5      	cmp	r5, r4
 800a2fe:	d133      	bne.n	800a368 <_dtoa_r+0x6e0>
 800a300:	f7f5 ffc8 	bl	8000294 <__adddf3>
 800a304:	4604      	mov	r4, r0
 800a306:	460d      	mov	r5, r1
 800a308:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a30c:	f7f6 fc08 	bl	8000b20 <__aeabi_dcmpgt>
 800a310:	b9c0      	cbnz	r0, 800a344 <_dtoa_r+0x6bc>
 800a312:	4620      	mov	r0, r4
 800a314:	4629      	mov	r1, r5
 800a316:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a31a:	f7f6 fbd9 	bl	8000ad0 <__aeabi_dcmpeq>
 800a31e:	b110      	cbz	r0, 800a326 <_dtoa_r+0x69e>
 800a320:	f018 0f01 	tst.w	r8, #1
 800a324:	d10e      	bne.n	800a344 <_dtoa_r+0x6bc>
 800a326:	9902      	ldr	r1, [sp, #8]
 800a328:	4648      	mov	r0, r9
 800a32a:	f000 febb 	bl	800b0a4 <_Bfree>
 800a32e:	2300      	movs	r3, #0
 800a330:	3701      	adds	r7, #1
 800a332:	7033      	strb	r3, [r6, #0]
 800a334:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a336:	601f      	str	r7, [r3, #0]
 800a338:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	f000 824c 	beq.w	800a7d8 <_dtoa_r+0xb50>
 800a340:	601e      	str	r6, [r3, #0]
 800a342:	e249      	b.n	800a7d8 <_dtoa_r+0xb50>
 800a344:	46b8      	mov	r8, r7
 800a346:	4633      	mov	r3, r6
 800a348:	461e      	mov	r6, r3
 800a34a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a34e:	2a39      	cmp	r2, #57	@ 0x39
 800a350:	d106      	bne.n	800a360 <_dtoa_r+0x6d8>
 800a352:	459a      	cmp	sl, r3
 800a354:	d1f8      	bne.n	800a348 <_dtoa_r+0x6c0>
 800a356:	2230      	movs	r2, #48	@ 0x30
 800a358:	f108 0801 	add.w	r8, r8, #1
 800a35c:	f88a 2000 	strb.w	r2, [sl]
 800a360:	781a      	ldrb	r2, [r3, #0]
 800a362:	3201      	adds	r2, #1
 800a364:	701a      	strb	r2, [r3, #0]
 800a366:	e7a0      	b.n	800a2aa <_dtoa_r+0x622>
 800a368:	2200      	movs	r2, #0
 800a36a:	4b6f      	ldr	r3, [pc, #444]	@ (800a528 <_dtoa_r+0x8a0>)
 800a36c:	f7f6 f948 	bl	8000600 <__aeabi_dmul>
 800a370:	2200      	movs	r2, #0
 800a372:	2300      	movs	r3, #0
 800a374:	4604      	mov	r4, r0
 800a376:	460d      	mov	r5, r1
 800a378:	f7f6 fbaa 	bl	8000ad0 <__aeabi_dcmpeq>
 800a37c:	2800      	cmp	r0, #0
 800a37e:	d09f      	beq.n	800a2c0 <_dtoa_r+0x638>
 800a380:	e7d1      	b.n	800a326 <_dtoa_r+0x69e>
 800a382:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a384:	2a00      	cmp	r2, #0
 800a386:	f000 80ea 	beq.w	800a55e <_dtoa_r+0x8d6>
 800a38a:	9a07      	ldr	r2, [sp, #28]
 800a38c:	2a01      	cmp	r2, #1
 800a38e:	f300 80cd 	bgt.w	800a52c <_dtoa_r+0x8a4>
 800a392:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a394:	2a00      	cmp	r2, #0
 800a396:	f000 80c1 	beq.w	800a51c <_dtoa_r+0x894>
 800a39a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a39e:	9c08      	ldr	r4, [sp, #32]
 800a3a0:	9e00      	ldr	r6, [sp, #0]
 800a3a2:	9a00      	ldr	r2, [sp, #0]
 800a3a4:	2101      	movs	r1, #1
 800a3a6:	4648      	mov	r0, r9
 800a3a8:	441a      	add	r2, r3
 800a3aa:	9200      	str	r2, [sp, #0]
 800a3ac:	9a06      	ldr	r2, [sp, #24]
 800a3ae:	441a      	add	r2, r3
 800a3b0:	9206      	str	r2, [sp, #24]
 800a3b2:	f000 ff2d 	bl	800b210 <__i2b>
 800a3b6:	4605      	mov	r5, r0
 800a3b8:	b166      	cbz	r6, 800a3d4 <_dtoa_r+0x74c>
 800a3ba:	9b06      	ldr	r3, [sp, #24]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	dd09      	ble.n	800a3d4 <_dtoa_r+0x74c>
 800a3c0:	42b3      	cmp	r3, r6
 800a3c2:	9a00      	ldr	r2, [sp, #0]
 800a3c4:	bfa8      	it	ge
 800a3c6:	4633      	movge	r3, r6
 800a3c8:	1ad2      	subs	r2, r2, r3
 800a3ca:	1af6      	subs	r6, r6, r3
 800a3cc:	9200      	str	r2, [sp, #0]
 800a3ce:	9a06      	ldr	r2, [sp, #24]
 800a3d0:	1ad3      	subs	r3, r2, r3
 800a3d2:	9306      	str	r3, [sp, #24]
 800a3d4:	9b08      	ldr	r3, [sp, #32]
 800a3d6:	b30b      	cbz	r3, 800a41c <_dtoa_r+0x794>
 800a3d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	f000 80c6 	beq.w	800a56c <_dtoa_r+0x8e4>
 800a3e0:	2c00      	cmp	r4, #0
 800a3e2:	f000 80c0 	beq.w	800a566 <_dtoa_r+0x8de>
 800a3e6:	4629      	mov	r1, r5
 800a3e8:	4622      	mov	r2, r4
 800a3ea:	4648      	mov	r0, r9
 800a3ec:	f000 ffca 	bl	800b384 <__pow5mult>
 800a3f0:	9a02      	ldr	r2, [sp, #8]
 800a3f2:	4601      	mov	r1, r0
 800a3f4:	4605      	mov	r5, r0
 800a3f6:	4648      	mov	r0, r9
 800a3f8:	f000 ff20 	bl	800b23c <__multiply>
 800a3fc:	9902      	ldr	r1, [sp, #8]
 800a3fe:	4680      	mov	r8, r0
 800a400:	4648      	mov	r0, r9
 800a402:	f000 fe4f 	bl	800b0a4 <_Bfree>
 800a406:	9b08      	ldr	r3, [sp, #32]
 800a408:	1b1b      	subs	r3, r3, r4
 800a40a:	9308      	str	r3, [sp, #32]
 800a40c:	f000 80b1 	beq.w	800a572 <_dtoa_r+0x8ea>
 800a410:	9a08      	ldr	r2, [sp, #32]
 800a412:	4641      	mov	r1, r8
 800a414:	4648      	mov	r0, r9
 800a416:	f000 ffb5 	bl	800b384 <__pow5mult>
 800a41a:	9002      	str	r0, [sp, #8]
 800a41c:	2101      	movs	r1, #1
 800a41e:	4648      	mov	r0, r9
 800a420:	f000 fef6 	bl	800b210 <__i2b>
 800a424:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a426:	4604      	mov	r4, r0
 800a428:	2b00      	cmp	r3, #0
 800a42a:	f000 81d9 	beq.w	800a7e0 <_dtoa_r+0xb58>
 800a42e:	461a      	mov	r2, r3
 800a430:	4601      	mov	r1, r0
 800a432:	4648      	mov	r0, r9
 800a434:	f000 ffa6 	bl	800b384 <__pow5mult>
 800a438:	9b07      	ldr	r3, [sp, #28]
 800a43a:	4604      	mov	r4, r0
 800a43c:	2b01      	cmp	r3, #1
 800a43e:	f300 809f 	bgt.w	800a580 <_dtoa_r+0x8f8>
 800a442:	9b04      	ldr	r3, [sp, #16]
 800a444:	2b00      	cmp	r3, #0
 800a446:	f040 8097 	bne.w	800a578 <_dtoa_r+0x8f0>
 800a44a:	9b05      	ldr	r3, [sp, #20]
 800a44c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a450:	2b00      	cmp	r3, #0
 800a452:	f040 8093 	bne.w	800a57c <_dtoa_r+0x8f4>
 800a456:	9b05      	ldr	r3, [sp, #20]
 800a458:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a45c:	0d1b      	lsrs	r3, r3, #20
 800a45e:	051b      	lsls	r3, r3, #20
 800a460:	b133      	cbz	r3, 800a470 <_dtoa_r+0x7e8>
 800a462:	9b00      	ldr	r3, [sp, #0]
 800a464:	3301      	adds	r3, #1
 800a466:	9300      	str	r3, [sp, #0]
 800a468:	9b06      	ldr	r3, [sp, #24]
 800a46a:	3301      	adds	r3, #1
 800a46c:	9306      	str	r3, [sp, #24]
 800a46e:	2301      	movs	r3, #1
 800a470:	9308      	str	r3, [sp, #32]
 800a472:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a474:	2b00      	cmp	r3, #0
 800a476:	f000 81b9 	beq.w	800a7ec <_dtoa_r+0xb64>
 800a47a:	6923      	ldr	r3, [r4, #16]
 800a47c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a480:	6918      	ldr	r0, [r3, #16]
 800a482:	f000 fe79 	bl	800b178 <__hi0bits>
 800a486:	f1c0 0020 	rsb	r0, r0, #32
 800a48a:	9b06      	ldr	r3, [sp, #24]
 800a48c:	4418      	add	r0, r3
 800a48e:	f010 001f 	ands.w	r0, r0, #31
 800a492:	f000 8082 	beq.w	800a59a <_dtoa_r+0x912>
 800a496:	f1c0 0320 	rsb	r3, r0, #32
 800a49a:	2b04      	cmp	r3, #4
 800a49c:	dd73      	ble.n	800a586 <_dtoa_r+0x8fe>
 800a49e:	f1c0 001c 	rsb	r0, r0, #28
 800a4a2:	9b00      	ldr	r3, [sp, #0]
 800a4a4:	4403      	add	r3, r0
 800a4a6:	4406      	add	r6, r0
 800a4a8:	9300      	str	r3, [sp, #0]
 800a4aa:	9b06      	ldr	r3, [sp, #24]
 800a4ac:	4403      	add	r3, r0
 800a4ae:	9306      	str	r3, [sp, #24]
 800a4b0:	9b00      	ldr	r3, [sp, #0]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	dd05      	ble.n	800a4c2 <_dtoa_r+0x83a>
 800a4b6:	461a      	mov	r2, r3
 800a4b8:	9902      	ldr	r1, [sp, #8]
 800a4ba:	4648      	mov	r0, r9
 800a4bc:	f000 ffbc 	bl	800b438 <__lshift>
 800a4c0:	9002      	str	r0, [sp, #8]
 800a4c2:	9b06      	ldr	r3, [sp, #24]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	dd05      	ble.n	800a4d4 <_dtoa_r+0x84c>
 800a4c8:	4621      	mov	r1, r4
 800a4ca:	461a      	mov	r2, r3
 800a4cc:	4648      	mov	r0, r9
 800a4ce:	f000 ffb3 	bl	800b438 <__lshift>
 800a4d2:	4604      	mov	r4, r0
 800a4d4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d061      	beq.n	800a59e <_dtoa_r+0x916>
 800a4da:	4621      	mov	r1, r4
 800a4dc:	9802      	ldr	r0, [sp, #8]
 800a4de:	f001 f817 	bl	800b510 <__mcmp>
 800a4e2:	2800      	cmp	r0, #0
 800a4e4:	da5b      	bge.n	800a59e <_dtoa_r+0x916>
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	220a      	movs	r2, #10
 800a4ea:	9902      	ldr	r1, [sp, #8]
 800a4ec:	4648      	mov	r0, r9
 800a4ee:	f000 fdfb 	bl	800b0e8 <__multadd>
 800a4f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4f4:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800a4f8:	9002      	str	r0, [sp, #8]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	f000 8178 	beq.w	800a7f0 <_dtoa_r+0xb68>
 800a500:	4629      	mov	r1, r5
 800a502:	2300      	movs	r3, #0
 800a504:	220a      	movs	r2, #10
 800a506:	4648      	mov	r0, r9
 800a508:	f000 fdee 	bl	800b0e8 <__multadd>
 800a50c:	f1bb 0f00 	cmp.w	fp, #0
 800a510:	4605      	mov	r5, r0
 800a512:	dc6f      	bgt.n	800a5f4 <_dtoa_r+0x96c>
 800a514:	9b07      	ldr	r3, [sp, #28]
 800a516:	2b02      	cmp	r3, #2
 800a518:	dc49      	bgt.n	800a5ae <_dtoa_r+0x926>
 800a51a:	e06b      	b.n	800a5f4 <_dtoa_r+0x96c>
 800a51c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a51e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a522:	e73c      	b.n	800a39e <_dtoa_r+0x716>
 800a524:	3fe00000 	.word	0x3fe00000
 800a528:	40240000 	.word	0x40240000
 800a52c:	9b03      	ldr	r3, [sp, #12]
 800a52e:	1e5c      	subs	r4, r3, #1
 800a530:	9b08      	ldr	r3, [sp, #32]
 800a532:	42a3      	cmp	r3, r4
 800a534:	db09      	blt.n	800a54a <_dtoa_r+0x8c2>
 800a536:	1b1c      	subs	r4, r3, r4
 800a538:	9b03      	ldr	r3, [sp, #12]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	f6bf af30 	bge.w	800a3a0 <_dtoa_r+0x718>
 800a540:	9b00      	ldr	r3, [sp, #0]
 800a542:	9a03      	ldr	r2, [sp, #12]
 800a544:	1a9e      	subs	r6, r3, r2
 800a546:	2300      	movs	r3, #0
 800a548:	e72b      	b.n	800a3a2 <_dtoa_r+0x71a>
 800a54a:	9b08      	ldr	r3, [sp, #32]
 800a54c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a54e:	1ae3      	subs	r3, r4, r3
 800a550:	9408      	str	r4, [sp, #32]
 800a552:	9e00      	ldr	r6, [sp, #0]
 800a554:	2400      	movs	r4, #0
 800a556:	441a      	add	r2, r3
 800a558:	9b03      	ldr	r3, [sp, #12]
 800a55a:	920d      	str	r2, [sp, #52]	@ 0x34
 800a55c:	e721      	b.n	800a3a2 <_dtoa_r+0x71a>
 800a55e:	9c08      	ldr	r4, [sp, #32]
 800a560:	9e00      	ldr	r6, [sp, #0]
 800a562:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800a564:	e728      	b.n	800a3b8 <_dtoa_r+0x730>
 800a566:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800a56a:	e751      	b.n	800a410 <_dtoa_r+0x788>
 800a56c:	9a08      	ldr	r2, [sp, #32]
 800a56e:	9902      	ldr	r1, [sp, #8]
 800a570:	e750      	b.n	800a414 <_dtoa_r+0x78c>
 800a572:	f8cd 8008 	str.w	r8, [sp, #8]
 800a576:	e751      	b.n	800a41c <_dtoa_r+0x794>
 800a578:	2300      	movs	r3, #0
 800a57a:	e779      	b.n	800a470 <_dtoa_r+0x7e8>
 800a57c:	9b04      	ldr	r3, [sp, #16]
 800a57e:	e777      	b.n	800a470 <_dtoa_r+0x7e8>
 800a580:	2300      	movs	r3, #0
 800a582:	9308      	str	r3, [sp, #32]
 800a584:	e779      	b.n	800a47a <_dtoa_r+0x7f2>
 800a586:	d093      	beq.n	800a4b0 <_dtoa_r+0x828>
 800a588:	331c      	adds	r3, #28
 800a58a:	9a00      	ldr	r2, [sp, #0]
 800a58c:	441a      	add	r2, r3
 800a58e:	441e      	add	r6, r3
 800a590:	9200      	str	r2, [sp, #0]
 800a592:	9a06      	ldr	r2, [sp, #24]
 800a594:	441a      	add	r2, r3
 800a596:	9206      	str	r2, [sp, #24]
 800a598:	e78a      	b.n	800a4b0 <_dtoa_r+0x828>
 800a59a:	4603      	mov	r3, r0
 800a59c:	e7f4      	b.n	800a588 <_dtoa_r+0x900>
 800a59e:	9b03      	ldr	r3, [sp, #12]
 800a5a0:	46b8      	mov	r8, r7
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	dc20      	bgt.n	800a5e8 <_dtoa_r+0x960>
 800a5a6:	469b      	mov	fp, r3
 800a5a8:	9b07      	ldr	r3, [sp, #28]
 800a5aa:	2b02      	cmp	r3, #2
 800a5ac:	dd1e      	ble.n	800a5ec <_dtoa_r+0x964>
 800a5ae:	f1bb 0f00 	cmp.w	fp, #0
 800a5b2:	f47f adb1 	bne.w	800a118 <_dtoa_r+0x490>
 800a5b6:	4621      	mov	r1, r4
 800a5b8:	465b      	mov	r3, fp
 800a5ba:	2205      	movs	r2, #5
 800a5bc:	4648      	mov	r0, r9
 800a5be:	f000 fd93 	bl	800b0e8 <__multadd>
 800a5c2:	4601      	mov	r1, r0
 800a5c4:	4604      	mov	r4, r0
 800a5c6:	9802      	ldr	r0, [sp, #8]
 800a5c8:	f000 ffa2 	bl	800b510 <__mcmp>
 800a5cc:	2800      	cmp	r0, #0
 800a5ce:	f77f ada3 	ble.w	800a118 <_dtoa_r+0x490>
 800a5d2:	4656      	mov	r6, sl
 800a5d4:	2331      	movs	r3, #49	@ 0x31
 800a5d6:	f108 0801 	add.w	r8, r8, #1
 800a5da:	f806 3b01 	strb.w	r3, [r6], #1
 800a5de:	e59f      	b.n	800a120 <_dtoa_r+0x498>
 800a5e0:	46b8      	mov	r8, r7
 800a5e2:	9c03      	ldr	r4, [sp, #12]
 800a5e4:	4625      	mov	r5, r4
 800a5e6:	e7f4      	b.n	800a5d2 <_dtoa_r+0x94a>
 800a5e8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800a5ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	f000 8102 	beq.w	800a7f8 <_dtoa_r+0xb70>
 800a5f4:	2e00      	cmp	r6, #0
 800a5f6:	dd05      	ble.n	800a604 <_dtoa_r+0x97c>
 800a5f8:	4629      	mov	r1, r5
 800a5fa:	4632      	mov	r2, r6
 800a5fc:	4648      	mov	r0, r9
 800a5fe:	f000 ff1b 	bl	800b438 <__lshift>
 800a602:	4605      	mov	r5, r0
 800a604:	9b08      	ldr	r3, [sp, #32]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d05c      	beq.n	800a6c4 <_dtoa_r+0xa3c>
 800a60a:	6869      	ldr	r1, [r5, #4]
 800a60c:	4648      	mov	r0, r9
 800a60e:	f000 fd09 	bl	800b024 <_Balloc>
 800a612:	4606      	mov	r6, r0
 800a614:	b928      	cbnz	r0, 800a622 <_dtoa_r+0x99a>
 800a616:	4b83      	ldr	r3, [pc, #524]	@ (800a824 <_dtoa_r+0xb9c>)
 800a618:	4602      	mov	r2, r0
 800a61a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a61e:	f7ff bb4a 	b.w	8009cb6 <_dtoa_r+0x2e>
 800a622:	692a      	ldr	r2, [r5, #16]
 800a624:	f105 010c 	add.w	r1, r5, #12
 800a628:	300c      	adds	r0, #12
 800a62a:	3202      	adds	r2, #2
 800a62c:	0092      	lsls	r2, r2, #2
 800a62e:	f7ff fa8f 	bl	8009b50 <memcpy>
 800a632:	2201      	movs	r2, #1
 800a634:	4631      	mov	r1, r6
 800a636:	4648      	mov	r0, r9
 800a638:	f000 fefe 	bl	800b438 <__lshift>
 800a63c:	f10a 0301 	add.w	r3, sl, #1
 800a640:	462f      	mov	r7, r5
 800a642:	4605      	mov	r5, r0
 800a644:	9300      	str	r3, [sp, #0]
 800a646:	eb0a 030b 	add.w	r3, sl, fp
 800a64a:	9308      	str	r3, [sp, #32]
 800a64c:	9b04      	ldr	r3, [sp, #16]
 800a64e:	f003 0301 	and.w	r3, r3, #1
 800a652:	9306      	str	r3, [sp, #24]
 800a654:	9b00      	ldr	r3, [sp, #0]
 800a656:	4621      	mov	r1, r4
 800a658:	9802      	ldr	r0, [sp, #8]
 800a65a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800a65e:	f7ff fa84 	bl	8009b6a <quorem>
 800a662:	4603      	mov	r3, r0
 800a664:	4639      	mov	r1, r7
 800a666:	9003      	str	r0, [sp, #12]
 800a668:	3330      	adds	r3, #48	@ 0x30
 800a66a:	9802      	ldr	r0, [sp, #8]
 800a66c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a66e:	f000 ff4f 	bl	800b510 <__mcmp>
 800a672:	462a      	mov	r2, r5
 800a674:	9004      	str	r0, [sp, #16]
 800a676:	4621      	mov	r1, r4
 800a678:	4648      	mov	r0, r9
 800a67a:	f000 ff65 	bl	800b548 <__mdiff>
 800a67e:	68c2      	ldr	r2, [r0, #12]
 800a680:	4606      	mov	r6, r0
 800a682:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a684:	bb02      	cbnz	r2, 800a6c8 <_dtoa_r+0xa40>
 800a686:	4601      	mov	r1, r0
 800a688:	9802      	ldr	r0, [sp, #8]
 800a68a:	f000 ff41 	bl	800b510 <__mcmp>
 800a68e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a690:	4602      	mov	r2, r0
 800a692:	4631      	mov	r1, r6
 800a694:	4648      	mov	r0, r9
 800a696:	920c      	str	r2, [sp, #48]	@ 0x30
 800a698:	9309      	str	r3, [sp, #36]	@ 0x24
 800a69a:	f000 fd03 	bl	800b0a4 <_Bfree>
 800a69e:	9b07      	ldr	r3, [sp, #28]
 800a6a0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a6a2:	9e00      	ldr	r6, [sp, #0]
 800a6a4:	ea42 0103 	orr.w	r1, r2, r3
 800a6a8:	9b06      	ldr	r3, [sp, #24]
 800a6aa:	4319      	orrs	r1, r3
 800a6ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6ae:	d10d      	bne.n	800a6cc <_dtoa_r+0xa44>
 800a6b0:	2b39      	cmp	r3, #57	@ 0x39
 800a6b2:	d027      	beq.n	800a704 <_dtoa_r+0xa7c>
 800a6b4:	9a04      	ldr	r2, [sp, #16]
 800a6b6:	2a00      	cmp	r2, #0
 800a6b8:	dd01      	ble.n	800a6be <_dtoa_r+0xa36>
 800a6ba:	9b03      	ldr	r3, [sp, #12]
 800a6bc:	3331      	adds	r3, #49	@ 0x31
 800a6be:	f88b 3000 	strb.w	r3, [fp]
 800a6c2:	e52e      	b.n	800a122 <_dtoa_r+0x49a>
 800a6c4:	4628      	mov	r0, r5
 800a6c6:	e7b9      	b.n	800a63c <_dtoa_r+0x9b4>
 800a6c8:	2201      	movs	r2, #1
 800a6ca:	e7e2      	b.n	800a692 <_dtoa_r+0xa0a>
 800a6cc:	9904      	ldr	r1, [sp, #16]
 800a6ce:	2900      	cmp	r1, #0
 800a6d0:	db04      	blt.n	800a6dc <_dtoa_r+0xa54>
 800a6d2:	9807      	ldr	r0, [sp, #28]
 800a6d4:	4301      	orrs	r1, r0
 800a6d6:	9806      	ldr	r0, [sp, #24]
 800a6d8:	4301      	orrs	r1, r0
 800a6da:	d120      	bne.n	800a71e <_dtoa_r+0xa96>
 800a6dc:	2a00      	cmp	r2, #0
 800a6de:	ddee      	ble.n	800a6be <_dtoa_r+0xa36>
 800a6e0:	2201      	movs	r2, #1
 800a6e2:	9902      	ldr	r1, [sp, #8]
 800a6e4:	4648      	mov	r0, r9
 800a6e6:	9300      	str	r3, [sp, #0]
 800a6e8:	f000 fea6 	bl	800b438 <__lshift>
 800a6ec:	4621      	mov	r1, r4
 800a6ee:	9002      	str	r0, [sp, #8]
 800a6f0:	f000 ff0e 	bl	800b510 <__mcmp>
 800a6f4:	2800      	cmp	r0, #0
 800a6f6:	9b00      	ldr	r3, [sp, #0]
 800a6f8:	dc02      	bgt.n	800a700 <_dtoa_r+0xa78>
 800a6fa:	d1e0      	bne.n	800a6be <_dtoa_r+0xa36>
 800a6fc:	07da      	lsls	r2, r3, #31
 800a6fe:	d5de      	bpl.n	800a6be <_dtoa_r+0xa36>
 800a700:	2b39      	cmp	r3, #57	@ 0x39
 800a702:	d1da      	bne.n	800a6ba <_dtoa_r+0xa32>
 800a704:	2339      	movs	r3, #57	@ 0x39
 800a706:	f88b 3000 	strb.w	r3, [fp]
 800a70a:	4633      	mov	r3, r6
 800a70c:	461e      	mov	r6, r3
 800a70e:	3b01      	subs	r3, #1
 800a710:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a714:	2a39      	cmp	r2, #57	@ 0x39
 800a716:	d04f      	beq.n	800a7b8 <_dtoa_r+0xb30>
 800a718:	3201      	adds	r2, #1
 800a71a:	701a      	strb	r2, [r3, #0]
 800a71c:	e501      	b.n	800a122 <_dtoa_r+0x49a>
 800a71e:	2a00      	cmp	r2, #0
 800a720:	dd03      	ble.n	800a72a <_dtoa_r+0xaa2>
 800a722:	2b39      	cmp	r3, #57	@ 0x39
 800a724:	d0ee      	beq.n	800a704 <_dtoa_r+0xa7c>
 800a726:	3301      	adds	r3, #1
 800a728:	e7c9      	b.n	800a6be <_dtoa_r+0xa36>
 800a72a:	9a00      	ldr	r2, [sp, #0]
 800a72c:	9908      	ldr	r1, [sp, #32]
 800a72e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a732:	428a      	cmp	r2, r1
 800a734:	d029      	beq.n	800a78a <_dtoa_r+0xb02>
 800a736:	2300      	movs	r3, #0
 800a738:	220a      	movs	r2, #10
 800a73a:	9902      	ldr	r1, [sp, #8]
 800a73c:	4648      	mov	r0, r9
 800a73e:	f000 fcd3 	bl	800b0e8 <__multadd>
 800a742:	42af      	cmp	r7, r5
 800a744:	9002      	str	r0, [sp, #8]
 800a746:	f04f 0300 	mov.w	r3, #0
 800a74a:	f04f 020a 	mov.w	r2, #10
 800a74e:	4639      	mov	r1, r7
 800a750:	4648      	mov	r0, r9
 800a752:	d107      	bne.n	800a764 <_dtoa_r+0xadc>
 800a754:	f000 fcc8 	bl	800b0e8 <__multadd>
 800a758:	4607      	mov	r7, r0
 800a75a:	4605      	mov	r5, r0
 800a75c:	9b00      	ldr	r3, [sp, #0]
 800a75e:	3301      	adds	r3, #1
 800a760:	9300      	str	r3, [sp, #0]
 800a762:	e777      	b.n	800a654 <_dtoa_r+0x9cc>
 800a764:	f000 fcc0 	bl	800b0e8 <__multadd>
 800a768:	4629      	mov	r1, r5
 800a76a:	4607      	mov	r7, r0
 800a76c:	2300      	movs	r3, #0
 800a76e:	220a      	movs	r2, #10
 800a770:	4648      	mov	r0, r9
 800a772:	f000 fcb9 	bl	800b0e8 <__multadd>
 800a776:	4605      	mov	r5, r0
 800a778:	e7f0      	b.n	800a75c <_dtoa_r+0xad4>
 800a77a:	f1bb 0f00 	cmp.w	fp, #0
 800a77e:	f04f 0700 	mov.w	r7, #0
 800a782:	bfcc      	ite	gt
 800a784:	465e      	movgt	r6, fp
 800a786:	2601      	movle	r6, #1
 800a788:	4456      	add	r6, sl
 800a78a:	2201      	movs	r2, #1
 800a78c:	9902      	ldr	r1, [sp, #8]
 800a78e:	4648      	mov	r0, r9
 800a790:	9300      	str	r3, [sp, #0]
 800a792:	f000 fe51 	bl	800b438 <__lshift>
 800a796:	4621      	mov	r1, r4
 800a798:	9002      	str	r0, [sp, #8]
 800a79a:	f000 feb9 	bl	800b510 <__mcmp>
 800a79e:	2800      	cmp	r0, #0
 800a7a0:	dcb3      	bgt.n	800a70a <_dtoa_r+0xa82>
 800a7a2:	d102      	bne.n	800a7aa <_dtoa_r+0xb22>
 800a7a4:	9b00      	ldr	r3, [sp, #0]
 800a7a6:	07db      	lsls	r3, r3, #31
 800a7a8:	d4af      	bmi.n	800a70a <_dtoa_r+0xa82>
 800a7aa:	4633      	mov	r3, r6
 800a7ac:	461e      	mov	r6, r3
 800a7ae:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a7b2:	2a30      	cmp	r2, #48	@ 0x30
 800a7b4:	d0fa      	beq.n	800a7ac <_dtoa_r+0xb24>
 800a7b6:	e4b4      	b.n	800a122 <_dtoa_r+0x49a>
 800a7b8:	459a      	cmp	sl, r3
 800a7ba:	d1a7      	bne.n	800a70c <_dtoa_r+0xa84>
 800a7bc:	2331      	movs	r3, #49	@ 0x31
 800a7be:	f108 0801 	add.w	r8, r8, #1
 800a7c2:	f88a 3000 	strb.w	r3, [sl]
 800a7c6:	e4ac      	b.n	800a122 <_dtoa_r+0x49a>
 800a7c8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a7ca:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a828 <_dtoa_r+0xba0>
 800a7ce:	b11b      	cbz	r3, 800a7d8 <_dtoa_r+0xb50>
 800a7d0:	f10a 0308 	add.w	r3, sl, #8
 800a7d4:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a7d6:	6013      	str	r3, [r2, #0]
 800a7d8:	4650      	mov	r0, sl
 800a7da:	b017      	add	sp, #92	@ 0x5c
 800a7dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7e0:	9b07      	ldr	r3, [sp, #28]
 800a7e2:	2b01      	cmp	r3, #1
 800a7e4:	f77f ae2d 	ble.w	800a442 <_dtoa_r+0x7ba>
 800a7e8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a7ea:	9308      	str	r3, [sp, #32]
 800a7ec:	2001      	movs	r0, #1
 800a7ee:	e64c      	b.n	800a48a <_dtoa_r+0x802>
 800a7f0:	f1bb 0f00 	cmp.w	fp, #0
 800a7f4:	f77f aed8 	ble.w	800a5a8 <_dtoa_r+0x920>
 800a7f8:	4656      	mov	r6, sl
 800a7fa:	4621      	mov	r1, r4
 800a7fc:	9802      	ldr	r0, [sp, #8]
 800a7fe:	f7ff f9b4 	bl	8009b6a <quorem>
 800a802:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800a806:	f806 3b01 	strb.w	r3, [r6], #1
 800a80a:	eba6 020a 	sub.w	r2, r6, sl
 800a80e:	4593      	cmp	fp, r2
 800a810:	ddb3      	ble.n	800a77a <_dtoa_r+0xaf2>
 800a812:	2300      	movs	r3, #0
 800a814:	220a      	movs	r2, #10
 800a816:	9902      	ldr	r1, [sp, #8]
 800a818:	4648      	mov	r0, r9
 800a81a:	f000 fc65 	bl	800b0e8 <__multadd>
 800a81e:	9002      	str	r0, [sp, #8]
 800a820:	e7eb      	b.n	800a7fa <_dtoa_r+0xb72>
 800a822:	bf00      	nop
 800a824:	08022e88 	.word	0x08022e88
 800a828:	08022e0c 	.word	0x08022e0c

0800a82c <__ssputs_r>:
 800a82c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a830:	461f      	mov	r7, r3
 800a832:	688e      	ldr	r6, [r1, #8]
 800a834:	4682      	mov	sl, r0
 800a836:	460c      	mov	r4, r1
 800a838:	42be      	cmp	r6, r7
 800a83a:	4690      	mov	r8, r2
 800a83c:	680b      	ldr	r3, [r1, #0]
 800a83e:	d82d      	bhi.n	800a89c <__ssputs_r+0x70>
 800a840:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a844:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a848:	d026      	beq.n	800a898 <__ssputs_r+0x6c>
 800a84a:	6965      	ldr	r5, [r4, #20]
 800a84c:	6909      	ldr	r1, [r1, #16]
 800a84e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a852:	eba3 0901 	sub.w	r9, r3, r1
 800a856:	1c7b      	adds	r3, r7, #1
 800a858:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a85c:	444b      	add	r3, r9
 800a85e:	106d      	asrs	r5, r5, #1
 800a860:	429d      	cmp	r5, r3
 800a862:	bf38      	it	cc
 800a864:	461d      	movcc	r5, r3
 800a866:	0553      	lsls	r3, r2, #21
 800a868:	d527      	bpl.n	800a8ba <__ssputs_r+0x8e>
 800a86a:	4629      	mov	r1, r5
 800a86c:	f000 faa2 	bl	800adb4 <_malloc_r>
 800a870:	4606      	mov	r6, r0
 800a872:	b360      	cbz	r0, 800a8ce <__ssputs_r+0xa2>
 800a874:	464a      	mov	r2, r9
 800a876:	6921      	ldr	r1, [r4, #16]
 800a878:	f7ff f96a 	bl	8009b50 <memcpy>
 800a87c:	89a3      	ldrh	r3, [r4, #12]
 800a87e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a882:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a886:	81a3      	strh	r3, [r4, #12]
 800a888:	6126      	str	r6, [r4, #16]
 800a88a:	444e      	add	r6, r9
 800a88c:	6165      	str	r5, [r4, #20]
 800a88e:	eba5 0509 	sub.w	r5, r5, r9
 800a892:	6026      	str	r6, [r4, #0]
 800a894:	463e      	mov	r6, r7
 800a896:	60a5      	str	r5, [r4, #8]
 800a898:	42be      	cmp	r6, r7
 800a89a:	d900      	bls.n	800a89e <__ssputs_r+0x72>
 800a89c:	463e      	mov	r6, r7
 800a89e:	4632      	mov	r2, r6
 800a8a0:	4641      	mov	r1, r8
 800a8a2:	6820      	ldr	r0, [r4, #0]
 800a8a4:	f001 f8a7 	bl	800b9f6 <memmove>
 800a8a8:	68a3      	ldr	r3, [r4, #8]
 800a8aa:	2000      	movs	r0, #0
 800a8ac:	1b9b      	subs	r3, r3, r6
 800a8ae:	60a3      	str	r3, [r4, #8]
 800a8b0:	6823      	ldr	r3, [r4, #0]
 800a8b2:	4433      	add	r3, r6
 800a8b4:	6023      	str	r3, [r4, #0]
 800a8b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8ba:	462a      	mov	r2, r5
 800a8bc:	f000 ff77 	bl	800b7ae <_realloc_r>
 800a8c0:	4606      	mov	r6, r0
 800a8c2:	2800      	cmp	r0, #0
 800a8c4:	d1e0      	bne.n	800a888 <__ssputs_r+0x5c>
 800a8c6:	6921      	ldr	r1, [r4, #16]
 800a8c8:	4650      	mov	r0, sl
 800a8ca:	f001 f959 	bl	800bb80 <_free_r>
 800a8ce:	230c      	movs	r3, #12
 800a8d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a8d4:	f8ca 3000 	str.w	r3, [sl]
 800a8d8:	89a3      	ldrh	r3, [r4, #12]
 800a8da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a8de:	81a3      	strh	r3, [r4, #12]
 800a8e0:	e7e9      	b.n	800a8b6 <__ssputs_r+0x8a>
	...

0800a8e4 <_svfiprintf_r>:
 800a8e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8e8:	4698      	mov	r8, r3
 800a8ea:	898b      	ldrh	r3, [r1, #12]
 800a8ec:	b09d      	sub	sp, #116	@ 0x74
 800a8ee:	4607      	mov	r7, r0
 800a8f0:	061b      	lsls	r3, r3, #24
 800a8f2:	460d      	mov	r5, r1
 800a8f4:	4614      	mov	r4, r2
 800a8f6:	d510      	bpl.n	800a91a <_svfiprintf_r+0x36>
 800a8f8:	690b      	ldr	r3, [r1, #16]
 800a8fa:	b973      	cbnz	r3, 800a91a <_svfiprintf_r+0x36>
 800a8fc:	2140      	movs	r1, #64	@ 0x40
 800a8fe:	f000 fa59 	bl	800adb4 <_malloc_r>
 800a902:	6028      	str	r0, [r5, #0]
 800a904:	6128      	str	r0, [r5, #16]
 800a906:	b930      	cbnz	r0, 800a916 <_svfiprintf_r+0x32>
 800a908:	230c      	movs	r3, #12
 800a90a:	603b      	str	r3, [r7, #0]
 800a90c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a910:	b01d      	add	sp, #116	@ 0x74
 800a912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a916:	2340      	movs	r3, #64	@ 0x40
 800a918:	616b      	str	r3, [r5, #20]
 800a91a:	2300      	movs	r3, #0
 800a91c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a920:	f04f 0901 	mov.w	r9, #1
 800a924:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800aac8 <_svfiprintf_r+0x1e4>
 800a928:	9309      	str	r3, [sp, #36]	@ 0x24
 800a92a:	2320      	movs	r3, #32
 800a92c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a930:	2330      	movs	r3, #48	@ 0x30
 800a932:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a936:	4623      	mov	r3, r4
 800a938:	469a      	mov	sl, r3
 800a93a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a93e:	b10a      	cbz	r2, 800a944 <_svfiprintf_r+0x60>
 800a940:	2a25      	cmp	r2, #37	@ 0x25
 800a942:	d1f9      	bne.n	800a938 <_svfiprintf_r+0x54>
 800a944:	ebba 0b04 	subs.w	fp, sl, r4
 800a948:	d00b      	beq.n	800a962 <_svfiprintf_r+0x7e>
 800a94a:	465b      	mov	r3, fp
 800a94c:	4622      	mov	r2, r4
 800a94e:	4629      	mov	r1, r5
 800a950:	4638      	mov	r0, r7
 800a952:	f7ff ff6b 	bl	800a82c <__ssputs_r>
 800a956:	3001      	adds	r0, #1
 800a958:	f000 80a7 	beq.w	800aaaa <_svfiprintf_r+0x1c6>
 800a95c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a95e:	445a      	add	r2, fp
 800a960:	9209      	str	r2, [sp, #36]	@ 0x24
 800a962:	f89a 3000 	ldrb.w	r3, [sl]
 800a966:	2b00      	cmp	r3, #0
 800a968:	f000 809f 	beq.w	800aaaa <_svfiprintf_r+0x1c6>
 800a96c:	2300      	movs	r3, #0
 800a96e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a972:	f10a 0a01 	add.w	sl, sl, #1
 800a976:	9304      	str	r3, [sp, #16]
 800a978:	9307      	str	r3, [sp, #28]
 800a97a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a97e:	931a      	str	r3, [sp, #104]	@ 0x68
 800a980:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a984:	4654      	mov	r4, sl
 800a986:	2205      	movs	r2, #5
 800a988:	484f      	ldr	r0, [pc, #316]	@ (800aac8 <_svfiprintf_r+0x1e4>)
 800a98a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a98e:	f7ff f8d1 	bl	8009b34 <memchr>
 800a992:	9a04      	ldr	r2, [sp, #16]
 800a994:	b9d8      	cbnz	r0, 800a9ce <_svfiprintf_r+0xea>
 800a996:	06d0      	lsls	r0, r2, #27
 800a998:	bf44      	itt	mi
 800a99a:	2320      	movmi	r3, #32
 800a99c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a9a0:	0711      	lsls	r1, r2, #28
 800a9a2:	bf44      	itt	mi
 800a9a4:	232b      	movmi	r3, #43	@ 0x2b
 800a9a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a9aa:	f89a 3000 	ldrb.w	r3, [sl]
 800a9ae:	2b2a      	cmp	r3, #42	@ 0x2a
 800a9b0:	d015      	beq.n	800a9de <_svfiprintf_r+0xfa>
 800a9b2:	9a07      	ldr	r2, [sp, #28]
 800a9b4:	4654      	mov	r4, sl
 800a9b6:	2000      	movs	r0, #0
 800a9b8:	f04f 0c0a 	mov.w	ip, #10
 800a9bc:	4621      	mov	r1, r4
 800a9be:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a9c2:	3b30      	subs	r3, #48	@ 0x30
 800a9c4:	2b09      	cmp	r3, #9
 800a9c6:	d94b      	bls.n	800aa60 <_svfiprintf_r+0x17c>
 800a9c8:	b1b0      	cbz	r0, 800a9f8 <_svfiprintf_r+0x114>
 800a9ca:	9207      	str	r2, [sp, #28]
 800a9cc:	e014      	b.n	800a9f8 <_svfiprintf_r+0x114>
 800a9ce:	eba0 0308 	sub.w	r3, r0, r8
 800a9d2:	46a2      	mov	sl, r4
 800a9d4:	fa09 f303 	lsl.w	r3, r9, r3
 800a9d8:	4313      	orrs	r3, r2
 800a9da:	9304      	str	r3, [sp, #16]
 800a9dc:	e7d2      	b.n	800a984 <_svfiprintf_r+0xa0>
 800a9de:	9b03      	ldr	r3, [sp, #12]
 800a9e0:	1d19      	adds	r1, r3, #4
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	9103      	str	r1, [sp, #12]
 800a9e8:	bfbb      	ittet	lt
 800a9ea:	425b      	neglt	r3, r3
 800a9ec:	f042 0202 	orrlt.w	r2, r2, #2
 800a9f0:	9307      	strge	r3, [sp, #28]
 800a9f2:	9307      	strlt	r3, [sp, #28]
 800a9f4:	bfb8      	it	lt
 800a9f6:	9204      	strlt	r2, [sp, #16]
 800a9f8:	7823      	ldrb	r3, [r4, #0]
 800a9fa:	2b2e      	cmp	r3, #46	@ 0x2e
 800a9fc:	d10a      	bne.n	800aa14 <_svfiprintf_r+0x130>
 800a9fe:	7863      	ldrb	r3, [r4, #1]
 800aa00:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa02:	d132      	bne.n	800aa6a <_svfiprintf_r+0x186>
 800aa04:	9b03      	ldr	r3, [sp, #12]
 800aa06:	3402      	adds	r4, #2
 800aa08:	1d1a      	adds	r2, r3, #4
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aa10:	9203      	str	r2, [sp, #12]
 800aa12:	9305      	str	r3, [sp, #20]
 800aa14:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800aad8 <_svfiprintf_r+0x1f4>
 800aa18:	2203      	movs	r2, #3
 800aa1a:	7821      	ldrb	r1, [r4, #0]
 800aa1c:	4650      	mov	r0, sl
 800aa1e:	f7ff f889 	bl	8009b34 <memchr>
 800aa22:	b138      	cbz	r0, 800aa34 <_svfiprintf_r+0x150>
 800aa24:	eba0 000a 	sub.w	r0, r0, sl
 800aa28:	2240      	movs	r2, #64	@ 0x40
 800aa2a:	9b04      	ldr	r3, [sp, #16]
 800aa2c:	3401      	adds	r4, #1
 800aa2e:	4082      	lsls	r2, r0
 800aa30:	4313      	orrs	r3, r2
 800aa32:	9304      	str	r3, [sp, #16]
 800aa34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa38:	2206      	movs	r2, #6
 800aa3a:	4824      	ldr	r0, [pc, #144]	@ (800aacc <_svfiprintf_r+0x1e8>)
 800aa3c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aa40:	f7ff f878 	bl	8009b34 <memchr>
 800aa44:	2800      	cmp	r0, #0
 800aa46:	d036      	beq.n	800aab6 <_svfiprintf_r+0x1d2>
 800aa48:	4b21      	ldr	r3, [pc, #132]	@ (800aad0 <_svfiprintf_r+0x1ec>)
 800aa4a:	bb1b      	cbnz	r3, 800aa94 <_svfiprintf_r+0x1b0>
 800aa4c:	9b03      	ldr	r3, [sp, #12]
 800aa4e:	3307      	adds	r3, #7
 800aa50:	f023 0307 	bic.w	r3, r3, #7
 800aa54:	3308      	adds	r3, #8
 800aa56:	9303      	str	r3, [sp, #12]
 800aa58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa5a:	4433      	add	r3, r6
 800aa5c:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa5e:	e76a      	b.n	800a936 <_svfiprintf_r+0x52>
 800aa60:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa64:	460c      	mov	r4, r1
 800aa66:	2001      	movs	r0, #1
 800aa68:	e7a8      	b.n	800a9bc <_svfiprintf_r+0xd8>
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	3401      	adds	r4, #1
 800aa6e:	f04f 0c0a 	mov.w	ip, #10
 800aa72:	4619      	mov	r1, r3
 800aa74:	9305      	str	r3, [sp, #20]
 800aa76:	4620      	mov	r0, r4
 800aa78:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa7c:	3a30      	subs	r2, #48	@ 0x30
 800aa7e:	2a09      	cmp	r2, #9
 800aa80:	d903      	bls.n	800aa8a <_svfiprintf_r+0x1a6>
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d0c6      	beq.n	800aa14 <_svfiprintf_r+0x130>
 800aa86:	9105      	str	r1, [sp, #20]
 800aa88:	e7c4      	b.n	800aa14 <_svfiprintf_r+0x130>
 800aa8a:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa8e:	4604      	mov	r4, r0
 800aa90:	2301      	movs	r3, #1
 800aa92:	e7f0      	b.n	800aa76 <_svfiprintf_r+0x192>
 800aa94:	ab03      	add	r3, sp, #12
 800aa96:	462a      	mov	r2, r5
 800aa98:	a904      	add	r1, sp, #16
 800aa9a:	4638      	mov	r0, r7
 800aa9c:	9300      	str	r3, [sp, #0]
 800aa9e:	4b0d      	ldr	r3, [pc, #52]	@ (800aad4 <_svfiprintf_r+0x1f0>)
 800aaa0:	f7fe faec 	bl	800907c <_printf_float>
 800aaa4:	1c42      	adds	r2, r0, #1
 800aaa6:	4606      	mov	r6, r0
 800aaa8:	d1d6      	bne.n	800aa58 <_svfiprintf_r+0x174>
 800aaaa:	89ab      	ldrh	r3, [r5, #12]
 800aaac:	065b      	lsls	r3, r3, #25
 800aaae:	f53f af2d 	bmi.w	800a90c <_svfiprintf_r+0x28>
 800aab2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aab4:	e72c      	b.n	800a910 <_svfiprintf_r+0x2c>
 800aab6:	ab03      	add	r3, sp, #12
 800aab8:	462a      	mov	r2, r5
 800aaba:	a904      	add	r1, sp, #16
 800aabc:	4638      	mov	r0, r7
 800aabe:	9300      	str	r3, [sp, #0]
 800aac0:	4b04      	ldr	r3, [pc, #16]	@ (800aad4 <_svfiprintf_r+0x1f0>)
 800aac2:	f7fe fd77 	bl	80095b4 <_printf_i>
 800aac6:	e7ed      	b.n	800aaa4 <_svfiprintf_r+0x1c0>
 800aac8:	08022e99 	.word	0x08022e99
 800aacc:	08022ea3 	.word	0x08022ea3
 800aad0:	0800907d 	.word	0x0800907d
 800aad4:	0800a82d 	.word	0x0800a82d
 800aad8:	08022e9f 	.word	0x08022e9f

0800aadc <__sfputc_r>:
 800aadc:	6893      	ldr	r3, [r2, #8]
 800aade:	3b01      	subs	r3, #1
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	b410      	push	{r4}
 800aae4:	6093      	str	r3, [r2, #8]
 800aae6:	da08      	bge.n	800aafa <__sfputc_r+0x1e>
 800aae8:	6994      	ldr	r4, [r2, #24]
 800aaea:	42a3      	cmp	r3, r4
 800aaec:	db01      	blt.n	800aaf2 <__sfputc_r+0x16>
 800aaee:	290a      	cmp	r1, #10
 800aaf0:	d103      	bne.n	800aafa <__sfputc_r+0x1e>
 800aaf2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aaf6:	f000 be88 	b.w	800b80a <__swbuf_r>
 800aafa:	6813      	ldr	r3, [r2, #0]
 800aafc:	1c58      	adds	r0, r3, #1
 800aafe:	6010      	str	r0, [r2, #0]
 800ab00:	4608      	mov	r0, r1
 800ab02:	7019      	strb	r1, [r3, #0]
 800ab04:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab08:	4770      	bx	lr

0800ab0a <__sfputs_r>:
 800ab0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab0c:	4606      	mov	r6, r0
 800ab0e:	460f      	mov	r7, r1
 800ab10:	4614      	mov	r4, r2
 800ab12:	18d5      	adds	r5, r2, r3
 800ab14:	42ac      	cmp	r4, r5
 800ab16:	d101      	bne.n	800ab1c <__sfputs_r+0x12>
 800ab18:	2000      	movs	r0, #0
 800ab1a:	e007      	b.n	800ab2c <__sfputs_r+0x22>
 800ab1c:	463a      	mov	r2, r7
 800ab1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab22:	4630      	mov	r0, r6
 800ab24:	f7ff ffda 	bl	800aadc <__sfputc_r>
 800ab28:	1c43      	adds	r3, r0, #1
 800ab2a:	d1f3      	bne.n	800ab14 <__sfputs_r+0xa>
 800ab2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ab30 <_vfiprintf_r>:
 800ab30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab34:	460d      	mov	r5, r1
 800ab36:	b09d      	sub	sp, #116	@ 0x74
 800ab38:	4614      	mov	r4, r2
 800ab3a:	4698      	mov	r8, r3
 800ab3c:	4606      	mov	r6, r0
 800ab3e:	b118      	cbz	r0, 800ab48 <_vfiprintf_r+0x18>
 800ab40:	6a03      	ldr	r3, [r0, #32]
 800ab42:	b90b      	cbnz	r3, 800ab48 <_vfiprintf_r+0x18>
 800ab44:	f7fe ff16 	bl	8009974 <__sinit>
 800ab48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ab4a:	07d9      	lsls	r1, r3, #31
 800ab4c:	d405      	bmi.n	800ab5a <_vfiprintf_r+0x2a>
 800ab4e:	89ab      	ldrh	r3, [r5, #12]
 800ab50:	059a      	lsls	r2, r3, #22
 800ab52:	d402      	bmi.n	800ab5a <_vfiprintf_r+0x2a>
 800ab54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ab56:	f7fe ffe6 	bl	8009b26 <__retarget_lock_acquire_recursive>
 800ab5a:	89ab      	ldrh	r3, [r5, #12]
 800ab5c:	071b      	lsls	r3, r3, #28
 800ab5e:	d501      	bpl.n	800ab64 <_vfiprintf_r+0x34>
 800ab60:	692b      	ldr	r3, [r5, #16]
 800ab62:	b99b      	cbnz	r3, 800ab8c <_vfiprintf_r+0x5c>
 800ab64:	4629      	mov	r1, r5
 800ab66:	4630      	mov	r0, r6
 800ab68:	f000 fe8e 	bl	800b888 <__swsetup_r>
 800ab6c:	b170      	cbz	r0, 800ab8c <_vfiprintf_r+0x5c>
 800ab6e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ab70:	07dc      	lsls	r4, r3, #31
 800ab72:	d504      	bpl.n	800ab7e <_vfiprintf_r+0x4e>
 800ab74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ab78:	b01d      	add	sp, #116	@ 0x74
 800ab7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab7e:	89ab      	ldrh	r3, [r5, #12]
 800ab80:	0598      	lsls	r0, r3, #22
 800ab82:	d4f7      	bmi.n	800ab74 <_vfiprintf_r+0x44>
 800ab84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ab86:	f7fe ffcf 	bl	8009b28 <__retarget_lock_release_recursive>
 800ab8a:	e7f3      	b.n	800ab74 <_vfiprintf_r+0x44>
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab92:	f04f 0901 	mov.w	r9, #1
 800ab96:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800ad4c <_vfiprintf_r+0x21c>
 800ab9a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab9c:	2320      	movs	r3, #32
 800ab9e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aba2:	2330      	movs	r3, #48	@ 0x30
 800aba4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aba8:	4623      	mov	r3, r4
 800abaa:	469a      	mov	sl, r3
 800abac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800abb0:	b10a      	cbz	r2, 800abb6 <_vfiprintf_r+0x86>
 800abb2:	2a25      	cmp	r2, #37	@ 0x25
 800abb4:	d1f9      	bne.n	800abaa <_vfiprintf_r+0x7a>
 800abb6:	ebba 0b04 	subs.w	fp, sl, r4
 800abba:	d00b      	beq.n	800abd4 <_vfiprintf_r+0xa4>
 800abbc:	465b      	mov	r3, fp
 800abbe:	4622      	mov	r2, r4
 800abc0:	4629      	mov	r1, r5
 800abc2:	4630      	mov	r0, r6
 800abc4:	f7ff ffa1 	bl	800ab0a <__sfputs_r>
 800abc8:	3001      	adds	r0, #1
 800abca:	f000 80a7 	beq.w	800ad1c <_vfiprintf_r+0x1ec>
 800abce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800abd0:	445a      	add	r2, fp
 800abd2:	9209      	str	r2, [sp, #36]	@ 0x24
 800abd4:	f89a 3000 	ldrb.w	r3, [sl]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	f000 809f 	beq.w	800ad1c <_vfiprintf_r+0x1ec>
 800abde:	2300      	movs	r3, #0
 800abe0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800abe4:	f10a 0a01 	add.w	sl, sl, #1
 800abe8:	9304      	str	r3, [sp, #16]
 800abea:	9307      	str	r3, [sp, #28]
 800abec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800abf0:	931a      	str	r3, [sp, #104]	@ 0x68
 800abf2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800abf6:	4654      	mov	r4, sl
 800abf8:	2205      	movs	r2, #5
 800abfa:	4854      	ldr	r0, [pc, #336]	@ (800ad4c <_vfiprintf_r+0x21c>)
 800abfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac00:	f7fe ff98 	bl	8009b34 <memchr>
 800ac04:	9a04      	ldr	r2, [sp, #16]
 800ac06:	b9d8      	cbnz	r0, 800ac40 <_vfiprintf_r+0x110>
 800ac08:	06d1      	lsls	r1, r2, #27
 800ac0a:	bf44      	itt	mi
 800ac0c:	2320      	movmi	r3, #32
 800ac0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ac12:	0713      	lsls	r3, r2, #28
 800ac14:	bf44      	itt	mi
 800ac16:	232b      	movmi	r3, #43	@ 0x2b
 800ac18:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ac1c:	f89a 3000 	ldrb.w	r3, [sl]
 800ac20:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac22:	d015      	beq.n	800ac50 <_vfiprintf_r+0x120>
 800ac24:	9a07      	ldr	r2, [sp, #28]
 800ac26:	4654      	mov	r4, sl
 800ac28:	2000      	movs	r0, #0
 800ac2a:	f04f 0c0a 	mov.w	ip, #10
 800ac2e:	4621      	mov	r1, r4
 800ac30:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac34:	3b30      	subs	r3, #48	@ 0x30
 800ac36:	2b09      	cmp	r3, #9
 800ac38:	d94b      	bls.n	800acd2 <_vfiprintf_r+0x1a2>
 800ac3a:	b1b0      	cbz	r0, 800ac6a <_vfiprintf_r+0x13a>
 800ac3c:	9207      	str	r2, [sp, #28]
 800ac3e:	e014      	b.n	800ac6a <_vfiprintf_r+0x13a>
 800ac40:	eba0 0308 	sub.w	r3, r0, r8
 800ac44:	46a2      	mov	sl, r4
 800ac46:	fa09 f303 	lsl.w	r3, r9, r3
 800ac4a:	4313      	orrs	r3, r2
 800ac4c:	9304      	str	r3, [sp, #16]
 800ac4e:	e7d2      	b.n	800abf6 <_vfiprintf_r+0xc6>
 800ac50:	9b03      	ldr	r3, [sp, #12]
 800ac52:	1d19      	adds	r1, r3, #4
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	9103      	str	r1, [sp, #12]
 800ac5a:	bfbb      	ittet	lt
 800ac5c:	425b      	neglt	r3, r3
 800ac5e:	f042 0202 	orrlt.w	r2, r2, #2
 800ac62:	9307      	strge	r3, [sp, #28]
 800ac64:	9307      	strlt	r3, [sp, #28]
 800ac66:	bfb8      	it	lt
 800ac68:	9204      	strlt	r2, [sp, #16]
 800ac6a:	7823      	ldrb	r3, [r4, #0]
 800ac6c:	2b2e      	cmp	r3, #46	@ 0x2e
 800ac6e:	d10a      	bne.n	800ac86 <_vfiprintf_r+0x156>
 800ac70:	7863      	ldrb	r3, [r4, #1]
 800ac72:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac74:	d132      	bne.n	800acdc <_vfiprintf_r+0x1ac>
 800ac76:	9b03      	ldr	r3, [sp, #12]
 800ac78:	3402      	adds	r4, #2
 800ac7a:	1d1a      	adds	r2, r3, #4
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ac82:	9203      	str	r2, [sp, #12]
 800ac84:	9305      	str	r3, [sp, #20]
 800ac86:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ad5c <_vfiprintf_r+0x22c>
 800ac8a:	2203      	movs	r2, #3
 800ac8c:	7821      	ldrb	r1, [r4, #0]
 800ac8e:	4650      	mov	r0, sl
 800ac90:	f7fe ff50 	bl	8009b34 <memchr>
 800ac94:	b138      	cbz	r0, 800aca6 <_vfiprintf_r+0x176>
 800ac96:	eba0 000a 	sub.w	r0, r0, sl
 800ac9a:	2240      	movs	r2, #64	@ 0x40
 800ac9c:	9b04      	ldr	r3, [sp, #16]
 800ac9e:	3401      	adds	r4, #1
 800aca0:	4082      	lsls	r2, r0
 800aca2:	4313      	orrs	r3, r2
 800aca4:	9304      	str	r3, [sp, #16]
 800aca6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acaa:	2206      	movs	r2, #6
 800acac:	4828      	ldr	r0, [pc, #160]	@ (800ad50 <_vfiprintf_r+0x220>)
 800acae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800acb2:	f7fe ff3f 	bl	8009b34 <memchr>
 800acb6:	2800      	cmp	r0, #0
 800acb8:	d03f      	beq.n	800ad3a <_vfiprintf_r+0x20a>
 800acba:	4b26      	ldr	r3, [pc, #152]	@ (800ad54 <_vfiprintf_r+0x224>)
 800acbc:	bb1b      	cbnz	r3, 800ad06 <_vfiprintf_r+0x1d6>
 800acbe:	9b03      	ldr	r3, [sp, #12]
 800acc0:	3307      	adds	r3, #7
 800acc2:	f023 0307 	bic.w	r3, r3, #7
 800acc6:	3308      	adds	r3, #8
 800acc8:	9303      	str	r3, [sp, #12]
 800acca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800accc:	443b      	add	r3, r7
 800acce:	9309      	str	r3, [sp, #36]	@ 0x24
 800acd0:	e76a      	b.n	800aba8 <_vfiprintf_r+0x78>
 800acd2:	fb0c 3202 	mla	r2, ip, r2, r3
 800acd6:	460c      	mov	r4, r1
 800acd8:	2001      	movs	r0, #1
 800acda:	e7a8      	b.n	800ac2e <_vfiprintf_r+0xfe>
 800acdc:	2300      	movs	r3, #0
 800acde:	3401      	adds	r4, #1
 800ace0:	f04f 0c0a 	mov.w	ip, #10
 800ace4:	4619      	mov	r1, r3
 800ace6:	9305      	str	r3, [sp, #20]
 800ace8:	4620      	mov	r0, r4
 800acea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800acee:	3a30      	subs	r2, #48	@ 0x30
 800acf0:	2a09      	cmp	r2, #9
 800acf2:	d903      	bls.n	800acfc <_vfiprintf_r+0x1cc>
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d0c6      	beq.n	800ac86 <_vfiprintf_r+0x156>
 800acf8:	9105      	str	r1, [sp, #20]
 800acfa:	e7c4      	b.n	800ac86 <_vfiprintf_r+0x156>
 800acfc:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad00:	4604      	mov	r4, r0
 800ad02:	2301      	movs	r3, #1
 800ad04:	e7f0      	b.n	800ace8 <_vfiprintf_r+0x1b8>
 800ad06:	ab03      	add	r3, sp, #12
 800ad08:	462a      	mov	r2, r5
 800ad0a:	a904      	add	r1, sp, #16
 800ad0c:	4630      	mov	r0, r6
 800ad0e:	9300      	str	r3, [sp, #0]
 800ad10:	4b11      	ldr	r3, [pc, #68]	@ (800ad58 <_vfiprintf_r+0x228>)
 800ad12:	f7fe f9b3 	bl	800907c <_printf_float>
 800ad16:	4607      	mov	r7, r0
 800ad18:	1c78      	adds	r0, r7, #1
 800ad1a:	d1d6      	bne.n	800acca <_vfiprintf_r+0x19a>
 800ad1c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ad1e:	07d9      	lsls	r1, r3, #31
 800ad20:	d405      	bmi.n	800ad2e <_vfiprintf_r+0x1fe>
 800ad22:	89ab      	ldrh	r3, [r5, #12]
 800ad24:	059a      	lsls	r2, r3, #22
 800ad26:	d402      	bmi.n	800ad2e <_vfiprintf_r+0x1fe>
 800ad28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ad2a:	f7fe fefd 	bl	8009b28 <__retarget_lock_release_recursive>
 800ad2e:	89ab      	ldrh	r3, [r5, #12]
 800ad30:	065b      	lsls	r3, r3, #25
 800ad32:	f53f af1f 	bmi.w	800ab74 <_vfiprintf_r+0x44>
 800ad36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ad38:	e71e      	b.n	800ab78 <_vfiprintf_r+0x48>
 800ad3a:	ab03      	add	r3, sp, #12
 800ad3c:	462a      	mov	r2, r5
 800ad3e:	a904      	add	r1, sp, #16
 800ad40:	4630      	mov	r0, r6
 800ad42:	9300      	str	r3, [sp, #0]
 800ad44:	4b04      	ldr	r3, [pc, #16]	@ (800ad58 <_vfiprintf_r+0x228>)
 800ad46:	f7fe fc35 	bl	80095b4 <_printf_i>
 800ad4a:	e7e4      	b.n	800ad16 <_vfiprintf_r+0x1e6>
 800ad4c:	08022e99 	.word	0x08022e99
 800ad50:	08022ea3 	.word	0x08022ea3
 800ad54:	0800907d 	.word	0x0800907d
 800ad58:	0800ab0b 	.word	0x0800ab0b
 800ad5c:	08022e9f 	.word	0x08022e9f

0800ad60 <malloc>:
 800ad60:	4b02      	ldr	r3, [pc, #8]	@ (800ad6c <malloc+0xc>)
 800ad62:	4601      	mov	r1, r0
 800ad64:	6818      	ldr	r0, [r3, #0]
 800ad66:	f000 b825 	b.w	800adb4 <_malloc_r>
 800ad6a:	bf00      	nop
 800ad6c:	2000002c 	.word	0x2000002c

0800ad70 <sbrk_aligned>:
 800ad70:	b570      	push	{r4, r5, r6, lr}
 800ad72:	4e0f      	ldr	r6, [pc, #60]	@ (800adb0 <sbrk_aligned+0x40>)
 800ad74:	460c      	mov	r4, r1
 800ad76:	4605      	mov	r5, r0
 800ad78:	6831      	ldr	r1, [r6, #0]
 800ad7a:	b911      	cbnz	r1, 800ad82 <sbrk_aligned+0x12>
 800ad7c:	f000 fe8a 	bl	800ba94 <_sbrk_r>
 800ad80:	6030      	str	r0, [r6, #0]
 800ad82:	4621      	mov	r1, r4
 800ad84:	4628      	mov	r0, r5
 800ad86:	f000 fe85 	bl	800ba94 <_sbrk_r>
 800ad8a:	1c43      	adds	r3, r0, #1
 800ad8c:	d103      	bne.n	800ad96 <sbrk_aligned+0x26>
 800ad8e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800ad92:	4620      	mov	r0, r4
 800ad94:	bd70      	pop	{r4, r5, r6, pc}
 800ad96:	1cc4      	adds	r4, r0, #3
 800ad98:	f024 0403 	bic.w	r4, r4, #3
 800ad9c:	42a0      	cmp	r0, r4
 800ad9e:	d0f8      	beq.n	800ad92 <sbrk_aligned+0x22>
 800ada0:	1a21      	subs	r1, r4, r0
 800ada2:	4628      	mov	r0, r5
 800ada4:	f000 fe76 	bl	800ba94 <_sbrk_r>
 800ada8:	3001      	adds	r0, #1
 800adaa:	d1f2      	bne.n	800ad92 <sbrk_aligned+0x22>
 800adac:	e7ef      	b.n	800ad8e <sbrk_aligned+0x1e>
 800adae:	bf00      	nop
 800adb0:	200007a8 	.word	0x200007a8

0800adb4 <_malloc_r>:
 800adb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adb8:	1ccd      	adds	r5, r1, #3
 800adba:	4606      	mov	r6, r0
 800adbc:	f025 0503 	bic.w	r5, r5, #3
 800adc0:	3508      	adds	r5, #8
 800adc2:	2d0c      	cmp	r5, #12
 800adc4:	bf38      	it	cc
 800adc6:	250c      	movcc	r5, #12
 800adc8:	2d00      	cmp	r5, #0
 800adca:	db01      	blt.n	800add0 <_malloc_r+0x1c>
 800adcc:	42a9      	cmp	r1, r5
 800adce:	d904      	bls.n	800adda <_malloc_r+0x26>
 800add0:	230c      	movs	r3, #12
 800add2:	6033      	str	r3, [r6, #0]
 800add4:	2000      	movs	r0, #0
 800add6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800adda:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800aeb0 <_malloc_r+0xfc>
 800adde:	f000 f915 	bl	800b00c <__malloc_lock>
 800ade2:	f8d8 3000 	ldr.w	r3, [r8]
 800ade6:	461c      	mov	r4, r3
 800ade8:	bb44      	cbnz	r4, 800ae3c <_malloc_r+0x88>
 800adea:	4629      	mov	r1, r5
 800adec:	4630      	mov	r0, r6
 800adee:	f7ff ffbf 	bl	800ad70 <sbrk_aligned>
 800adf2:	1c43      	adds	r3, r0, #1
 800adf4:	4604      	mov	r4, r0
 800adf6:	d158      	bne.n	800aeaa <_malloc_r+0xf6>
 800adf8:	f8d8 4000 	ldr.w	r4, [r8]
 800adfc:	4627      	mov	r7, r4
 800adfe:	2f00      	cmp	r7, #0
 800ae00:	d143      	bne.n	800ae8a <_malloc_r+0xd6>
 800ae02:	2c00      	cmp	r4, #0
 800ae04:	d04b      	beq.n	800ae9e <_malloc_r+0xea>
 800ae06:	6823      	ldr	r3, [r4, #0]
 800ae08:	4639      	mov	r1, r7
 800ae0a:	4630      	mov	r0, r6
 800ae0c:	eb04 0903 	add.w	r9, r4, r3
 800ae10:	f000 fe40 	bl	800ba94 <_sbrk_r>
 800ae14:	4581      	cmp	r9, r0
 800ae16:	d142      	bne.n	800ae9e <_malloc_r+0xea>
 800ae18:	6821      	ldr	r1, [r4, #0]
 800ae1a:	4630      	mov	r0, r6
 800ae1c:	1a6d      	subs	r5, r5, r1
 800ae1e:	4629      	mov	r1, r5
 800ae20:	f7ff ffa6 	bl	800ad70 <sbrk_aligned>
 800ae24:	3001      	adds	r0, #1
 800ae26:	d03a      	beq.n	800ae9e <_malloc_r+0xea>
 800ae28:	6823      	ldr	r3, [r4, #0]
 800ae2a:	442b      	add	r3, r5
 800ae2c:	6023      	str	r3, [r4, #0]
 800ae2e:	f8d8 3000 	ldr.w	r3, [r8]
 800ae32:	685a      	ldr	r2, [r3, #4]
 800ae34:	bb62      	cbnz	r2, 800ae90 <_malloc_r+0xdc>
 800ae36:	f8c8 7000 	str.w	r7, [r8]
 800ae3a:	e00f      	b.n	800ae5c <_malloc_r+0xa8>
 800ae3c:	6822      	ldr	r2, [r4, #0]
 800ae3e:	1b52      	subs	r2, r2, r5
 800ae40:	d420      	bmi.n	800ae84 <_malloc_r+0xd0>
 800ae42:	2a0b      	cmp	r2, #11
 800ae44:	d917      	bls.n	800ae76 <_malloc_r+0xc2>
 800ae46:	1961      	adds	r1, r4, r5
 800ae48:	42a3      	cmp	r3, r4
 800ae4a:	6025      	str	r5, [r4, #0]
 800ae4c:	bf18      	it	ne
 800ae4e:	6059      	strne	r1, [r3, #4]
 800ae50:	6863      	ldr	r3, [r4, #4]
 800ae52:	bf08      	it	eq
 800ae54:	f8c8 1000 	streq.w	r1, [r8]
 800ae58:	5162      	str	r2, [r4, r5]
 800ae5a:	604b      	str	r3, [r1, #4]
 800ae5c:	4630      	mov	r0, r6
 800ae5e:	f000 f8db 	bl	800b018 <__malloc_unlock>
 800ae62:	f104 000b 	add.w	r0, r4, #11
 800ae66:	1d23      	adds	r3, r4, #4
 800ae68:	f020 0007 	bic.w	r0, r0, #7
 800ae6c:	1ac2      	subs	r2, r0, r3
 800ae6e:	bf1c      	itt	ne
 800ae70:	1a1b      	subne	r3, r3, r0
 800ae72:	50a3      	strne	r3, [r4, r2]
 800ae74:	e7af      	b.n	800add6 <_malloc_r+0x22>
 800ae76:	6862      	ldr	r2, [r4, #4]
 800ae78:	42a3      	cmp	r3, r4
 800ae7a:	bf0c      	ite	eq
 800ae7c:	f8c8 2000 	streq.w	r2, [r8]
 800ae80:	605a      	strne	r2, [r3, #4]
 800ae82:	e7eb      	b.n	800ae5c <_malloc_r+0xa8>
 800ae84:	4623      	mov	r3, r4
 800ae86:	6864      	ldr	r4, [r4, #4]
 800ae88:	e7ae      	b.n	800ade8 <_malloc_r+0x34>
 800ae8a:	463c      	mov	r4, r7
 800ae8c:	687f      	ldr	r7, [r7, #4]
 800ae8e:	e7b6      	b.n	800adfe <_malloc_r+0x4a>
 800ae90:	461a      	mov	r2, r3
 800ae92:	685b      	ldr	r3, [r3, #4]
 800ae94:	42a3      	cmp	r3, r4
 800ae96:	d1fb      	bne.n	800ae90 <_malloc_r+0xdc>
 800ae98:	2300      	movs	r3, #0
 800ae9a:	6053      	str	r3, [r2, #4]
 800ae9c:	e7de      	b.n	800ae5c <_malloc_r+0xa8>
 800ae9e:	230c      	movs	r3, #12
 800aea0:	4630      	mov	r0, r6
 800aea2:	6033      	str	r3, [r6, #0]
 800aea4:	f000 f8b8 	bl	800b018 <__malloc_unlock>
 800aea8:	e794      	b.n	800add4 <_malloc_r+0x20>
 800aeaa:	6005      	str	r5, [r0, #0]
 800aeac:	e7d6      	b.n	800ae5c <_malloc_r+0xa8>
 800aeae:	bf00      	nop
 800aeb0:	200007ac 	.word	0x200007ac

0800aeb4 <__sflush_r>:
 800aeb4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aeb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aebc:	0716      	lsls	r6, r2, #28
 800aebe:	4605      	mov	r5, r0
 800aec0:	460c      	mov	r4, r1
 800aec2:	d454      	bmi.n	800af6e <__sflush_r+0xba>
 800aec4:	684b      	ldr	r3, [r1, #4]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	dc02      	bgt.n	800aed0 <__sflush_r+0x1c>
 800aeca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800aecc:	2b00      	cmp	r3, #0
 800aece:	dd48      	ble.n	800af62 <__sflush_r+0xae>
 800aed0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aed2:	2e00      	cmp	r6, #0
 800aed4:	d045      	beq.n	800af62 <__sflush_r+0xae>
 800aed6:	2300      	movs	r3, #0
 800aed8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800aedc:	682f      	ldr	r7, [r5, #0]
 800aede:	6a21      	ldr	r1, [r4, #32]
 800aee0:	602b      	str	r3, [r5, #0]
 800aee2:	d030      	beq.n	800af46 <__sflush_r+0x92>
 800aee4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800aee6:	89a3      	ldrh	r3, [r4, #12]
 800aee8:	0759      	lsls	r1, r3, #29
 800aeea:	d505      	bpl.n	800aef8 <__sflush_r+0x44>
 800aeec:	6863      	ldr	r3, [r4, #4]
 800aeee:	1ad2      	subs	r2, r2, r3
 800aef0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800aef2:	b10b      	cbz	r3, 800aef8 <__sflush_r+0x44>
 800aef4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800aef6:	1ad2      	subs	r2, r2, r3
 800aef8:	2300      	movs	r3, #0
 800aefa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aefc:	6a21      	ldr	r1, [r4, #32]
 800aefe:	4628      	mov	r0, r5
 800af00:	47b0      	blx	r6
 800af02:	1c43      	adds	r3, r0, #1
 800af04:	89a3      	ldrh	r3, [r4, #12]
 800af06:	d106      	bne.n	800af16 <__sflush_r+0x62>
 800af08:	6829      	ldr	r1, [r5, #0]
 800af0a:	291d      	cmp	r1, #29
 800af0c:	d82b      	bhi.n	800af66 <__sflush_r+0xb2>
 800af0e:	4a2a      	ldr	r2, [pc, #168]	@ (800afb8 <__sflush_r+0x104>)
 800af10:	40ca      	lsrs	r2, r1
 800af12:	07d6      	lsls	r6, r2, #31
 800af14:	d527      	bpl.n	800af66 <__sflush_r+0xb2>
 800af16:	2200      	movs	r2, #0
 800af18:	04d9      	lsls	r1, r3, #19
 800af1a:	6062      	str	r2, [r4, #4]
 800af1c:	6922      	ldr	r2, [r4, #16]
 800af1e:	6022      	str	r2, [r4, #0]
 800af20:	d504      	bpl.n	800af2c <__sflush_r+0x78>
 800af22:	1c42      	adds	r2, r0, #1
 800af24:	d101      	bne.n	800af2a <__sflush_r+0x76>
 800af26:	682b      	ldr	r3, [r5, #0]
 800af28:	b903      	cbnz	r3, 800af2c <__sflush_r+0x78>
 800af2a:	6560      	str	r0, [r4, #84]	@ 0x54
 800af2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800af2e:	602f      	str	r7, [r5, #0]
 800af30:	b1b9      	cbz	r1, 800af62 <__sflush_r+0xae>
 800af32:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800af36:	4299      	cmp	r1, r3
 800af38:	d002      	beq.n	800af40 <__sflush_r+0x8c>
 800af3a:	4628      	mov	r0, r5
 800af3c:	f000 fe20 	bl	800bb80 <_free_r>
 800af40:	2300      	movs	r3, #0
 800af42:	6363      	str	r3, [r4, #52]	@ 0x34
 800af44:	e00d      	b.n	800af62 <__sflush_r+0xae>
 800af46:	2301      	movs	r3, #1
 800af48:	4628      	mov	r0, r5
 800af4a:	47b0      	blx	r6
 800af4c:	4602      	mov	r2, r0
 800af4e:	1c50      	adds	r0, r2, #1
 800af50:	d1c9      	bne.n	800aee6 <__sflush_r+0x32>
 800af52:	682b      	ldr	r3, [r5, #0]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d0c6      	beq.n	800aee6 <__sflush_r+0x32>
 800af58:	2b1d      	cmp	r3, #29
 800af5a:	d001      	beq.n	800af60 <__sflush_r+0xac>
 800af5c:	2b16      	cmp	r3, #22
 800af5e:	d11d      	bne.n	800af9c <__sflush_r+0xe8>
 800af60:	602f      	str	r7, [r5, #0]
 800af62:	2000      	movs	r0, #0
 800af64:	e021      	b.n	800afaa <__sflush_r+0xf6>
 800af66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af6a:	b21b      	sxth	r3, r3
 800af6c:	e01a      	b.n	800afa4 <__sflush_r+0xf0>
 800af6e:	690f      	ldr	r7, [r1, #16]
 800af70:	2f00      	cmp	r7, #0
 800af72:	d0f6      	beq.n	800af62 <__sflush_r+0xae>
 800af74:	0793      	lsls	r3, r2, #30
 800af76:	680e      	ldr	r6, [r1, #0]
 800af78:	600f      	str	r7, [r1, #0]
 800af7a:	bf0c      	ite	eq
 800af7c:	694b      	ldreq	r3, [r1, #20]
 800af7e:	2300      	movne	r3, #0
 800af80:	eba6 0807 	sub.w	r8, r6, r7
 800af84:	608b      	str	r3, [r1, #8]
 800af86:	f1b8 0f00 	cmp.w	r8, #0
 800af8a:	ddea      	ble.n	800af62 <__sflush_r+0xae>
 800af8c:	4643      	mov	r3, r8
 800af8e:	463a      	mov	r2, r7
 800af90:	6a21      	ldr	r1, [r4, #32]
 800af92:	4628      	mov	r0, r5
 800af94:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800af96:	47b0      	blx	r6
 800af98:	2800      	cmp	r0, #0
 800af9a:	dc08      	bgt.n	800afae <__sflush_r+0xfa>
 800af9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afa0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800afa4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800afa8:	81a3      	strh	r3, [r4, #12]
 800afaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afae:	4407      	add	r7, r0
 800afb0:	eba8 0800 	sub.w	r8, r8, r0
 800afb4:	e7e7      	b.n	800af86 <__sflush_r+0xd2>
 800afb6:	bf00      	nop
 800afb8:	20400001 	.word	0x20400001

0800afbc <_fflush_r>:
 800afbc:	b538      	push	{r3, r4, r5, lr}
 800afbe:	690b      	ldr	r3, [r1, #16]
 800afc0:	4605      	mov	r5, r0
 800afc2:	460c      	mov	r4, r1
 800afc4:	b913      	cbnz	r3, 800afcc <_fflush_r+0x10>
 800afc6:	2500      	movs	r5, #0
 800afc8:	4628      	mov	r0, r5
 800afca:	bd38      	pop	{r3, r4, r5, pc}
 800afcc:	b118      	cbz	r0, 800afd6 <_fflush_r+0x1a>
 800afce:	6a03      	ldr	r3, [r0, #32]
 800afd0:	b90b      	cbnz	r3, 800afd6 <_fflush_r+0x1a>
 800afd2:	f7fe fccf 	bl	8009974 <__sinit>
 800afd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d0f3      	beq.n	800afc6 <_fflush_r+0xa>
 800afde:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800afe0:	07d0      	lsls	r0, r2, #31
 800afe2:	d404      	bmi.n	800afee <_fflush_r+0x32>
 800afe4:	0599      	lsls	r1, r3, #22
 800afe6:	d402      	bmi.n	800afee <_fflush_r+0x32>
 800afe8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800afea:	f7fe fd9c 	bl	8009b26 <__retarget_lock_acquire_recursive>
 800afee:	4628      	mov	r0, r5
 800aff0:	4621      	mov	r1, r4
 800aff2:	f7ff ff5f 	bl	800aeb4 <__sflush_r>
 800aff6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aff8:	4605      	mov	r5, r0
 800affa:	07da      	lsls	r2, r3, #31
 800affc:	d4e4      	bmi.n	800afc8 <_fflush_r+0xc>
 800affe:	89a3      	ldrh	r3, [r4, #12]
 800b000:	059b      	lsls	r3, r3, #22
 800b002:	d4e1      	bmi.n	800afc8 <_fflush_r+0xc>
 800b004:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b006:	f7fe fd8f 	bl	8009b28 <__retarget_lock_release_recursive>
 800b00a:	e7dd      	b.n	800afc8 <_fflush_r+0xc>

0800b00c <__malloc_lock>:
 800b00c:	4801      	ldr	r0, [pc, #4]	@ (800b014 <__malloc_lock+0x8>)
 800b00e:	f7fe bd8a 	b.w	8009b26 <__retarget_lock_acquire_recursive>
 800b012:	bf00      	nop
 800b014:	200007a4 	.word	0x200007a4

0800b018 <__malloc_unlock>:
 800b018:	4801      	ldr	r0, [pc, #4]	@ (800b020 <__malloc_unlock+0x8>)
 800b01a:	f7fe bd85 	b.w	8009b28 <__retarget_lock_release_recursive>
 800b01e:	bf00      	nop
 800b020:	200007a4 	.word	0x200007a4

0800b024 <_Balloc>:
 800b024:	b570      	push	{r4, r5, r6, lr}
 800b026:	69c6      	ldr	r6, [r0, #28]
 800b028:	4604      	mov	r4, r0
 800b02a:	460d      	mov	r5, r1
 800b02c:	b976      	cbnz	r6, 800b04c <_Balloc+0x28>
 800b02e:	2010      	movs	r0, #16
 800b030:	f7ff fe96 	bl	800ad60 <malloc>
 800b034:	4602      	mov	r2, r0
 800b036:	61e0      	str	r0, [r4, #28]
 800b038:	b920      	cbnz	r0, 800b044 <_Balloc+0x20>
 800b03a:	4b18      	ldr	r3, [pc, #96]	@ (800b09c <_Balloc+0x78>)
 800b03c:	216b      	movs	r1, #107	@ 0x6b
 800b03e:	4818      	ldr	r0, [pc, #96]	@ (800b0a0 <_Balloc+0x7c>)
 800b040:	f000 fd6c 	bl	800bb1c <__assert_func>
 800b044:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b048:	6006      	str	r6, [r0, #0]
 800b04a:	60c6      	str	r6, [r0, #12]
 800b04c:	69e6      	ldr	r6, [r4, #28]
 800b04e:	68f3      	ldr	r3, [r6, #12]
 800b050:	b183      	cbz	r3, 800b074 <_Balloc+0x50>
 800b052:	69e3      	ldr	r3, [r4, #28]
 800b054:	68db      	ldr	r3, [r3, #12]
 800b056:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b05a:	b9b8      	cbnz	r0, 800b08c <_Balloc+0x68>
 800b05c:	2101      	movs	r1, #1
 800b05e:	4620      	mov	r0, r4
 800b060:	fa01 f605 	lsl.w	r6, r1, r5
 800b064:	1d72      	adds	r2, r6, #5
 800b066:	0092      	lsls	r2, r2, #2
 800b068:	f000 fd76 	bl	800bb58 <_calloc_r>
 800b06c:	b160      	cbz	r0, 800b088 <_Balloc+0x64>
 800b06e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b072:	e00e      	b.n	800b092 <_Balloc+0x6e>
 800b074:	2221      	movs	r2, #33	@ 0x21
 800b076:	2104      	movs	r1, #4
 800b078:	4620      	mov	r0, r4
 800b07a:	f000 fd6d 	bl	800bb58 <_calloc_r>
 800b07e:	69e3      	ldr	r3, [r4, #28]
 800b080:	60f0      	str	r0, [r6, #12]
 800b082:	68db      	ldr	r3, [r3, #12]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d1e4      	bne.n	800b052 <_Balloc+0x2e>
 800b088:	2000      	movs	r0, #0
 800b08a:	bd70      	pop	{r4, r5, r6, pc}
 800b08c:	6802      	ldr	r2, [r0, #0]
 800b08e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b092:	2300      	movs	r3, #0
 800b094:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b098:	e7f7      	b.n	800b08a <_Balloc+0x66>
 800b09a:	bf00      	nop
 800b09c:	08022e19 	.word	0x08022e19
 800b0a0:	08022eaa 	.word	0x08022eaa

0800b0a4 <_Bfree>:
 800b0a4:	b570      	push	{r4, r5, r6, lr}
 800b0a6:	69c6      	ldr	r6, [r0, #28]
 800b0a8:	4605      	mov	r5, r0
 800b0aa:	460c      	mov	r4, r1
 800b0ac:	b976      	cbnz	r6, 800b0cc <_Bfree+0x28>
 800b0ae:	2010      	movs	r0, #16
 800b0b0:	f7ff fe56 	bl	800ad60 <malloc>
 800b0b4:	4602      	mov	r2, r0
 800b0b6:	61e8      	str	r0, [r5, #28]
 800b0b8:	b920      	cbnz	r0, 800b0c4 <_Bfree+0x20>
 800b0ba:	4b09      	ldr	r3, [pc, #36]	@ (800b0e0 <_Bfree+0x3c>)
 800b0bc:	218f      	movs	r1, #143	@ 0x8f
 800b0be:	4809      	ldr	r0, [pc, #36]	@ (800b0e4 <_Bfree+0x40>)
 800b0c0:	f000 fd2c 	bl	800bb1c <__assert_func>
 800b0c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b0c8:	6006      	str	r6, [r0, #0]
 800b0ca:	60c6      	str	r6, [r0, #12]
 800b0cc:	b13c      	cbz	r4, 800b0de <_Bfree+0x3a>
 800b0ce:	69eb      	ldr	r3, [r5, #28]
 800b0d0:	6862      	ldr	r2, [r4, #4]
 800b0d2:	68db      	ldr	r3, [r3, #12]
 800b0d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b0d8:	6021      	str	r1, [r4, #0]
 800b0da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b0de:	bd70      	pop	{r4, r5, r6, pc}
 800b0e0:	08022e19 	.word	0x08022e19
 800b0e4:	08022eaa 	.word	0x08022eaa

0800b0e8 <__multadd>:
 800b0e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0ec:	f101 0c14 	add.w	ip, r1, #20
 800b0f0:	4607      	mov	r7, r0
 800b0f2:	460c      	mov	r4, r1
 800b0f4:	461e      	mov	r6, r3
 800b0f6:	690d      	ldr	r5, [r1, #16]
 800b0f8:	2000      	movs	r0, #0
 800b0fa:	f8dc 3000 	ldr.w	r3, [ip]
 800b0fe:	3001      	adds	r0, #1
 800b100:	b299      	uxth	r1, r3
 800b102:	4285      	cmp	r5, r0
 800b104:	fb02 6101 	mla	r1, r2, r1, r6
 800b108:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b10c:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800b110:	b289      	uxth	r1, r1
 800b112:	fb02 3306 	mla	r3, r2, r6, r3
 800b116:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b11a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b11e:	f84c 1b04 	str.w	r1, [ip], #4
 800b122:	dcea      	bgt.n	800b0fa <__multadd+0x12>
 800b124:	b30e      	cbz	r6, 800b16a <__multadd+0x82>
 800b126:	68a3      	ldr	r3, [r4, #8]
 800b128:	42ab      	cmp	r3, r5
 800b12a:	dc19      	bgt.n	800b160 <__multadd+0x78>
 800b12c:	6861      	ldr	r1, [r4, #4]
 800b12e:	4638      	mov	r0, r7
 800b130:	3101      	adds	r1, #1
 800b132:	f7ff ff77 	bl	800b024 <_Balloc>
 800b136:	4680      	mov	r8, r0
 800b138:	b928      	cbnz	r0, 800b146 <__multadd+0x5e>
 800b13a:	4602      	mov	r2, r0
 800b13c:	4b0c      	ldr	r3, [pc, #48]	@ (800b170 <__multadd+0x88>)
 800b13e:	21ba      	movs	r1, #186	@ 0xba
 800b140:	480c      	ldr	r0, [pc, #48]	@ (800b174 <__multadd+0x8c>)
 800b142:	f000 fceb 	bl	800bb1c <__assert_func>
 800b146:	6922      	ldr	r2, [r4, #16]
 800b148:	f104 010c 	add.w	r1, r4, #12
 800b14c:	300c      	adds	r0, #12
 800b14e:	3202      	adds	r2, #2
 800b150:	0092      	lsls	r2, r2, #2
 800b152:	f7fe fcfd 	bl	8009b50 <memcpy>
 800b156:	4621      	mov	r1, r4
 800b158:	4644      	mov	r4, r8
 800b15a:	4638      	mov	r0, r7
 800b15c:	f7ff ffa2 	bl	800b0a4 <_Bfree>
 800b160:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b164:	3501      	adds	r5, #1
 800b166:	615e      	str	r6, [r3, #20]
 800b168:	6125      	str	r5, [r4, #16]
 800b16a:	4620      	mov	r0, r4
 800b16c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b170:	08022e88 	.word	0x08022e88
 800b174:	08022eaa 	.word	0x08022eaa

0800b178 <__hi0bits>:
 800b178:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b17c:	4603      	mov	r3, r0
 800b17e:	bf36      	itet	cc
 800b180:	0403      	lslcc	r3, r0, #16
 800b182:	2000      	movcs	r0, #0
 800b184:	2010      	movcc	r0, #16
 800b186:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b18a:	bf3c      	itt	cc
 800b18c:	021b      	lslcc	r3, r3, #8
 800b18e:	3008      	addcc	r0, #8
 800b190:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b194:	bf3c      	itt	cc
 800b196:	011b      	lslcc	r3, r3, #4
 800b198:	3004      	addcc	r0, #4
 800b19a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b19e:	bf3c      	itt	cc
 800b1a0:	009b      	lslcc	r3, r3, #2
 800b1a2:	3002      	addcc	r0, #2
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	db05      	blt.n	800b1b4 <__hi0bits+0x3c>
 800b1a8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b1ac:	f100 0001 	add.w	r0, r0, #1
 800b1b0:	bf08      	it	eq
 800b1b2:	2020      	moveq	r0, #32
 800b1b4:	4770      	bx	lr

0800b1b6 <__lo0bits>:
 800b1b6:	6803      	ldr	r3, [r0, #0]
 800b1b8:	4602      	mov	r2, r0
 800b1ba:	f013 0007 	ands.w	r0, r3, #7
 800b1be:	d00b      	beq.n	800b1d8 <__lo0bits+0x22>
 800b1c0:	07d9      	lsls	r1, r3, #31
 800b1c2:	d421      	bmi.n	800b208 <__lo0bits+0x52>
 800b1c4:	0798      	lsls	r0, r3, #30
 800b1c6:	bf47      	ittee	mi
 800b1c8:	085b      	lsrmi	r3, r3, #1
 800b1ca:	2001      	movmi	r0, #1
 800b1cc:	089b      	lsrpl	r3, r3, #2
 800b1ce:	2002      	movpl	r0, #2
 800b1d0:	bf4c      	ite	mi
 800b1d2:	6013      	strmi	r3, [r2, #0]
 800b1d4:	6013      	strpl	r3, [r2, #0]
 800b1d6:	4770      	bx	lr
 800b1d8:	b299      	uxth	r1, r3
 800b1da:	b909      	cbnz	r1, 800b1e0 <__lo0bits+0x2a>
 800b1dc:	0c1b      	lsrs	r3, r3, #16
 800b1de:	2010      	movs	r0, #16
 800b1e0:	b2d9      	uxtb	r1, r3
 800b1e2:	b909      	cbnz	r1, 800b1e8 <__lo0bits+0x32>
 800b1e4:	3008      	adds	r0, #8
 800b1e6:	0a1b      	lsrs	r3, r3, #8
 800b1e8:	0719      	lsls	r1, r3, #28
 800b1ea:	bf04      	itt	eq
 800b1ec:	091b      	lsreq	r3, r3, #4
 800b1ee:	3004      	addeq	r0, #4
 800b1f0:	0799      	lsls	r1, r3, #30
 800b1f2:	bf04      	itt	eq
 800b1f4:	089b      	lsreq	r3, r3, #2
 800b1f6:	3002      	addeq	r0, #2
 800b1f8:	07d9      	lsls	r1, r3, #31
 800b1fa:	d403      	bmi.n	800b204 <__lo0bits+0x4e>
 800b1fc:	085b      	lsrs	r3, r3, #1
 800b1fe:	f100 0001 	add.w	r0, r0, #1
 800b202:	d003      	beq.n	800b20c <__lo0bits+0x56>
 800b204:	6013      	str	r3, [r2, #0]
 800b206:	4770      	bx	lr
 800b208:	2000      	movs	r0, #0
 800b20a:	4770      	bx	lr
 800b20c:	2020      	movs	r0, #32
 800b20e:	4770      	bx	lr

0800b210 <__i2b>:
 800b210:	b510      	push	{r4, lr}
 800b212:	460c      	mov	r4, r1
 800b214:	2101      	movs	r1, #1
 800b216:	f7ff ff05 	bl	800b024 <_Balloc>
 800b21a:	4602      	mov	r2, r0
 800b21c:	b928      	cbnz	r0, 800b22a <__i2b+0x1a>
 800b21e:	4b05      	ldr	r3, [pc, #20]	@ (800b234 <__i2b+0x24>)
 800b220:	f240 1145 	movw	r1, #325	@ 0x145
 800b224:	4804      	ldr	r0, [pc, #16]	@ (800b238 <__i2b+0x28>)
 800b226:	f000 fc79 	bl	800bb1c <__assert_func>
 800b22a:	2301      	movs	r3, #1
 800b22c:	6144      	str	r4, [r0, #20]
 800b22e:	6103      	str	r3, [r0, #16]
 800b230:	bd10      	pop	{r4, pc}
 800b232:	bf00      	nop
 800b234:	08022e88 	.word	0x08022e88
 800b238:	08022eaa 	.word	0x08022eaa

0800b23c <__multiply>:
 800b23c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b240:	4617      	mov	r7, r2
 800b242:	690a      	ldr	r2, [r1, #16]
 800b244:	4689      	mov	r9, r1
 800b246:	b085      	sub	sp, #20
 800b248:	693b      	ldr	r3, [r7, #16]
 800b24a:	429a      	cmp	r2, r3
 800b24c:	bfa2      	ittt	ge
 800b24e:	463b      	movge	r3, r7
 800b250:	460f      	movge	r7, r1
 800b252:	4699      	movge	r9, r3
 800b254:	693d      	ldr	r5, [r7, #16]
 800b256:	68bb      	ldr	r3, [r7, #8]
 800b258:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b25c:	6879      	ldr	r1, [r7, #4]
 800b25e:	eb05 060a 	add.w	r6, r5, sl
 800b262:	42b3      	cmp	r3, r6
 800b264:	bfb8      	it	lt
 800b266:	3101      	addlt	r1, #1
 800b268:	f7ff fedc 	bl	800b024 <_Balloc>
 800b26c:	b930      	cbnz	r0, 800b27c <__multiply+0x40>
 800b26e:	4602      	mov	r2, r0
 800b270:	4b42      	ldr	r3, [pc, #264]	@ (800b37c <__multiply+0x140>)
 800b272:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b276:	4842      	ldr	r0, [pc, #264]	@ (800b380 <__multiply+0x144>)
 800b278:	f000 fc50 	bl	800bb1c <__assert_func>
 800b27c:	f100 0414 	add.w	r4, r0, #20
 800b280:	2200      	movs	r2, #0
 800b282:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800b286:	4623      	mov	r3, r4
 800b288:	4573      	cmp	r3, lr
 800b28a:	d320      	bcc.n	800b2ce <__multiply+0x92>
 800b28c:	f107 0814 	add.w	r8, r7, #20
 800b290:	f109 0114 	add.w	r1, r9, #20
 800b294:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800b298:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800b29c:	9302      	str	r3, [sp, #8]
 800b29e:	1beb      	subs	r3, r5, r7
 800b2a0:	3715      	adds	r7, #21
 800b2a2:	3b15      	subs	r3, #21
 800b2a4:	f023 0303 	bic.w	r3, r3, #3
 800b2a8:	3304      	adds	r3, #4
 800b2aa:	42bd      	cmp	r5, r7
 800b2ac:	bf38      	it	cc
 800b2ae:	2304      	movcc	r3, #4
 800b2b0:	9301      	str	r3, [sp, #4]
 800b2b2:	9b02      	ldr	r3, [sp, #8]
 800b2b4:	9103      	str	r1, [sp, #12]
 800b2b6:	428b      	cmp	r3, r1
 800b2b8:	d80c      	bhi.n	800b2d4 <__multiply+0x98>
 800b2ba:	2e00      	cmp	r6, #0
 800b2bc:	dd03      	ble.n	800b2c6 <__multiply+0x8a>
 800b2be:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d057      	beq.n	800b376 <__multiply+0x13a>
 800b2c6:	6106      	str	r6, [r0, #16]
 800b2c8:	b005      	add	sp, #20
 800b2ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2ce:	f843 2b04 	str.w	r2, [r3], #4
 800b2d2:	e7d9      	b.n	800b288 <__multiply+0x4c>
 800b2d4:	f8b1 a000 	ldrh.w	sl, [r1]
 800b2d8:	f1ba 0f00 	cmp.w	sl, #0
 800b2dc:	d021      	beq.n	800b322 <__multiply+0xe6>
 800b2de:	46c4      	mov	ip, r8
 800b2e0:	46a1      	mov	r9, r4
 800b2e2:	2700      	movs	r7, #0
 800b2e4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b2e8:	f8d9 3000 	ldr.w	r3, [r9]
 800b2ec:	fa1f fb82 	uxth.w	fp, r2
 800b2f0:	4565      	cmp	r5, ip
 800b2f2:	b29b      	uxth	r3, r3
 800b2f4:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800b2f8:	fb0a 330b 	mla	r3, sl, fp, r3
 800b2fc:	443b      	add	r3, r7
 800b2fe:	f8d9 7000 	ldr.w	r7, [r9]
 800b302:	ea4f 4717 	mov.w	r7, r7, lsr #16
 800b306:	fb0a 7202 	mla	r2, sl, r2, r7
 800b30a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800b30e:	b29b      	uxth	r3, r3
 800b310:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800b314:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b318:	f849 3b04 	str.w	r3, [r9], #4
 800b31c:	d8e2      	bhi.n	800b2e4 <__multiply+0xa8>
 800b31e:	9b01      	ldr	r3, [sp, #4]
 800b320:	50e7      	str	r7, [r4, r3]
 800b322:	9b03      	ldr	r3, [sp, #12]
 800b324:	3104      	adds	r1, #4
 800b326:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b32a:	f1b9 0f00 	cmp.w	r9, #0
 800b32e:	d020      	beq.n	800b372 <__multiply+0x136>
 800b330:	6823      	ldr	r3, [r4, #0]
 800b332:	4647      	mov	r7, r8
 800b334:	46a4      	mov	ip, r4
 800b336:	f04f 0a00 	mov.w	sl, #0
 800b33a:	f8b7 b000 	ldrh.w	fp, [r7]
 800b33e:	b29b      	uxth	r3, r3
 800b340:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800b344:	fb09 220b 	mla	r2, r9, fp, r2
 800b348:	4452      	add	r2, sl
 800b34a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b34e:	f84c 3b04 	str.w	r3, [ip], #4
 800b352:	f857 3b04 	ldr.w	r3, [r7], #4
 800b356:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b35a:	f8bc 3000 	ldrh.w	r3, [ip]
 800b35e:	42bd      	cmp	r5, r7
 800b360:	fb09 330a 	mla	r3, r9, sl, r3
 800b364:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800b368:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b36c:	d8e5      	bhi.n	800b33a <__multiply+0xfe>
 800b36e:	9a01      	ldr	r2, [sp, #4]
 800b370:	50a3      	str	r3, [r4, r2]
 800b372:	3404      	adds	r4, #4
 800b374:	e79d      	b.n	800b2b2 <__multiply+0x76>
 800b376:	3e01      	subs	r6, #1
 800b378:	e79f      	b.n	800b2ba <__multiply+0x7e>
 800b37a:	bf00      	nop
 800b37c:	08022e88 	.word	0x08022e88
 800b380:	08022eaa 	.word	0x08022eaa

0800b384 <__pow5mult>:
 800b384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b388:	4615      	mov	r5, r2
 800b38a:	f012 0203 	ands.w	r2, r2, #3
 800b38e:	4607      	mov	r7, r0
 800b390:	460e      	mov	r6, r1
 800b392:	d007      	beq.n	800b3a4 <__pow5mult+0x20>
 800b394:	3a01      	subs	r2, #1
 800b396:	4c25      	ldr	r4, [pc, #148]	@ (800b42c <__pow5mult+0xa8>)
 800b398:	2300      	movs	r3, #0
 800b39a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b39e:	f7ff fea3 	bl	800b0e8 <__multadd>
 800b3a2:	4606      	mov	r6, r0
 800b3a4:	10ad      	asrs	r5, r5, #2
 800b3a6:	d03d      	beq.n	800b424 <__pow5mult+0xa0>
 800b3a8:	69fc      	ldr	r4, [r7, #28]
 800b3aa:	b97c      	cbnz	r4, 800b3cc <__pow5mult+0x48>
 800b3ac:	2010      	movs	r0, #16
 800b3ae:	f7ff fcd7 	bl	800ad60 <malloc>
 800b3b2:	4602      	mov	r2, r0
 800b3b4:	61f8      	str	r0, [r7, #28]
 800b3b6:	b928      	cbnz	r0, 800b3c4 <__pow5mult+0x40>
 800b3b8:	4b1d      	ldr	r3, [pc, #116]	@ (800b430 <__pow5mult+0xac>)
 800b3ba:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b3be:	481d      	ldr	r0, [pc, #116]	@ (800b434 <__pow5mult+0xb0>)
 800b3c0:	f000 fbac 	bl	800bb1c <__assert_func>
 800b3c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b3c8:	6004      	str	r4, [r0, #0]
 800b3ca:	60c4      	str	r4, [r0, #12]
 800b3cc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b3d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b3d4:	b94c      	cbnz	r4, 800b3ea <__pow5mult+0x66>
 800b3d6:	f240 2171 	movw	r1, #625	@ 0x271
 800b3da:	4638      	mov	r0, r7
 800b3dc:	f7ff ff18 	bl	800b210 <__i2b>
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	4604      	mov	r4, r0
 800b3e4:	f8c8 0008 	str.w	r0, [r8, #8]
 800b3e8:	6003      	str	r3, [r0, #0]
 800b3ea:	f04f 0900 	mov.w	r9, #0
 800b3ee:	07eb      	lsls	r3, r5, #31
 800b3f0:	d50a      	bpl.n	800b408 <__pow5mult+0x84>
 800b3f2:	4631      	mov	r1, r6
 800b3f4:	4622      	mov	r2, r4
 800b3f6:	4638      	mov	r0, r7
 800b3f8:	f7ff ff20 	bl	800b23c <__multiply>
 800b3fc:	4680      	mov	r8, r0
 800b3fe:	4631      	mov	r1, r6
 800b400:	4638      	mov	r0, r7
 800b402:	4646      	mov	r6, r8
 800b404:	f7ff fe4e 	bl	800b0a4 <_Bfree>
 800b408:	106d      	asrs	r5, r5, #1
 800b40a:	d00b      	beq.n	800b424 <__pow5mult+0xa0>
 800b40c:	6820      	ldr	r0, [r4, #0]
 800b40e:	b938      	cbnz	r0, 800b420 <__pow5mult+0x9c>
 800b410:	4622      	mov	r2, r4
 800b412:	4621      	mov	r1, r4
 800b414:	4638      	mov	r0, r7
 800b416:	f7ff ff11 	bl	800b23c <__multiply>
 800b41a:	6020      	str	r0, [r4, #0]
 800b41c:	f8c0 9000 	str.w	r9, [r0]
 800b420:	4604      	mov	r4, r0
 800b422:	e7e4      	b.n	800b3ee <__pow5mult+0x6a>
 800b424:	4630      	mov	r0, r6
 800b426:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b42a:	bf00      	nop
 800b42c:	08022f4c 	.word	0x08022f4c
 800b430:	08022e19 	.word	0x08022e19
 800b434:	08022eaa 	.word	0x08022eaa

0800b438 <__lshift>:
 800b438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b43c:	460c      	mov	r4, r1
 800b43e:	4607      	mov	r7, r0
 800b440:	4691      	mov	r9, r2
 800b442:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b446:	6923      	ldr	r3, [r4, #16]
 800b448:	6849      	ldr	r1, [r1, #4]
 800b44a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b44e:	68a3      	ldr	r3, [r4, #8]
 800b450:	f108 0601 	add.w	r6, r8, #1
 800b454:	42b3      	cmp	r3, r6
 800b456:	db0b      	blt.n	800b470 <__lshift+0x38>
 800b458:	4638      	mov	r0, r7
 800b45a:	f7ff fde3 	bl	800b024 <_Balloc>
 800b45e:	4605      	mov	r5, r0
 800b460:	b948      	cbnz	r0, 800b476 <__lshift+0x3e>
 800b462:	4602      	mov	r2, r0
 800b464:	4b28      	ldr	r3, [pc, #160]	@ (800b508 <__lshift+0xd0>)
 800b466:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b46a:	4828      	ldr	r0, [pc, #160]	@ (800b50c <__lshift+0xd4>)
 800b46c:	f000 fb56 	bl	800bb1c <__assert_func>
 800b470:	3101      	adds	r1, #1
 800b472:	005b      	lsls	r3, r3, #1
 800b474:	e7ee      	b.n	800b454 <__lshift+0x1c>
 800b476:	2300      	movs	r3, #0
 800b478:	f100 0114 	add.w	r1, r0, #20
 800b47c:	f100 0210 	add.w	r2, r0, #16
 800b480:	4618      	mov	r0, r3
 800b482:	4553      	cmp	r3, sl
 800b484:	db33      	blt.n	800b4ee <__lshift+0xb6>
 800b486:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b48a:	f104 0314 	add.w	r3, r4, #20
 800b48e:	6920      	ldr	r0, [r4, #16]
 800b490:	f019 091f 	ands.w	r9, r9, #31
 800b494:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b498:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b49c:	d02b      	beq.n	800b4f6 <__lshift+0xbe>
 800b49e:	f1c9 0e20 	rsb	lr, r9, #32
 800b4a2:	468a      	mov	sl, r1
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	6818      	ldr	r0, [r3, #0]
 800b4a8:	fa00 f009 	lsl.w	r0, r0, r9
 800b4ac:	4310      	orrs	r0, r2
 800b4ae:	f84a 0b04 	str.w	r0, [sl], #4
 800b4b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4b6:	459c      	cmp	ip, r3
 800b4b8:	fa22 f20e 	lsr.w	r2, r2, lr
 800b4bc:	d8f3      	bhi.n	800b4a6 <__lshift+0x6e>
 800b4be:	ebac 0304 	sub.w	r3, ip, r4
 800b4c2:	f104 0015 	add.w	r0, r4, #21
 800b4c6:	3b15      	subs	r3, #21
 800b4c8:	f023 0303 	bic.w	r3, r3, #3
 800b4cc:	3304      	adds	r3, #4
 800b4ce:	4560      	cmp	r0, ip
 800b4d0:	bf88      	it	hi
 800b4d2:	2304      	movhi	r3, #4
 800b4d4:	50ca      	str	r2, [r1, r3]
 800b4d6:	b10a      	cbz	r2, 800b4dc <__lshift+0xa4>
 800b4d8:	f108 0602 	add.w	r6, r8, #2
 800b4dc:	3e01      	subs	r6, #1
 800b4de:	4638      	mov	r0, r7
 800b4e0:	4621      	mov	r1, r4
 800b4e2:	612e      	str	r6, [r5, #16]
 800b4e4:	f7ff fdde 	bl	800b0a4 <_Bfree>
 800b4e8:	4628      	mov	r0, r5
 800b4ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4ee:	3301      	adds	r3, #1
 800b4f0:	f842 0f04 	str.w	r0, [r2, #4]!
 800b4f4:	e7c5      	b.n	800b482 <__lshift+0x4a>
 800b4f6:	3904      	subs	r1, #4
 800b4f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4fc:	459c      	cmp	ip, r3
 800b4fe:	f841 2f04 	str.w	r2, [r1, #4]!
 800b502:	d8f9      	bhi.n	800b4f8 <__lshift+0xc0>
 800b504:	e7ea      	b.n	800b4dc <__lshift+0xa4>
 800b506:	bf00      	nop
 800b508:	08022e88 	.word	0x08022e88
 800b50c:	08022eaa 	.word	0x08022eaa

0800b510 <__mcmp>:
 800b510:	4603      	mov	r3, r0
 800b512:	690a      	ldr	r2, [r1, #16]
 800b514:	6900      	ldr	r0, [r0, #16]
 800b516:	1a80      	subs	r0, r0, r2
 800b518:	b530      	push	{r4, r5, lr}
 800b51a:	d10e      	bne.n	800b53a <__mcmp+0x2a>
 800b51c:	3314      	adds	r3, #20
 800b51e:	3114      	adds	r1, #20
 800b520:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b524:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b528:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b52c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b530:	4295      	cmp	r5, r2
 800b532:	d003      	beq.n	800b53c <__mcmp+0x2c>
 800b534:	d205      	bcs.n	800b542 <__mcmp+0x32>
 800b536:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b53a:	bd30      	pop	{r4, r5, pc}
 800b53c:	42a3      	cmp	r3, r4
 800b53e:	d3f3      	bcc.n	800b528 <__mcmp+0x18>
 800b540:	e7fb      	b.n	800b53a <__mcmp+0x2a>
 800b542:	2001      	movs	r0, #1
 800b544:	e7f9      	b.n	800b53a <__mcmp+0x2a>
	...

0800b548 <__mdiff>:
 800b548:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b54c:	4689      	mov	r9, r1
 800b54e:	4606      	mov	r6, r0
 800b550:	4611      	mov	r1, r2
 800b552:	4614      	mov	r4, r2
 800b554:	4648      	mov	r0, r9
 800b556:	f7ff ffdb 	bl	800b510 <__mcmp>
 800b55a:	1e05      	subs	r5, r0, #0
 800b55c:	d112      	bne.n	800b584 <__mdiff+0x3c>
 800b55e:	4629      	mov	r1, r5
 800b560:	4630      	mov	r0, r6
 800b562:	f7ff fd5f 	bl	800b024 <_Balloc>
 800b566:	4602      	mov	r2, r0
 800b568:	b928      	cbnz	r0, 800b576 <__mdiff+0x2e>
 800b56a:	4b41      	ldr	r3, [pc, #260]	@ (800b670 <__mdiff+0x128>)
 800b56c:	f240 2137 	movw	r1, #567	@ 0x237
 800b570:	4840      	ldr	r0, [pc, #256]	@ (800b674 <__mdiff+0x12c>)
 800b572:	f000 fad3 	bl	800bb1c <__assert_func>
 800b576:	2301      	movs	r3, #1
 800b578:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b57c:	4610      	mov	r0, r2
 800b57e:	b003      	add	sp, #12
 800b580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b584:	bfbc      	itt	lt
 800b586:	464b      	movlt	r3, r9
 800b588:	46a1      	movlt	r9, r4
 800b58a:	4630      	mov	r0, r6
 800b58c:	bfb8      	it	lt
 800b58e:	2501      	movlt	r5, #1
 800b590:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b594:	bfb4      	ite	lt
 800b596:	461c      	movlt	r4, r3
 800b598:	2500      	movge	r5, #0
 800b59a:	f7ff fd43 	bl	800b024 <_Balloc>
 800b59e:	4602      	mov	r2, r0
 800b5a0:	b918      	cbnz	r0, 800b5aa <__mdiff+0x62>
 800b5a2:	4b33      	ldr	r3, [pc, #204]	@ (800b670 <__mdiff+0x128>)
 800b5a4:	f240 2145 	movw	r1, #581	@ 0x245
 800b5a8:	e7e2      	b.n	800b570 <__mdiff+0x28>
 800b5aa:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b5ae:	f104 0e14 	add.w	lr, r4, #20
 800b5b2:	6926      	ldr	r6, [r4, #16]
 800b5b4:	f100 0b14 	add.w	fp, r0, #20
 800b5b8:	60c5      	str	r5, [r0, #12]
 800b5ba:	f109 0514 	add.w	r5, r9, #20
 800b5be:	f109 0310 	add.w	r3, r9, #16
 800b5c2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b5c6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b5ca:	46d9      	mov	r9, fp
 800b5cc:	f04f 0c00 	mov.w	ip, #0
 800b5d0:	9301      	str	r3, [sp, #4]
 800b5d2:	9b01      	ldr	r3, [sp, #4]
 800b5d4:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b5d8:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b5dc:	4576      	cmp	r6, lr
 800b5de:	9301      	str	r3, [sp, #4]
 800b5e0:	fa1f f38a 	uxth.w	r3, sl
 800b5e4:	4619      	mov	r1, r3
 800b5e6:	b283      	uxth	r3, r0
 800b5e8:	ea4f 4010 	mov.w	r0, r0, lsr #16
 800b5ec:	eba1 0303 	sub.w	r3, r1, r3
 800b5f0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b5f4:	4463      	add	r3, ip
 800b5f6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b5fa:	b29b      	uxth	r3, r3
 800b5fc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b600:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b604:	f849 3b04 	str.w	r3, [r9], #4
 800b608:	d8e3      	bhi.n	800b5d2 <__mdiff+0x8a>
 800b60a:	1b33      	subs	r3, r6, r4
 800b60c:	3415      	adds	r4, #21
 800b60e:	3b15      	subs	r3, #21
 800b610:	f023 0303 	bic.w	r3, r3, #3
 800b614:	3304      	adds	r3, #4
 800b616:	42a6      	cmp	r6, r4
 800b618:	bf38      	it	cc
 800b61a:	2304      	movcc	r3, #4
 800b61c:	441d      	add	r5, r3
 800b61e:	445b      	add	r3, fp
 800b620:	462c      	mov	r4, r5
 800b622:	461e      	mov	r6, r3
 800b624:	4544      	cmp	r4, r8
 800b626:	d30e      	bcc.n	800b646 <__mdiff+0xfe>
 800b628:	f108 0103 	add.w	r1, r8, #3
 800b62c:	1b49      	subs	r1, r1, r5
 800b62e:	3d03      	subs	r5, #3
 800b630:	f021 0103 	bic.w	r1, r1, #3
 800b634:	45a8      	cmp	r8, r5
 800b636:	bf38      	it	cc
 800b638:	2100      	movcc	r1, #0
 800b63a:	440b      	add	r3, r1
 800b63c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b640:	b199      	cbz	r1, 800b66a <__mdiff+0x122>
 800b642:	6117      	str	r7, [r2, #16]
 800b644:	e79a      	b.n	800b57c <__mdiff+0x34>
 800b646:	f854 1b04 	ldr.w	r1, [r4], #4
 800b64a:	46e6      	mov	lr, ip
 800b64c:	fa1f fc81 	uxth.w	ip, r1
 800b650:	0c08      	lsrs	r0, r1, #16
 800b652:	4471      	add	r1, lr
 800b654:	44f4      	add	ip, lr
 800b656:	b289      	uxth	r1, r1
 800b658:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b65c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b660:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b664:	f846 1b04 	str.w	r1, [r6], #4
 800b668:	e7dc      	b.n	800b624 <__mdiff+0xdc>
 800b66a:	3f01      	subs	r7, #1
 800b66c:	e7e6      	b.n	800b63c <__mdiff+0xf4>
 800b66e:	bf00      	nop
 800b670:	08022e88 	.word	0x08022e88
 800b674:	08022eaa 	.word	0x08022eaa

0800b678 <__d2b>:
 800b678:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b67c:	460f      	mov	r7, r1
 800b67e:	2101      	movs	r1, #1
 800b680:	4616      	mov	r6, r2
 800b682:	ec59 8b10 	vmov	r8, r9, d0
 800b686:	f7ff fccd 	bl	800b024 <_Balloc>
 800b68a:	4604      	mov	r4, r0
 800b68c:	b930      	cbnz	r0, 800b69c <__d2b+0x24>
 800b68e:	4602      	mov	r2, r0
 800b690:	4b23      	ldr	r3, [pc, #140]	@ (800b720 <__d2b+0xa8>)
 800b692:	f240 310f 	movw	r1, #783	@ 0x30f
 800b696:	4823      	ldr	r0, [pc, #140]	@ (800b724 <__d2b+0xac>)
 800b698:	f000 fa40 	bl	800bb1c <__assert_func>
 800b69c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b6a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b6a4:	b10d      	cbz	r5, 800b6aa <__d2b+0x32>
 800b6a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b6aa:	9301      	str	r3, [sp, #4]
 800b6ac:	f1b8 0300 	subs.w	r3, r8, #0
 800b6b0:	d023      	beq.n	800b6fa <__d2b+0x82>
 800b6b2:	4668      	mov	r0, sp
 800b6b4:	9300      	str	r3, [sp, #0]
 800b6b6:	f7ff fd7e 	bl	800b1b6 <__lo0bits>
 800b6ba:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b6be:	b1d0      	cbz	r0, 800b6f6 <__d2b+0x7e>
 800b6c0:	f1c0 0320 	rsb	r3, r0, #32
 800b6c4:	fa02 f303 	lsl.w	r3, r2, r3
 800b6c8:	40c2      	lsrs	r2, r0
 800b6ca:	430b      	orrs	r3, r1
 800b6cc:	9201      	str	r2, [sp, #4]
 800b6ce:	6163      	str	r3, [r4, #20]
 800b6d0:	9b01      	ldr	r3, [sp, #4]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	61a3      	str	r3, [r4, #24]
 800b6d6:	bf0c      	ite	eq
 800b6d8:	2201      	moveq	r2, #1
 800b6da:	2202      	movne	r2, #2
 800b6dc:	6122      	str	r2, [r4, #16]
 800b6de:	b1a5      	cbz	r5, 800b70a <__d2b+0x92>
 800b6e0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b6e4:	4405      	add	r5, r0
 800b6e6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b6ea:	603d      	str	r5, [r7, #0]
 800b6ec:	6030      	str	r0, [r6, #0]
 800b6ee:	4620      	mov	r0, r4
 800b6f0:	b003      	add	sp, #12
 800b6f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b6f6:	6161      	str	r1, [r4, #20]
 800b6f8:	e7ea      	b.n	800b6d0 <__d2b+0x58>
 800b6fa:	a801      	add	r0, sp, #4
 800b6fc:	f7ff fd5b 	bl	800b1b6 <__lo0bits>
 800b700:	9b01      	ldr	r3, [sp, #4]
 800b702:	3020      	adds	r0, #32
 800b704:	2201      	movs	r2, #1
 800b706:	6163      	str	r3, [r4, #20]
 800b708:	e7e8      	b.n	800b6dc <__d2b+0x64>
 800b70a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b70e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b712:	6038      	str	r0, [r7, #0]
 800b714:	6918      	ldr	r0, [r3, #16]
 800b716:	f7ff fd2f 	bl	800b178 <__hi0bits>
 800b71a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b71e:	e7e5      	b.n	800b6ec <__d2b+0x74>
 800b720:	08022e88 	.word	0x08022e88
 800b724:	08022eaa 	.word	0x08022eaa

0800b728 <__sread>:
 800b728:	b510      	push	{r4, lr}
 800b72a:	460c      	mov	r4, r1
 800b72c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b730:	f000 f99e 	bl	800ba70 <_read_r>
 800b734:	2800      	cmp	r0, #0
 800b736:	bfab      	itete	ge
 800b738:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b73a:	89a3      	ldrhlt	r3, [r4, #12]
 800b73c:	181b      	addge	r3, r3, r0
 800b73e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b742:	bfac      	ite	ge
 800b744:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b746:	81a3      	strhlt	r3, [r4, #12]
 800b748:	bd10      	pop	{r4, pc}

0800b74a <__swrite>:
 800b74a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b74e:	461f      	mov	r7, r3
 800b750:	898b      	ldrh	r3, [r1, #12]
 800b752:	4605      	mov	r5, r0
 800b754:	460c      	mov	r4, r1
 800b756:	05db      	lsls	r3, r3, #23
 800b758:	4616      	mov	r6, r2
 800b75a:	d505      	bpl.n	800b768 <__swrite+0x1e>
 800b75c:	2302      	movs	r3, #2
 800b75e:	2200      	movs	r2, #0
 800b760:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b764:	f000 f972 	bl	800ba4c <_lseek_r>
 800b768:	89a3      	ldrh	r3, [r4, #12]
 800b76a:	4632      	mov	r2, r6
 800b76c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b770:	4628      	mov	r0, r5
 800b772:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b776:	81a3      	strh	r3, [r4, #12]
 800b778:	463b      	mov	r3, r7
 800b77a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b77e:	f000 b999 	b.w	800bab4 <_write_r>

0800b782 <__sseek>:
 800b782:	b510      	push	{r4, lr}
 800b784:	460c      	mov	r4, r1
 800b786:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b78a:	f000 f95f 	bl	800ba4c <_lseek_r>
 800b78e:	1c43      	adds	r3, r0, #1
 800b790:	89a3      	ldrh	r3, [r4, #12]
 800b792:	bf15      	itete	ne
 800b794:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b796:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b79a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b79e:	81a3      	strheq	r3, [r4, #12]
 800b7a0:	bf18      	it	ne
 800b7a2:	81a3      	strhne	r3, [r4, #12]
 800b7a4:	bd10      	pop	{r4, pc}

0800b7a6 <__sclose>:
 800b7a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7aa:	f000 b995 	b.w	800bad8 <_close_r>

0800b7ae <_realloc_r>:
 800b7ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7b2:	4607      	mov	r7, r0
 800b7b4:	4614      	mov	r4, r2
 800b7b6:	460d      	mov	r5, r1
 800b7b8:	b921      	cbnz	r1, 800b7c4 <_realloc_r+0x16>
 800b7ba:	4611      	mov	r1, r2
 800b7bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b7c0:	f7ff baf8 	b.w	800adb4 <_malloc_r>
 800b7c4:	b92a      	cbnz	r2, 800b7d2 <_realloc_r+0x24>
 800b7c6:	4625      	mov	r5, r4
 800b7c8:	f000 f9da 	bl	800bb80 <_free_r>
 800b7cc:	4628      	mov	r0, r5
 800b7ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7d2:	f000 fa31 	bl	800bc38 <_malloc_usable_size_r>
 800b7d6:	4284      	cmp	r4, r0
 800b7d8:	4606      	mov	r6, r0
 800b7da:	d802      	bhi.n	800b7e2 <_realloc_r+0x34>
 800b7dc:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b7e0:	d8f4      	bhi.n	800b7cc <_realloc_r+0x1e>
 800b7e2:	4621      	mov	r1, r4
 800b7e4:	4638      	mov	r0, r7
 800b7e6:	f7ff fae5 	bl	800adb4 <_malloc_r>
 800b7ea:	4680      	mov	r8, r0
 800b7ec:	b908      	cbnz	r0, 800b7f2 <_realloc_r+0x44>
 800b7ee:	4645      	mov	r5, r8
 800b7f0:	e7ec      	b.n	800b7cc <_realloc_r+0x1e>
 800b7f2:	42b4      	cmp	r4, r6
 800b7f4:	4622      	mov	r2, r4
 800b7f6:	4629      	mov	r1, r5
 800b7f8:	bf28      	it	cs
 800b7fa:	4632      	movcs	r2, r6
 800b7fc:	f7fe f9a8 	bl	8009b50 <memcpy>
 800b800:	4629      	mov	r1, r5
 800b802:	4638      	mov	r0, r7
 800b804:	f000 f9bc 	bl	800bb80 <_free_r>
 800b808:	e7f1      	b.n	800b7ee <_realloc_r+0x40>

0800b80a <__swbuf_r>:
 800b80a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b80c:	460e      	mov	r6, r1
 800b80e:	4614      	mov	r4, r2
 800b810:	4605      	mov	r5, r0
 800b812:	b118      	cbz	r0, 800b81c <__swbuf_r+0x12>
 800b814:	6a03      	ldr	r3, [r0, #32]
 800b816:	b90b      	cbnz	r3, 800b81c <__swbuf_r+0x12>
 800b818:	f7fe f8ac 	bl	8009974 <__sinit>
 800b81c:	69a3      	ldr	r3, [r4, #24]
 800b81e:	60a3      	str	r3, [r4, #8]
 800b820:	89a3      	ldrh	r3, [r4, #12]
 800b822:	071a      	lsls	r2, r3, #28
 800b824:	d501      	bpl.n	800b82a <__swbuf_r+0x20>
 800b826:	6923      	ldr	r3, [r4, #16]
 800b828:	b943      	cbnz	r3, 800b83c <__swbuf_r+0x32>
 800b82a:	4621      	mov	r1, r4
 800b82c:	4628      	mov	r0, r5
 800b82e:	f000 f82b 	bl	800b888 <__swsetup_r>
 800b832:	b118      	cbz	r0, 800b83c <__swbuf_r+0x32>
 800b834:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800b838:	4638      	mov	r0, r7
 800b83a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b83c:	6823      	ldr	r3, [r4, #0]
 800b83e:	b2f6      	uxtb	r6, r6
 800b840:	6922      	ldr	r2, [r4, #16]
 800b842:	4637      	mov	r7, r6
 800b844:	1a98      	subs	r0, r3, r2
 800b846:	6963      	ldr	r3, [r4, #20]
 800b848:	4283      	cmp	r3, r0
 800b84a:	dc05      	bgt.n	800b858 <__swbuf_r+0x4e>
 800b84c:	4621      	mov	r1, r4
 800b84e:	4628      	mov	r0, r5
 800b850:	f7ff fbb4 	bl	800afbc <_fflush_r>
 800b854:	2800      	cmp	r0, #0
 800b856:	d1ed      	bne.n	800b834 <__swbuf_r+0x2a>
 800b858:	68a3      	ldr	r3, [r4, #8]
 800b85a:	3b01      	subs	r3, #1
 800b85c:	60a3      	str	r3, [r4, #8]
 800b85e:	6823      	ldr	r3, [r4, #0]
 800b860:	1c5a      	adds	r2, r3, #1
 800b862:	6022      	str	r2, [r4, #0]
 800b864:	701e      	strb	r6, [r3, #0]
 800b866:	1c43      	adds	r3, r0, #1
 800b868:	6962      	ldr	r2, [r4, #20]
 800b86a:	429a      	cmp	r2, r3
 800b86c:	d004      	beq.n	800b878 <__swbuf_r+0x6e>
 800b86e:	89a3      	ldrh	r3, [r4, #12]
 800b870:	07db      	lsls	r3, r3, #31
 800b872:	d5e1      	bpl.n	800b838 <__swbuf_r+0x2e>
 800b874:	2e0a      	cmp	r6, #10
 800b876:	d1df      	bne.n	800b838 <__swbuf_r+0x2e>
 800b878:	4621      	mov	r1, r4
 800b87a:	4628      	mov	r0, r5
 800b87c:	f7ff fb9e 	bl	800afbc <_fflush_r>
 800b880:	2800      	cmp	r0, #0
 800b882:	d0d9      	beq.n	800b838 <__swbuf_r+0x2e>
 800b884:	e7d6      	b.n	800b834 <__swbuf_r+0x2a>
	...

0800b888 <__swsetup_r>:
 800b888:	b538      	push	{r3, r4, r5, lr}
 800b88a:	4b29      	ldr	r3, [pc, #164]	@ (800b930 <__swsetup_r+0xa8>)
 800b88c:	4605      	mov	r5, r0
 800b88e:	460c      	mov	r4, r1
 800b890:	6818      	ldr	r0, [r3, #0]
 800b892:	b118      	cbz	r0, 800b89c <__swsetup_r+0x14>
 800b894:	6a03      	ldr	r3, [r0, #32]
 800b896:	b90b      	cbnz	r3, 800b89c <__swsetup_r+0x14>
 800b898:	f7fe f86c 	bl	8009974 <__sinit>
 800b89c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8a0:	0719      	lsls	r1, r3, #28
 800b8a2:	d422      	bmi.n	800b8ea <__swsetup_r+0x62>
 800b8a4:	06da      	lsls	r2, r3, #27
 800b8a6:	d407      	bmi.n	800b8b8 <__swsetup_r+0x30>
 800b8a8:	2209      	movs	r2, #9
 800b8aa:	602a      	str	r2, [r5, #0]
 800b8ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b8b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b8b4:	81a3      	strh	r3, [r4, #12]
 800b8b6:	e033      	b.n	800b920 <__swsetup_r+0x98>
 800b8b8:	0758      	lsls	r0, r3, #29
 800b8ba:	d512      	bpl.n	800b8e2 <__swsetup_r+0x5a>
 800b8bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b8be:	b141      	cbz	r1, 800b8d2 <__swsetup_r+0x4a>
 800b8c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b8c4:	4299      	cmp	r1, r3
 800b8c6:	d002      	beq.n	800b8ce <__swsetup_r+0x46>
 800b8c8:	4628      	mov	r0, r5
 800b8ca:	f000 f959 	bl	800bb80 <_free_r>
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	6363      	str	r3, [r4, #52]	@ 0x34
 800b8d2:	89a3      	ldrh	r3, [r4, #12]
 800b8d4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b8d8:	81a3      	strh	r3, [r4, #12]
 800b8da:	2300      	movs	r3, #0
 800b8dc:	6063      	str	r3, [r4, #4]
 800b8de:	6923      	ldr	r3, [r4, #16]
 800b8e0:	6023      	str	r3, [r4, #0]
 800b8e2:	89a3      	ldrh	r3, [r4, #12]
 800b8e4:	f043 0308 	orr.w	r3, r3, #8
 800b8e8:	81a3      	strh	r3, [r4, #12]
 800b8ea:	6923      	ldr	r3, [r4, #16]
 800b8ec:	b94b      	cbnz	r3, 800b902 <__swsetup_r+0x7a>
 800b8ee:	89a3      	ldrh	r3, [r4, #12]
 800b8f0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b8f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b8f8:	d003      	beq.n	800b902 <__swsetup_r+0x7a>
 800b8fa:	4621      	mov	r1, r4
 800b8fc:	4628      	mov	r0, r5
 800b8fe:	f000 f83e 	bl	800b97e <__smakebuf_r>
 800b902:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b906:	f013 0201 	ands.w	r2, r3, #1
 800b90a:	d00a      	beq.n	800b922 <__swsetup_r+0x9a>
 800b90c:	2200      	movs	r2, #0
 800b90e:	60a2      	str	r2, [r4, #8]
 800b910:	6962      	ldr	r2, [r4, #20]
 800b912:	4252      	negs	r2, r2
 800b914:	61a2      	str	r2, [r4, #24]
 800b916:	6922      	ldr	r2, [r4, #16]
 800b918:	b942      	cbnz	r2, 800b92c <__swsetup_r+0xa4>
 800b91a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b91e:	d1c5      	bne.n	800b8ac <__swsetup_r+0x24>
 800b920:	bd38      	pop	{r3, r4, r5, pc}
 800b922:	0799      	lsls	r1, r3, #30
 800b924:	bf58      	it	pl
 800b926:	6962      	ldrpl	r2, [r4, #20]
 800b928:	60a2      	str	r2, [r4, #8]
 800b92a:	e7f4      	b.n	800b916 <__swsetup_r+0x8e>
 800b92c:	2000      	movs	r0, #0
 800b92e:	e7f7      	b.n	800b920 <__swsetup_r+0x98>
 800b930:	2000002c 	.word	0x2000002c

0800b934 <__swhatbuf_r>:
 800b934:	b570      	push	{r4, r5, r6, lr}
 800b936:	460c      	mov	r4, r1
 800b938:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b93c:	b096      	sub	sp, #88	@ 0x58
 800b93e:	4615      	mov	r5, r2
 800b940:	2900      	cmp	r1, #0
 800b942:	461e      	mov	r6, r3
 800b944:	da0c      	bge.n	800b960 <__swhatbuf_r+0x2c>
 800b946:	89a3      	ldrh	r3, [r4, #12]
 800b948:	2100      	movs	r1, #0
 800b94a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b94e:	bf14      	ite	ne
 800b950:	2340      	movne	r3, #64	@ 0x40
 800b952:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b956:	2000      	movs	r0, #0
 800b958:	6031      	str	r1, [r6, #0]
 800b95a:	602b      	str	r3, [r5, #0]
 800b95c:	b016      	add	sp, #88	@ 0x58
 800b95e:	bd70      	pop	{r4, r5, r6, pc}
 800b960:	466a      	mov	r2, sp
 800b962:	f000 f8c9 	bl	800baf8 <_fstat_r>
 800b966:	2800      	cmp	r0, #0
 800b968:	dbed      	blt.n	800b946 <__swhatbuf_r+0x12>
 800b96a:	9901      	ldr	r1, [sp, #4]
 800b96c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b970:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b974:	4259      	negs	r1, r3
 800b976:	4159      	adcs	r1, r3
 800b978:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b97c:	e7eb      	b.n	800b956 <__swhatbuf_r+0x22>

0800b97e <__smakebuf_r>:
 800b97e:	898b      	ldrh	r3, [r1, #12]
 800b980:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b982:	079d      	lsls	r5, r3, #30
 800b984:	4606      	mov	r6, r0
 800b986:	460c      	mov	r4, r1
 800b988:	d507      	bpl.n	800b99a <__smakebuf_r+0x1c>
 800b98a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b98e:	6023      	str	r3, [r4, #0]
 800b990:	6123      	str	r3, [r4, #16]
 800b992:	2301      	movs	r3, #1
 800b994:	6163      	str	r3, [r4, #20]
 800b996:	b003      	add	sp, #12
 800b998:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b99a:	ab01      	add	r3, sp, #4
 800b99c:	466a      	mov	r2, sp
 800b99e:	f7ff ffc9 	bl	800b934 <__swhatbuf_r>
 800b9a2:	9f00      	ldr	r7, [sp, #0]
 800b9a4:	4605      	mov	r5, r0
 800b9a6:	4630      	mov	r0, r6
 800b9a8:	4639      	mov	r1, r7
 800b9aa:	f7ff fa03 	bl	800adb4 <_malloc_r>
 800b9ae:	b948      	cbnz	r0, 800b9c4 <__smakebuf_r+0x46>
 800b9b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9b4:	059a      	lsls	r2, r3, #22
 800b9b6:	d4ee      	bmi.n	800b996 <__smakebuf_r+0x18>
 800b9b8:	f023 0303 	bic.w	r3, r3, #3
 800b9bc:	f043 0302 	orr.w	r3, r3, #2
 800b9c0:	81a3      	strh	r3, [r4, #12]
 800b9c2:	e7e2      	b.n	800b98a <__smakebuf_r+0xc>
 800b9c4:	89a3      	ldrh	r3, [r4, #12]
 800b9c6:	6020      	str	r0, [r4, #0]
 800b9c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b9cc:	81a3      	strh	r3, [r4, #12]
 800b9ce:	9b01      	ldr	r3, [sp, #4]
 800b9d0:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b9d4:	b15b      	cbz	r3, 800b9ee <__smakebuf_r+0x70>
 800b9d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b9da:	4630      	mov	r0, r6
 800b9dc:	f000 f826 	bl	800ba2c <_isatty_r>
 800b9e0:	b128      	cbz	r0, 800b9ee <__smakebuf_r+0x70>
 800b9e2:	89a3      	ldrh	r3, [r4, #12]
 800b9e4:	f023 0303 	bic.w	r3, r3, #3
 800b9e8:	f043 0301 	orr.w	r3, r3, #1
 800b9ec:	81a3      	strh	r3, [r4, #12]
 800b9ee:	89a3      	ldrh	r3, [r4, #12]
 800b9f0:	431d      	orrs	r5, r3
 800b9f2:	81a5      	strh	r5, [r4, #12]
 800b9f4:	e7cf      	b.n	800b996 <__smakebuf_r+0x18>

0800b9f6 <memmove>:
 800b9f6:	4288      	cmp	r0, r1
 800b9f8:	b510      	push	{r4, lr}
 800b9fa:	eb01 0402 	add.w	r4, r1, r2
 800b9fe:	d902      	bls.n	800ba06 <memmove+0x10>
 800ba00:	4284      	cmp	r4, r0
 800ba02:	4623      	mov	r3, r4
 800ba04:	d807      	bhi.n	800ba16 <memmove+0x20>
 800ba06:	1e43      	subs	r3, r0, #1
 800ba08:	42a1      	cmp	r1, r4
 800ba0a:	d008      	beq.n	800ba1e <memmove+0x28>
 800ba0c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ba10:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ba14:	e7f8      	b.n	800ba08 <memmove+0x12>
 800ba16:	4402      	add	r2, r0
 800ba18:	4601      	mov	r1, r0
 800ba1a:	428a      	cmp	r2, r1
 800ba1c:	d100      	bne.n	800ba20 <memmove+0x2a>
 800ba1e:	bd10      	pop	{r4, pc}
 800ba20:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ba24:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ba28:	e7f7      	b.n	800ba1a <memmove+0x24>
	...

0800ba2c <_isatty_r>:
 800ba2c:	b538      	push	{r3, r4, r5, lr}
 800ba2e:	2300      	movs	r3, #0
 800ba30:	4d05      	ldr	r5, [pc, #20]	@ (800ba48 <_isatty_r+0x1c>)
 800ba32:	4604      	mov	r4, r0
 800ba34:	4608      	mov	r0, r1
 800ba36:	602b      	str	r3, [r5, #0]
 800ba38:	f7f6 ffb8 	bl	80029ac <_isatty>
 800ba3c:	1c43      	adds	r3, r0, #1
 800ba3e:	d102      	bne.n	800ba46 <_isatty_r+0x1a>
 800ba40:	682b      	ldr	r3, [r5, #0]
 800ba42:	b103      	cbz	r3, 800ba46 <_isatty_r+0x1a>
 800ba44:	6023      	str	r3, [r4, #0]
 800ba46:	bd38      	pop	{r3, r4, r5, pc}
 800ba48:	200007b0 	.word	0x200007b0

0800ba4c <_lseek_r>:
 800ba4c:	b538      	push	{r3, r4, r5, lr}
 800ba4e:	4604      	mov	r4, r0
 800ba50:	4d06      	ldr	r5, [pc, #24]	@ (800ba6c <_lseek_r+0x20>)
 800ba52:	4608      	mov	r0, r1
 800ba54:	4611      	mov	r1, r2
 800ba56:	2200      	movs	r2, #0
 800ba58:	602a      	str	r2, [r5, #0]
 800ba5a:	461a      	mov	r2, r3
 800ba5c:	f7f6 ffb1 	bl	80029c2 <_lseek>
 800ba60:	1c43      	adds	r3, r0, #1
 800ba62:	d102      	bne.n	800ba6a <_lseek_r+0x1e>
 800ba64:	682b      	ldr	r3, [r5, #0]
 800ba66:	b103      	cbz	r3, 800ba6a <_lseek_r+0x1e>
 800ba68:	6023      	str	r3, [r4, #0]
 800ba6a:	bd38      	pop	{r3, r4, r5, pc}
 800ba6c:	200007b0 	.word	0x200007b0

0800ba70 <_read_r>:
 800ba70:	b538      	push	{r3, r4, r5, lr}
 800ba72:	4604      	mov	r4, r0
 800ba74:	4d06      	ldr	r5, [pc, #24]	@ (800ba90 <_read_r+0x20>)
 800ba76:	4608      	mov	r0, r1
 800ba78:	4611      	mov	r1, r2
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	602a      	str	r2, [r5, #0]
 800ba7e:	461a      	mov	r2, r3
 800ba80:	f7f6 ff3f 	bl	8002902 <_read>
 800ba84:	1c43      	adds	r3, r0, #1
 800ba86:	d102      	bne.n	800ba8e <_read_r+0x1e>
 800ba88:	682b      	ldr	r3, [r5, #0]
 800ba8a:	b103      	cbz	r3, 800ba8e <_read_r+0x1e>
 800ba8c:	6023      	str	r3, [r4, #0]
 800ba8e:	bd38      	pop	{r3, r4, r5, pc}
 800ba90:	200007b0 	.word	0x200007b0

0800ba94 <_sbrk_r>:
 800ba94:	b538      	push	{r3, r4, r5, lr}
 800ba96:	2300      	movs	r3, #0
 800ba98:	4d05      	ldr	r5, [pc, #20]	@ (800bab0 <_sbrk_r+0x1c>)
 800ba9a:	4604      	mov	r4, r0
 800ba9c:	4608      	mov	r0, r1
 800ba9e:	602b      	str	r3, [r5, #0]
 800baa0:	f7f6 ff9c 	bl	80029dc <_sbrk>
 800baa4:	1c43      	adds	r3, r0, #1
 800baa6:	d102      	bne.n	800baae <_sbrk_r+0x1a>
 800baa8:	682b      	ldr	r3, [r5, #0]
 800baaa:	b103      	cbz	r3, 800baae <_sbrk_r+0x1a>
 800baac:	6023      	str	r3, [r4, #0]
 800baae:	bd38      	pop	{r3, r4, r5, pc}
 800bab0:	200007b0 	.word	0x200007b0

0800bab4 <_write_r>:
 800bab4:	b538      	push	{r3, r4, r5, lr}
 800bab6:	4604      	mov	r4, r0
 800bab8:	4d06      	ldr	r5, [pc, #24]	@ (800bad4 <_write_r+0x20>)
 800baba:	4608      	mov	r0, r1
 800babc:	4611      	mov	r1, r2
 800babe:	2200      	movs	r2, #0
 800bac0:	602a      	str	r2, [r5, #0]
 800bac2:	461a      	mov	r2, r3
 800bac4:	f7f6 ff3a 	bl	800293c <_write>
 800bac8:	1c43      	adds	r3, r0, #1
 800baca:	d102      	bne.n	800bad2 <_write_r+0x1e>
 800bacc:	682b      	ldr	r3, [r5, #0]
 800bace:	b103      	cbz	r3, 800bad2 <_write_r+0x1e>
 800bad0:	6023      	str	r3, [r4, #0]
 800bad2:	bd38      	pop	{r3, r4, r5, pc}
 800bad4:	200007b0 	.word	0x200007b0

0800bad8 <_close_r>:
 800bad8:	b538      	push	{r3, r4, r5, lr}
 800bada:	2300      	movs	r3, #0
 800badc:	4d05      	ldr	r5, [pc, #20]	@ (800baf4 <_close_r+0x1c>)
 800bade:	4604      	mov	r4, r0
 800bae0:	4608      	mov	r0, r1
 800bae2:	602b      	str	r3, [r5, #0]
 800bae4:	f7f6 ff46 	bl	8002974 <_close>
 800bae8:	1c43      	adds	r3, r0, #1
 800baea:	d102      	bne.n	800baf2 <_close_r+0x1a>
 800baec:	682b      	ldr	r3, [r5, #0]
 800baee:	b103      	cbz	r3, 800baf2 <_close_r+0x1a>
 800baf0:	6023      	str	r3, [r4, #0]
 800baf2:	bd38      	pop	{r3, r4, r5, pc}
 800baf4:	200007b0 	.word	0x200007b0

0800baf8 <_fstat_r>:
 800baf8:	b538      	push	{r3, r4, r5, lr}
 800bafa:	2300      	movs	r3, #0
 800bafc:	4d06      	ldr	r5, [pc, #24]	@ (800bb18 <_fstat_r+0x20>)
 800bafe:	4604      	mov	r4, r0
 800bb00:	4608      	mov	r0, r1
 800bb02:	4611      	mov	r1, r2
 800bb04:	602b      	str	r3, [r5, #0]
 800bb06:	f7f6 ff41 	bl	800298c <_fstat>
 800bb0a:	1c43      	adds	r3, r0, #1
 800bb0c:	d102      	bne.n	800bb14 <_fstat_r+0x1c>
 800bb0e:	682b      	ldr	r3, [r5, #0]
 800bb10:	b103      	cbz	r3, 800bb14 <_fstat_r+0x1c>
 800bb12:	6023      	str	r3, [r4, #0]
 800bb14:	bd38      	pop	{r3, r4, r5, pc}
 800bb16:	bf00      	nop
 800bb18:	200007b0 	.word	0x200007b0

0800bb1c <__assert_func>:
 800bb1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bb1e:	4614      	mov	r4, r2
 800bb20:	461a      	mov	r2, r3
 800bb22:	4b09      	ldr	r3, [pc, #36]	@ (800bb48 <__assert_func+0x2c>)
 800bb24:	4605      	mov	r5, r0
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	68d8      	ldr	r0, [r3, #12]
 800bb2a:	b14c      	cbz	r4, 800bb40 <__assert_func+0x24>
 800bb2c:	4b07      	ldr	r3, [pc, #28]	@ (800bb4c <__assert_func+0x30>)
 800bb2e:	9100      	str	r1, [sp, #0]
 800bb30:	4907      	ldr	r1, [pc, #28]	@ (800bb50 <__assert_func+0x34>)
 800bb32:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bb36:	462b      	mov	r3, r5
 800bb38:	f000 f886 	bl	800bc48 <fiprintf>
 800bb3c:	f000 f8a3 	bl	800bc86 <abort>
 800bb40:	4b04      	ldr	r3, [pc, #16]	@ (800bb54 <__assert_func+0x38>)
 800bb42:	461c      	mov	r4, r3
 800bb44:	e7f3      	b.n	800bb2e <__assert_func+0x12>
 800bb46:	bf00      	nop
 800bb48:	2000002c 	.word	0x2000002c
 800bb4c:	08022f0d 	.word	0x08022f0d
 800bb50:	08022f1a 	.word	0x08022f1a
 800bb54:	08022f48 	.word	0x08022f48

0800bb58 <_calloc_r>:
 800bb58:	b570      	push	{r4, r5, r6, lr}
 800bb5a:	fba1 5402 	umull	r5, r4, r1, r2
 800bb5e:	b934      	cbnz	r4, 800bb6e <_calloc_r+0x16>
 800bb60:	4629      	mov	r1, r5
 800bb62:	f7ff f927 	bl	800adb4 <_malloc_r>
 800bb66:	4606      	mov	r6, r0
 800bb68:	b928      	cbnz	r0, 800bb76 <_calloc_r+0x1e>
 800bb6a:	4630      	mov	r0, r6
 800bb6c:	bd70      	pop	{r4, r5, r6, pc}
 800bb6e:	220c      	movs	r2, #12
 800bb70:	2600      	movs	r6, #0
 800bb72:	6002      	str	r2, [r0, #0]
 800bb74:	e7f9      	b.n	800bb6a <_calloc_r+0x12>
 800bb76:	462a      	mov	r2, r5
 800bb78:	4621      	mov	r1, r4
 800bb7a:	f7fd ffa1 	bl	8009ac0 <memset>
 800bb7e:	e7f4      	b.n	800bb6a <_calloc_r+0x12>

0800bb80 <_free_r>:
 800bb80:	b538      	push	{r3, r4, r5, lr}
 800bb82:	4605      	mov	r5, r0
 800bb84:	2900      	cmp	r1, #0
 800bb86:	d041      	beq.n	800bc0c <_free_r+0x8c>
 800bb88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb8c:	1f0c      	subs	r4, r1, #4
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	bfb8      	it	lt
 800bb92:	18e4      	addlt	r4, r4, r3
 800bb94:	f7ff fa3a 	bl	800b00c <__malloc_lock>
 800bb98:	4a1d      	ldr	r2, [pc, #116]	@ (800bc10 <_free_r+0x90>)
 800bb9a:	6813      	ldr	r3, [r2, #0]
 800bb9c:	b933      	cbnz	r3, 800bbac <_free_r+0x2c>
 800bb9e:	6063      	str	r3, [r4, #4]
 800bba0:	6014      	str	r4, [r2, #0]
 800bba2:	4628      	mov	r0, r5
 800bba4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bba8:	f7ff ba36 	b.w	800b018 <__malloc_unlock>
 800bbac:	42a3      	cmp	r3, r4
 800bbae:	d908      	bls.n	800bbc2 <_free_r+0x42>
 800bbb0:	6820      	ldr	r0, [r4, #0]
 800bbb2:	1821      	adds	r1, r4, r0
 800bbb4:	428b      	cmp	r3, r1
 800bbb6:	bf01      	itttt	eq
 800bbb8:	6819      	ldreq	r1, [r3, #0]
 800bbba:	685b      	ldreq	r3, [r3, #4]
 800bbbc:	1809      	addeq	r1, r1, r0
 800bbbe:	6021      	streq	r1, [r4, #0]
 800bbc0:	e7ed      	b.n	800bb9e <_free_r+0x1e>
 800bbc2:	461a      	mov	r2, r3
 800bbc4:	685b      	ldr	r3, [r3, #4]
 800bbc6:	b10b      	cbz	r3, 800bbcc <_free_r+0x4c>
 800bbc8:	42a3      	cmp	r3, r4
 800bbca:	d9fa      	bls.n	800bbc2 <_free_r+0x42>
 800bbcc:	6811      	ldr	r1, [r2, #0]
 800bbce:	1850      	adds	r0, r2, r1
 800bbd0:	42a0      	cmp	r0, r4
 800bbd2:	d10b      	bne.n	800bbec <_free_r+0x6c>
 800bbd4:	6820      	ldr	r0, [r4, #0]
 800bbd6:	4401      	add	r1, r0
 800bbd8:	1850      	adds	r0, r2, r1
 800bbda:	6011      	str	r1, [r2, #0]
 800bbdc:	4283      	cmp	r3, r0
 800bbde:	d1e0      	bne.n	800bba2 <_free_r+0x22>
 800bbe0:	6818      	ldr	r0, [r3, #0]
 800bbe2:	685b      	ldr	r3, [r3, #4]
 800bbe4:	4408      	add	r0, r1
 800bbe6:	6053      	str	r3, [r2, #4]
 800bbe8:	6010      	str	r0, [r2, #0]
 800bbea:	e7da      	b.n	800bba2 <_free_r+0x22>
 800bbec:	d902      	bls.n	800bbf4 <_free_r+0x74>
 800bbee:	230c      	movs	r3, #12
 800bbf0:	602b      	str	r3, [r5, #0]
 800bbf2:	e7d6      	b.n	800bba2 <_free_r+0x22>
 800bbf4:	6820      	ldr	r0, [r4, #0]
 800bbf6:	1821      	adds	r1, r4, r0
 800bbf8:	428b      	cmp	r3, r1
 800bbfa:	bf02      	ittt	eq
 800bbfc:	6819      	ldreq	r1, [r3, #0]
 800bbfe:	685b      	ldreq	r3, [r3, #4]
 800bc00:	1809      	addeq	r1, r1, r0
 800bc02:	6063      	str	r3, [r4, #4]
 800bc04:	bf08      	it	eq
 800bc06:	6021      	streq	r1, [r4, #0]
 800bc08:	6054      	str	r4, [r2, #4]
 800bc0a:	e7ca      	b.n	800bba2 <_free_r+0x22>
 800bc0c:	bd38      	pop	{r3, r4, r5, pc}
 800bc0e:	bf00      	nop
 800bc10:	200007ac 	.word	0x200007ac

0800bc14 <__ascii_mbtowc>:
 800bc14:	b082      	sub	sp, #8
 800bc16:	b901      	cbnz	r1, 800bc1a <__ascii_mbtowc+0x6>
 800bc18:	a901      	add	r1, sp, #4
 800bc1a:	b142      	cbz	r2, 800bc2e <__ascii_mbtowc+0x1a>
 800bc1c:	b14b      	cbz	r3, 800bc32 <__ascii_mbtowc+0x1e>
 800bc1e:	7813      	ldrb	r3, [r2, #0]
 800bc20:	600b      	str	r3, [r1, #0]
 800bc22:	7812      	ldrb	r2, [r2, #0]
 800bc24:	1e10      	subs	r0, r2, #0
 800bc26:	bf18      	it	ne
 800bc28:	2001      	movne	r0, #1
 800bc2a:	b002      	add	sp, #8
 800bc2c:	4770      	bx	lr
 800bc2e:	4610      	mov	r0, r2
 800bc30:	e7fb      	b.n	800bc2a <__ascii_mbtowc+0x16>
 800bc32:	f06f 0001 	mvn.w	r0, #1
 800bc36:	e7f8      	b.n	800bc2a <__ascii_mbtowc+0x16>

0800bc38 <_malloc_usable_size_r>:
 800bc38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc3c:	1f18      	subs	r0, r3, #4
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	bfbc      	itt	lt
 800bc42:	580b      	ldrlt	r3, [r1, r0]
 800bc44:	18c0      	addlt	r0, r0, r3
 800bc46:	4770      	bx	lr

0800bc48 <fiprintf>:
 800bc48:	b40e      	push	{r1, r2, r3}
 800bc4a:	b503      	push	{r0, r1, lr}
 800bc4c:	ab03      	add	r3, sp, #12
 800bc4e:	4601      	mov	r1, r0
 800bc50:	4805      	ldr	r0, [pc, #20]	@ (800bc68 <fiprintf+0x20>)
 800bc52:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc56:	6800      	ldr	r0, [r0, #0]
 800bc58:	9301      	str	r3, [sp, #4]
 800bc5a:	f7fe ff69 	bl	800ab30 <_vfiprintf_r>
 800bc5e:	b002      	add	sp, #8
 800bc60:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc64:	b003      	add	sp, #12
 800bc66:	4770      	bx	lr
 800bc68:	2000002c 	.word	0x2000002c

0800bc6c <__ascii_wctomb>:
 800bc6c:	4603      	mov	r3, r0
 800bc6e:	4608      	mov	r0, r1
 800bc70:	b141      	cbz	r1, 800bc84 <__ascii_wctomb+0x18>
 800bc72:	2aff      	cmp	r2, #255	@ 0xff
 800bc74:	d904      	bls.n	800bc80 <__ascii_wctomb+0x14>
 800bc76:	228a      	movs	r2, #138	@ 0x8a
 800bc78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bc7c:	601a      	str	r2, [r3, #0]
 800bc7e:	4770      	bx	lr
 800bc80:	2001      	movs	r0, #1
 800bc82:	700a      	strb	r2, [r1, #0]
 800bc84:	4770      	bx	lr

0800bc86 <abort>:
 800bc86:	2006      	movs	r0, #6
 800bc88:	b508      	push	{r3, lr}
 800bc8a:	f000 f82b 	bl	800bce4 <raise>
 800bc8e:	2001      	movs	r0, #1
 800bc90:	f7f6 fe2c 	bl	80028ec <_exit>

0800bc94 <_raise_r>:
 800bc94:	291f      	cmp	r1, #31
 800bc96:	b538      	push	{r3, r4, r5, lr}
 800bc98:	4605      	mov	r5, r0
 800bc9a:	460c      	mov	r4, r1
 800bc9c:	d904      	bls.n	800bca8 <_raise_r+0x14>
 800bc9e:	2316      	movs	r3, #22
 800bca0:	6003      	str	r3, [r0, #0]
 800bca2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bca6:	bd38      	pop	{r3, r4, r5, pc}
 800bca8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bcaa:	b112      	cbz	r2, 800bcb2 <_raise_r+0x1e>
 800bcac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bcb0:	b94b      	cbnz	r3, 800bcc6 <_raise_r+0x32>
 800bcb2:	4628      	mov	r0, r5
 800bcb4:	f000 f830 	bl	800bd18 <_getpid_r>
 800bcb8:	4622      	mov	r2, r4
 800bcba:	4601      	mov	r1, r0
 800bcbc:	4628      	mov	r0, r5
 800bcbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bcc2:	f000 b817 	b.w	800bcf4 <_kill_r>
 800bcc6:	2b01      	cmp	r3, #1
 800bcc8:	d00a      	beq.n	800bce0 <_raise_r+0x4c>
 800bcca:	1c59      	adds	r1, r3, #1
 800bccc:	d103      	bne.n	800bcd6 <_raise_r+0x42>
 800bcce:	2316      	movs	r3, #22
 800bcd0:	6003      	str	r3, [r0, #0]
 800bcd2:	2001      	movs	r0, #1
 800bcd4:	e7e7      	b.n	800bca6 <_raise_r+0x12>
 800bcd6:	2100      	movs	r1, #0
 800bcd8:	4620      	mov	r0, r4
 800bcda:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bcde:	4798      	blx	r3
 800bce0:	2000      	movs	r0, #0
 800bce2:	e7e0      	b.n	800bca6 <_raise_r+0x12>

0800bce4 <raise>:
 800bce4:	4b02      	ldr	r3, [pc, #8]	@ (800bcf0 <raise+0xc>)
 800bce6:	4601      	mov	r1, r0
 800bce8:	6818      	ldr	r0, [r3, #0]
 800bcea:	f7ff bfd3 	b.w	800bc94 <_raise_r>
 800bcee:	bf00      	nop
 800bcf0:	2000002c 	.word	0x2000002c

0800bcf4 <_kill_r>:
 800bcf4:	b538      	push	{r3, r4, r5, lr}
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	4d06      	ldr	r5, [pc, #24]	@ (800bd14 <_kill_r+0x20>)
 800bcfa:	4604      	mov	r4, r0
 800bcfc:	4608      	mov	r0, r1
 800bcfe:	4611      	mov	r1, r2
 800bd00:	602b      	str	r3, [r5, #0]
 800bd02:	f7f6 fde3 	bl	80028cc <_kill>
 800bd06:	1c43      	adds	r3, r0, #1
 800bd08:	d102      	bne.n	800bd10 <_kill_r+0x1c>
 800bd0a:	682b      	ldr	r3, [r5, #0]
 800bd0c:	b103      	cbz	r3, 800bd10 <_kill_r+0x1c>
 800bd0e:	6023      	str	r3, [r4, #0]
 800bd10:	bd38      	pop	{r3, r4, r5, pc}
 800bd12:	bf00      	nop
 800bd14:	200007b0 	.word	0x200007b0

0800bd18 <_getpid_r>:
 800bd18:	f7f6 bdd0 	b.w	80028bc <_getpid>

0800bd1c <_init>:
 800bd1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd1e:	bf00      	nop
 800bd20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd22:	bc08      	pop	{r3}
 800bd24:	469e      	mov	lr, r3
 800bd26:	4770      	bx	lr

0800bd28 <_fini>:
 800bd28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd2a:	bf00      	nop
 800bd2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd2e:	bc08      	pop	{r3}
 800bd30:	469e      	mov	lr, r3
 800bd32:	4770      	bx	lr
