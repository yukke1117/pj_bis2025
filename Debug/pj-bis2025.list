
pj-bis2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be7c  08000238  08000238  00001238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001750c  0800c0b8  0800c0b8  0000d0b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080235c4  080235c4  000251e8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080235c4  080235c4  000245c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080235cc  080235cc  000251e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080235cc  080235cc  000245cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080235d0  080235d0  000245d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  080235d4  00025000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005d8  200001e8  080237bc  000251e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007c0  080237bc  000257c0  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  000251e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000260c7  00000000  00000000  0002521e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004297  00000000  00000000  0004b2e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c28  00000000  00000000  0004f580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003211e  00000000  00000000  000511a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002185d  00000000  00000000  000832c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001418c5  00000000  00000000  000a4b23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  001e63e8  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 0000159a  00000000  00000000  001e642b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008bc4  00000000  00000000  001e79c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  001f058c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	200001e8 	.word	0x200001e8
 8000254:	00000000 	.word	0x00000000
 8000258:	0800c09c 	.word	0x0800c09c

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	200001ec 	.word	0x200001ec
 8000274:	0800c09c 	.word	0x0800c09c

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_drsub>:
 8000288:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800028c:	e002      	b.n	8000294 <__adddf3>
 800028e:	bf00      	nop

08000290 <__aeabi_dsub>:
 8000290:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000294 <__adddf3>:
 8000294:	b530      	push	{r4, r5, lr}
 8000296:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800029a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800029e:	ea94 0f05 	teq	r4, r5
 80002a2:	bf08      	it	eq
 80002a4:	ea90 0f02 	teqeq	r0, r2
 80002a8:	bf1f      	itttt	ne
 80002aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ba:	f000 80e2 	beq.w	8000482 <__adddf3+0x1ee>
 80002be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002c6:	bfb8      	it	lt
 80002c8:	426d      	neglt	r5, r5
 80002ca:	dd0c      	ble.n	80002e6 <__adddf3+0x52>
 80002cc:	442c      	add	r4, r5
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	ea82 0000 	eor.w	r0, r2, r0
 80002da:	ea83 0101 	eor.w	r1, r3, r1
 80002de:	ea80 0202 	eor.w	r2, r0, r2
 80002e2:	ea81 0303 	eor.w	r3, r1, r3
 80002e6:	2d36      	cmp	r5, #54	@ 0x36
 80002e8:	bf88      	it	hi
 80002ea:	bd30      	pophi	{r4, r5, pc}
 80002ec:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002f4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002fc:	d002      	beq.n	8000304 <__adddf3+0x70>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000308:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800030c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000310:	d002      	beq.n	8000318 <__adddf3+0x84>
 8000312:	4252      	negs	r2, r2
 8000314:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000318:	ea94 0f05 	teq	r4, r5
 800031c:	f000 80a7 	beq.w	800046e <__adddf3+0x1da>
 8000320:	f1a4 0401 	sub.w	r4, r4, #1
 8000324:	f1d5 0e20 	rsbs	lr, r5, #32
 8000328:	db0d      	blt.n	8000346 <__adddf3+0xb2>
 800032a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800032e:	fa22 f205 	lsr.w	r2, r2, r5
 8000332:	1880      	adds	r0, r0, r2
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	fa03 f20e 	lsl.w	r2, r3, lr
 800033c:	1880      	adds	r0, r0, r2
 800033e:	fa43 f305 	asr.w	r3, r3, r5
 8000342:	4159      	adcs	r1, r3
 8000344:	e00e      	b.n	8000364 <__adddf3+0xd0>
 8000346:	f1a5 0520 	sub.w	r5, r5, #32
 800034a:	f10e 0e20 	add.w	lr, lr, #32
 800034e:	2a01      	cmp	r2, #1
 8000350:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000354:	bf28      	it	cs
 8000356:	f04c 0c02 	orrcs.w	ip, ip, #2
 800035a:	fa43 f305 	asr.w	r3, r3, r5
 800035e:	18c0      	adds	r0, r0, r3
 8000360:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000364:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000368:	d507      	bpl.n	800037a <__adddf3+0xe6>
 800036a:	f04f 0e00 	mov.w	lr, #0
 800036e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000372:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000376:	eb6e 0101 	sbc.w	r1, lr, r1
 800037a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800037e:	d31b      	bcc.n	80003b8 <__adddf3+0x124>
 8000380:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000384:	d30c      	bcc.n	80003a0 <__adddf3+0x10c>
 8000386:	0849      	lsrs	r1, r1, #1
 8000388:	ea5f 0030 	movs.w	r0, r0, rrx
 800038c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000390:	f104 0401 	add.w	r4, r4, #1
 8000394:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000398:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800039c:	f080 809a 	bcs.w	80004d4 <__adddf3+0x240>
 80003a0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003a4:	bf08      	it	eq
 80003a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003aa:	f150 0000 	adcs.w	r0, r0, #0
 80003ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003b2:	ea41 0105 	orr.w	r1, r1, r5
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003bc:	4140      	adcs	r0, r0
 80003be:	eb41 0101 	adc.w	r1, r1, r1
 80003c2:	3c01      	subs	r4, #1
 80003c4:	bf28      	it	cs
 80003c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003ca:	d2e9      	bcs.n	80003a0 <__adddf3+0x10c>
 80003cc:	f091 0f00 	teq	r1, #0
 80003d0:	bf04      	itt	eq
 80003d2:	4601      	moveq	r1, r0
 80003d4:	2000      	moveq	r0, #0
 80003d6:	fab1 f381 	clz	r3, r1
 80003da:	bf08      	it	eq
 80003dc:	3320      	addeq	r3, #32
 80003de:	f1a3 030b 	sub.w	r3, r3, #11
 80003e2:	f1b3 0220 	subs.w	r2, r3, #32
 80003e6:	da0c      	bge.n	8000402 <__adddf3+0x16e>
 80003e8:	320c      	adds	r2, #12
 80003ea:	dd08      	ble.n	80003fe <__adddf3+0x16a>
 80003ec:	f102 0c14 	add.w	ip, r2, #20
 80003f0:	f1c2 020c 	rsb	r2, r2, #12
 80003f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f8:	fa21 f102 	lsr.w	r1, r1, r2
 80003fc:	e00c      	b.n	8000418 <__adddf3+0x184>
 80003fe:	f102 0214 	add.w	r2, r2, #20
 8000402:	bfd8      	it	le
 8000404:	f1c2 0c20 	rsble	ip, r2, #32
 8000408:	fa01 f102 	lsl.w	r1, r1, r2
 800040c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000410:	bfdc      	itt	le
 8000412:	ea41 010c 	orrle.w	r1, r1, ip
 8000416:	4090      	lslle	r0, r2
 8000418:	1ae4      	subs	r4, r4, r3
 800041a:	bfa2      	ittt	ge
 800041c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000420:	4329      	orrge	r1, r5
 8000422:	bd30      	popge	{r4, r5, pc}
 8000424:	ea6f 0404 	mvn.w	r4, r4
 8000428:	3c1f      	subs	r4, #31
 800042a:	da1c      	bge.n	8000466 <__adddf3+0x1d2>
 800042c:	340c      	adds	r4, #12
 800042e:	dc0e      	bgt.n	800044e <__adddf3+0x1ba>
 8000430:	f104 0414 	add.w	r4, r4, #20
 8000434:	f1c4 0220 	rsb	r2, r4, #32
 8000438:	fa20 f004 	lsr.w	r0, r0, r4
 800043c:	fa01 f302 	lsl.w	r3, r1, r2
 8000440:	ea40 0003 	orr.w	r0, r0, r3
 8000444:	fa21 f304 	lsr.w	r3, r1, r4
 8000448:	ea45 0103 	orr.w	r1, r5, r3
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	f1c4 040c 	rsb	r4, r4, #12
 8000452:	f1c4 0220 	rsb	r2, r4, #32
 8000456:	fa20 f002 	lsr.w	r0, r0, r2
 800045a:	fa01 f304 	lsl.w	r3, r1, r4
 800045e:	ea40 0003 	orr.w	r0, r0, r3
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	fa21 f004 	lsr.w	r0, r1, r4
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f094 0f00 	teq	r4, #0
 8000472:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000476:	bf06      	itte	eq
 8000478:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800047c:	3401      	addeq	r4, #1
 800047e:	3d01      	subne	r5, #1
 8000480:	e74e      	b.n	8000320 <__adddf3+0x8c>
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf18      	it	ne
 8000488:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048c:	d029      	beq.n	80004e2 <__adddf3+0x24e>
 800048e:	ea94 0f05 	teq	r4, r5
 8000492:	bf08      	it	eq
 8000494:	ea90 0f02 	teqeq	r0, r2
 8000498:	d005      	beq.n	80004a6 <__adddf3+0x212>
 800049a:	ea54 0c00 	orrs.w	ip, r4, r0
 800049e:	bf04      	itt	eq
 80004a0:	4619      	moveq	r1, r3
 80004a2:	4610      	moveq	r0, r2
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea91 0f03 	teq	r1, r3
 80004aa:	bf1e      	ittt	ne
 80004ac:	2100      	movne	r1, #0
 80004ae:	2000      	movne	r0, #0
 80004b0:	bd30      	popne	{r4, r5, pc}
 80004b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004b6:	d105      	bne.n	80004c4 <__adddf3+0x230>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	4149      	adcs	r1, r1
 80004bc:	bf28      	it	cs
 80004be:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004c2:	bd30      	pop	{r4, r5, pc}
 80004c4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c8:	bf3c      	itt	cc
 80004ca:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004ce:	bd30      	popcc	{r4, r5, pc}
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004dc:	f04f 0000 	mov.w	r0, #0
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf1a      	itte	ne
 80004e8:	4619      	movne	r1, r3
 80004ea:	4610      	movne	r0, r2
 80004ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f0:	bf1c      	itt	ne
 80004f2:	460b      	movne	r3, r1
 80004f4:	4602      	movne	r2, r0
 80004f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004fa:	bf06      	itte	eq
 80004fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000500:	ea91 0f03 	teqeq	r1, r3
 8000504:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	bf00      	nop

0800050c <__aeabi_ui2d>:
 800050c:	f090 0f00 	teq	r0, #0
 8000510:	bf04      	itt	eq
 8000512:	2100      	moveq	r1, #0
 8000514:	4770      	bxeq	lr
 8000516:	b530      	push	{r4, r5, lr}
 8000518:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800051c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000520:	f04f 0500 	mov.w	r5, #0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e750      	b.n	80003cc <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_i2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000540:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000544:	bf48      	it	mi
 8000546:	4240      	negmi	r0, r0
 8000548:	f04f 0100 	mov.w	r1, #0
 800054c:	e73e      	b.n	80003cc <__adddf3+0x138>
 800054e:	bf00      	nop

08000550 <__aeabi_f2d>:
 8000550:	0042      	lsls	r2, r0, #1
 8000552:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800055e:	bf1f      	itttt	ne
 8000560:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000564:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000568:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800056c:	4770      	bxne	lr
 800056e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000572:	bf08      	it	eq
 8000574:	4770      	bxeq	lr
 8000576:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800057a:	bf04      	itt	eq
 800057c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000590:	e71c      	b.n	80003cc <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aed8 	beq.w	800037a <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6bd      	b.n	800037a <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_uldivmod>:
 8000bb0:	b953      	cbnz	r3, 8000bc8 <__aeabi_uldivmod+0x18>
 8000bb2:	b94a      	cbnz	r2, 8000bc8 <__aeabi_uldivmod+0x18>
 8000bb4:	2900      	cmp	r1, #0
 8000bb6:	bf08      	it	eq
 8000bb8:	2800      	cmpeq	r0, #0
 8000bba:	bf1c      	itt	ne
 8000bbc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bc0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bc4:	f000 b9b0 	b.w	8000f28 <__aeabi_idiv0>
 8000bc8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bcc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd0:	f000 f806 	bl	8000be0 <__udivmoddi4>
 8000bd4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bdc:	b004      	add	sp, #16
 8000bde:	4770      	bx	lr

08000be0 <__udivmoddi4>:
 8000be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000be4:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000be6:	4688      	mov	r8, r1
 8000be8:	4604      	mov	r4, r0
 8000bea:	468e      	mov	lr, r1
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d14a      	bne.n	8000c86 <__udivmoddi4+0xa6>
 8000bf0:	428a      	cmp	r2, r1
 8000bf2:	4617      	mov	r7, r2
 8000bf4:	d95f      	bls.n	8000cb6 <__udivmoddi4+0xd6>
 8000bf6:	fab2 f682 	clz	r6, r2
 8000bfa:	b14e      	cbz	r6, 8000c10 <__udivmoddi4+0x30>
 8000bfc:	f1c6 0320 	rsb	r3, r6, #32
 8000c00:	fa01 fe06 	lsl.w	lr, r1, r6
 8000c04:	40b7      	lsls	r7, r6
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	ea43 0e0e 	orr.w	lr, r3, lr
 8000c10:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c14:	fa1f fc87 	uxth.w	ip, r7
 8000c18:	0c23      	lsrs	r3, r4, #16
 8000c1a:	fbbe f1f8 	udiv	r1, lr, r8
 8000c1e:	fb08 ee11 	mls	lr, r8, r1, lr
 8000c22:	fb01 f20c 	mul.w	r2, r1, ip
 8000c26:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000c2a:	429a      	cmp	r2, r3
 8000c2c:	d907      	bls.n	8000c3e <__udivmoddi4+0x5e>
 8000c2e:	18fb      	adds	r3, r7, r3
 8000c30:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c34:	d202      	bcs.n	8000c3c <__udivmoddi4+0x5c>
 8000c36:	429a      	cmp	r2, r3
 8000c38:	f200 8154 	bhi.w	8000ee4 <__udivmoddi4+0x304>
 8000c3c:	4601      	mov	r1, r0
 8000c3e:	1a9b      	subs	r3, r3, r2
 8000c40:	b2a2      	uxth	r2, r4
 8000c42:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c46:	fb08 3310 	mls	r3, r8, r0, r3
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8000c52:	4594      	cmp	ip, r2
 8000c54:	d90b      	bls.n	8000c6e <__udivmoddi4+0x8e>
 8000c56:	18ba      	adds	r2, r7, r2
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8000c5c:	bf2c      	ite	cs
 8000c5e:	2401      	movcs	r4, #1
 8000c60:	2400      	movcc	r4, #0
 8000c62:	4594      	cmp	ip, r2
 8000c64:	d902      	bls.n	8000c6c <__udivmoddi4+0x8c>
 8000c66:	2c00      	cmp	r4, #0
 8000c68:	f000 813f 	beq.w	8000eea <__udivmoddi4+0x30a>
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c72:	eba2 020c 	sub.w	r2, r2, ip
 8000c76:	2100      	movs	r1, #0
 8000c78:	b11d      	cbz	r5, 8000c82 <__udivmoddi4+0xa2>
 8000c7a:	40f2      	lsrs	r2, r6
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	e9c5 2300 	strd	r2, r3, [r5]
 8000c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c86:	428b      	cmp	r3, r1
 8000c88:	d905      	bls.n	8000c96 <__udivmoddi4+0xb6>
 8000c8a:	b10d      	cbz	r5, 8000c90 <__udivmoddi4+0xb0>
 8000c8c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c90:	2100      	movs	r1, #0
 8000c92:	4608      	mov	r0, r1
 8000c94:	e7f5      	b.n	8000c82 <__udivmoddi4+0xa2>
 8000c96:	fab3 f183 	clz	r1, r3
 8000c9a:	2900      	cmp	r1, #0
 8000c9c:	d14e      	bne.n	8000d3c <__udivmoddi4+0x15c>
 8000c9e:	4543      	cmp	r3, r8
 8000ca0:	f0c0 8112 	bcc.w	8000ec8 <__udivmoddi4+0x2e8>
 8000ca4:	4282      	cmp	r2, r0
 8000ca6:	f240 810f 	bls.w	8000ec8 <__udivmoddi4+0x2e8>
 8000caa:	4608      	mov	r0, r1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e8      	beq.n	8000c82 <__udivmoddi4+0xa2>
 8000cb0:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cb4:	e7e5      	b.n	8000c82 <__udivmoddi4+0xa2>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f000 80ac 	beq.w	8000e14 <__udivmoddi4+0x234>
 8000cbc:	fab2 f682 	clz	r6, r2
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	f040 80bb 	bne.w	8000e3c <__udivmoddi4+0x25c>
 8000cc6:	1a8b      	subs	r3, r1, r2
 8000cc8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000ccc:	b2bc      	uxth	r4, r7
 8000cce:	2101      	movs	r1, #1
 8000cd0:	0c02      	lsrs	r2, r0, #16
 8000cd2:	b280      	uxth	r0, r0
 8000cd4:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cd8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cdc:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000ce0:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d90e      	bls.n	8000d06 <__udivmoddi4+0x126>
 8000ce8:	18fb      	adds	r3, r7, r3
 8000cea:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000cee:	bf2c      	ite	cs
 8000cf0:	f04f 0901 	movcs.w	r9, #1
 8000cf4:	f04f 0900 	movcc.w	r9, #0
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d903      	bls.n	8000d04 <__udivmoddi4+0x124>
 8000cfc:	f1b9 0f00 	cmp.w	r9, #0
 8000d00:	f000 80ec 	beq.w	8000edc <__udivmoddi4+0x2fc>
 8000d04:	46c4      	mov	ip, r8
 8000d06:	1a9b      	subs	r3, r3, r2
 8000d08:	fbb3 f8fe 	udiv	r8, r3, lr
 8000d0c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d10:	fb04 f408 	mul.w	r4, r4, r8
 8000d14:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 8000d18:	4294      	cmp	r4, r2
 8000d1a:	d90b      	bls.n	8000d34 <__udivmoddi4+0x154>
 8000d1c:	18ba      	adds	r2, r7, r2
 8000d1e:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8000d22:	bf2c      	ite	cs
 8000d24:	2001      	movcs	r0, #1
 8000d26:	2000      	movcc	r0, #0
 8000d28:	4294      	cmp	r4, r2
 8000d2a:	d902      	bls.n	8000d32 <__udivmoddi4+0x152>
 8000d2c:	2800      	cmp	r0, #0
 8000d2e:	f000 80d1 	beq.w	8000ed4 <__udivmoddi4+0x2f4>
 8000d32:	4698      	mov	r8, r3
 8000d34:	1b12      	subs	r2, r2, r4
 8000d36:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 8000d3a:	e79d      	b.n	8000c78 <__udivmoddi4+0x98>
 8000d3c:	f1c1 0620 	rsb	r6, r1, #32
 8000d40:	408b      	lsls	r3, r1
 8000d42:	fa08 f401 	lsl.w	r4, r8, r1
 8000d46:	fa00 f901 	lsl.w	r9, r0, r1
 8000d4a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d4e:	fa28 f806 	lsr.w	r8, r8, r6
 8000d52:	408a      	lsls	r2, r1
 8000d54:	431f      	orrs	r7, r3
 8000d56:	fa20 f306 	lsr.w	r3, r0, r6
 8000d5a:	0c38      	lsrs	r0, r7, #16
 8000d5c:	4323      	orrs	r3, r4
 8000d5e:	fa1f fc87 	uxth.w	ip, r7
 8000d62:	0c1c      	lsrs	r4, r3, #16
 8000d64:	fbb8 fef0 	udiv	lr, r8, r0
 8000d68:	fb00 881e 	mls	r8, r0, lr, r8
 8000d6c:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000d70:	fb0e f80c 	mul.w	r8, lr, ip
 8000d74:	45a0      	cmp	r8, r4
 8000d76:	d90e      	bls.n	8000d96 <__udivmoddi4+0x1b6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000d7e:	bf2c      	ite	cs
 8000d80:	f04f 0b01 	movcs.w	fp, #1
 8000d84:	f04f 0b00 	movcc.w	fp, #0
 8000d88:	45a0      	cmp	r8, r4
 8000d8a:	d903      	bls.n	8000d94 <__udivmoddi4+0x1b4>
 8000d8c:	f1bb 0f00 	cmp.w	fp, #0
 8000d90:	f000 80b8 	beq.w	8000f04 <__udivmoddi4+0x324>
 8000d94:	46d6      	mov	lr, sl
 8000d96:	eba4 0408 	sub.w	r4, r4, r8
 8000d9a:	fa1f f883 	uxth.w	r8, r3
 8000d9e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000da2:	fb00 4413 	mls	r4, r0, r3, r4
 8000da6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000daa:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000dae:	45a4      	cmp	ip, r4
 8000db0:	d90e      	bls.n	8000dd0 <__udivmoddi4+0x1f0>
 8000db2:	193c      	adds	r4, r7, r4
 8000db4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000db8:	bf2c      	ite	cs
 8000dba:	f04f 0801 	movcs.w	r8, #1
 8000dbe:	f04f 0800 	movcc.w	r8, #0
 8000dc2:	45a4      	cmp	ip, r4
 8000dc4:	d903      	bls.n	8000dce <__udivmoddi4+0x1ee>
 8000dc6:	f1b8 0f00 	cmp.w	r8, #0
 8000dca:	f000 809f 	beq.w	8000f0c <__udivmoddi4+0x32c>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dd4:	eba4 040c 	sub.w	r4, r4, ip
 8000dd8:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ddc:	4564      	cmp	r4, ip
 8000dde:	4673      	mov	r3, lr
 8000de0:	46e0      	mov	r8, ip
 8000de2:	d302      	bcc.n	8000dea <__udivmoddi4+0x20a>
 8000de4:	d107      	bne.n	8000df6 <__udivmoddi4+0x216>
 8000de6:	45f1      	cmp	r9, lr
 8000de8:	d205      	bcs.n	8000df6 <__udivmoddi4+0x216>
 8000dea:	ebbe 0302 	subs.w	r3, lr, r2
 8000dee:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000df2:	3801      	subs	r0, #1
 8000df4:	46e0      	mov	r8, ip
 8000df6:	b15d      	cbz	r5, 8000e10 <__udivmoddi4+0x230>
 8000df8:	ebb9 0203 	subs.w	r2, r9, r3
 8000dfc:	eb64 0408 	sbc.w	r4, r4, r8
 8000e00:	fa04 f606 	lsl.w	r6, r4, r6
 8000e04:	fa22 f301 	lsr.w	r3, r2, r1
 8000e08:	40cc      	lsrs	r4, r1
 8000e0a:	431e      	orrs	r6, r3
 8000e0c:	e9c5 6400 	strd	r6, r4, [r5]
 8000e10:	2100      	movs	r1, #0
 8000e12:	e736      	b.n	8000c82 <__udivmoddi4+0xa2>
 8000e14:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e18:	0c01      	lsrs	r1, r0, #16
 8000e1a:	4614      	mov	r4, r2
 8000e1c:	b280      	uxth	r0, r0
 8000e1e:	4696      	mov	lr, r2
 8000e20:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000e24:	2620      	movs	r6, #32
 8000e26:	4690      	mov	r8, r2
 8000e28:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8000e2c:	4610      	mov	r0, r2
 8000e2e:	fbb1 f1f2 	udiv	r1, r1, r2
 8000e32:	eba3 0308 	sub.w	r3, r3, r8
 8000e36:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e3a:	e74b      	b.n	8000cd4 <__udivmoddi4+0xf4>
 8000e3c:	40b7      	lsls	r7, r6
 8000e3e:	f1c6 0320 	rsb	r3, r6, #32
 8000e42:	fa01 f206 	lsl.w	r2, r1, r6
 8000e46:	fa21 f803 	lsr.w	r8, r1, r3
 8000e4a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e4e:	fa20 f303 	lsr.w	r3, r0, r3
 8000e52:	b2bc      	uxth	r4, r7
 8000e54:	40b0      	lsls	r0, r6
 8000e56:	4313      	orrs	r3, r2
 8000e58:	0c02      	lsrs	r2, r0, #16
 8000e5a:	0c19      	lsrs	r1, r3, #16
 8000e5c:	b280      	uxth	r0, r0
 8000e5e:	fbb8 f9fe 	udiv	r9, r8, lr
 8000e62:	fb0e 8819 	mls	r8, lr, r9, r8
 8000e66:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000e6a:	fb09 f804 	mul.w	r8, r9, r4
 8000e6e:	4588      	cmp	r8, r1
 8000e70:	d951      	bls.n	8000f16 <__udivmoddi4+0x336>
 8000e72:	1879      	adds	r1, r7, r1
 8000e74:	f109 3cff 	add.w	ip, r9, #4294967295	@ 0xffffffff
 8000e78:	bf2c      	ite	cs
 8000e7a:	f04f 0a01 	movcs.w	sl, #1
 8000e7e:	f04f 0a00 	movcc.w	sl, #0
 8000e82:	4588      	cmp	r8, r1
 8000e84:	d902      	bls.n	8000e8c <__udivmoddi4+0x2ac>
 8000e86:	f1ba 0f00 	cmp.w	sl, #0
 8000e8a:	d031      	beq.n	8000ef0 <__udivmoddi4+0x310>
 8000e8c:	eba1 0108 	sub.w	r1, r1, r8
 8000e90:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e94:	fb09 f804 	mul.w	r8, r9, r4
 8000e98:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e9c:	b29b      	uxth	r3, r3
 8000e9e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea2:	4543      	cmp	r3, r8
 8000ea4:	d235      	bcs.n	8000f12 <__udivmoddi4+0x332>
 8000ea6:	18fb      	adds	r3, r7, r3
 8000ea8:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000eac:	bf2c      	ite	cs
 8000eae:	f04f 0a01 	movcs.w	sl, #1
 8000eb2:	f04f 0a00 	movcc.w	sl, #0
 8000eb6:	4543      	cmp	r3, r8
 8000eb8:	d2bb      	bcs.n	8000e32 <__udivmoddi4+0x252>
 8000eba:	f1ba 0f00 	cmp.w	sl, #0
 8000ebe:	d1b8      	bne.n	8000e32 <__udivmoddi4+0x252>
 8000ec0:	f1a9 0102 	sub.w	r1, r9, #2
 8000ec4:	443b      	add	r3, r7
 8000ec6:	e7b4      	b.n	8000e32 <__udivmoddi4+0x252>
 8000ec8:	1a84      	subs	r4, r0, r2
 8000eca:	eb68 0203 	sbc.w	r2, r8, r3
 8000ece:	2001      	movs	r0, #1
 8000ed0:	4696      	mov	lr, r2
 8000ed2:	e6eb      	b.n	8000cac <__udivmoddi4+0xcc>
 8000ed4:	443a      	add	r2, r7
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	e72b      	b.n	8000d34 <__udivmoddi4+0x154>
 8000edc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ee0:	443b      	add	r3, r7
 8000ee2:	e710      	b.n	8000d06 <__udivmoddi4+0x126>
 8000ee4:	3902      	subs	r1, #2
 8000ee6:	443b      	add	r3, r7
 8000ee8:	e6a9      	b.n	8000c3e <__udivmoddi4+0x5e>
 8000eea:	443a      	add	r2, r7
 8000eec:	3802      	subs	r0, #2
 8000eee:	e6be      	b.n	8000c6e <__udivmoddi4+0x8e>
 8000ef0:	eba7 0808 	sub.w	r8, r7, r8
 8000ef4:	f1a9 0c02 	sub.w	ip, r9, #2
 8000ef8:	4441      	add	r1, r8
 8000efa:	fbb1 f9fe 	udiv	r9, r1, lr
 8000efe:	fb09 f804 	mul.w	r8, r9, r4
 8000f02:	e7c9      	b.n	8000e98 <__udivmoddi4+0x2b8>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	e744      	b.n	8000d96 <__udivmoddi4+0x1b6>
 8000f0c:	3b02      	subs	r3, #2
 8000f0e:	443c      	add	r4, r7
 8000f10:	e75e      	b.n	8000dd0 <__udivmoddi4+0x1f0>
 8000f12:	4649      	mov	r1, r9
 8000f14:	e78d      	b.n	8000e32 <__udivmoddi4+0x252>
 8000f16:	eba1 0108 	sub.w	r1, r1, r8
 8000f1a:	46cc      	mov	ip, r9
 8000f1c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f20:	fb09 f804 	mul.w	r8, r9, r4
 8000f24:	e7b8      	b.n	8000e98 <__udivmoddi4+0x2b8>
 8000f26:	bf00      	nop

08000f28 <__aeabi_idiv0>:
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop

08000f2c <LCD_SELECT>:
#define LCD_DISP_GPIO_Port GPIOC
#define LCD_DISP_Pin       GPIO_PIN_10
#define HDR4BIT   0x24

/* 内部ヘルパ */
static inline void LCD_SELECT  (void){ HAL_GPIO_WritePin(LCD_CS_GPIO_Port,  LCD_CS_Pin, GPIO_PIN_SET); }
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	2201      	movs	r2, #1
 8000f32:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f36:	4802      	ldr	r0, [pc, #8]	@ (8000f40 <LCD_SELECT+0x14>)
 8000f38:	f004 fa92 	bl	8005460 <HAL_GPIO_WritePin>
 8000f3c:	bf00      	nop
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	42020800 	.word	0x42020800

08000f44 <LCD_UNSELECT>:
static inline void LCD_UNSELECT(void){ HAL_GPIO_WritePin(LCD_CS_GPIO_Port,  LCD_CS_Pin, GPIO_PIN_RESET);   }
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f4e:	4802      	ldr	r0, [pc, #8]	@ (8000f58 <LCD_UNSELECT+0x14>)
 8000f50:	f004 fa86 	bl	8005460 <HAL_GPIO_WritePin>
 8000f54:	bf00      	nop
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	42020800 	.word	0x42020800

08000f5c <lcd_tx>:
static inline void lcd_tx(const uint8_t *p, size_t len){
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	6039      	str	r1, [r7, #0]
    HAL_SPI_Transmit(&hspi1, (uint8_t*)p, len, HAL_MAX_DELAY);
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	b29a      	uxth	r2, r3
 8000f6a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f6e:	6879      	ldr	r1, [r7, #4]
 8000f70:	4803      	ldr	r0, [pc, #12]	@ (8000f80 <lcd_tx+0x24>)
 8000f72:	f006 f9f7 	bl	8007364 <HAL_SPI_Transmit>
}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20000364 	.word	0x20000364

08000f84 <LCD_Init>:

/* --- Public API ------------------------------------------------- */
void LCD_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
    /* ハードリセット相当 */
    HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_RESET);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f8e:	480a      	ldr	r0, [pc, #40]	@ (8000fb8 <LCD_Init+0x34>)
 8000f90:	f004 fa66 	bl	8005460 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000f94:	2001      	movs	r0, #1
 8000f96:	f002 f9e9 	bl	800336c <HAL_Delay>
    HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000fa0:	4805      	ldr	r0, [pc, #20]	@ (8000fb8 <LCD_Init+0x34>)
 8000fa2:	f004 fa5d 	bl	8005460 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000fa6:	200a      	movs	r0, #10
 8000fa8:	f002 f9e0 	bl	800336c <HAL_Delay>

    LCD_AllClear();                      /* メモリ全消去 (CMD 0x20) */
 8000fac:	f000 f806 	bl	8000fbc <LCD_AllClear>
    
    /* 画面全体を白で塗りつぶし */
    LCD_FillWhite();
 8000fb0:	f000 f850 	bl	8001054 <LCD_FillWhite>
}
 8000fb4:	bf00      	nop
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	42020800 	.word	0x42020800

08000fbc <LCD_AllClear>:

void LCD_AllClear(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
    const uint8_t cmd = 0x20;            /* ALL CLEAR */
 8000fc2:	2320      	movs	r3, #32
 8000fc4:	71fb      	strb	r3, [r7, #7]
    LCD_SELECT();
 8000fc6:	f7ff ffb1 	bl	8000f2c <LCD_SELECT>
    lcd_tx(&cmd, 1);
 8000fca:	1dfb      	adds	r3, r7, #7
 8000fcc:	2101      	movs	r1, #1
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff ffc4 	bl	8000f5c <lcd_tx>
    LCD_UNSELECT();
 8000fd4:	f7ff ffb6 	bl	8000f44 <LCD_UNSELECT>
}
 8000fd8:	bf00      	nop
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <LCD_SendLine4bit>:

void LCD_SendLine4bit(uint16_t y, const uint8_t *buf)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b09a      	sub	sp, #104	@ 0x68
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	6039      	str	r1, [r7, #0]
 8000fea:	80fb      	strh	r3, [r7, #6]
    uint16_t hdr = (HDR4BIT << 10) | (y & 0x03FF);   /* 16‑bit ヘッダ */
 8000fec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ff0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000ff4:	b21a      	sxth	r2, r3
 8000ff6:	4b16      	ldr	r3, [pc, #88]	@ (8001050 <LCD_SendLine4bit+0x70>)
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	b21b      	sxth	r3, r3
 8000ffc:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
    uint8_t  tx[2 + 88 + 2];                         /* hdr + data + 2B dummy */

    tx[0] = hdr >> 8;         /* MSB first */
 8001000:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8001004:	0a1b      	lsrs	r3, r3, #8
 8001006:	b29b      	uxth	r3, r3
 8001008:	b2db      	uxtb	r3, r3
 800100a:	723b      	strb	r3, [r7, #8]
    tx[1] = hdr & 0xFF;
 800100c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8001010:	b2db      	uxtb	r3, r3
 8001012:	727b      	strb	r3, [r7, #9]
    memcpy(&tx[2], buf, 88);
 8001014:	f107 0308 	add.w	r3, r7, #8
 8001018:	3302      	adds	r3, #2
 800101a:	2258      	movs	r2, #88	@ 0x58
 800101c:	6839      	ldr	r1, [r7, #0]
 800101e:	4618      	mov	r0, r3
 8001020:	f008 ff58 	bl	8009ed4 <memcpy>
    tx[90] = tx[91] = 0x00;   /* 16clk transfer period */
 8001024:	2300      	movs	r3, #0
 8001026:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
 800102a:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 800102e:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62

    LCD_SELECT();             /* ★ CS = High (SCS=H がアクティブ) */
 8001032:	f7ff ff7b 	bl	8000f2c <LCD_SELECT>
    lcd_tx(tx, sizeof tx);    /* SPI 8‑bit, ≒20 MHz, MSB first */
 8001036:	f107 0308 	add.w	r3, r7, #8
 800103a:	215c      	movs	r1, #92	@ 0x5c
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff ff8d 	bl	8000f5c <lcd_tx>
    LCD_UNSELECT();           /* CS = Low */
 8001042:	f7ff ff7f 	bl	8000f44 <LCD_UNSELECT>
}
 8001046:	bf00      	nop
 8001048:	3768      	adds	r7, #104	@ 0x68
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	ffff9000 	.word	0xffff9000

08001054 <LCD_FillWhite>:

/* 画面全体を白で塗りつぶす */
void LCD_FillWhite(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b098      	sub	sp, #96	@ 0x60
 8001058:	af00      	add	r7, sp, #0
    uint8_t white_line[88];
    /* 全ピクセルを白(0b1110)で初期化 */
    for (int i = 0; i < 88; i++) {
 800105a:	2300      	movs	r3, #0
 800105c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800105e:	e007      	b.n	8001070 <LCD_FillWhite+0x1c>
        white_line[i] = 0xEE;  /* 0b11101110 = 白白 */
 8001060:	463a      	mov	r2, r7
 8001062:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001064:	4413      	add	r3, r2
 8001066:	22ee      	movs	r2, #238	@ 0xee
 8001068:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 88; i++) {
 800106a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800106c:	3301      	adds	r3, #1
 800106e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001070:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001072:	2b57      	cmp	r3, #87	@ 0x57
 8001074:	ddf4      	ble.n	8001060 <LCD_FillWhite+0xc>
    }
    
    /* 全ライン(176行)を白で塗りつぶし */
    for (uint16_t y = 0; y < 176; y++) {
 8001076:	2300      	movs	r3, #0
 8001078:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 800107c:	e00b      	b.n	8001096 <LCD_FillWhite+0x42>
        LCD_SendLine4bit(y, white_line);
 800107e:	463a      	mov	r2, r7
 8001080:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8001084:	4611      	mov	r1, r2
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff ffaa 	bl	8000fe0 <LCD_SendLine4bit>
    for (uint16_t y = 0; y < 176; y++) {
 800108c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8001090:	3301      	adds	r3, #1
 8001092:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8001096:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800109a:	2baf      	cmp	r3, #175	@ 0xaf
 800109c:	d9ef      	bls.n	800107e <LCD_FillWhite+0x2a>
    }
 800109e:	bf00      	nop
 80010a0:	bf00      	nop
 80010a2:	3760      	adds	r7, #96	@ 0x60
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <LCD_DrawString4bit>:
#define PIX_ON   0b0000   /* 黒 → 文字色 */
#define PIX_OFF  0b1110   /* RGB=111, D=0 → 白 → 背景色 */

/* 文字列を y0 行から 8 行ぶん描画（4‑bit data mode） */
void LCD_DrawString4bit(uint16_t y0, const char *str)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b09e      	sub	sp, #120	@ 0x78
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	6039      	str	r1, [r7, #0]
 80010b2:	80fb      	strh	r3, [r7, #6]
    const uint16_t len   = strlen(str);
 80010b4:	6838      	ldr	r0, [r7, #0]
 80010b6:	f7ff f8df 	bl	8000278 <strlen>
 80010ba:	4603      	mov	r3, r0
 80010bc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    const uint16_t xmax  = len * 8;          /* 文字幅(ピクセル) */
 80010c0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80010c4:	00db      	lsls	r3, r3, #3
 80010c6:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
    uint8_t rowbuf[88];                      /* 176px ÷2 = 88B */

    for (uint8_t font_row = 0; font_row < 8; ++font_row) {
 80010ca:	2300      	movs	r3, #0
 80010cc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80010d0:	e08d      	b.n	80011ee <LCD_DrawString4bit+0x146>
        /* 1 行分を白で初期化 */
        for (int i = 0; i < 88; i++) {
 80010d2:	2300      	movs	r3, #0
 80010d4:	673b      	str	r3, [r7, #112]	@ 0x70
 80010d6:	e008      	b.n	80010ea <LCD_DrawString4bit+0x42>
            rowbuf[i] = 0xEE;  /* 0b11101110 = 白白 */
 80010d8:	f107 020c 	add.w	r2, r7, #12
 80010dc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80010de:	4413      	add	r3, r2
 80010e0:	22ee      	movs	r2, #238	@ 0xee
 80010e2:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < 88; i++) {
 80010e4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80010e6:	3301      	adds	r3, #1
 80010e8:	673b      	str	r3, [r7, #112]	@ 0x70
 80010ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80010ec:	2b57      	cmp	r3, #87	@ 0x57
 80010ee:	ddf3      	ble.n	80010d8 <LCD_DrawString4bit+0x30>
        }

        /* 文字→ピクセル→4‑bit パック */
        for (uint16_t x = 0; x < xmax; ++x) {
 80010f0:	2300      	movs	r3, #0
 80010f2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 80010f6:	e063      	b.n	80011c0 <LCD_DrawString4bit+0x118>
            uint8_t ch   = str[x / 8] - 32;      /* ASCII32=space 基点 */
 80010f8:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80010fc:	08db      	lsrs	r3, r3, #3
 80010fe:	b29b      	uxth	r3, r3
 8001100:	461a      	mov	r2, r3
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	4413      	add	r3, r2
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	3b20      	subs	r3, #32
 800110a:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
            uint8_t bit  = (font8x8_basic[ch][font_row] >> (x % 8)) & 1;
 800110e:	f897 2069 	ldrb.w	r2, [r7, #105]	@ 0x69
 8001112:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8001116:	493b      	ldr	r1, [pc, #236]	@ (8001204 <LCD_DrawString4bit+0x15c>)
 8001118:	00d2      	lsls	r2, r2, #3
 800111a:	440a      	add	r2, r1
 800111c:	4413      	add	r3, r2
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	461a      	mov	r2, r3
 8001122:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001126:	f003 0307 	and.w	r3, r3, #7
 800112a:	fa42 f303 	asr.w	r3, r2, r3
 800112e:	b2db      	uxtb	r3, r3
 8001130:	f003 0301 	and.w	r3, r3, #1
 8001134:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
            
            /* 文字の部分のみ黒で上書き */
            if (bit) {
 8001138:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 800113c:	2b00      	cmp	r3, #0
 800113e:	d03a      	beq.n	80011b6 <LCD_DrawString4bit+0x10e>
                uint8_t pix4 = PIX_ON;  /* 黒 */
 8001140:	2300      	movs	r3, #0
 8001142:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
                uint16_t byte_idx = x / 2;
 8001146:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800114a:	085b      	lsrs	r3, r3, #1
 800114c:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
                if (x & 1)
 8001150:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001154:	f003 0301 	and.w	r3, r3, #1
 8001158:	2b00      	cmp	r3, #0
 800115a:	d015      	beq.n	8001188 <LCD_DrawString4bit+0xe0>
                    rowbuf[byte_idx] = (rowbuf[byte_idx] & 0xF0) | pix4;      /* 下位 nibble */
 800115c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8001160:	3378      	adds	r3, #120	@ 0x78
 8001162:	443b      	add	r3, r7
 8001164:	f813 3c6c 	ldrb.w	r3, [r3, #-108]
 8001168:	b25b      	sxtb	r3, r3
 800116a:	f023 030f 	bic.w	r3, r3, #15
 800116e:	b25a      	sxtb	r2, r3
 8001170:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8001174:	4313      	orrs	r3, r2
 8001176:	b25a      	sxtb	r2, r3
 8001178:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800117c:	b2d2      	uxtb	r2, r2
 800117e:	3378      	adds	r3, #120	@ 0x78
 8001180:	443b      	add	r3, r7
 8001182:	f803 2c6c 	strb.w	r2, [r3, #-108]
 8001186:	e016      	b.n	80011b6 <LCD_DrawString4bit+0x10e>
                else
                    rowbuf[byte_idx] = (rowbuf[byte_idx] & 0x0F) | (pix4 << 4); /* 上位 nibble */
 8001188:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800118c:	3378      	adds	r3, #120	@ 0x78
 800118e:	443b      	add	r3, r7
 8001190:	f813 3c6c 	ldrb.w	r3, [r3, #-108]
 8001194:	b25b      	sxtb	r3, r3
 8001196:	f003 030f 	and.w	r3, r3, #15
 800119a:	b25a      	sxtb	r2, r3
 800119c:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80011a0:	011b      	lsls	r3, r3, #4
 80011a2:	b25b      	sxtb	r3, r3
 80011a4:	4313      	orrs	r3, r2
 80011a6:	b25a      	sxtb	r2, r3
 80011a8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80011ac:	b2d2      	uxtb	r2, r2
 80011ae:	3378      	adds	r3, #120	@ 0x78
 80011b0:	443b      	add	r3, r7
 80011b2:	f803 2c6c 	strb.w	r2, [r3, #-108]
        for (uint16_t x = 0; x < xmax; ++x) {
 80011b6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80011ba:	3301      	adds	r3, #1
 80011bc:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 80011c0:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 80011c4:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d395      	bcc.n	80010f8 <LCD_DrawString4bit+0x50>
            }
        }
        /* 画面に送る（4‑bit data mode ヘッダ + dummy 16clk は関数側で付加）*/
        LCD_SendLine4bit(y0 + font_row, rowbuf);
 80011cc:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80011d0:	b29a      	uxth	r2, r3
 80011d2:	88fb      	ldrh	r3, [r7, #6]
 80011d4:	4413      	add	r3, r2
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	f107 020c 	add.w	r2, r7, #12
 80011dc:	4611      	mov	r1, r2
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff fefe 	bl	8000fe0 <LCD_SendLine4bit>
    for (uint8_t font_row = 0; font_row < 8; ++font_row) {
 80011e4:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80011e8:	3301      	adds	r3, #1
 80011ea:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80011ee:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80011f2:	2b07      	cmp	r3, #7
 80011f4:	f67f af6d 	bls.w	80010d2 <LCD_DrawString4bit+0x2a>
    }
}
 80011f8:	bf00      	nop
 80011fa:	bf00      	nop
 80011fc:	3778      	adds	r7, #120	@ 0x78
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	0800c3a0 	.word	0x0800c3a0

08001208 <LCD_DrawImage>:
        }
    }
}

void LCD_DrawImage(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b09c      	sub	sp, #112	@ 0x70
 800120c:	af00      	add	r7, sp, #0
    uint8_t rowbuf[88]; // 176px / 2 pixels_per_byte = 88 bytes

    // The image data is 24bpp (3 bytes per pixel)
    const uint8_t bytes_per_pixel = 3; 
 800120e:	2303      	movs	r3, #3
 8001210:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
    const uint16_t bytes_per_row = Image_logo.width * bytes_per_pixel;
 8001214:	4b4e      	ldr	r3, [pc, #312]	@ (8001350 <LCD_DrawImage+0x148>)
 8001216:	889a      	ldrh	r2, [r3, #4]
 8001218:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 800121c:	b29b      	uxth	r3, r3
 800121e:	fb12 f303 	smulbb	r3, r2, r3
 8001222:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68

    for (uint16_t y = 0; y < Image_logo.height; y++) {
 8001226:	2300      	movs	r3, #0
 8001228:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 800122c:	e084      	b.n	8001338 <LCD_DrawImage+0x130>
        // Clear the line buffer for the new line
        memset(rowbuf, 0, sizeof(rowbuf));
 800122e:	463b      	mov	r3, r7
 8001230:	2258      	movs	r2, #88	@ 0x58
 8001232:	2100      	movs	r1, #0
 8001234:	4618      	mov	r0, r3
 8001236:	f008 fe05 	bl	8009e44 <memset>

        // Get a pointer to the start of the current row in the source image
        const uint8_t *p_src_row = &Image_logo.data[y * bytes_per_row];
 800123a:	4b45      	ldr	r3, [pc, #276]	@ (8001350 <LCD_DrawImage+0x148>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8001242:	f8b7 1068 	ldrh.w	r1, [r7, #104]	@ 0x68
 8001246:	fb01 f202 	mul.w	r2, r1, r2
 800124a:	4413      	add	r3, r2
 800124c:	667b      	str	r3, [r7, #100]	@ 0x64

        // Process each pixel in the row
        for (uint16_t x = 0; x < Image_logo.width; x++) {
 800124e:	2300      	movs	r3, #0
 8001250:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8001254:	e05e      	b.n	8001314 <LCD_DrawImage+0x10c>
            // Get the R, G, B values for the current pixel
            const uint8_t *p_pixel = &p_src_row[x * bytes_per_pixel];
 8001256:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800125a:	f897 206a 	ldrb.w	r2, [r7, #106]	@ 0x6a
 800125e:	fb02 f303 	mul.w	r3, r2, r3
 8001262:	461a      	mov	r2, r3
 8001264:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001266:	4413      	add	r3, r2
 8001268:	663b      	str	r3, [r7, #96]	@ 0x60
            uint8_t r = p_pixel[0];
 800126a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
            uint8_t g = p_pixel[1];
 8001272:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001274:	3301      	adds	r3, #1
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
            uint8_t b = p_pixel[2];
 800127c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800127e:	3302      	adds	r3, #2
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d

            // Convert 24bpp pixel to monochrome 4bpp pixel
            // Using a simple luminance threshold.
            // (R+G+B)/3 > 127
            uint8_t pix4;
            if ((r + g + b) > 382) { // 127 * 3 = 381
 8001286:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 800128a:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 800128e:	441a      	add	r2, r3
 8001290:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 8001294:	4413      	add	r3, r2
 8001296:	f5b3 7fbf 	cmp.w	r3, #382	@ 0x17e
 800129a:	dd03      	ble.n	80012a4 <LCD_DrawImage+0x9c>
                pix4 = PIX_OFF; // White
 800129c:	230e      	movs	r3, #14
 800129e:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
 80012a2:	e002      	b.n	80012aa <LCD_DrawImage+0xa2>
            } else {
                pix4 = PIX_ON; // Black
 80012a4:	2300      	movs	r3, #0
 80012a6:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
            }

            // Pack the 4bpp pixel into the row buffer
            // 2 pixels per byte: even x in high nibble, odd x in low nibble
            uint16_t byte_idx = x / 2;
 80012aa:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80012ae:	085b      	lsrs	r3, r3, #1
 80012b0:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
            if (x & 1) { // odd pixel
 80012b4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80012b8:	f003 0301 	and.w	r3, r3, #1
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d010      	beq.n	80012e2 <LCD_DrawImage+0xda>
                rowbuf[byte_idx] |= pix4; // low nibble
 80012c0:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80012c4:	3370      	adds	r3, #112	@ 0x70
 80012c6:	443b      	add	r3, r7
 80012c8:	f813 1c70 	ldrb.w	r1, [r3, #-112]
 80012cc:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80012d0:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 80012d4:	430a      	orrs	r2, r1
 80012d6:	b2d2      	uxtb	r2, r2
 80012d8:	3370      	adds	r3, #112	@ 0x70
 80012da:	443b      	add	r3, r7
 80012dc:	f803 2c70 	strb.w	r2, [r3, #-112]
 80012e0:	e013      	b.n	800130a <LCD_DrawImage+0x102>
            } else { // even pixel
                rowbuf[byte_idx] |= pix4 << 4; // high nibble
 80012e2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80012e6:	3370      	adds	r3, #112	@ 0x70
 80012e8:	443b      	add	r3, r7
 80012ea:	f813 3c70 	ldrb.w	r3, [r3, #-112]
 80012ee:	b25a      	sxtb	r2, r3
 80012f0:	f997 306b 	ldrsb.w	r3, [r7, #107]	@ 0x6b
 80012f4:	011b      	lsls	r3, r3, #4
 80012f6:	b25b      	sxtb	r3, r3
 80012f8:	4313      	orrs	r3, r2
 80012fa:	b25a      	sxtb	r2, r3
 80012fc:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8001300:	b2d2      	uxtb	r2, r2
 8001302:	3370      	adds	r3, #112	@ 0x70
 8001304:	443b      	add	r3, r7
 8001306:	f803 2c70 	strb.w	r2, [r3, #-112]
        for (uint16_t x = 0; x < Image_logo.width; x++) {
 800130a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800130e:	3301      	adds	r3, #1
 8001310:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8001314:	4b0e      	ldr	r3, [pc, #56]	@ (8001350 <LCD_DrawImage+0x148>)
 8001316:	889b      	ldrh	r3, [r3, #4]
 8001318:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800131c:	429a      	cmp	r2, r3
 800131e:	d39a      	bcc.n	8001256 <LCD_DrawImage+0x4e>
            }
        }

        // Send the packed line to the LCD
        LCD_SendLine4bit(y, rowbuf);
 8001320:	463a      	mov	r2, r7
 8001322:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001326:	4611      	mov	r1, r2
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff fe59 	bl	8000fe0 <LCD_SendLine4bit>
    for (uint16_t y = 0; y < Image_logo.height; y++) {
 800132e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001332:	3301      	adds	r3, #1
 8001334:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8001338:	4b05      	ldr	r3, [pc, #20]	@ (8001350 <LCD_DrawImage+0x148>)
 800133a:	88db      	ldrh	r3, [r3, #6]
 800133c:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8001340:	429a      	cmp	r2, r3
 8001342:	f4ff af74 	bcc.w	800122e <LCD_DrawImage+0x26>
    }
 8001346:	bf00      	nop
 8001348:	bf00      	nop
 800134a:	3770      	adds	r7, #112	@ 0x70
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	080231a0 	.word	0x080231a0

08001354 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001356:	b0d9      	sub	sp, #356	@ 0x164
 8001358:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800135a:	f001 ff49 	bl	80031f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800135e:	f000 fc8d 	bl	8001c7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001362:	f000 ffe3 	bl	800232c <MX_GPIO_Init>
  MX_SPI1_Init();
 8001366:	f000 fe3b 	bl	8001fe0 <MX_SPI1_Init>
  MX_UART5_Init();
 800136a:	f000 ff93 	bl	8002294 <MX_UART5_Init>
  MX_TIM3_Init();
 800136e:	f000 ff17 	bl	80021a0 <MX_TIM3_Init>
  MX_SPI2_Init();
 8001372:	f000 fea5 	bl	80020c0 <MX_SPI2_Init>
  MX_DAC1_Init();
 8001376:	f000 fda5 	bl	8001ec4 <MX_DAC1_Init>
  MX_OPAMP1_Init();
 800137a:	f000 fdf1 	bl	8001f60 <MX_OPAMP1_Init>
  MX_ADC1_Init();
 800137e:	f000 fce9 	bl	8001d54 <MX_ADC1_Init>
  MX_OPAMP2_Init();
 8001382:	f000 fe0d 	bl	8001fa0 <MX_OPAMP2_Init>
  MX_ADC2_Init();
 8001386:	f000 fd41 	bl	8001e0c <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  printf("Starting DAC/ADC/LCD Test System...\r\n");
 800138a:	48a1      	ldr	r0, [pc, #644]	@ (8001610 <main+0x2bc>)
 800138c:	f008 fd52 	bl	8009e34 <puts>
  
  // LCD初期化
  LCD_Init();
 8001390:	f7ff fdf8 	bl	8000f84 <LCD_Init>
  printf("LCD Initialized\r\n");
 8001394:	489f      	ldr	r0, [pc, #636]	@ (8001614 <main+0x2c0>)
 8001396:	f008 fd4d 	bl	8009e34 <puts>

  // 画像を表示
  LCD_DrawImage();
 800139a:	f7ff ff35 	bl	8001208 <LCD_DrawImage>
  HAL_Delay(3000);
 800139e:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80013a2:	f001 ffe3 	bl	800336c <HAL_Delay>
  LCD_FillWhite(); // 一時的にコメントアウト
 80013a6:	f7ff fe55 	bl	8001054 <LCD_FillWhite>

  // LCD初期表示
  LCD_DrawString4bit(10, "DAC/ADC Test");
 80013aa:	499b      	ldr	r1, [pc, #620]	@ (8001618 <main+0x2c4>)
 80013ac:	200a      	movs	r0, #10
 80013ae:	f7ff fe7b 	bl	80010a8 <LCD_DrawString4bit>
  LCD_DrawString4bit(30, "System Ready");
 80013b2:	499a      	ldr	r1, [pc, #616]	@ (800161c <main+0x2c8>)
 80013b4:	201e      	movs	r0, #30
 80013b6:	f7ff fe77 	bl	80010a8 <LCD_DrawString4bit>
  
  // Start DAC
  if (HAL_DAC_Start(&hdac1, DAC_CHANNEL_1) != HAL_OK) {
 80013ba:	2100      	movs	r1, #0
 80013bc:	4898      	ldr	r0, [pc, #608]	@ (8001620 <main+0x2cc>)
 80013be:	f003 fbc5 	bl	8004b4c <HAL_DAC_Start>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d008      	beq.n	80013da <main+0x86>
      printf("DAC Start Error!\r\n");
 80013c8:	4896      	ldr	r0, [pc, #600]	@ (8001624 <main+0x2d0>)
 80013ca:	f008 fd33 	bl	8009e34 <puts>
      LCD_DrawString4bit(50, "DAC Error");
 80013ce:	4996      	ldr	r1, [pc, #600]	@ (8001628 <main+0x2d4>)
 80013d0:	2032      	movs	r0, #50	@ 0x32
 80013d2:	f7ff fe69 	bl	80010a8 <LCD_DrawString4bit>
      Error_Handler();
 80013d6:	f001 f847 	bl	8002468 <Error_Handler>
  }
  printf("DAC Channel 1 Started\r\n");
 80013da:	4894      	ldr	r0, [pc, #592]	@ (800162c <main+0x2d8>)
 80013dc:	f008 fd2a 	bl	8009e34 <puts>
  
  // Start OPAMP
  if (HAL_OPAMP_Start(&hopamp1) != HAL_OK) {
 80013e0:	4893      	ldr	r0, [pc, #588]	@ (8001630 <main+0x2dc>)
 80013e2:	f004 f939 	bl	8005658 <HAL_OPAMP_Start>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d008      	beq.n	80013fe <main+0xaa>
      printf("OPAMP Start Error!\r\n");
 80013ec:	4891      	ldr	r0, [pc, #580]	@ (8001634 <main+0x2e0>)
 80013ee:	f008 fd21 	bl	8009e34 <puts>
      LCD_DrawString4bit(70, "OPAMP Error");
 80013f2:	4991      	ldr	r1, [pc, #580]	@ (8001638 <main+0x2e4>)
 80013f4:	2046      	movs	r0, #70	@ 0x46
 80013f6:	f7ff fe57 	bl	80010a8 <LCD_DrawString4bit>
      Error_Handler();
 80013fa:	f001 f835 	bl	8002468 <Error_Handler>
  }
  printf("OPAMP Started\r\n");
 80013fe:	488f      	ldr	r0, [pc, #572]	@ (800163c <main+0x2e8>)
 8001400:	f008 fd18 	bl	8009e34 <puts>
  
  // Start OPAMP2
  if (HAL_OPAMP_Start(&hopamp2) != HAL_OK) {
 8001404:	488e      	ldr	r0, [pc, #568]	@ (8001640 <main+0x2ec>)
 8001406:	f004 f927 	bl	8005658 <HAL_OPAMP_Start>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d008      	beq.n	8001422 <main+0xce>
      printf("OPAMP2 Start Error!\r\n");
 8001410:	488c      	ldr	r0, [pc, #560]	@ (8001644 <main+0x2f0>)
 8001412:	f008 fd0f 	bl	8009e34 <puts>
      LCD_DrawString4bit(90, "OPAMP2 Error");
 8001416:	498c      	ldr	r1, [pc, #560]	@ (8001648 <main+0x2f4>)
 8001418:	205a      	movs	r0, #90	@ 0x5a
 800141a:	f7ff fe45 	bl	80010a8 <LCD_DrawString4bit>
      Error_Handler();
 800141e:	f001 f823 	bl	8002468 <Error_Handler>
  }
  printf("OPAMP2 Started\r\n");
 8001422:	488a      	ldr	r0, [pc, #552]	@ (800164c <main+0x2f8>)
 8001424:	f008 fd06 	bl	8009e34 <puts>
  
  // Calibrate ADC1
  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK) {
 8001428:	217f      	movs	r1, #127	@ 0x7f
 800142a:	4889      	ldr	r0, [pc, #548]	@ (8001650 <main+0x2fc>)
 800142c:	f003 f9b0 	bl	8004790 <HAL_ADCEx_Calibration_Start>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d008      	beq.n	8001448 <main+0xf4>
      printf("ADC1 Calibration Error!\r\n");
 8001436:	4887      	ldr	r0, [pc, #540]	@ (8001654 <main+0x300>)
 8001438:	f008 fcfc 	bl	8009e34 <puts>
      LCD_DrawString4bit(90, "ADC1 Error");
 800143c:	4986      	ldr	r1, [pc, #536]	@ (8001658 <main+0x304>)
 800143e:	205a      	movs	r0, #90	@ 0x5a
 8001440:	f7ff fe32 	bl	80010a8 <LCD_DrawString4bit>
      Error_Handler();
 8001444:	f001 f810 	bl	8002468 <Error_Handler>
  }
  printf("ADC1 Calibrated and Ready\r\n");
 8001448:	4884      	ldr	r0, [pc, #528]	@ (800165c <main+0x308>)
 800144a:	f008 fcf3 	bl	8009e34 <puts>
  
  // Calibrate ADC2
  if (HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED) != HAL_OK) {
 800144e:	217f      	movs	r1, #127	@ 0x7f
 8001450:	4883      	ldr	r0, [pc, #524]	@ (8001660 <main+0x30c>)
 8001452:	f003 f99d 	bl	8004790 <HAL_ADCEx_Calibration_Start>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d008      	beq.n	800146e <main+0x11a>
      printf("ADC2 Calibration Error!\r\n");
 800145c:	4881      	ldr	r0, [pc, #516]	@ (8001664 <main+0x310>)
 800145e:	f008 fce9 	bl	8009e34 <puts>
      LCD_DrawString4bit(110, "ADC2 Error");
 8001462:	4981      	ldr	r1, [pc, #516]	@ (8001668 <main+0x314>)
 8001464:	206e      	movs	r0, #110	@ 0x6e
 8001466:	f7ff fe1f 	bl	80010a8 <LCD_DrawString4bit>
      Error_Handler();
 800146a:	f000 fffd 	bl	8002468 <Error_Handler>
  }
  printf("ADC2 Calibrated and Ready\r\n");
 800146e:	487f      	ldr	r0, [pc, #508]	@ (800166c <main+0x318>)
 8001470:	f008 fce0 	bl	8009e34 <puts>
  // Set initial DAC value to match the first voltage level (100mV)
  dac_value = dac_voltage_levels[current_voltage_index];
 8001474:	4b7e      	ldr	r3, [pc, #504]	@ (8001670 <main+0x31c>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	b2db      	uxtb	r3, r3
 800147a:	461a      	mov	r2, r3
 800147c:	4b7d      	ldr	r3, [pc, #500]	@ (8001674 <main+0x320>)
 800147e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001482:	4a7d      	ldr	r2, [pc, #500]	@ (8001678 <main+0x324>)
 8001484:	6013      	str	r3, [r2, #0]
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_value);
 8001486:	4b7c      	ldr	r3, [pc, #496]	@ (8001678 <main+0x324>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	2200      	movs	r2, #0
 800148c:	2100      	movs	r1, #0
 800148e:	4864      	ldr	r0, [pc, #400]	@ (8001620 <main+0x2cc>)
 8001490:	f003 fbc8 	bl	8004c24 <HAL_DAC_SetValue>
  printf("Initial DAC value set to: %lu (%dmV)\r\n", dac_value, (current_voltage_index + 1) * 100);
 8001494:	4b78      	ldr	r3, [pc, #480]	@ (8001678 <main+0x324>)
 8001496:	6819      	ldr	r1, [r3, #0]
 8001498:	4b75      	ldr	r3, [pc, #468]	@ (8001670 <main+0x31c>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	b2db      	uxtb	r3, r3
 800149e:	3301      	adds	r3, #1
 80014a0:	2264      	movs	r2, #100	@ 0x64
 80014a2:	fb02 f303 	mul.w	r3, r2, r3
 80014a6:	461a      	mov	r2, r3
 80014a8:	4874      	ldr	r0, [pc, #464]	@ (800167c <main+0x328>)
 80014aa:	f008 fc5b 	bl	8009d64 <iprintf>

  printf("Starting ID Register Read Test...\r\n");
 80014ae:	4874      	ldr	r0, [pc, #464]	@ (8001680 <main+0x32c>)
 80014b0:	f008 fcc0 	bl	8009e34 <puts>

  // 一度リセット
  HAL_GPIO_WritePin(ADS_RESET_PORT, ADS_RESET_PIN, GPIO_PIN_SET);
 80014b4:	2201      	movs	r2, #1
 80014b6:	2140      	movs	r1, #64	@ 0x40
 80014b8:	4872      	ldr	r0, [pc, #456]	@ (8001684 <main+0x330>)
 80014ba:	f003 ffd1 	bl	8005460 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80014be:	200a      	movs	r0, #10
 80014c0:	f001 ff54 	bl	800336c <HAL_Delay>
  HAL_GPIO_WritePin(ADS_RESET_PORT, ADS_RESET_PIN, GPIO_PIN_RESET);
 80014c4:	2200      	movs	r2, #0
 80014c6:	2140      	movs	r1, #64	@ 0x40
 80014c8:	486e      	ldr	r0, [pc, #440]	@ (8001684 <main+0x330>)
 80014ca:	f003 ffc9 	bl	8005460 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80014ce:	2001      	movs	r0, #1
 80014d0:	f001 ff4c 	bl	800336c <HAL_Delay>
  HAL_GPIO_WritePin(ADS_RESET_PORT, ADS_RESET_PIN, GPIO_PIN_SET);
 80014d4:	2201      	movs	r2, #1
 80014d6:	2140      	movs	r1, #64	@ 0x40
 80014d8:	486a      	ldr	r0, [pc, #424]	@ (8001684 <main+0x330>)
 80014da:	f003 ffc1 	bl	8005460 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80014de:	200a      	movs	r0, #10
 80014e0:	f001 ff44 	bl	800336c <HAL_Delay>

  /* USER CODE END 2 */

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80014e4:	2101      	movs	r1, #1
 80014e6:	2000      	movs	r0, #0
 80014e8:	f001 fd14 	bl	8002f14 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80014ec:	4b66      	ldr	r3, [pc, #408]	@ (8001688 <main+0x334>)
 80014ee:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014f2:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80014f4:	4b64      	ldr	r3, [pc, #400]	@ (8001688 <main+0x334>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80014fa:	4b63      	ldr	r3, [pc, #396]	@ (8001688 <main+0x334>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8001500:	4b61      	ldr	r3, [pc, #388]	@ (8001688 <main+0x334>)
 8001502:	2200      	movs	r2, #0
 8001504:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8001506:	4b60      	ldr	r3, [pc, #384]	@ (8001688 <main+0x334>)
 8001508:	2200      	movs	r2, #0
 800150a:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 800150c:	495e      	ldr	r1, [pc, #376]	@ (8001688 <main+0x334>)
 800150e:	2000      	movs	r0, #0
 8001510:	f001 fd8e 	bl	8003030 <BSP_COM_Init>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <main+0x1ca>
  {
    Error_Handler();
 800151a:	f000 ffa5 	bl	8002468 <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    // Check if button change was requested in interrupt
    if (button_request_change == 1) {
 800151e:	4b5b      	ldr	r3, [pc, #364]	@ (800168c <main+0x338>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	b2db      	uxtb	r3, r3
 8001524:	2b01      	cmp	r3, #1
 8001526:	d14f      	bne.n	80015c8 <main+0x274>
        uint32_t current_time = HAL_GetTick();
 8001528:	f001 ff14 	bl	8003354 <HAL_GetTick>
 800152c:	f8c7 0124 	str.w	r0, [r7, #292]	@ 0x124
        
        // デバウンス処理: 最後のボタン押下から200ms以上経過していることを確認
        if ((current_time - last_button_time) > 200) {
 8001530:	4b57      	ldr	r3, [pc, #348]	@ (8001690 <main+0x33c>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2bc8      	cmp	r3, #200	@ 0xc8
 800153c:	d93e      	bls.n	80015bc <main+0x268>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800153e:	b672      	cpsid	i
}
 8001540:	bf00      	nop
            // 割り込み無効化して安全に電圧レベルを変更
            __disable_irq();
            current_voltage_index = (current_voltage_index + 1) % num_voltage_levels;
 8001542:	4b4b      	ldr	r3, [pc, #300]	@ (8001670 <main+0x31c>)
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	b2db      	uxtb	r3, r3
 8001548:	3301      	adds	r3, #1
 800154a:	2205      	movs	r2, #5
 800154c:	fb93 f1f2 	sdiv	r1, r3, r2
 8001550:	fb01 f202 	mul.w	r2, r1, r2
 8001554:	1a9b      	subs	r3, r3, r2
 8001556:	b2da      	uxtb	r2, r3
 8001558:	4b45      	ldr	r3, [pc, #276]	@ (8001670 <main+0x31c>)
 800155a:	701a      	strb	r2, [r3, #0]
            dac_value = dac_voltage_levels[current_voltage_index];
 800155c:	4b44      	ldr	r3, [pc, #272]	@ (8001670 <main+0x31c>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	b2db      	uxtb	r3, r3
 8001562:	461a      	mov	r2, r3
 8001564:	4b43      	ldr	r3, [pc, #268]	@ (8001674 <main+0x320>)
 8001566:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800156a:	4a43      	ldr	r2, [pc, #268]	@ (8001678 <main+0x324>)
 800156c:	6013      	str	r3, [r2, #0]
            button_request_change = 0;  // フラグをクリア
 800156e:	4b47      	ldr	r3, [pc, #284]	@ (800168c <main+0x338>)
 8001570:	2200      	movs	r2, #0
 8001572:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001574:	b662      	cpsie	i
}
 8001576:	bf00      	nop
            __enable_irq();
            
            // Debug output with actual voltage calculation
            uint32_t actual_voltage_mv = (dac_value * VREF_MV) / ADC_MAX_VALUE;
 8001578:	4b3f      	ldr	r3, [pc, #252]	@ (8001678 <main+0x324>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8001580:	fb03 f202 	mul.w	r2, r3, r2
 8001584:	4b43      	ldr	r3, [pc, #268]	@ (8001694 <main+0x340>)
 8001586:	fba3 1302 	umull	r1, r3, r3, r2
 800158a:	1ad2      	subs	r2, r2, r3
 800158c:	0852      	lsrs	r2, r2, #1
 800158e:	4413      	add	r3, r2
 8001590:	0adb      	lsrs	r3, r3, #11
 8001592:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
            printf("Button pressed! Switching to %lumV (index: %d, DAC: %lu)\r\n", 
 8001596:	4b36      	ldr	r3, [pc, #216]	@ (8001670 <main+0x31c>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	b2db      	uxtb	r3, r3
 800159c:	461a      	mov	r2, r3
 800159e:	4b36      	ldr	r3, [pc, #216]	@ (8001678 <main+0x324>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f8d7 1120 	ldr.w	r1, [r7, #288]	@ 0x120
 80015a6:	483c      	ldr	r0, [pc, #240]	@ (8001698 <main+0x344>)
 80015a8:	f008 fbdc 	bl	8009d64 <iprintf>
                   actual_voltage_mv, current_voltage_index, dac_value);
            
            button_was_pressed = 1;  // Set flag for LCD update
 80015ac:	4b3b      	ldr	r3, [pc, #236]	@ (800169c <main+0x348>)
 80015ae:	2201      	movs	r2, #1
 80015b0:	701a      	strb	r2, [r3, #0]
            last_button_time = current_time;  // デバウンス用のタイムスタンプ更新
 80015b2:	4a37      	ldr	r2, [pc, #220]	@ (8001690 <main+0x33c>)
 80015b4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80015b8:	6013      	str	r3, [r2, #0]
 80015ba:	e002      	b.n	80015c2 <main+0x26e>
        } else {
            // デバウンス期間中の場合はフラグをクリア
            button_request_change = 0;
 80015bc:	4b33      	ldr	r3, [pc, #204]	@ (800168c <main+0x338>)
 80015be:	2200      	movs	r2, #0
 80015c0:	701a      	strb	r2, [r3, #0]
        }
        
        BspButtonState = BUTTON_RELEASED;  // Reset state
 80015c2:	4b37      	ldr	r3, [pc, #220]	@ (80016a0 <main+0x34c>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
    }
    
    // Set new DAC value with stabilization delay
    HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_value);
 80015c8:	4b2b      	ldr	r3, [pc, #172]	@ (8001678 <main+0x324>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2200      	movs	r2, #0
 80015ce:	2100      	movs	r1, #0
 80015d0:	4813      	ldr	r0, [pc, #76]	@ (8001620 <main+0x2cc>)
 80015d2:	f003 fb27 	bl	8004c24 <HAL_DAC_SetValue>
    HAL_Delay(2);  // DAC安定化のための短い遅延
 80015d6:	2002      	movs	r0, #2
 80015d8:	f001 fec8 	bl	800336c <HAL_Delay>
    
    // Read ADC value from the DAC output (via OPAMP follower) - 複数回測定して平均化
    // DAC設定後の安定化待機
    HAL_Delay(5);  // DAC/OPAMP安定化のための追加遅延
 80015dc:	2005      	movs	r0, #5
 80015de:	f001 fec5 	bl	800336c <HAL_Delay>
    
    uint32_t adc_sum = 0;
 80015e2:	2300      	movs	r3, #0
 80015e4:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    const uint8_t num_samples = 16; // 16回測定して平均（より安定した値を取得）
 80015e8:	2310      	movs	r3, #16
 80015ea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    uint32_t adc_readings[16];  // 個別の測定値を保存
    uint8_t valid_samples = 0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	f887 313b 	strb.w	r3, [r7, #315]	@ 0x13b
    
    for (uint8_t i = 0; i < num_samples; i++) {
 80015f4:	2300      	movs	r3, #0
 80015f6:	f887 313a 	strb.w	r3, [r7, #314]	@ 0x13a
 80015fa:	e084      	b.n	8001706 <main+0x3b2>
        if (HAL_ADC_Start(&hadc1) != HAL_OK) {
 80015fc:	4814      	ldr	r0, [pc, #80]	@ (8001650 <main+0x2fc>)
 80015fe:	f002 fb7f 	bl	8003d00 <HAL_ADC_Start>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d04f      	beq.n	80016a8 <main+0x354>
            printf("ADC Start Error!\r\n");
 8001608:	4826      	ldr	r0, [pc, #152]	@ (80016a4 <main+0x350>)
 800160a:	f008 fc13 	bl	8009e34 <puts>
            continue;  // エラーでも続行
 800160e:	e075      	b.n	80016fc <main+0x3a8>
 8001610:	0800c0b8 	.word	0x0800c0b8
 8001614:	0800c0e0 	.word	0x0800c0e0
 8001618:	0800c0f4 	.word	0x0800c0f4
 800161c:	0800c104 	.word	0x0800c104
 8001620:	200002e8 	.word	0x200002e8
 8001624:	0800c114 	.word	0x0800c114
 8001628:	0800c128 	.word	0x0800c128
 800162c:	0800c134 	.word	0x0800c134
 8001630:	200002fc 	.word	0x200002fc
 8001634:	0800c14c 	.word	0x0800c14c
 8001638:	0800c160 	.word	0x0800c160
 800163c:	0800c16c 	.word	0x0800c16c
 8001640:	20000330 	.word	0x20000330
 8001644:	0800c17c 	.word	0x0800c17c
 8001648:	0800c194 	.word	0x0800c194
 800164c:	0800c1a4 	.word	0x0800c1a4
 8001650:	20000218 	.word	0x20000218
 8001654:	0800c1b4 	.word	0x0800c1b4
 8001658:	0800c1d0 	.word	0x0800c1d0
 800165c:	0800c1dc 	.word	0x0800c1dc
 8001660:	20000280 	.word	0x20000280
 8001664:	0800c1f8 	.word	0x0800c1f8
 8001668:	0800c214 	.word	0x0800c214
 800166c:	0800c220 	.word	0x0800c220
 8001670:	200005a2 	.word	0x200005a2
 8001674:	080231ac 	.word	0x080231ac
 8001678:	20000000 	.word	0x20000000
 800167c:	0800c23c 	.word	0x0800c23c
 8001680:	0800c264 	.word	0x0800c264
 8001684:	42020800 	.word	0x42020800
 8001688:	20000204 	.word	0x20000204
 800168c:	200005b4 	.word	0x200005b4
 8001690:	200005b0 	.word	0x200005b0
 8001694:	00100101 	.word	0x00100101
 8001698:	0800c288 	.word	0x0800c288
 800169c:	200005ac 	.word	0x200005ac
 80016a0:	20000214 	.word	0x20000214
 80016a4:	0800c2c4 	.word	0x0800c2c4
        }
        
        if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK) {  // タイムアウトを10msに設定
 80016a8:	210a      	movs	r1, #10
 80016aa:	4861      	ldr	r0, [pc, #388]	@ (8001830 <main+0x4dc>)
 80016ac:	f002 fc16 	bl	8003edc <HAL_ADC_PollForConversion>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d11c      	bne.n	80016f0 <main+0x39c>
            uint32_t reading = HAL_ADC_GetValue(&hadc1);
 80016b6:	485e      	ldr	r0, [pc, #376]	@ (8001830 <main+0x4dc>)
 80016b8:	f002 fce8 	bl	800408c <HAL_ADC_GetValue>
 80016bc:	f8c7 00ec 	str.w	r0, [r7, #236]	@ 0xec
            adc_readings[valid_samples] = reading;
 80016c0:	f897 313b 	ldrb.w	r3, [r7, #315]	@ 0x13b
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 80016ca:	f107 0208 	add.w	r2, r7, #8
 80016ce:	4413      	add	r3, r2
 80016d0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80016d4:	f843 2c94 	str.w	r2, [r3, #-148]
            adc_sum += reading;
 80016d8:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 80016dc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80016e0:	4413      	add	r3, r2
 80016e2:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
            valid_samples++;
 80016e6:	f897 313b 	ldrb.w	r3, [r7, #315]	@ 0x13b
 80016ea:	3301      	adds	r3, #1
 80016ec:	f887 313b 	strb.w	r3, [r7, #315]	@ 0x13b
        }
        HAL_ADC_Stop(&hadc1);
 80016f0:	484f      	ldr	r0, [pc, #316]	@ (8001830 <main+0x4dc>)
 80016f2:	f002 fbbf 	bl	8003e74 <HAL_ADC_Stop>
        HAL_Delay(2); // 測定間の遅延を少し増やす
 80016f6:	2002      	movs	r0, #2
 80016f8:	f001 fe38 	bl	800336c <HAL_Delay>
    for (uint8_t i = 0; i < num_samples; i++) {
 80016fc:	f897 313a 	ldrb.w	r3, [r7, #314]	@ 0x13a
 8001700:	3301      	adds	r3, #1
 8001702:	f887 313a 	strb.w	r3, [r7, #314]	@ 0x13a
 8001706:	f897 213a 	ldrb.w	r2, [r7, #314]	@ 0x13a
 800170a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800170e:	429a      	cmp	r2, r3
 8001710:	f4ff af74 	bcc.w	80015fc <main+0x2a8>
    }
    
    // 有効なサンプルがある場合のみ平均値を計算
    if (valid_samples > 0) {
 8001714:	f897 313b 	ldrb.w	r3, [r7, #315]	@ 0x13b
 8001718:	2b00      	cmp	r3, #0
 800171a:	d06c      	beq.n	80017f6 <main+0x4a2>
        adc_value = adc_sum / valid_samples;
 800171c:	f897 313b 	ldrb.w	r3, [r7, #315]	@ 0x13b
 8001720:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8001724:	fbb2 f3f3 	udiv	r3, r2, r3
 8001728:	4a42      	ldr	r2, [pc, #264]	@ (8001834 <main+0x4e0>)
 800172a:	6013      	str	r3, [r2, #0]
        
        // 外れ値を除外した平均値を再計算（オプション）
        if (valid_samples >= 8) {
 800172c:	f897 313b 	ldrb.w	r3, [r7, #315]	@ 0x13b
 8001730:	2b07      	cmp	r3, #7
 8001732:	d960      	bls.n	80017f6 <main+0x4a2>
            // 中央値付近の値のみで再計算
            uint32_t sorted_sum = 0;
 8001734:	2300      	movs	r3, #0
 8001736:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
            uint8_t counted = 0;
 800173a:	2300      	movs	r3, #0
 800173c:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
            for (uint8_t i = 0; i < valid_samples; i++) {
 8001740:	2300      	movs	r3, #0
 8001742:	f887 3132 	strb.w	r3, [r7, #306]	@ 0x132
 8001746:	e044      	b.n	80017d2 <main+0x47e>
                // 平均値から±10%以内の値のみを使用
                if (adc_readings[i] >= (adc_value * 9 / 10) && 
 8001748:	f897 3132 	ldrb.w	r3, [r7, #306]	@ 0x132
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8001752:	f107 0208 	add.w	r2, r7, #8
 8001756:	4413      	add	r3, r2
 8001758:	f853 1c94 	ldr.w	r1, [r3, #-148]
 800175c:	4b35      	ldr	r3, [pc, #212]	@ (8001834 <main+0x4e0>)
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	4613      	mov	r3, r2
 8001762:	00db      	lsls	r3, r3, #3
 8001764:	4413      	add	r3, r2
 8001766:	4a34      	ldr	r2, [pc, #208]	@ (8001838 <main+0x4e4>)
 8001768:	fba2 2303 	umull	r2, r3, r2, r3
 800176c:	08db      	lsrs	r3, r3, #3
 800176e:	4299      	cmp	r1, r3
 8001770:	d32a      	bcc.n	80017c8 <main+0x474>
                    adc_readings[i] <= (adc_value * 11 / 10)) {
 8001772:	f897 3132 	ldrb.w	r3, [r7, #306]	@ 0x132
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 800177c:	f107 0208 	add.w	r2, r7, #8
 8001780:	4413      	add	r3, r2
 8001782:	f853 1c94 	ldr.w	r1, [r3, #-148]
 8001786:	4b2b      	ldr	r3, [pc, #172]	@ (8001834 <main+0x4e0>)
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	4613      	mov	r3, r2
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	4413      	add	r3, r2
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	4413      	add	r3, r2
 8001794:	4a28      	ldr	r2, [pc, #160]	@ (8001838 <main+0x4e4>)
 8001796:	fba2 2303 	umull	r2, r3, r2, r3
 800179a:	08db      	lsrs	r3, r3, #3
                if (adc_readings[i] >= (adc_value * 9 / 10) && 
 800179c:	4299      	cmp	r1, r3
 800179e:	d813      	bhi.n	80017c8 <main+0x474>
                    sorted_sum += adc_readings[i];
 80017a0:	f897 3132 	ldrb.w	r3, [r7, #306]	@ 0x132
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 80017aa:	f107 0208 	add.w	r2, r7, #8
 80017ae:	4413      	add	r3, r2
 80017b0:	f853 3c94 	ldr.w	r3, [r3, #-148]
 80017b4:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 80017b8:	4413      	add	r3, r2
 80017ba:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
                    counted++;
 80017be:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 80017c2:	3301      	adds	r3, #1
 80017c4:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
            for (uint8_t i = 0; i < valid_samples; i++) {
 80017c8:	f897 3132 	ldrb.w	r3, [r7, #306]	@ 0x132
 80017cc:	3301      	adds	r3, #1
 80017ce:	f887 3132 	strb.w	r3, [r7, #306]	@ 0x132
 80017d2:	f897 2132 	ldrb.w	r2, [r7, #306]	@ 0x132
 80017d6:	f897 313b 	ldrb.w	r3, [r7, #315]	@ 0x13b
 80017da:	429a      	cmp	r2, r3
 80017dc:	d3b4      	bcc.n	8001748 <main+0x3f4>
                }
            }
            if (counted > 0) {
 80017de:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d007      	beq.n	80017f6 <main+0x4a2>
                adc_value = sorted_sum / counted;
 80017e6:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 80017ea:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 80017ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80017f2:	4a10      	ldr	r2, [pc, #64]	@ (8001834 <main+0x4e0>)
 80017f4:	6013      	str	r3, [r2, #0]
            }
        }
    }
    adc_value = adc_sum / num_samples; // 平均値を計算
 80017f6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80017fa:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 80017fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001802:	4a0c      	ldr	r2, [pc, #48]	@ (8001834 <main+0x4e0>)
 8001804:	6013      	str	r3, [r2, #0]
    
    // Read ADC2 value (OPAMP2 via voltage follower) - 複数回測定して平均化
    uint32_t adc2_sum = 0;
 8001806:	2300      	movs	r3, #0
 8001808:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    const uint8_t num_samples2 = 10; // 10回測定して平均
 800180c:	230a      	movs	r3, #10
 800180e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    
    for (uint8_t i = 0; i < num_samples2; i++) {
 8001812:	2300      	movs	r3, #0
 8001814:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
 8001818:	e030      	b.n	800187c <main+0x528>
        if (HAL_ADC_Start(&hadc2) != HAL_OK) {
 800181a:	4808      	ldr	r0, [pc, #32]	@ (800183c <main+0x4e8>)
 800181c:	f002 fa70 	bl	8003d00 <HAL_ADC_Start>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d00e      	beq.n	8001844 <main+0x4f0>
            printf("ADC2 Start Error!\r\n");
 8001826:	4806      	ldr	r0, [pc, #24]	@ (8001840 <main+0x4ec>)
 8001828:	f008 fb04 	bl	8009e34 <puts>
            break;
 800182c:	e02c      	b.n	8001888 <main+0x534>
 800182e:	bf00      	nop
 8001830:	20000218 	.word	0x20000218
 8001834:	200005a4 	.word	0x200005a4
 8001838:	cccccccd 	.word	0xcccccccd
 800183c:	20000280 	.word	0x20000280
 8001840:	0800c2d8 	.word	0x0800c2d8
        }
        
        if (HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY) == HAL_OK) {
 8001844:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001848:	487b      	ldr	r0, [pc, #492]	@ (8001a38 <main+0x6e4>)
 800184a:	f002 fb47 	bl	8003edc <HAL_ADC_PollForConversion>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d108      	bne.n	8001866 <main+0x512>
            adc2_sum += HAL_ADC_GetValue(&hadc2);
 8001854:	4878      	ldr	r0, [pc, #480]	@ (8001a38 <main+0x6e4>)
 8001856:	f002 fc19 	bl	800408c <HAL_ADC_GetValue>
 800185a:	4602      	mov	r2, r0
 800185c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001860:	4413      	add	r3, r2
 8001862:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
        }
        HAL_ADC_Stop(&hadc2);
 8001866:	4874      	ldr	r0, [pc, #464]	@ (8001a38 <main+0x6e4>)
 8001868:	f002 fb04 	bl	8003e74 <HAL_ADC_Stop>
        HAL_Delay(1); // 測定間の短い遅延
 800186c:	2001      	movs	r0, #1
 800186e:	f001 fd7d 	bl	800336c <HAL_Delay>
    for (uint8_t i = 0; i < num_samples2; i++) {
 8001872:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8001876:	3301      	adds	r3, #1
 8001878:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
 800187c:	f897 212b 	ldrb.w	r2, [r7, #299]	@ 0x12b
 8001880:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8001884:	429a      	cmp	r2, r3
 8001886:	d3c8      	bcc.n	800181a <main+0x4c6>
    }
    
    adc2_value = adc2_sum / num_samples2; // 平均値を計算
 8001888:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800188c:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001890:	fbb2 f3f3 	udiv	r3, r2, r3
 8001894:	4a69      	ldr	r2, [pc, #420]	@ (8001a3c <main+0x6e8>)
 8001896:	6013      	str	r3, [r2, #0]
    
    // Calculate voltage values for display (mV単位で整数演算)
    uint32_t dac_voltage_mv = (dac_value * VREF_MV) / ADC_MAX_VALUE;
 8001898:	4b69      	ldr	r3, [pc, #420]	@ (8001a40 <main+0x6ec>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f640 42e4 	movw	r2, #3300	@ 0xce4
 80018a0:	fb03 f202 	mul.w	r2, r3, r2
 80018a4:	4b67      	ldr	r3, [pc, #412]	@ (8001a44 <main+0x6f0>)
 80018a6:	fba3 1302 	umull	r1, r3, r3, r2
 80018aa:	1ad2      	subs	r2, r2, r3
 80018ac:	0852      	lsrs	r2, r2, #1
 80018ae:	4413      	add	r3, r2
 80018b0:	0adb      	lsrs	r3, r3, #11
 80018b2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    uint32_t adc_voltage_mv = (adc_value * VREF_MV) / ADC_MAX_VALUE;
 80018b6:	4b64      	ldr	r3, [pc, #400]	@ (8001a48 <main+0x6f4>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f640 42e4 	movw	r2, #3300	@ 0xce4
 80018be:	fb03 f202 	mul.w	r2, r3, r2
 80018c2:	4b60      	ldr	r3, [pc, #384]	@ (8001a44 <main+0x6f0>)
 80018c4:	fba3 1302 	umull	r1, r3, r3, r2
 80018c8:	1ad2      	subs	r2, r2, r3
 80018ca:	0852      	lsrs	r2, r2, #1
 80018cc:	4413      	add	r3, r2
 80018ce:	0adb      	lsrs	r3, r3, #11
 80018d0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    uint32_t adc2_voltage_mv = (adc2_value * VREF_MV) / ADC_MAX_VALUE;
 80018d4:	4b59      	ldr	r3, [pc, #356]	@ (8001a3c <main+0x6e8>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f640 42e4 	movw	r2, #3300	@ 0xce4
 80018dc:	fb03 f202 	mul.w	r2, r3, r2
 80018e0:	4b58      	ldr	r3, [pc, #352]	@ (8001a44 <main+0x6f0>)
 80018e2:	fba3 1302 	umull	r1, r3, r3, r2
 80018e6:	1ad2      	subs	r2, r2, r3
 80018e8:	0852      	lsrs	r2, r2, #1
 80018ea:	4413      	add	r3, r2
 80018ec:	0adb      	lsrs	r3, r3, #11
 80018ee:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    
    // Calculate current from ADC voltage (μA単位)
    // I = (V_adc - 0.5V) / (88kΩ) where V_adc is in V, I is in A
    // Convert to μA: I_uA = (V_adc - 0.5V) / 88000Ω * 1000000
    // Calculate current from ADC1 voltage (μA単位)
    float voltage_v = adc_voltage_mv / 1000.0f; // mV to V
 80018f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80018f6:	ee07 3a90 	vmov	s15, r3
 80018fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80018fe:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 8001a68 <main+0x714>
 8001902:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001906:	edc7 7a43 	vstr	s15, [r7, #268]	@ 0x10c
    float current_ua = (voltage_v - 0.5f) / 88000.0f * 1000000.0f; // Calculate current in μA
 800190a:	edd7 7a43 	vldr	s15, [r7, #268]	@ 0x10c
 800190e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001912:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001916:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 8001a4c <main+0x6f8>
 800191a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800191e:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8001a50 <main+0x6fc>
 8001922:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001926:	edc7 7a42 	vstr	s15, [r7, #264]	@ 0x108
    
    // Calculate current from ADC2 voltage (μA単位) - OPAMP2経由
    float voltage2_v = adc2_voltage_mv / 1000.0f; // mV to V
 800192a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800192e:	ee07 3a90 	vmov	s15, r3
 8001932:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001936:	eddf 6a4c 	vldr	s13, [pc, #304]	@ 8001a68 <main+0x714>
 800193a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800193e:	edc7 7a41 	vstr	s15, [r7, #260]	@ 0x104
    float current2_ua = (voltage2_v - 0.5f) / 88000.0f * 1000000.0f; // Calculate current in μA
 8001942:	edd7 7a41 	vldr	s15, [r7, #260]	@ 0x104
 8001946:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800194a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800194e:	eddf 6a3f 	vldr	s13, [pc, #252]	@ 8001a4c <main+0x6f8>
 8001952:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001956:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8001a50 <main+0x6fc>
 800195a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800195e:	edc7 7a40 	vstr	s15, [r7, #256]	@ 0x100
    
    // Accumulate values for UART averaging (with overflow protection)
    if (adc_count_for_uart < MAX_SAMPLES_PER_INTERVAL) {
 8001962:	4b3c      	ldr	r3, [pc, #240]	@ (8001a54 <main+0x700>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2b63      	cmp	r3, #99	@ 0x63
 8001968:	d80e      	bhi.n	8001988 <main+0x634>
        current_sum_for_uart += current_ua;
 800196a:	4b3b      	ldr	r3, [pc, #236]	@ (8001a58 <main+0x704>)
 800196c:	ed93 7a00 	vldr	s14, [r3]
 8001970:	edd7 7a42 	vldr	s15, [r7, #264]	@ 0x108
 8001974:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001978:	4b37      	ldr	r3, [pc, #220]	@ (8001a58 <main+0x704>)
 800197a:	edc3 7a00 	vstr	s15, [r3]
        adc_count_for_uart++;
 800197e:	4b35      	ldr	r3, [pc, #212]	@ (8001a54 <main+0x700>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	3301      	adds	r3, #1
 8001984:	4a33      	ldr	r2, [pc, #204]	@ (8001a54 <main+0x700>)
 8001986:	6013      	str	r3, [r2, #0]
    }
    
    // Send UART message every 1 second
    uint32_t current_time = HAL_GetTick();
 8001988:	f001 fce4 	bl	8003354 <HAL_GetTick>
 800198c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    // Handle tick overflow (wraps around after ~49 days)
    if ((current_time >= last_uart_time && (current_time - last_uart_time) >= UART_TRANSMISSION_INTERVAL_MS) ||
 8001990:	4b32      	ldr	r3, [pc, #200]	@ (8001a5c <main+0x708>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 8001998:	429a      	cmp	r2, r3
 800199a:	d307      	bcc.n	80019ac <main+0x658>
 800199c:	4b2f      	ldr	r3, [pc, #188]	@ (8001a5c <main+0x708>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80019aa:	d20f      	bcs.n	80019cc <main+0x678>
        (current_time < last_uart_time && (current_time + (0xFFFFFFFF - last_uart_time)) >= UART_TRANSMISSION_INTERVAL_MS)) {
 80019ac:	4b2b      	ldr	r3, [pc, #172]	@ (8001a5c <main+0x708>)
 80019ae:	681b      	ldr	r3, [r3, #0]
    if ((current_time >= last_uart_time && (current_time - last_uart_time) >= UART_TRANSMISSION_INTERVAL_MS) ||
 80019b0:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 80019b4:	429a      	cmp	r2, r3
 80019b6:	f080 8088 	bcs.w	8001aca <main+0x776>
        (current_time < last_uart_time && (current_time + (0xFFFFFFFF - last_uart_time)) >= UART_TRANSMISSION_INTERVAL_MS)) {
 80019ba:	4b28      	ldr	r3, [pc, #160]	@ (8001a5c <main+0x708>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	3b01      	subs	r3, #1
 80019c6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80019ca:	d37e      	bcc.n	8001aca <main+0x776>
        if (adc_count_for_uart > 0) {
 80019cc:	4b21      	ldr	r3, [pc, #132]	@ (8001a54 <main+0x700>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d04b      	beq.n	8001a6c <main+0x718>
            // Calculate average values
            float avg_current_ua = current_sum_for_uart / adc_count_for_uart;
 80019d4:	4b20      	ldr	r3, [pc, #128]	@ (8001a58 <main+0x704>)
 80019d6:	edd3 6a00 	vldr	s13, [r3]
 80019da:	4b1e      	ldr	r3, [pc, #120]	@ (8001a54 <main+0x700>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	ee07 3a90 	vmov	s15, r3
 80019e2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019ea:	edc7 7a3d 	vstr	s15, [r7, #244]	@ 0xf4
            
            // Format and send UART message: voltage(V) , current(uA)
            float dac_voltage_v = dac_voltage_mv / 1000.0f;  // Convert mV to V
 80019ee:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80019f2:	ee07 3a90 	vmov	s15, r3
 80019f6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019fa:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 8001a68 <main+0x714>
 80019fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a02:	edc7 7a3c 	vstr	s15, [r7, #240]	@ 0xf0
            snprintf(uart_output, sizeof(uart_output), "%.3f , %.1f\r\n", dac_voltage_v, avg_current_ua);
 8001a06:	f8d7 00f0 	ldr.w	r0, [r7, #240]	@ 0xf0
 8001a0a:	f7fe fda1 	bl	8000550 <__aeabi_f2d>
 8001a0e:	4604      	mov	r4, r0
 8001a10:	460d      	mov	r5, r1
 8001a12:	f8d7 00f4 	ldr.w	r0, [r7, #244]	@ 0xf4
 8001a16:	f7fe fd9b 	bl	8000550 <__aeabi_f2d>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001a22:	e9cd 4500 	strd	r4, r5, [sp]
 8001a26:	4a0e      	ldr	r2, [pc, #56]	@ (8001a60 <main+0x70c>)
 8001a28:	2132      	movs	r1, #50	@ 0x32
 8001a2a:	480e      	ldr	r0, [pc, #56]	@ (8001a64 <main+0x710>)
 8001a2c:	f008 f8a2 	bl	8009b74 <sniprintf>
            printf(uart_output);
 8001a30:	480c      	ldr	r0, [pc, #48]	@ (8001a64 <main+0x710>)
 8001a32:	f008 f997 	bl	8009d64 <iprintf>
 8001a36:	e03d      	b.n	8001ab4 <main+0x760>
 8001a38:	20000280 	.word	0x20000280
 8001a3c:	200005a8 	.word	0x200005a8
 8001a40:	20000000 	.word	0x20000000
 8001a44:	00100101 	.word	0x00100101
 8001a48:	200005a4 	.word	0x200005a4
 8001a4c:	47abe000 	.word	0x47abe000
 8001a50:	49742400 	.word	0x49742400
 8001a54:	20000568 	.word	0x20000568
 8001a58:	2000056c 	.word	0x2000056c
 8001a5c:	20000564 	.word	0x20000564
 8001a60:	0800c2ec 	.word	0x0800c2ec
 8001a64:	20000570 	.word	0x20000570
 8001a68:	447a0000 	.word	0x447a0000
            
            // Debug: show sample count
            // printf("Debug: %lu samples averaged\r\n", adc_count_for_uart);
        } else {
            // If no samples, still send a message with current value
            float dac_voltage_v = dac_voltage_mv / 1000.0f;
 8001a6c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001a70:	ee07 3a90 	vmov	s15, r3
 8001a74:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a78:	ed5f 6a05 	vldr	s13, [pc, #-20]	@ 8001a68 <main+0x714>
 8001a7c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a80:	edc7 7a3e 	vstr	s15, [r7, #248]	@ 0xf8
            snprintf(uart_output, sizeof(uart_output), "%.3f , %.1f\r\n", dac_voltage_v, current_ua);
 8001a84:	f8d7 00f8 	ldr.w	r0, [r7, #248]	@ 0xf8
 8001a88:	f7fe fd62 	bl	8000550 <__aeabi_f2d>
 8001a8c:	4604      	mov	r4, r0
 8001a8e:	460d      	mov	r5, r1
 8001a90:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8001a94:	f7fe fd5c 	bl	8000550 <__aeabi_f2d>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001aa0:	e9cd 4500 	strd	r4, r5, [sp]
 8001aa4:	4a60      	ldr	r2, [pc, #384]	@ (8001c28 <main+0x8d4>)
 8001aa6:	2132      	movs	r1, #50	@ 0x32
 8001aa8:	4860      	ldr	r0, [pc, #384]	@ (8001c2c <main+0x8d8>)
 8001aaa:	f008 f863 	bl	8009b74 <sniprintf>
            printf(uart_output);
 8001aae:	485f      	ldr	r0, [pc, #380]	@ (8001c2c <main+0x8d8>)
 8001ab0:	f008 f958 	bl	8009d64 <iprintf>
        }
        
        // Reset accumulation variables
        current_sum_for_uart = 0.0f;
 8001ab4:	4b5e      	ldr	r3, [pc, #376]	@ (8001c30 <main+0x8dc>)
 8001ab6:	f04f 0200 	mov.w	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
        adc_count_for_uart = 0;
 8001abc:	4b5d      	ldr	r3, [pc, #372]	@ (8001c34 <main+0x8e0>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	601a      	str	r2, [r3, #0]
        last_uart_time = current_time;
 8001ac2:	4a5d      	ldr	r2, [pc, #372]	@ (8001c38 <main+0x8e4>)
 8001ac4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001ac8:	6013      	str	r3, [r2, #0]
    }
    // Output DAC and ADC values via UART
    printf("DAC:%lu %lumV -> ADC1:%lu %lumV (%.1f uA) | ADC2:%lu %lumV (%.1f uA)\r\n", 
 8001aca:	4b5c      	ldr	r3, [pc, #368]	@ (8001c3c <main+0x8e8>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	607b      	str	r3, [r7, #4]
 8001ad0:	4b5b      	ldr	r3, [pc, #364]	@ (8001c40 <main+0x8ec>)
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	603a      	str	r2, [r7, #0]
 8001ad6:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8001ada:	f7fe fd39 	bl	8000550 <__aeabi_f2d>
 8001ade:	4604      	mov	r4, r0
 8001ae0:	460d      	mov	r5, r1
 8001ae2:	4b58      	ldr	r3, [pc, #352]	@ (8001c44 <main+0x8f0>)
 8001ae4:	681e      	ldr	r6, [r3, #0]
 8001ae6:	f8d7 0100 	ldr.w	r0, [r7, #256]	@ 0x100
 8001aea:	f7fe fd31 	bl	8000550 <__aeabi_f2d>
 8001aee:	4602      	mov	r2, r0
 8001af0:	460b      	mov	r3, r1
 8001af2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001af6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001afa:	9305      	str	r3, [sp, #20]
 8001afc:	9604      	str	r6, [sp, #16]
 8001afe:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001b06:	9300      	str	r3, [sp, #0]
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001b0e:	6879      	ldr	r1, [r7, #4]
 8001b10:	484d      	ldr	r0, [pc, #308]	@ (8001c48 <main+0x8f4>)
 8001b12:	f008 f927 	bl	8009d64 <iprintf>
           dac_value, dac_voltage_mv, adc_value, adc_voltage_mv, current_ua, 
           adc2_value, adc2_voltage_mv, current2_ua);
    
    // Update LCD display every 10 iterations to reduce flicker
    static uint32_t lcd_update_counter = 0;
    lcd_update_counter++;
 8001b16:	4b4d      	ldr	r3, [pc, #308]	@ (8001c4c <main+0x8f8>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	4a4b      	ldr	r2, [pc, #300]	@ (8001c4c <main+0x8f8>)
 8001b1e:	6013      	str	r3, [r2, #0]
    
    if (lcd_update_counter % LCD_UPDATE_INTERVAL == 0) { // LCDの更新頻度を下げる
 8001b20:	4b4a      	ldr	r3, [pc, #296]	@ (8001c4c <main+0x8f8>)
 8001b22:	6819      	ldr	r1, [r3, #0]
 8001b24:	4b4a      	ldr	r3, [pc, #296]	@ (8001c50 <main+0x8fc>)
 8001b26:	fba3 2301 	umull	r2, r3, r3, r1
 8001b2a:	08da      	lsrs	r2, r3, #3
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	4413      	add	r3, r2
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	1aca      	subs	r2, r1, r3
 8001b36:	2a00      	cmp	r2, #0
 8001b38:	d15c      	bne.n	8001bf4 <main+0x8a0>
        LCD_FillWhite();
 8001b3a:	f7ff fa8b 	bl	8001054 <LCD_FillWhite>
        
        // Display title
        LCD_DrawString4bit(10, "Current Monitor");
 8001b3e:	4945      	ldr	r1, [pc, #276]	@ (8001c54 <main+0x900>)
 8001b40:	200a      	movs	r0, #10
 8001b42:	f7ff fab1 	bl	80010a8 <LCD_DrawString4bit>
        
        // Display DAC value and voltage (mV)
        char dac_str[32];
        snprintf(dac_str, sizeof(dac_str), "DAC: %lumV [%d/5]", dac_voltage_mv, current_voltage_index + 1);
 8001b46:	4b44      	ldr	r3, [pc, #272]	@ (8001c58 <main+0x904>)
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	f107 000c 	add.w	r0, r7, #12
 8001b52:	9300      	str	r3, [sp, #0]
 8001b54:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001b58:	4a40      	ldr	r2, [pc, #256]	@ (8001c5c <main+0x908>)
 8001b5a:	2120      	movs	r1, #32
 8001b5c:	f008 f80a 	bl	8009b74 <sniprintf>
        LCD_DrawString4bit(30, dac_str);
 8001b60:	f107 030c 	add.w	r3, r7, #12
 8001b64:	4619      	mov	r1, r3
 8001b66:	201e      	movs	r0, #30
 8001b68:	f7ff fa9e 	bl	80010a8 <LCD_DrawString4bit>
        
        // Display ADC1 voltage (mV)
        char adc_str[32];
        snprintf(adc_str, sizeof(adc_str), "ADC1: %lu mV", adc_voltage_mv);
 8001b6c:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8001b70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001b74:	4a3a      	ldr	r2, [pc, #232]	@ (8001c60 <main+0x90c>)
 8001b76:	2120      	movs	r1, #32
 8001b78:	f007 fffc 	bl	8009b74 <sniprintf>
        LCD_DrawString4bit(50, adc_str);
 8001b7c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b80:	4619      	mov	r1, r3
 8001b82:	2032      	movs	r0, #50	@ 0x32
 8001b84:	f7ff fa90 	bl	80010a8 <LCD_DrawString4bit>
        
        // Display ADC2 voltage (mV)
        char adc2_str[32];
        snprintf(adc2_str, sizeof(adc2_str), "ADC2: %lu mV", adc2_voltage_mv);
 8001b88:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 8001b8c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001b90:	4a34      	ldr	r2, [pc, #208]	@ (8001c64 <main+0x910>)
 8001b92:	2120      	movs	r1, #32
 8001b94:	f007 ffee 	bl	8009b74 <sniprintf>
        LCD_DrawString4bit(70, adc2_str);
 8001b98:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	2046      	movs	r0, #70	@ 0x46
 8001ba0:	f7ff fa82 	bl	80010a8 <LCD_DrawString4bit>
        
        // Display calculated current from ADC1 (μA)
        char current_str[32];
        snprintf(current_str, sizeof(current_str), "I1: %.1f uA", current_ua);
 8001ba4:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8001ba8:	f7fe fcd2 	bl	8000550 <__aeabi_f2d>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 8001bb4:	e9cd 2300 	strd	r2, r3, [sp]
 8001bb8:	4a2b      	ldr	r2, [pc, #172]	@ (8001c68 <main+0x914>)
 8001bba:	2120      	movs	r1, #32
 8001bbc:	f007 ffda 	bl	8009b74 <sniprintf>
        LCD_DrawString4bit(90, current_str);
 8001bc0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	205a      	movs	r0, #90	@ 0x5a
 8001bc8:	f7ff fa6e 	bl	80010a8 <LCD_DrawString4bit>
        
        // Display calculated current from ADC2 (μA)
        char current2_str[32];
        snprintf(current2_str, sizeof(current2_str), "I2: %.1f uA", current2_ua);
 8001bcc:	f8d7 0100 	ldr.w	r0, [r7, #256]	@ 0x100
 8001bd0:	f7fe fcbe 	bl	8000550 <__aeabi_f2d>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	f107 008c 	add.w	r0, r7, #140	@ 0x8c
 8001bdc:	e9cd 2300 	strd	r2, r3, [sp]
 8001be0:	4a22      	ldr	r2, [pc, #136]	@ (8001c6c <main+0x918>)
 8001be2:	2120      	movs	r1, #32
 8001be4:	f007 ffc6 	bl	8009b74 <sniprintf>
        LCD_DrawString4bit(110, current2_str);
 8001be8:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001bec:	4619      	mov	r1, r3
 8001bee:	206e      	movs	r0, #110	@ 0x6e
 8001bf0:	f7ff fa5a 	bl	80010a8 <LCD_DrawString4bit>
    }
    
    // Keep existing ADS1299 functionality (reduced frequency)
    static uint32_t ads_counter = 0;
    ads_counter++;
 8001bf4:	4b1e      	ldr	r3, [pc, #120]	@ (8001c70 <main+0x91c>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	4a1d      	ldr	r2, [pc, #116]	@ (8001c70 <main+0x91c>)
 8001bfc:	6013      	str	r3, [r2, #0]
    
    if (ads_counter % ADS_CHECK_INTERVAL == 0) { // Every 50th iteration (less frequent for better LCD performance)
 8001bfe:	4b1c      	ldr	r3, [pc, #112]	@ (8001c70 <main+0x91c>)
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	4b1c      	ldr	r3, [pc, #112]	@ (8001c74 <main+0x920>)
 8001c04:	fba3 1302 	umull	r1, r3, r3, r2
 8001c08:	091b      	lsrs	r3, r3, #4
 8001c0a:	2132      	movs	r1, #50	@ 0x32
 8001c0c:	fb01 f303 	mul.w	r3, r1, r3
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d104      	bne.n	8001c20 <main+0x8cc>
        //char ads_str[22];
        // snprintf(ads_str, sizeof(ads_str), "ADS ID: 0x%02X", device_id);
        //LCD_DrawString4bit(110, ads_str);
        
        // Check DRDY pin and read data if available
        if (HAL_GPIO_ReadPin(ADS_DRDY_PORT, ADS_DRDY_PIN) == GPIO_PIN_RESET) {
 8001c16:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001c1a:	4817      	ldr	r0, [pc, #92]	@ (8001c78 <main+0x924>)
 8001c1c:	f003 fc08 	bl	8005430 <HAL_GPIO_ReadPin>
            // snprintf(ch1_str, sizeof(ch1_str), "CH1: %ld", ch1_val);
            //LCD_DrawString4bit(110, ch1_str);
        }
    }
    
    HAL_Delay(100); // 100ms delay for readable output
 8001c20:	2064      	movs	r0, #100	@ 0x64
 8001c22:	f001 fba3 	bl	800336c <HAL_Delay>
  {
 8001c26:	e47a      	b.n	800151e <main+0x1ca>
 8001c28:	0800c2ec 	.word	0x0800c2ec
 8001c2c:	20000570 	.word	0x20000570
 8001c30:	2000056c 	.word	0x2000056c
 8001c34:	20000568 	.word	0x20000568
 8001c38:	20000564 	.word	0x20000564
 8001c3c:	20000000 	.word	0x20000000
 8001c40:	200005a4 	.word	0x200005a4
 8001c44:	200005a8 	.word	0x200005a8
 8001c48:	0800c2fc 	.word	0x0800c2fc
 8001c4c:	200005b8 	.word	0x200005b8
 8001c50:	cccccccd 	.word	0xcccccccd
 8001c54:	0800c344 	.word	0x0800c344
 8001c58:	200005a2 	.word	0x200005a2
 8001c5c:	0800c354 	.word	0x0800c354
 8001c60:	0800c368 	.word	0x0800c368
 8001c64:	0800c378 	.word	0x0800c378
 8001c68:	0800c388 	.word	0x0800c388
 8001c6c:	0800c394 	.word	0x0800c394
 8001c70:	200005bc 	.word	0x200005bc
 8001c74:	51eb851f 	.word	0x51eb851f
 8001c78:	42020400 	.word	0x42020400

08001c7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b094      	sub	sp, #80	@ 0x50
 8001c80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c82:	f107 0318 	add.w	r3, r7, #24
 8001c86:	2238      	movs	r2, #56	@ 0x38
 8001c88:	2100      	movs	r1, #0
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f008 f8da 	bl	8009e44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c90:	463b      	mov	r3, r7
 8001c92:	2200      	movs	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	605a      	str	r2, [r3, #4]
 8001c98:	609a      	str	r2, [r3, #8]
 8001c9a:	60da      	str	r2, [r3, #12]
 8001c9c:	611a      	str	r2, [r3, #16]
 8001c9e:	615a      	str	r2, [r3, #20]

  /** Enable Epod Booster
  */
  if (HAL_RCCEx_EpodBoosterClkConfig(RCC_EPODBOOSTER_SOURCE_MSIS, RCC_EPODBOOSTER_DIV1) != HAL_OK)
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	2001      	movs	r0, #1
 8001ca4:	f005 fa2a 	bl	80070fc <HAL_RCCEx_EpodBoosterClkConfig>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8001cae:	f000 fbdb 	bl	8002468 <Error_Handler>
  }
  if (HAL_PWREx_EnableEpodBooster() != HAL_OK)
 8001cb2:	f003 fd51 	bl	8005758 <HAL_PWREx_EnableEpodBooster>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <SystemClock_Config+0x44>
  {
    Error_Handler();
 8001cbc:	f000 fbd4 	bl	8002468 <Error_Handler>
  }

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	f003 fcfb 	bl	80056bc <HAL_PWREx_ControlVoltageScaling>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8001ccc:	f000 fbcc 	bl	8002468 <Error_Handler>
  }

  /** Set Flash latency before increasing MSIS
  */
  __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_2);
 8001cd0:	4b1f      	ldr	r3, [pc, #124]	@ (8001d50 <SystemClock_Config+0xd4>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f023 030f 	bic.w	r3, r3, #15
 8001cd8:	4a1d      	ldr	r2, [pc, #116]	@ (8001d50 <SystemClock_Config+0xd4>)
 8001cda:	f043 0302 	orr.w	r3, r3, #2
 8001cde:	6013      	str	r3, [r2, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSIS;
 8001ce0:	2328      	movs	r3, #40	@ 0x28
 8001ce2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSISState = RCC_MSI_ON;
 8001cec:	2301      	movs	r3, #1
 8001cee:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSISSource = RCC_MSI_RC0;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.MSISDiv = RCC_MSI_DIV1;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cf8:	f107 0318 	add.w	r3, r7, #24
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f003 fd57 	bl	80057b0 <HAL_RCC_OscConfig>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001d08:	f000 fbae 	bl	8002468 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d0c:	231f      	movs	r3, #31
 8001d0e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSIS;
 8001d10:	2300      	movs	r3, #0
 8001d12:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d14:	2300      	movs	r3, #0
 8001d16:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8001d20:	2300      	movs	r3, #0
 8001d22:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d24:	463b      	mov	r3, r7
 8001d26:	2102      	movs	r1, #2
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f004 f897 	bl	8005e5c <HAL_RCC_ClockConfig>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001d34:	f000 fb98 	bl	8002468 <Error_Handler>
  }

  /** MCO1 configuration
  */
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_64);
 8001d38:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8001d3c:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8001d40:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001d44:	f004 f976 	bl	8006034 <HAL_RCC_MCOConfig>
}
 8001d48:	bf00      	nop
 8001d4a:	3750      	adds	r7, #80	@ 0x50
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40022000 	.word	0x40022000

08001d54 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b088      	sub	sp, #32
 8001d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d5a:	463b      	mov	r3, r7
 8001d5c:	2220      	movs	r2, #32
 8001d5e:	2100      	movs	r1, #0
 8001d60:	4618      	mov	r0, r3
 8001d62:	f008 f86f 	bl	8009e44 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001d66:	4b27      	ldr	r3, [pc, #156]	@ (8001e04 <MX_ADC1_Init+0xb0>)
 8001d68:	4a27      	ldr	r2, [pc, #156]	@ (8001e08 <MX_ADC1_Init+0xb4>)
 8001d6a:	601a      	str	r2, [r3, #0]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001d6c:	4b25      	ldr	r3, [pc, #148]	@ (8001e04 <MX_ADC1_Init+0xb0>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	605a      	str	r2, [r3, #4]
  hadc1.Init.GainCompensation = 0;
 8001d72:	4b24      	ldr	r3, [pc, #144]	@ (8001e04 <MX_ADC1_Init+0xb0>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001d78:	4b22      	ldr	r3, [pc, #136]	@ (8001e04 <MX_ADC1_Init+0xb0>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d7e:	4b21      	ldr	r3, [pc, #132]	@ (8001e04 <MX_ADC1_Init+0xb0>)
 8001d80:	2204      	movs	r2, #4
 8001d82:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001d84:	4b1f      	ldr	r3, [pc, #124]	@ (8001e04 <MX_ADC1_Init+0xb0>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001d8a:	4b1e      	ldr	r3, [pc, #120]	@ (8001e04 <MX_ADC1_Init+0xb0>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8001d90:	4b1c      	ldr	r3, [pc, #112]	@ (8001e04 <MX_ADC1_Init+0xb0>)
 8001d92:	2201      	movs	r2, #1
 8001d94:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d96:	4b1b      	ldr	r3, [pc, #108]	@ (8001e04 <MX_ADC1_Init+0xb0>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d9c:	4b19      	ldr	r3, [pc, #100]	@ (8001e04 <MX_ADC1_Init+0xb0>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001da2:	4b18      	ldr	r3, [pc, #96]	@ (8001e04 <MX_ADC1_Init+0xb0>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001da8:	4b16      	ldr	r3, [pc, #88]	@ (8001e04 <MX_ADC1_Init+0xb0>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001dae:	4b15      	ldr	r3, [pc, #84]	@ (8001e04 <MX_ADC1_Init+0xb0>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001db4:	4b13      	ldr	r3, [pc, #76]	@ (8001e04 <MX_ADC1_Init+0xb0>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.OversamplingMode = DISABLE;
 8001dba:	4b12      	ldr	r3, [pc, #72]	@ (8001e04 <MX_ADC1_Init+0xb0>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001dc2:	4810      	ldr	r0, [pc, #64]	@ (8001e04 <MX_ADC1_Init+0xb0>)
 8001dc4:	f001 fe4e 	bl	8003a64 <HAL_ADC_Init>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 8001dce:	f000 fb4b 	bl	8002468 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001dd6:	2306      	movs	r3, #6
 8001dd8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001dde:	2304      	movs	r3, #4
 8001de0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001de2:	2300      	movs	r3, #0
 8001de4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001de6:	463b      	mov	r3, r7
 8001de8:	4619      	mov	r1, r3
 8001dea:	4806      	ldr	r0, [pc, #24]	@ (8001e04 <MX_ADC1_Init+0xb0>)
 8001dec:	f002 f95c 	bl	80040a8 <HAL_ADC_ConfigChannel>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001df6:	f000 fb37 	bl	8002468 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001dfa:	bf00      	nop
 8001dfc:	3720      	adds	r7, #32
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	20000218 	.word	0x20000218
 8001e08:	42028000 	.word	0x42028000

08001e0c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b088      	sub	sp, #32
 8001e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e12:	463b      	mov	r3, r7
 8001e14:	2220      	movs	r2, #32
 8001e16:	2100      	movs	r1, #0
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f008 f813 	bl	8009e44 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001e1e:	4b27      	ldr	r3, [pc, #156]	@ (8001ebc <MX_ADC2_Init+0xb0>)
 8001e20:	4a27      	ldr	r2, [pc, #156]	@ (8001ec0 <MX_ADC2_Init+0xb4>)
 8001e22:	601a      	str	r2, [r3, #0]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001e24:	4b25      	ldr	r3, [pc, #148]	@ (8001ebc <MX_ADC2_Init+0xb0>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	605a      	str	r2, [r3, #4]
  hadc2.Init.GainCompensation = 0;
 8001e2a:	4b24      	ldr	r3, [pc, #144]	@ (8001ebc <MX_ADC2_Init+0xb0>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001e30:	4b22      	ldr	r3, [pc, #136]	@ (8001ebc <MX_ADC2_Init+0xb0>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e36:	4b21      	ldr	r3, [pc, #132]	@ (8001ebc <MX_ADC2_Init+0xb0>)
 8001e38:	2204      	movs	r2, #4
 8001e3a:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001e3c:	4b1f      	ldr	r3, [pc, #124]	@ (8001ebc <MX_ADC2_Init+0xb0>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001e42:	4b1e      	ldr	r3, [pc, #120]	@ (8001ebc <MX_ADC2_Init+0xb0>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8001e48:	4b1c      	ldr	r3, [pc, #112]	@ (8001ebc <MX_ADC2_Init+0xb0>)
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001e4e:	4b1b      	ldr	r3, [pc, #108]	@ (8001ebc <MX_ADC2_Init+0xb0>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e54:	4b19      	ldr	r3, [pc, #100]	@ (8001ebc <MX_ADC2_Init+0xb0>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e5a:	4b18      	ldr	r3, [pc, #96]	@ (8001ebc <MX_ADC2_Init+0xb0>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001e60:	4b16      	ldr	r3, [pc, #88]	@ (8001ebc <MX_ADC2_Init+0xb0>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001e66:	4b15      	ldr	r3, [pc, #84]	@ (8001ebc <MX_ADC2_Init+0xb0>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001e6c:	4b13      	ldr	r3, [pc, #76]	@ (8001ebc <MX_ADC2_Init+0xb0>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.OversamplingMode = DISABLE;
 8001e72:	4b12      	ldr	r3, [pc, #72]	@ (8001ebc <MX_ADC2_Init+0xb0>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001e7a:	4810      	ldr	r0, [pc, #64]	@ (8001ebc <MX_ADC2_Init+0xb0>)
 8001e7c:	f001 fdf2 	bl	8003a64 <HAL_ADC_Init>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8001e86:	f000 faef 	bl	8002468 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001e8e:	2306      	movs	r3, #6
 8001e90:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001e92:	2300      	movs	r3, #0
 8001e94:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001e96:	2304      	movs	r3, #4
 8001e98:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001e9e:	463b      	mov	r3, r7
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4806      	ldr	r0, [pc, #24]	@ (8001ebc <MX_ADC2_Init+0xb0>)
 8001ea4:	f002 f900 	bl	80040a8 <HAL_ADC_ConfigChannel>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <MX_ADC2_Init+0xa6>
  {
    Error_Handler();
 8001eae:	f000 fadb 	bl	8002468 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001eb2:	bf00      	nop
 8001eb4:	3720      	adds	r7, #32
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	20000280 	.word	0x20000280
 8001ec0:	42028100 	.word	0x42028100

08001ec4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b08e      	sub	sp, #56	@ 0x38
 8001ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001eca:	f107 0308 	add.w	r3, r7, #8
 8001ece:	2230      	movs	r2, #48	@ 0x30
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f007 ffb6 	bl	8009e44 <memset>
  DAC_AutonomousModeConfTypeDef sAutonomousMode = {0};
 8001ed8:	2300      	movs	r3, #0
 8001eda:	607b      	str	r3, [r7, #4]

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001edc:	4b1e      	ldr	r3, [pc, #120]	@ (8001f58 <MX_DAC1_Init+0x94>)
 8001ede:	4a1f      	ldr	r2, [pc, #124]	@ (8001f5c <MX_DAC1_Init+0x98>)
 8001ee0:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001ee2:	481d      	ldr	r0, [pc, #116]	@ (8001f58 <MX_DAC1_Init+0x94>)
 8001ee4:	f002 fe10 	bl	8004b08 <HAL_DAC_Init>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <MX_DAC1_Init+0x2e>
  {
    Error_Handler();
 8001eee:	f000 fabb 	bl	8002468 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	743b      	strb	r3, [r7, #16]
  sConfig.DAC_SignedFormat = DISABLE;
 8001efa:	2300      	movs	r3, #0
 8001efc:	747b      	strb	r3, [r7, #17]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_ENABLE;  // サンプル&ホールドを有効化して安定性向上
 8001efe:	2304      	movs	r3, #4
 8001f00:	617b      	str	r3, [r7, #20]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001f02:	2300      	movs	r3, #0
 8001f04:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001f06:	2300      	movs	r3, #0
 8001f08:	61fb      	str	r3, [r7, #28]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	623b      	str	r3, [r7, #32]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.DAC_SampleAndHoldConfig.DAC_SampleTime = 10;  // サンプル時間を設定（10サイクル）
 8001f12:	230a      	movs	r3, #10
 8001f14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfig.DAC_SampleAndHoldConfig.DAC_HoldTime = 10;    // ホールド時間を設定（10サイクル）
 8001f16:	230a      	movs	r3, #10
 8001f18:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfig.DAC_SampleAndHoldConfig.DAC_RefreshTime = 10; // リフレッシュ時間を設定（10サイクル）
 8001f1a:	230a      	movs	r3, #10
 8001f1c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001f1e:	f107 0308 	add.w	r3, r7, #8
 8001f22:	2200      	movs	r2, #0
 8001f24:	4619      	mov	r1, r3
 8001f26:	480c      	ldr	r0, [pc, #48]	@ (8001f58 <MX_DAC1_Init+0x94>)
 8001f28:	f002 feaa 	bl	8004c80 <HAL_DAC_ConfigChannel>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <MX_DAC1_Init+0x72>
  {
    Error_Handler();
 8001f32:	f000 fa99 	bl	8002468 <Error_Handler>
  }

  /** Configure Autonomous Mode
  */
  sAutonomousMode.AutonomousModeState = DAC_AUTONOMOUS_MODE_DISABLE;
 8001f36:	2300      	movs	r3, #0
 8001f38:	607b      	str	r3, [r7, #4]
  if (HAL_DACEx_SetConfigAutonomousMode(&hdac1, &sAutonomousMode) != HAL_OK)
 8001f3a:	1d3b      	adds	r3, r7, #4
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4806      	ldr	r0, [pc, #24]	@ (8001f58 <MX_DAC1_Init+0x94>)
 8001f40:	f003 f830 	bl	8004fa4 <HAL_DACEx_SetConfigAutonomousMode>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <MX_DAC1_Init+0x8a>
  {
    Error_Handler();
 8001f4a:	f000 fa8d 	bl	8002468 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001f4e:	bf00      	nop
 8001f50:	3738      	adds	r7, #56	@ 0x38
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	200002e8 	.word	0x200002e8
 8001f5c:	42028400 	.word	0x42028400

08001f60 <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8001f64:	4b0c      	ldr	r3, [pc, #48]	@ (8001f98 <MX_OPAMP1_Init+0x38>)
 8001f66:	4a0d      	ldr	r2, [pc, #52]	@ (8001f9c <MX_OPAMP1_Init+0x3c>)
 8001f68:	601a      	str	r2, [r3, #0]
  hopamp1.Init.Mode = OPAMP_FOLLOWER_MODE;
 8001f6a:	4b0b      	ldr	r3, [pc, #44]	@ (8001f98 <MX_OPAMP1_Init+0x38>)
 8001f6c:	220c      	movs	r2, #12
 8001f6e:	60da      	str	r2, [r3, #12]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001f70:	4b09      	ldr	r3, [pc, #36]	@ (8001f98 <MX_OPAMP1_Init+0x38>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	615a      	str	r2, [r3, #20]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALPOWER_NORMALSPEED;
 8001f76:	4b08      	ldr	r3, [pc, #32]	@ (8001f98 <MX_OPAMP1_Init+0x38>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	609a      	str	r2, [r3, #8]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001f7c:	4b06      	ldr	r3, [pc, #24]	@ (8001f98 <MX_OPAMP1_Init+0x38>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	61da      	str	r2, [r3, #28]
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8001f82:	4805      	ldr	r0, [pc, #20]	@ (8001f98 <MX_OPAMP1_Init+0x38>)
 8001f84:	f003 fa84 	bl	8005490 <HAL_OPAMP_Init>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <MX_OPAMP1_Init+0x32>
  {
    Error_Handler();
 8001f8e:	f000 fa6b 	bl	8002468 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8001f92:	bf00      	nop
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	200002fc 	.word	0x200002fc
 8001f9c:	40007000 	.word	0x40007000

08001fa0 <MX_OPAMP2_Init>:
  * @brief OPAMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP2_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP2_Init 0 */

  /* USER CODE BEGIN OPAMP2_Init 1 */

  /* USER CODE END OPAMP2_Init 1 */
  hopamp2.Instance = OPAMP2;
 8001fa4:	4b0c      	ldr	r3, [pc, #48]	@ (8001fd8 <MX_OPAMP2_Init+0x38>)
 8001fa6:	4a0d      	ldr	r2, [pc, #52]	@ (8001fdc <MX_OPAMP2_Init+0x3c>)
 8001fa8:	601a      	str	r2, [r3, #0]
  hopamp2.Init.Mode = OPAMP_FOLLOWER_MODE;
 8001faa:	4b0b      	ldr	r3, [pc, #44]	@ (8001fd8 <MX_OPAMP2_Init+0x38>)
 8001fac:	220c      	movs	r2, #12
 8001fae:	60da      	str	r2, [r3, #12]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001fb0:	4b09      	ldr	r3, [pc, #36]	@ (8001fd8 <MX_OPAMP2_Init+0x38>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	615a      	str	r2, [r3, #20]
  hopamp2.Init.PowerMode = OPAMP_POWERMODE_NORMALPOWER_NORMALSPEED;
 8001fb6:	4b08      	ldr	r3, [pc, #32]	@ (8001fd8 <MX_OPAMP2_Init+0x38>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	609a      	str	r2, [r3, #8]
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001fbc:	4b06      	ldr	r3, [pc, #24]	@ (8001fd8 <MX_OPAMP2_Init+0x38>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	61da      	str	r2, [r3, #28]
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8001fc2:	4805      	ldr	r0, [pc, #20]	@ (8001fd8 <MX_OPAMP2_Init+0x38>)
 8001fc4:	f003 fa64 	bl	8005490 <HAL_OPAMP_Init>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <MX_OPAMP2_Init+0x32>
  {
    Error_Handler();
 8001fce:	f000 fa4b 	bl	8002468 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP2_Init 2 */

  /* USER CODE END OPAMP2_Init 2 */

}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	20000330 	.word	0x20000330
 8001fdc:	40007010 	.word	0x40007010

08001fe0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8001fe6:	1d3b      	adds	r3, r7, #4
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	605a      	str	r2, [r3, #4]
 8001fee:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001ff0:	4b31      	ldr	r3, [pc, #196]	@ (80020b8 <MX_SPI1_Init+0xd8>)
 8001ff2:	4a32      	ldr	r2, [pc, #200]	@ (80020bc <MX_SPI1_Init+0xdc>)
 8001ff4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ff6:	4b30      	ldr	r3, [pc, #192]	@ (80020b8 <MX_SPI1_Init+0xd8>)
 8001ff8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001ffc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8001ffe:	4b2e      	ldr	r3, [pc, #184]	@ (80020b8 <MX_SPI1_Init+0xd8>)
 8002000:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002004:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002006:	4b2c      	ldr	r3, [pc, #176]	@ (80020b8 <MX_SPI1_Init+0xd8>)
 8002008:	2207      	movs	r2, #7
 800200a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800200c:	4b2a      	ldr	r3, [pc, #168]	@ (80020b8 <MX_SPI1_Init+0xd8>)
 800200e:	2200      	movs	r2, #0
 8002010:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002012:	4b29      	ldr	r3, [pc, #164]	@ (80020b8 <MX_SPI1_Init+0xd8>)
 8002014:	2200      	movs	r2, #0
 8002016:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002018:	4b27      	ldr	r3, [pc, #156]	@ (80020b8 <MX_SPI1_Init+0xd8>)
 800201a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800201e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002020:	4b25      	ldr	r3, [pc, #148]	@ (80020b8 <MX_SPI1_Init+0xd8>)
 8002022:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002026:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002028:	4b23      	ldr	r3, [pc, #140]	@ (80020b8 <MX_SPI1_Init+0xd8>)
 800202a:	2200      	movs	r2, #0
 800202c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800202e:	4b22      	ldr	r3, [pc, #136]	@ (80020b8 <MX_SPI1_Init+0xd8>)
 8002030:	2200      	movs	r2, #0
 8002032:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002034:	4b20      	ldr	r3, [pc, #128]	@ (80020b8 <MX_SPI1_Init+0xd8>)
 8002036:	2200      	movs	r2, #0
 8002038:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 800203a:	4b1f      	ldr	r3, [pc, #124]	@ (80020b8 <MX_SPI1_Init+0xd8>)
 800203c:	2207      	movs	r2, #7
 800203e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002040:	4b1d      	ldr	r3, [pc, #116]	@ (80020b8 <MX_SPI1_Init+0xd8>)
 8002042:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002046:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002048:	4b1b      	ldr	r3, [pc, #108]	@ (80020b8 <MX_SPI1_Init+0xd8>)
 800204a:	2200      	movs	r2, #0
 800204c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800204e:	4b1a      	ldr	r3, [pc, #104]	@ (80020b8 <MX_SPI1_Init+0xd8>)
 8002050:	2200      	movs	r2, #0
 8002052:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002054:	4b18      	ldr	r3, [pc, #96]	@ (80020b8 <MX_SPI1_Init+0xd8>)
 8002056:	2200      	movs	r2, #0
 8002058:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800205a:	4b17      	ldr	r3, [pc, #92]	@ (80020b8 <MX_SPI1_Init+0xd8>)
 800205c:	2200      	movs	r2, #0
 800205e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002060:	4b15      	ldr	r3, [pc, #84]	@ (80020b8 <MX_SPI1_Init+0xd8>)
 8002062:	2200      	movs	r2, #0
 8002064:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002066:	4b14      	ldr	r3, [pc, #80]	@ (80020b8 <MX_SPI1_Init+0xd8>)
 8002068:	2200      	movs	r2, #0
 800206a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800206c:	4b12      	ldr	r3, [pc, #72]	@ (80020b8 <MX_SPI1_Init+0xd8>)
 800206e:	2200      	movs	r2, #0
 8002070:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8002072:	4b11      	ldr	r3, [pc, #68]	@ (80020b8 <MX_SPI1_Init+0xd8>)
 8002074:	2200      	movs	r2, #0
 8002076:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8002078:	4b0f      	ldr	r3, [pc, #60]	@ (80020b8 <MX_SPI1_Init+0xd8>)
 800207a:	2200      	movs	r2, #0
 800207c:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800207e:	480e      	ldr	r0, [pc, #56]	@ (80020b8 <MX_SPI1_Init+0xd8>)
 8002080:	f005 f880 	bl	8007184 <HAL_SPI_Init>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <MX_SPI1_Init+0xae>
  {
    Error_Handler();
 800208a:	f000 f9ed 	bl	8002468 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 800208e:	2300      	movs	r3, #0
 8002090:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8002092:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002096:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8002098:	2300      	movs	r3, #0
 800209a:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 800209c:	1d3b      	adds	r3, r7, #4
 800209e:	4619      	mov	r1, r3
 80020a0:	4805      	ldr	r0, [pc, #20]	@ (80020b8 <MX_SPI1_Init+0xd8>)
 80020a2:	f005 fc4a 	bl	800793a <HAL_SPIEx_SetConfigAutonomousMode>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <MX_SPI1_Init+0xd0>
  {
    Error_Handler();
 80020ac:	f000 f9dc 	bl	8002468 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80020b0:	bf00      	nop
 80020b2:	3710      	adds	r7, #16
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	20000364 	.word	0x20000364
 80020bc:	40013000 	.word	0x40013000

080020c0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 80020c6:	1d3b      	adds	r3, r7, #4
 80020c8:	2200      	movs	r2, #0
 80020ca:	601a      	str	r2, [r3, #0]
 80020cc:	605a      	str	r2, [r3, #4]
 80020ce:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80020d0:	4b31      	ldr	r3, [pc, #196]	@ (8002198 <MX_SPI2_Init+0xd8>)
 80020d2:	4a32      	ldr	r2, [pc, #200]	@ (800219c <MX_SPI2_Init+0xdc>)
 80020d4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80020d6:	4b30      	ldr	r3, [pc, #192]	@ (8002198 <MX_SPI2_Init+0xd8>)
 80020d8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80020dc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80020de:	4b2e      	ldr	r3, [pc, #184]	@ (8002198 <MX_SPI2_Init+0xd8>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80020e4:	4b2c      	ldr	r3, [pc, #176]	@ (8002198 <MX_SPI2_Init+0xd8>)
 80020e6:	2207      	movs	r2, #7
 80020e8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020ea:	4b2b      	ldr	r3, [pc, #172]	@ (8002198 <MX_SPI2_Init+0xd8>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80020f0:	4b29      	ldr	r3, [pc, #164]	@ (8002198 <MX_SPI2_Init+0xd8>)
 80020f2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80020f6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80020f8:	4b27      	ldr	r3, [pc, #156]	@ (8002198 <MX_SPI2_Init+0xd8>)
 80020fa:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80020fe:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002100:	4b25      	ldr	r3, [pc, #148]	@ (8002198 <MX_SPI2_Init+0xd8>)
 8002102:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002106:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002108:	4b23      	ldr	r3, [pc, #140]	@ (8002198 <MX_SPI2_Init+0xd8>)
 800210a:	2200      	movs	r2, #0
 800210c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800210e:	4b22      	ldr	r3, [pc, #136]	@ (8002198 <MX_SPI2_Init+0xd8>)
 8002110:	2200      	movs	r2, #0
 8002112:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002114:	4b20      	ldr	r3, [pc, #128]	@ (8002198 <MX_SPI2_Init+0xd8>)
 8002116:	2200      	movs	r2, #0
 8002118:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x7;
 800211a:	4b1f      	ldr	r3, [pc, #124]	@ (8002198 <MX_SPI2_Init+0xd8>)
 800211c:	2207      	movs	r2, #7
 800211e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002120:	4b1d      	ldr	r3, [pc, #116]	@ (8002198 <MX_SPI2_Init+0xd8>)
 8002122:	2200      	movs	r2, #0
 8002124:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002126:	4b1c      	ldr	r3, [pc, #112]	@ (8002198 <MX_SPI2_Init+0xd8>)
 8002128:	2200      	movs	r2, #0
 800212a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800212c:	4b1a      	ldr	r3, [pc, #104]	@ (8002198 <MX_SPI2_Init+0xd8>)
 800212e:	2200      	movs	r2, #0
 8002130:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002132:	4b19      	ldr	r3, [pc, #100]	@ (8002198 <MX_SPI2_Init+0xd8>)
 8002134:	2200      	movs	r2, #0
 8002136:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002138:	4b17      	ldr	r3, [pc, #92]	@ (8002198 <MX_SPI2_Init+0xd8>)
 800213a:	2200      	movs	r2, #0
 800213c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800213e:	4b16      	ldr	r3, [pc, #88]	@ (8002198 <MX_SPI2_Init+0xd8>)
 8002140:	2200      	movs	r2, #0
 8002142:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002144:	4b14      	ldr	r3, [pc, #80]	@ (8002198 <MX_SPI2_Init+0xd8>)
 8002146:	2200      	movs	r2, #0
 8002148:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800214a:	4b13      	ldr	r3, [pc, #76]	@ (8002198 <MX_SPI2_Init+0xd8>)
 800214c:	2200      	movs	r2, #0
 800214e:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8002150:	4b11      	ldr	r3, [pc, #68]	@ (8002198 <MX_SPI2_Init+0xd8>)
 8002152:	2200      	movs	r2, #0
 8002154:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8002156:	4b10      	ldr	r3, [pc, #64]	@ (8002198 <MX_SPI2_Init+0xd8>)
 8002158:	2200      	movs	r2, #0
 800215a:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800215c:	480e      	ldr	r0, [pc, #56]	@ (8002198 <MX_SPI2_Init+0xd8>)
 800215e:	f005 f811 	bl	8007184 <HAL_SPI_Init>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <MX_SPI2_Init+0xac>
  {
    Error_Handler();
 8002168:	f000 f97e 	bl	8002468 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 800216c:	2300      	movs	r3, #0
 800216e:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8002170:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002174:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8002176:	2300      	movs	r3, #0
 8002178:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi2, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 800217a:	1d3b      	adds	r3, r7, #4
 800217c:	4619      	mov	r1, r3
 800217e:	4806      	ldr	r0, [pc, #24]	@ (8002198 <MX_SPI2_Init+0xd8>)
 8002180:	f005 fbdb 	bl	800793a <HAL_SPIEx_SetConfigAutonomousMode>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <MX_SPI2_Init+0xce>
  {
    Error_Handler();
 800218a:	f000 f96d 	bl	8002468 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800218e:	bf00      	nop
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	200003f4 	.word	0x200003f4
 800219c:	40003800 	.word	0x40003800

080021a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b08e      	sub	sp, #56	@ 0x38
 80021a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80021aa:	2200      	movs	r2, #0
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	605a      	str	r2, [r3, #4]
 80021b0:	609a      	str	r2, [r3, #8]
 80021b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021b4:	f107 031c 	add.w	r3, r7, #28
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	605a      	str	r2, [r3, #4]
 80021be:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021c0:	463b      	mov	r3, r7
 80021c2:	2200      	movs	r2, #0
 80021c4:	601a      	str	r2, [r3, #0]
 80021c6:	605a      	str	r2, [r3, #4]
 80021c8:	609a      	str	r2, [r3, #8]
 80021ca:	60da      	str	r2, [r3, #12]
 80021cc:	611a      	str	r2, [r3, #16]
 80021ce:	615a      	str	r2, [r3, #20]
 80021d0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80021d2:	4b2e      	ldr	r3, [pc, #184]	@ (800228c <MX_TIM3_Init+0xec>)
 80021d4:	4a2e      	ldr	r2, [pc, #184]	@ (8002290 <MX_TIM3_Init+0xf0>)
 80021d6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 191;
 80021d8:	4b2c      	ldr	r3, [pc, #176]	@ (800228c <MX_TIM3_Init+0xec>)
 80021da:	22bf      	movs	r2, #191	@ 0xbf
 80021dc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021de:	4b2b      	ldr	r3, [pc, #172]	@ (800228c <MX_TIM3_Init+0xec>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 80021e4:	4b29      	ldr	r3, [pc, #164]	@ (800228c <MX_TIM3_Init+0xec>)
 80021e6:	f242 720f 	movw	r2, #9999	@ 0x270f
 80021ea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80021ec:	4b27      	ldr	r3, [pc, #156]	@ (800228c <MX_TIM3_Init+0xec>)
 80021ee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80021f2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80021f4:	4b25      	ldr	r3, [pc, #148]	@ (800228c <MX_TIM3_Init+0xec>)
 80021f6:	2280      	movs	r2, #128	@ 0x80
 80021f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80021fa:	4824      	ldr	r0, [pc, #144]	@ (800228c <MX_TIM3_Init+0xec>)
 80021fc:	f005 fbde 	bl	80079bc <HAL_TIM_Base_Init>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8002206:	f000 f92f 	bl	8002468 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800220a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800220e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002210:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002214:	4619      	mov	r1, r3
 8002216:	481d      	ldr	r0, [pc, #116]	@ (800228c <MX_TIM3_Init+0xec>)
 8002218:	f005 fd9c 	bl	8007d54 <HAL_TIM_ConfigClockSource>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8002222:	f000 f921 	bl	8002468 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002226:	4819      	ldr	r0, [pc, #100]	@ (800228c <MX_TIM3_Init+0xec>)
 8002228:	f005 fc1f 	bl	8007a6a <HAL_TIM_PWM_Init>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8002232:	f000 f919 	bl	8002468 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002236:	2300      	movs	r3, #0
 8002238:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800223a:	2300      	movs	r3, #0
 800223c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800223e:	f107 031c 	add.w	r3, r7, #28
 8002242:	4619      	mov	r1, r3
 8002244:	4811      	ldr	r0, [pc, #68]	@ (800228c <MX_TIM3_Init+0xec>)
 8002246:	f006 fa53 	bl	80086f0 <HAL_TIMEx_MasterConfigSynchronization>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8002250:	f000 f90a 	bl	8002468 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002254:	2360      	movs	r3, #96	@ 0x60
 8002256:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 5000;
 8002258:	f241 3388 	movw	r3, #5000	@ 0x1388
 800225c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800225e:	2300      	movs	r3, #0
 8002260:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002262:	2300      	movs	r3, #0
 8002264:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002266:	463b      	mov	r3, r7
 8002268:	2208      	movs	r2, #8
 800226a:	4619      	mov	r1, r3
 800226c:	4807      	ldr	r0, [pc, #28]	@ (800228c <MX_TIM3_Init+0xec>)
 800226e:	f005 fc5d 	bl	8007b2c <HAL_TIM_PWM_ConfigChannel>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <MX_TIM3_Init+0xdc>
  {
    Error_Handler();
 8002278:	f000 f8f6 	bl	8002468 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800227c:	4803      	ldr	r0, [pc, #12]	@ (800228c <MX_TIM3_Init+0xec>)
 800227e:	f000 fbe3 	bl	8002a48 <HAL_TIM_MspPostInit>

}
 8002282:	bf00      	nop
 8002284:	3738      	adds	r7, #56	@ 0x38
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	20000484 	.word	0x20000484
 8002290:	40000400 	.word	0x40000400

08002294 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002298:	4b22      	ldr	r3, [pc, #136]	@ (8002324 <MX_UART5_Init+0x90>)
 800229a:	4a23      	ldr	r2, [pc, #140]	@ (8002328 <MX_UART5_Init+0x94>)
 800229c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800229e:	4b21      	ldr	r3, [pc, #132]	@ (8002324 <MX_UART5_Init+0x90>)
 80022a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80022a4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80022a6:	4b1f      	ldr	r3, [pc, #124]	@ (8002324 <MX_UART5_Init+0x90>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80022ac:	4b1d      	ldr	r3, [pc, #116]	@ (8002324 <MX_UART5_Init+0x90>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80022b2:	4b1c      	ldr	r3, [pc, #112]	@ (8002324 <MX_UART5_Init+0x90>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80022b8:	4b1a      	ldr	r3, [pc, #104]	@ (8002324 <MX_UART5_Init+0x90>)
 80022ba:	220c      	movs	r2, #12
 80022bc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022be:	4b19      	ldr	r3, [pc, #100]	@ (8002324 <MX_UART5_Init+0x90>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80022c4:	4b17      	ldr	r3, [pc, #92]	@ (8002324 <MX_UART5_Init+0x90>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022ca:	4b16      	ldr	r3, [pc, #88]	@ (8002324 <MX_UART5_Init+0x90>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80022d0:	4b14      	ldr	r3, [pc, #80]	@ (8002324 <MX_UART5_Init+0x90>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022d6:	4b13      	ldr	r3, [pc, #76]	@ (8002324 <MX_UART5_Init+0x90>)
 80022d8:	2200      	movs	r2, #0
 80022da:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80022dc:	4811      	ldr	r0, [pc, #68]	@ (8002324 <MX_UART5_Init+0x90>)
 80022de:	f006 fa7d 	bl	80087dc <HAL_UART_Init>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <MX_UART5_Init+0x58>
  {
    Error_Handler();
 80022e8:	f000 f8be 	bl	8002468 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022ec:	2100      	movs	r1, #0
 80022ee:	480d      	ldr	r0, [pc, #52]	@ (8002324 <MX_UART5_Init+0x90>)
 80022f0:	f006 ff1e 	bl	8009130 <HAL_UARTEx_SetTxFifoThreshold>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 80022fa:	f000 f8b5 	bl	8002468 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022fe:	2100      	movs	r1, #0
 8002300:	4808      	ldr	r0, [pc, #32]	@ (8002324 <MX_UART5_Init+0x90>)
 8002302:	f006 ff53 	bl	80091ac <HAL_UARTEx_SetRxFifoThreshold>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 800230c:	f000 f8ac 	bl	8002468 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8002310:	4804      	ldr	r0, [pc, #16]	@ (8002324 <MX_UART5_Init+0x90>)
 8002312:	f006 fed4 	bl	80090be <HAL_UARTEx_DisableFifoMode>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 800231c:	f000 f8a4 	bl	8002468 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002320:	bf00      	nop
 8002322:	bd80      	pop	{r7, pc}
 8002324:	200004d0 	.word	0x200004d0
 8002328:	40005000 	.word	0x40005000

0800232c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b08a      	sub	sp, #40	@ 0x28
 8002330:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002332:	f107 0314 	add.w	r3, r7, #20
 8002336:	2200      	movs	r2, #0
 8002338:	601a      	str	r2, [r3, #0]
 800233a:	605a      	str	r2, [r3, #4]
 800233c:	609a      	str	r2, [r3, #8]
 800233e:	60da      	str	r2, [r3, #12]
 8002340:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002342:	4b39      	ldr	r3, [pc, #228]	@ (8002428 <MX_GPIO_Init+0xfc>)
 8002344:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002348:	4a37      	ldr	r2, [pc, #220]	@ (8002428 <MX_GPIO_Init+0xfc>)
 800234a:	f043 0304 	orr.w	r3, r3, #4
 800234e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002352:	4b35      	ldr	r3, [pc, #212]	@ (8002428 <MX_GPIO_Init+0xfc>)
 8002354:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002358:	f003 0304 	and.w	r3, r3, #4
 800235c:	613b      	str	r3, [r7, #16]
 800235e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002360:	4b31      	ldr	r3, [pc, #196]	@ (8002428 <MX_GPIO_Init+0xfc>)
 8002362:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002366:	4a30      	ldr	r2, [pc, #192]	@ (8002428 <MX_GPIO_Init+0xfc>)
 8002368:	f043 0301 	orr.w	r3, r3, #1
 800236c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002370:	4b2d      	ldr	r3, [pc, #180]	@ (8002428 <MX_GPIO_Init+0xfc>)
 8002372:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	60fb      	str	r3, [r7, #12]
 800237c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800237e:	4b2a      	ldr	r3, [pc, #168]	@ (8002428 <MX_GPIO_Init+0xfc>)
 8002380:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002384:	4a28      	ldr	r2, [pc, #160]	@ (8002428 <MX_GPIO_Init+0xfc>)
 8002386:	f043 0302 	orr.w	r3, r3, #2
 800238a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800238e:	4b26      	ldr	r3, [pc, #152]	@ (8002428 <MX_GPIO_Init+0xfc>)
 8002390:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	60bb      	str	r3, [r7, #8]
 800239a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800239c:	4b22      	ldr	r3, [pc, #136]	@ (8002428 <MX_GPIO_Init+0xfc>)
 800239e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023a2:	4a21      	ldr	r2, [pc, #132]	@ (8002428 <MX_GPIO_Init+0xfc>)
 80023a4:	f043 0308 	orr.w	r3, r3, #8
 80023a8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80023ac:	4b1e      	ldr	r3, [pc, #120]	@ (8002428 <MX_GPIO_Init+0xfc>)
 80023ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023b2:	f003 0308 	and.w	r3, r3, #8
 80023b6:	607b      	str	r3, [r7, #4]
 80023b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ADC_RESET_Pin|ADC_CS_Pin|LCD_CS_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 80023ba:	2200      	movs	r2, #0
 80023bc:	f44f 61d8 	mov.w	r1, #1728	@ 0x6c0
 80023c0:	481a      	ldr	r0, [pc, #104]	@ (800242c <MX_GPIO_Init+0x100>)
 80023c2:	f003 f84d 	bl	8005460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ADC_DRDY_Pin */
  GPIO_InitStruct.Pin = ADC_DRDY_Pin;
 80023c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80023ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023cc:	2300      	movs	r3, #0
 80023ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d0:	2300      	movs	r3, #0
 80023d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ADC_DRDY_GPIO_Port, &GPIO_InitStruct);
 80023d4:	f107 0314 	add.w	r3, r7, #20
 80023d8:	4619      	mov	r1, r3
 80023da:	4815      	ldr	r0, [pc, #84]	@ (8002430 <MX_GPIO_Init+0x104>)
 80023dc:	f002 fe9e 	bl	800511c <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC_RESET_Pin ADC_CS_Pin LCD_CS_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ADC_RESET_Pin|ADC_CS_Pin|LCD_CS_Pin|LCD_DISP_Pin;
 80023e0:	f44f 63d8 	mov.w	r3, #1728	@ 0x6c0
 80023e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023e6:	2301      	movs	r3, #1
 80023e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ea:	2300      	movs	r3, #0
 80023ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ee:	2300      	movs	r3, #0
 80023f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023f2:	f107 0314 	add.w	r3, r7, #20
 80023f6:	4619      	mov	r1, r3
 80023f8:	480c      	ldr	r0, [pc, #48]	@ (800242c <MX_GPIO_Init+0x100>)
 80023fa:	f002 fe8f 	bl	800511c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80023fe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002402:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002404:	2302      	movs	r3, #2
 8002406:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002408:	2300      	movs	r3, #0
 800240a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800240c:	2302      	movs	r3, #2
 800240e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002410:	2300      	movs	r3, #0
 8002412:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002414:	f107 0314 	add.w	r3, r7, #20
 8002418:	4619      	mov	r1, r3
 800241a:	4806      	ldr	r0, [pc, #24]	@ (8002434 <MX_GPIO_Init+0x108>)
 800241c:	f002 fe7e 	bl	800511c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002420:	bf00      	nop
 8002422:	3728      	adds	r7, #40	@ 0x28
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	40030c00 	.word	0x40030c00
 800242c:	42020800 	.word	0x42020800
 8002430:	42020400 	.word	0x42020400
 8002434:	42020000 	.word	0x42020000

08002438 <BSP_PB_Callback>:
  * @brief BSP Push Button callback
  * @param Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	4603      	mov	r3, r0
 8002440:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 8002442:	79fb      	ldrb	r3, [r7, #7]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d105      	bne.n	8002454 <BSP_PB_Callback+0x1c>
  {
    // 割り込みハンドラでは電圧変更要求フラグをセットするのみ
    extern volatile uint8_t button_request_change;
    
    // メインループでの処理を要求
    button_request_change = 1;
 8002448:	4b05      	ldr	r3, [pc, #20]	@ (8002460 <BSP_PB_Callback+0x28>)
 800244a:	2201      	movs	r2, #1
 800244c:	701a      	strb	r2, [r3, #0]
    BspButtonState = BUTTON_PRESSED;
 800244e:	4b05      	ldr	r3, [pc, #20]	@ (8002464 <BSP_PB_Callback+0x2c>)
 8002450:	2201      	movs	r2, #1
 8002452:	601a      	str	r2, [r3, #0]
  }
}
 8002454:	bf00      	nop
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr
 8002460:	200005b4 	.word	0x200005b4
 8002464:	20000214 	.word	0x20000214

08002468 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800246c:	b672      	cpsid	i
}
 800246e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002470:	bf00      	nop
 8002472:	e7fd      	b.n	8002470 <Error_Handler+0x8>

08002474 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800247a:	4b0a      	ldr	r3, [pc, #40]	@ (80024a4 <HAL_MspInit+0x30>)
 800247c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002480:	4a08      	ldr	r2, [pc, #32]	@ (80024a4 <HAL_MspInit+0x30>)
 8002482:	f043 0304 	orr.w	r3, r3, #4
 8002486:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800248a:	4b06      	ldr	r3, [pc, #24]	@ (80024a4 <HAL_MspInit+0x30>)
 800248c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002490:	f003 0304 	and.w	r3, r3, #4
 8002494:	607b      	str	r3, [r7, #4]
 8002496:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 8002498:	f003 f94e 	bl	8005738 <HAL_PWREx_EnableVddA>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800249c:	bf00      	nop
 800249e:	3708      	adds	r7, #8
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	40030c00 	.word	0x40030c00

080024a8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b0aa      	sub	sp, #168	@ 0xa8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b0:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	605a      	str	r2, [r3, #4]
 80024ba:	609a      	str	r2, [r3, #8]
 80024bc:	60da      	str	r2, [r3, #12]
 80024be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024c0:	f107 031c 	add.w	r3, r7, #28
 80024c4:	2278      	movs	r2, #120	@ 0x78
 80024c6:	2100      	movs	r1, #0
 80024c8:	4618      	mov	r0, r3
 80024ca:	f007 fcbb 	bl	8009e44 <memset>
  if(hadc->Instance==ADC1)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a4d      	ldr	r2, [pc, #308]	@ (8002608 <HAL_ADC_MspInit+0x160>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d147      	bne.n	8002568 <HAL_ADC_MspInit+0xc0>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 80024d8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80024dc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HCLK;
 80024de:	2300      	movs	r3, #0
 80024e0:	673b      	str	r3, [r7, #112]	@ 0x70
    PeriphClkInit.AdcDacClockDivider = RCC_ADCDACCLK_DIV1;
 80024e2:	2300      	movs	r3, #0
 80024e4:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024e6:	f107 031c 	add.w	r3, r7, #28
 80024ea:	4618      	mov	r0, r3
 80024ec:	f003 febe 	bl	800626c <HAL_RCCEx_PeriphCLKConfig>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 80024f6:	f7ff ffb7 	bl	8002468 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80024fa:	4b44      	ldr	r3, [pc, #272]	@ (800260c <HAL_ADC_MspInit+0x164>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	3301      	adds	r3, #1
 8002500:	4a42      	ldr	r2, [pc, #264]	@ (800260c <HAL_ADC_MspInit+0x164>)
 8002502:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002504:	4b41      	ldr	r3, [pc, #260]	@ (800260c <HAL_ADC_MspInit+0x164>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d10e      	bne.n	800252a <HAL_ADC_MspInit+0x82>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800250c:	4b40      	ldr	r3, [pc, #256]	@ (8002610 <HAL_ADC_MspInit+0x168>)
 800250e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002512:	4a3f      	ldr	r2, [pc, #252]	@ (8002610 <HAL_ADC_MspInit+0x168>)
 8002514:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002518:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800251c:	4b3c      	ldr	r3, [pc, #240]	@ (8002610 <HAL_ADC_MspInit+0x168>)
 800251e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002522:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002526:	61bb      	str	r3, [r7, #24]
 8002528:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800252a:	4b39      	ldr	r3, [pc, #228]	@ (8002610 <HAL_ADC_MspInit+0x168>)
 800252c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002530:	4a37      	ldr	r2, [pc, #220]	@ (8002610 <HAL_ADC_MspInit+0x168>)
 8002532:	f043 0304 	orr.w	r3, r3, #4
 8002536:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800253a:	4b35      	ldr	r3, [pc, #212]	@ (8002610 <HAL_ADC_MspInit+0x168>)
 800253c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002540:	f003 0304 	and.w	r3, r3, #4
 8002544:	617b      	str	r3, [r7, #20]
 8002546:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002548:	2301      	movs	r3, #1
 800254a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800254e:	2303      	movs	r3, #3
 8002550:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002554:	2300      	movs	r3, #0
 8002556:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800255a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800255e:	4619      	mov	r1, r3
 8002560:	482c      	ldr	r0, [pc, #176]	@ (8002614 <HAL_ADC_MspInit+0x16c>)
 8002562:	f002 fddb 	bl	800511c <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002566:	e04b      	b.n	8002600 <HAL_ADC_MspInit+0x158>
  else if(hadc->Instance==ADC2)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a2a      	ldr	r2, [pc, #168]	@ (8002618 <HAL_ADC_MspInit+0x170>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d146      	bne.n	8002600 <HAL_ADC_MspInit+0x158>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8002572:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002576:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HCLK;
 8002578:	2300      	movs	r3, #0
 800257a:	673b      	str	r3, [r7, #112]	@ 0x70
    PeriphClkInit.AdcDacClockDivider = RCC_ADCDACCLK_DIV1;
 800257c:	2300      	movs	r3, #0
 800257e:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002580:	f107 031c 	add.w	r3, r7, #28
 8002584:	4618      	mov	r0, r3
 8002586:	f003 fe71 	bl	800626c <HAL_RCCEx_PeriphCLKConfig>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <HAL_ADC_MspInit+0xec>
      Error_Handler();
 8002590:	f7ff ff6a 	bl	8002468 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002594:	4b1d      	ldr	r3, [pc, #116]	@ (800260c <HAL_ADC_MspInit+0x164>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	3301      	adds	r3, #1
 800259a:	4a1c      	ldr	r2, [pc, #112]	@ (800260c <HAL_ADC_MspInit+0x164>)
 800259c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800259e:	4b1b      	ldr	r3, [pc, #108]	@ (800260c <HAL_ADC_MspInit+0x164>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d10e      	bne.n	80025c4 <HAL_ADC_MspInit+0x11c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80025a6:	4b1a      	ldr	r3, [pc, #104]	@ (8002610 <HAL_ADC_MspInit+0x168>)
 80025a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025ac:	4a18      	ldr	r2, [pc, #96]	@ (8002610 <HAL_ADC_MspInit+0x168>)
 80025ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80025b2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80025b6:	4b16      	ldr	r3, [pc, #88]	@ (8002610 <HAL_ADC_MspInit+0x168>)
 80025b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025c0:	613b      	str	r3, [r7, #16]
 80025c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025c4:	4b12      	ldr	r3, [pc, #72]	@ (8002610 <HAL_ADC_MspInit+0x168>)
 80025c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025ca:	4a11      	ldr	r2, [pc, #68]	@ (8002610 <HAL_ADC_MspInit+0x168>)
 80025cc:	f043 0304 	orr.w	r3, r3, #4
 80025d0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80025d4:	4b0e      	ldr	r3, [pc, #56]	@ (8002610 <HAL_ADC_MspInit+0x168>)
 80025d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025da:	f003 0304 	and.w	r3, r3, #4
 80025de:	60fb      	str	r3, [r7, #12]
 80025e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80025e2:	2308      	movs	r3, #8
 80025e4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025e8:	2303      	movs	r3, #3
 80025ea:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ee:	2300      	movs	r3, #0
 80025f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025f4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80025f8:	4619      	mov	r1, r3
 80025fa:	4806      	ldr	r0, [pc, #24]	@ (8002614 <HAL_ADC_MspInit+0x16c>)
 80025fc:	f002 fd8e 	bl	800511c <HAL_GPIO_Init>
}
 8002600:	bf00      	nop
 8002602:	37a8      	adds	r7, #168	@ 0xa8
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	42028000 	.word	0x42028000
 800260c:	200005c0 	.word	0x200005c0
 8002610:	40030c00 	.word	0x40030c00
 8002614:	42020800 	.word	0x42020800
 8002618:	42028100 	.word	0x42028100

0800261c <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b0a8      	sub	sp, #160	@ 0xa0
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002624:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	605a      	str	r2, [r3, #4]
 800262e:	609a      	str	r2, [r3, #8]
 8002630:	60da      	str	r2, [r3, #12]
 8002632:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002634:	f107 0314 	add.w	r3, r7, #20
 8002638:	2278      	movs	r2, #120	@ 0x78
 800263a:	2100      	movs	r1, #0
 800263c:	4618      	mov	r0, r3
 800263e:	f007 fc01 	bl	8009e44 <memset>
  if(hdac->Instance==DAC1)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a22      	ldr	r2, [pc, #136]	@ (80026d0 <HAL_DAC_MspInit+0xb4>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d13c      	bne.n	80026c6 <HAL_DAC_MspInit+0xaa>

    /* USER CODE END DAC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DAC1SH;
 800264c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002650:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dac1SampleHoldClockSelection = RCC_DAC1SHCLKSOURCE_LSI;
 8002652:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002656:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002658:	f107 0314 	add.w	r3, r7, #20
 800265c:	4618      	mov	r0, r3
 800265e:	f003 fe05 	bl	800626c <HAL_RCCEx_PeriphCLKConfig>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <HAL_DAC_MspInit+0x50>
    {
      Error_Handler();
 8002668:	f7ff fefe 	bl	8002468 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800266c:	4b19      	ldr	r3, [pc, #100]	@ (80026d4 <HAL_DAC_MspInit+0xb8>)
 800266e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002672:	4a18      	ldr	r2, [pc, #96]	@ (80026d4 <HAL_DAC_MspInit+0xb8>)
 8002674:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002678:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800267c:	4b15      	ldr	r3, [pc, #84]	@ (80026d4 <HAL_DAC_MspInit+0xb8>)
 800267e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002682:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002686:	613b      	str	r3, [r7, #16]
 8002688:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800268a:	4b12      	ldr	r3, [pc, #72]	@ (80026d4 <HAL_DAC_MspInit+0xb8>)
 800268c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002690:	4a10      	ldr	r2, [pc, #64]	@ (80026d4 <HAL_DAC_MspInit+0xb8>)
 8002692:	f043 0301 	orr.w	r3, r3, #1
 8002696:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800269a:	4b0e      	ldr	r3, [pc, #56]	@ (80026d4 <HAL_DAC_MspInit+0xb8>)
 800269c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026a0:	f003 0301 	and.w	r3, r3, #1
 80026a4:	60fb      	str	r3, [r7, #12]
 80026a6:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80026a8:	2310      	movs	r3, #16
 80026aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026ae:	2303      	movs	r3, #3
 80026b0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b4:	2300      	movs	r3, #0
 80026b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ba:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80026be:	4619      	mov	r1, r3
 80026c0:	4805      	ldr	r0, [pc, #20]	@ (80026d8 <HAL_DAC_MspInit+0xbc>)
 80026c2:	f002 fd2b 	bl	800511c <HAL_GPIO_Init>

    /* USER CODE END DAC1_MspInit 1 */

  }

}
 80026c6:	bf00      	nop
 80026c8:	37a0      	adds	r7, #160	@ 0xa0
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	42028400 	.word	0x42028400
 80026d4:	40030c00 	.word	0x40030c00
 80026d8:	42020000 	.word	0x42020000

080026dc <HAL_OPAMP_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hopamp: OPAMP handle pointer
  * @retval None
  */
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b08c      	sub	sp, #48	@ 0x30
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e4:	f107 031c 	add.w	r3, r7, #28
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	605a      	str	r2, [r3, #4]
 80026ee:	609a      	str	r2, [r3, #8]
 80026f0:	60da      	str	r2, [r3, #12]
 80026f2:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a46      	ldr	r2, [pc, #280]	@ (8002814 <HAL_OPAMP_MspInit+0x138>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d133      	bne.n	8002766 <HAL_OPAMP_MspInit+0x8a>
  {
    /* USER CODE BEGIN OPAMP1_MspInit 0 */

    /* USER CODE END OPAMP1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_OPAMP_CLK_ENABLED++;
 80026fe:	4b46      	ldr	r3, [pc, #280]	@ (8002818 <HAL_OPAMP_MspInit+0x13c>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	3301      	adds	r3, #1
 8002704:	4a44      	ldr	r2, [pc, #272]	@ (8002818 <HAL_OPAMP_MspInit+0x13c>)
 8002706:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OPAMP_CLK_ENABLED==1){
 8002708:	4b43      	ldr	r3, [pc, #268]	@ (8002818 <HAL_OPAMP_MspInit+0x13c>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d10e      	bne.n	800272e <HAL_OPAMP_MspInit+0x52>
      __HAL_RCC_OPAMP_CLK_ENABLE();
 8002710:	4b42      	ldr	r3, [pc, #264]	@ (800281c <HAL_OPAMP_MspInit+0x140>)
 8002712:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002716:	4a41      	ldr	r2, [pc, #260]	@ (800281c <HAL_OPAMP_MspInit+0x140>)
 8002718:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800271c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002720:	4b3e      	ldr	r3, [pc, #248]	@ (800281c <HAL_OPAMP_MspInit+0x140>)
 8002722:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002726:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800272a:	61bb      	str	r3, [r7, #24]
 800272c:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800272e:	4b3b      	ldr	r3, [pc, #236]	@ (800281c <HAL_OPAMP_MspInit+0x140>)
 8002730:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002734:	4a39      	ldr	r2, [pc, #228]	@ (800281c <HAL_OPAMP_MspInit+0x140>)
 8002736:	f043 0301 	orr.w	r3, r3, #1
 800273a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800273e:	4b37      	ldr	r3, [pc, #220]	@ (800281c <HAL_OPAMP_MspInit+0x140>)
 8002740:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	617b      	str	r3, [r7, #20]
 800274a:	697b      	ldr	r3, [r7, #20]
    /**OPAMP1 GPIO Configuration
    PA0     ------> OPAMP1_VINP
    PA3     ------> OPAMP1_VOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 800274c:	2309      	movs	r3, #9
 800274e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002750:	2303      	movs	r3, #3
 8002752:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002754:	2300      	movs	r3, #0
 8002756:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002758:	f107 031c 	add.w	r3, r7, #28
 800275c:	4619      	mov	r1, r3
 800275e:	4830      	ldr	r0, [pc, #192]	@ (8002820 <HAL_OPAMP_MspInit+0x144>)
 8002760:	f002 fcdc 	bl	800511c <HAL_GPIO_Init>
    /* USER CODE BEGIN OPAMP2_MspInit 1 */

    /* USER CODE END OPAMP2_MspInit 1 */
  }

}
 8002764:	e052      	b.n	800280c <HAL_OPAMP_MspInit+0x130>
  else if(hopamp->Instance==OPAMP2)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a2e      	ldr	r2, [pc, #184]	@ (8002824 <HAL_OPAMP_MspInit+0x148>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d14d      	bne.n	800280c <HAL_OPAMP_MspInit+0x130>
    HAL_RCC_OPAMP_CLK_ENABLED++;
 8002770:	4b29      	ldr	r3, [pc, #164]	@ (8002818 <HAL_OPAMP_MspInit+0x13c>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	3301      	adds	r3, #1
 8002776:	4a28      	ldr	r2, [pc, #160]	@ (8002818 <HAL_OPAMP_MspInit+0x13c>)
 8002778:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OPAMP_CLK_ENABLED==1){
 800277a:	4b27      	ldr	r3, [pc, #156]	@ (8002818 <HAL_OPAMP_MspInit+0x13c>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d10e      	bne.n	80027a0 <HAL_OPAMP_MspInit+0xc4>
      __HAL_RCC_OPAMP_CLK_ENABLE();
 8002782:	4b26      	ldr	r3, [pc, #152]	@ (800281c <HAL_OPAMP_MspInit+0x140>)
 8002784:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002788:	4a24      	ldr	r2, [pc, #144]	@ (800281c <HAL_OPAMP_MspInit+0x140>)
 800278a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800278e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002792:	4b22      	ldr	r3, [pc, #136]	@ (800281c <HAL_OPAMP_MspInit+0x140>)
 8002794:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002798:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800279c:	613b      	str	r3, [r7, #16]
 800279e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027a0:	4b1e      	ldr	r3, [pc, #120]	@ (800281c <HAL_OPAMP_MspInit+0x140>)
 80027a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80027a6:	4a1d      	ldr	r2, [pc, #116]	@ (800281c <HAL_OPAMP_MspInit+0x140>)
 80027a8:	f043 0301 	orr.w	r3, r3, #1
 80027ac:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80027b0:	4b1a      	ldr	r3, [pc, #104]	@ (800281c <HAL_OPAMP_MspInit+0x140>)
 80027b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	60fb      	str	r3, [r7, #12]
 80027bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027be:	4b17      	ldr	r3, [pc, #92]	@ (800281c <HAL_OPAMP_MspInit+0x140>)
 80027c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80027c4:	4a15      	ldr	r2, [pc, #84]	@ (800281c <HAL_OPAMP_MspInit+0x140>)
 80027c6:	f043 0302 	orr.w	r3, r3, #2
 80027ca:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80027ce:	4b13      	ldr	r3, [pc, #76]	@ (800281c <HAL_OPAMP_MspInit+0x140>)
 80027d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80027d4:	f003 0302 	and.w	r3, r3, #2
 80027d8:	60bb      	str	r3, [r7, #8]
 80027da:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80027dc:	2340      	movs	r3, #64	@ 0x40
 80027de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027e0:	2303      	movs	r3, #3
 80027e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e4:	2300      	movs	r3, #0
 80027e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027e8:	f107 031c 	add.w	r3, r7, #28
 80027ec:	4619      	mov	r1, r3
 80027ee:	480c      	ldr	r0, [pc, #48]	@ (8002820 <HAL_OPAMP_MspInit+0x144>)
 80027f0:	f002 fc94 	bl	800511c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80027f4:	2301      	movs	r3, #1
 80027f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027f8:	2303      	movs	r3, #3
 80027fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fc:	2300      	movs	r3, #0
 80027fe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002800:	f107 031c 	add.w	r3, r7, #28
 8002804:	4619      	mov	r1, r3
 8002806:	4808      	ldr	r0, [pc, #32]	@ (8002828 <HAL_OPAMP_MspInit+0x14c>)
 8002808:	f002 fc88 	bl	800511c <HAL_GPIO_Init>
}
 800280c:	bf00      	nop
 800280e:	3730      	adds	r7, #48	@ 0x30
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	40007000 	.word	0x40007000
 8002818:	200005c4 	.word	0x200005c4
 800281c:	40030c00 	.word	0x40030c00
 8002820:	42020000 	.word	0x42020000
 8002824:	40007010 	.word	0x40007010
 8002828:	42020400 	.word	0x42020400

0800282c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b0aa      	sub	sp, #168	@ 0xa8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002834:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]
 800283c:	605a      	str	r2, [r3, #4]
 800283e:	609a      	str	r2, [r3, #8]
 8002840:	60da      	str	r2, [r3, #12]
 8002842:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002844:	f107 031c 	add.w	r3, r7, #28
 8002848:	2278      	movs	r2, #120	@ 0x78
 800284a:	2100      	movs	r1, #0
 800284c:	4618      	mov	r0, r3
 800284e:	f007 faf9 	bl	8009e44 <memset>
  if(hspi->Instance==SPI1)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a65      	ldr	r2, [pc, #404]	@ (80029ec <HAL_SPI_MspInit+0x1c0>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d142      	bne.n	80028e2 <HAL_SPI_MspInit+0xb6>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800285c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002860:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PCLK2;
 8002862:	2300      	movs	r3, #0
 8002864:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002866:	f107 031c 	add.w	r3, r7, #28
 800286a:	4618      	mov	r0, r3
 800286c:	f003 fcfe 	bl	800626c <HAL_RCCEx_PeriphCLKConfig>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8002876:	f7ff fdf7 	bl	8002468 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800287a:	4b5d      	ldr	r3, [pc, #372]	@ (80029f0 <HAL_SPI_MspInit+0x1c4>)
 800287c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002880:	4a5b      	ldr	r2, [pc, #364]	@ (80029f0 <HAL_SPI_MspInit+0x1c4>)
 8002882:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002886:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800288a:	4b59      	ldr	r3, [pc, #356]	@ (80029f0 <HAL_SPI_MspInit+0x1c4>)
 800288c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002890:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002894:	61bb      	str	r3, [r7, #24]
 8002896:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002898:	4b55      	ldr	r3, [pc, #340]	@ (80029f0 <HAL_SPI_MspInit+0x1c4>)
 800289a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800289e:	4a54      	ldr	r2, [pc, #336]	@ (80029f0 <HAL_SPI_MspInit+0x1c4>)
 80028a0:	f043 0301 	orr.w	r3, r3, #1
 80028a4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80028a8:	4b51      	ldr	r3, [pc, #324]	@ (80029f0 <HAL_SPI_MspInit+0x1c4>)
 80028aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028ae:	f003 0301 	and.w	r3, r3, #1
 80028b2:	617b      	str	r3, [r7, #20]
 80028b4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80028b6:	23a0      	movs	r3, #160	@ 0xa0
 80028b8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028bc:	2302      	movs	r3, #2
 80028be:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c2:	2300      	movs	r3, #0
 80028c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c8:	2300      	movs	r3, #0
 80028ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80028ce:	2305      	movs	r3, #5
 80028d0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028d4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80028d8:	4619      	mov	r1, r3
 80028da:	4846      	ldr	r0, [pc, #280]	@ (80029f4 <HAL_SPI_MspInit+0x1c8>)
 80028dc:	f002 fc1e 	bl	800511c <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
  }

}
 80028e0:	e080      	b.n	80029e4 <HAL_SPI_MspInit+0x1b8>
  else if(hspi->Instance==SPI2)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a44      	ldr	r2, [pc, #272]	@ (80029f8 <HAL_SPI_MspInit+0x1cc>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d17b      	bne.n	80029e4 <HAL_SPI_MspInit+0x1b8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80028ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80028f0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Spi2ClockSelection = RCC_SPI2CLKSOURCE_PCLK1;
 80028f2:	2300      	movs	r3, #0
 80028f4:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028f6:	f107 031c 	add.w	r3, r7, #28
 80028fa:	4618      	mov	r0, r3
 80028fc:	f003 fcb6 	bl	800626c <HAL_RCCEx_PeriphCLKConfig>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <HAL_SPI_MspInit+0xde>
      Error_Handler();
 8002906:	f7ff fdaf 	bl	8002468 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800290a:	4b39      	ldr	r3, [pc, #228]	@ (80029f0 <HAL_SPI_MspInit+0x1c4>)
 800290c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002910:	4a37      	ldr	r2, [pc, #220]	@ (80029f0 <HAL_SPI_MspInit+0x1c4>)
 8002912:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002916:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800291a:	4b35      	ldr	r3, [pc, #212]	@ (80029f0 <HAL_SPI_MspInit+0x1c4>)
 800291c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002920:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002924:	613b      	str	r3, [r7, #16]
 8002926:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002928:	4b31      	ldr	r3, [pc, #196]	@ (80029f0 <HAL_SPI_MspInit+0x1c4>)
 800292a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800292e:	4a30      	ldr	r2, [pc, #192]	@ (80029f0 <HAL_SPI_MspInit+0x1c4>)
 8002930:	f043 0304 	orr.w	r3, r3, #4
 8002934:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002938:	4b2d      	ldr	r3, [pc, #180]	@ (80029f0 <HAL_SPI_MspInit+0x1c4>)
 800293a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800293e:	f003 0304 	and.w	r3, r3, #4
 8002942:	60fb      	str	r3, [r7, #12]
 8002944:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002946:	4b2a      	ldr	r3, [pc, #168]	@ (80029f0 <HAL_SPI_MspInit+0x1c4>)
 8002948:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800294c:	4a28      	ldr	r2, [pc, #160]	@ (80029f0 <HAL_SPI_MspInit+0x1c4>)
 800294e:	f043 0302 	orr.w	r3, r3, #2
 8002952:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002956:	4b26      	ldr	r3, [pc, #152]	@ (80029f0 <HAL_SPI_MspInit+0x1c4>)
 8002958:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	60bb      	str	r3, [r7, #8]
 8002962:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002964:	2302      	movs	r3, #2
 8002966:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800296a:	2302      	movs	r3, #2
 800296c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002970:	2300      	movs	r3, #0
 8002972:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002976:	2300      	movs	r3, #0
 8002978:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 800297c:	2303      	movs	r3, #3
 800297e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002982:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002986:	4619      	mov	r1, r3
 8002988:	481c      	ldr	r0, [pc, #112]	@ (80029fc <HAL_SPI_MspInit+0x1d0>)
 800298a:	f002 fbc7 	bl	800511c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800298e:	2304      	movs	r3, #4
 8002990:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002994:	2302      	movs	r3, #2
 8002996:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299a:	2300      	movs	r3, #0
 800299c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029a0:	2300      	movs	r3, #0
 80029a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80029a6:	2305      	movs	r3, #5
 80029a8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029ac:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80029b0:	4619      	mov	r1, r3
 80029b2:	4812      	ldr	r0, [pc, #72]	@ (80029fc <HAL_SPI_MspInit+0x1d0>)
 80029b4:	f002 fbb2 	bl	800511c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80029b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80029bc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c0:	2302      	movs	r3, #2
 80029c2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c6:	2300      	movs	r3, #0
 80029c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029cc:	2300      	movs	r3, #0
 80029ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80029d2:	2305      	movs	r3, #5
 80029d4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029d8:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80029dc:	4619      	mov	r1, r3
 80029de:	4808      	ldr	r0, [pc, #32]	@ (8002a00 <HAL_SPI_MspInit+0x1d4>)
 80029e0:	f002 fb9c 	bl	800511c <HAL_GPIO_Init>
}
 80029e4:	bf00      	nop
 80029e6:	37a8      	adds	r7, #168	@ 0xa8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	40013000 	.word	0x40013000
 80029f0:	40030c00 	.word	0x40030c00
 80029f4:	42020000 	.word	0x42020000
 80029f8:	40003800 	.word	0x40003800
 80029fc:	42020800 	.word	0x42020800
 8002a00:	42020400 	.word	0x42020400

08002a04 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a0b      	ldr	r2, [pc, #44]	@ (8002a40 <HAL_TIM_Base_MspInit+0x3c>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d10e      	bne.n	8002a34 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a16:	4b0b      	ldr	r3, [pc, #44]	@ (8002a44 <HAL_TIM_Base_MspInit+0x40>)
 8002a18:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002a1c:	4a09      	ldr	r2, [pc, #36]	@ (8002a44 <HAL_TIM_Base_MspInit+0x40>)
 8002a1e:	f043 0302 	orr.w	r3, r3, #2
 8002a22:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002a26:	4b07      	ldr	r3, [pc, #28]	@ (8002a44 <HAL_TIM_Base_MspInit+0x40>)
 8002a28:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	60fb      	str	r3, [r7, #12]
 8002a32:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8002a34:	bf00      	nop
 8002a36:	3714      	adds	r7, #20
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr
 8002a40:	40000400 	.word	0x40000400
 8002a44:	40030c00 	.word	0x40030c00

08002a48 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b088      	sub	sp, #32
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a50:	f107 030c 	add.w	r3, r7, #12
 8002a54:	2200      	movs	r2, #0
 8002a56:	601a      	str	r2, [r3, #0]
 8002a58:	605a      	str	r2, [r3, #4]
 8002a5a:	609a      	str	r2, [r3, #8]
 8002a5c:	60da      	str	r2, [r3, #12]
 8002a5e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a13      	ldr	r2, [pc, #76]	@ (8002ab4 <HAL_TIM_MspPostInit+0x6c>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d11f      	bne.n	8002aaa <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a6a:	4b13      	ldr	r3, [pc, #76]	@ (8002ab8 <HAL_TIM_MspPostInit+0x70>)
 8002a6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a70:	4a11      	ldr	r2, [pc, #68]	@ (8002ab8 <HAL_TIM_MspPostInit+0x70>)
 8002a72:	f043 0304 	orr.w	r3, r3, #4
 8002a76:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002a7a:	4b0f      	ldr	r3, [pc, #60]	@ (8002ab8 <HAL_TIM_MspPostInit+0x70>)
 8002a7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a80:	f003 0304 	and.w	r3, r3, #4
 8002a84:	60bb      	str	r3, [r7, #8]
 8002a86:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = LCD_EXTCOMIN_Pin;
 8002a88:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a8c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a8e:	2302      	movs	r3, #2
 8002a90:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a92:	2300      	movs	r3, #0
 8002a94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a96:	2300      	movs	r3, #0
 8002a98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LCD_EXTCOMIN_GPIO_Port, &GPIO_InitStruct);
 8002a9e:	f107 030c 	add.w	r3, r7, #12
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	4805      	ldr	r0, [pc, #20]	@ (8002abc <HAL_TIM_MspPostInit+0x74>)
 8002aa6:	f002 fb39 	bl	800511c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002aaa:	bf00      	nop
 8002aac:	3720      	adds	r7, #32
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	40000400 	.word	0x40000400
 8002ab8:	40030c00 	.word	0x40030c00
 8002abc:	42020800 	.word	0x42020800

08002ac0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b0a8      	sub	sp, #160	@ 0xa0
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac8:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8002acc:	2200      	movs	r2, #0
 8002ace:	601a      	str	r2, [r3, #0]
 8002ad0:	605a      	str	r2, [r3, #4]
 8002ad2:	609a      	str	r2, [r3, #8]
 8002ad4:	60da      	str	r2, [r3, #12]
 8002ad6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ad8:	f107 0314 	add.w	r3, r7, #20
 8002adc:	2278      	movs	r2, #120	@ 0x78
 8002ade:	2100      	movs	r1, #0
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f007 f9af 	bl	8009e44 <memset>
  if(huart->Instance==UART5)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a36      	ldr	r2, [pc, #216]	@ (8002bc4 <HAL_UART_MspInit+0x104>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d165      	bne.n	8002bbc <HAL_UART_MspInit+0xfc>

    /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002af0:	2308      	movs	r3, #8
 8002af2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8002af4:	2300      	movs	r3, #0
 8002af6:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002af8:	f107 0314 	add.w	r3, r7, #20
 8002afc:	4618      	mov	r0, r3
 8002afe:	f003 fbb5 	bl	800626c <HAL_RCCEx_PeriphCLKConfig>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002b08:	f7ff fcae 	bl	8002468 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002b0c:	4b2e      	ldr	r3, [pc, #184]	@ (8002bc8 <HAL_UART_MspInit+0x108>)
 8002b0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002b12:	4a2d      	ldr	r2, [pc, #180]	@ (8002bc8 <HAL_UART_MspInit+0x108>)
 8002b14:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b18:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002b1c:	4b2a      	ldr	r3, [pc, #168]	@ (8002bc8 <HAL_UART_MspInit+0x108>)
 8002b1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002b22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b26:	613b      	str	r3, [r7, #16]
 8002b28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b2a:	4b27      	ldr	r3, [pc, #156]	@ (8002bc8 <HAL_UART_MspInit+0x108>)
 8002b2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b30:	4a25      	ldr	r2, [pc, #148]	@ (8002bc8 <HAL_UART_MspInit+0x108>)
 8002b32:	f043 0304 	orr.w	r3, r3, #4
 8002b36:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002b3a:	4b23      	ldr	r3, [pc, #140]	@ (8002bc8 <HAL_UART_MspInit+0x108>)
 8002b3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b40:	f003 0304 	and.w	r3, r3, #4
 8002b44:	60fb      	str	r3, [r7, #12]
 8002b46:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b48:	4b1f      	ldr	r3, [pc, #124]	@ (8002bc8 <HAL_UART_MspInit+0x108>)
 8002b4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b4e:	4a1e      	ldr	r2, [pc, #120]	@ (8002bc8 <HAL_UART_MspInit+0x108>)
 8002b50:	f043 0308 	orr.w	r3, r3, #8
 8002b54:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002b58:	4b1b      	ldr	r3, [pc, #108]	@ (8002bc8 <HAL_UART_MspInit+0x108>)
 8002b5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b5e:	f003 0308 	and.w	r3, r3, #8
 8002b62:	60bb      	str	r3, [r7, #8]
 8002b64:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002b66:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b6a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b6e:	2302      	movs	r3, #2
 8002b70:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b74:	2300      	movs	r3, #0
 8002b76:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002b80:	2308      	movs	r3, #8
 8002b82:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b86:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	480f      	ldr	r0, [pc, #60]	@ (8002bcc <HAL_UART_MspInit+0x10c>)
 8002b8e:	f002 fac5 	bl	800511c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002b92:	2304      	movs	r3, #4
 8002b94:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b98:	2302      	movs	r3, #2
 8002b9a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002baa:	2308      	movs	r3, #8
 8002bac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002bb0:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	4806      	ldr	r0, [pc, #24]	@ (8002bd0 <HAL_UART_MspInit+0x110>)
 8002bb8:	f002 fab0 	bl	800511c <HAL_GPIO_Init>

    /* USER CODE END UART5_MspInit 1 */

  }

}
 8002bbc:	bf00      	nop
 8002bbe:	37a0      	adds	r7, #160	@ 0xa0
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	40005000 	.word	0x40005000
 8002bc8:	40030c00 	.word	0x40030c00
 8002bcc:	42020800 	.word	0x42020800
 8002bd0:	42020c00 	.word	0x42020c00

08002bd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002bd8:	bf00      	nop
 8002bda:	e7fd      	b.n	8002bd8 <NMI_Handler+0x4>

08002bdc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002be0:	bf00      	nop
 8002be2:	e7fd      	b.n	8002be0 <HardFault_Handler+0x4>

08002be4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002be8:	bf00      	nop
 8002bea:	e7fd      	b.n	8002be8 <MemManage_Handler+0x4>

08002bec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bf0:	bf00      	nop
 8002bf2:	e7fd      	b.n	8002bf0 <BusFault_Handler+0x4>

08002bf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bf8:	bf00      	nop
 8002bfa:	e7fd      	b.n	8002bf8 <UsageFault_Handler+0x4>

08002bfc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c00:	bf00      	nop
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr

08002c0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c0e:	bf00      	nop
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c1c:	bf00      	nop
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr

08002c26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c2a:	f000 fb7f 	bl	800332c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c2e:	bf00      	nop
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8002c36:	2000      	movs	r0, #0
 8002c38:	f000 f9e4 	bl	8003004 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8002c3c:	bf00      	nop
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0
  return 1;
 8002c44:	2301      	movs	r3, #1
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <_kill>:

int _kill(int pid, int sig)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002c5a:	f007 f8fb 	bl	8009e54 <__errno>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2216      	movs	r2, #22
 8002c62:	601a      	str	r2, [r3, #0]
  return -1;
 8002c64:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3708      	adds	r7, #8
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <_exit>:

void _exit (int status)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002c78:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f7ff ffe7 	bl	8002c50 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002c82:	bf00      	nop
 8002c84:	e7fd      	b.n	8002c82 <_exit+0x12>

08002c86 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b086      	sub	sp, #24
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	60f8      	str	r0, [r7, #12]
 8002c8e:	60b9      	str	r1, [r7, #8]
 8002c90:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c92:	2300      	movs	r3, #0
 8002c94:	617b      	str	r3, [r7, #20]
 8002c96:	e00a      	b.n	8002cae <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c98:	f3af 8000 	nop.w
 8002c9c:	4601      	mov	r1, r0
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	1c5a      	adds	r2, r3, #1
 8002ca2:	60ba      	str	r2, [r7, #8]
 8002ca4:	b2ca      	uxtb	r2, r1
 8002ca6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	3301      	adds	r3, #1
 8002cac:	617b      	str	r3, [r7, #20]
 8002cae:	697a      	ldr	r2, [r7, #20]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	dbf0      	blt.n	8002c98 <_read+0x12>
  }

  return len;
 8002cb6:	687b      	ldr	r3, [r7, #4]
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3718      	adds	r7, #24
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ccc:	2300      	movs	r3, #0
 8002cce:	617b      	str	r3, [r7, #20]
 8002cd0:	e009      	b.n	8002ce6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	1c5a      	adds	r2, r3, #1
 8002cd6:	60ba      	str	r2, [r7, #8]
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f000 fa0c 	bl	80030f8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	617b      	str	r3, [r7, #20]
 8002ce6:	697a      	ldr	r2, [r7, #20]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	dbf1      	blt.n	8002cd2 <_write+0x12>
  }
  return len;
 8002cee:	687b      	ldr	r3, [r7, #4]
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3718      	adds	r7, #24
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <_close>:

int _close(int file)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d00:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002d20:	605a      	str	r2, [r3, #4]
  return 0;
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <_isatty>:

int _isatty(int file)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002d38:	2301      	movs	r3, #1
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr

08002d46 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d46:	b480      	push	{r7}
 8002d48:	b085      	sub	sp, #20
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	60f8      	str	r0, [r7, #12]
 8002d4e:	60b9      	str	r1, [r7, #8]
 8002d50:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002d52:	2300      	movs	r3, #0
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3714      	adds	r7, #20
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b086      	sub	sp, #24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d68:	4a14      	ldr	r2, [pc, #80]	@ (8002dbc <_sbrk+0x5c>)
 8002d6a:	4b15      	ldr	r3, [pc, #84]	@ (8002dc0 <_sbrk+0x60>)
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d74:	4b13      	ldr	r3, [pc, #76]	@ (8002dc4 <_sbrk+0x64>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d102      	bne.n	8002d82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d7c:	4b11      	ldr	r3, [pc, #68]	@ (8002dc4 <_sbrk+0x64>)
 8002d7e:	4a12      	ldr	r2, [pc, #72]	@ (8002dc8 <_sbrk+0x68>)
 8002d80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d82:	4b10      	ldr	r3, [pc, #64]	@ (8002dc4 <_sbrk+0x64>)
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4413      	add	r3, r2
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d207      	bcs.n	8002da0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d90:	f007 f860 	bl	8009e54 <__errno>
 8002d94:	4603      	mov	r3, r0
 8002d96:	220c      	movs	r2, #12
 8002d98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d9a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002d9e:	e009      	b.n	8002db4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002da0:	4b08      	ldr	r3, [pc, #32]	@ (8002dc4 <_sbrk+0x64>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002da6:	4b07      	ldr	r3, [pc, #28]	@ (8002dc4 <_sbrk+0x64>)
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4413      	add	r3, r2
 8002dae:	4a05      	ldr	r2, [pc, #20]	@ (8002dc4 <_sbrk+0x64>)
 8002db0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002db2:	68fb      	ldr	r3, [r7, #12]
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3718      	adds	r7, #24
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	20030000 	.word	0x20030000
 8002dc0:	00000400 	.word	0x00000400
 8002dc4:	200005c8 	.word	0x200005c8
 8002dc8:	200007c0 	.word	0x200007c0

08002dcc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002dd0:	4b06      	ldr	r3, [pc, #24]	@ (8002dec <SystemInit+0x20>)
 8002dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dd6:	4a05      	ldr	r2, [pc, #20]	@ (8002dec <SystemInit+0x20>)
 8002dd8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ddc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002de0:	bf00      	nop
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	e000ed00 	.word	0xe000ed00

08002df0 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR1 & RCC_CFGR1_SWS)
 8002df6:	4b2c      	ldr	r3, [pc, #176]	@ (8002ea8 <SystemCoreClockUpdate+0xb8>)
 8002df8:	69db      	ldr	r3, [r3, #28]
 8002dfa:	f003 030c 	and.w	r3, r3, #12
 8002dfe:	2b08      	cmp	r3, #8
 8002e00:	d034      	beq.n	8002e6c <SystemCoreClockUpdate+0x7c>
 8002e02:	2b08      	cmp	r3, #8
 8002e04:	d836      	bhi.n	8002e74 <SystemCoreClockUpdate+0x84>
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d002      	beq.n	8002e10 <SystemCoreClockUpdate+0x20>
 8002e0a:	2b04      	cmp	r3, #4
 8002e0c:	d02a      	beq.n	8002e64 <SystemCoreClockUpdate+0x74>
 8002e0e:	e031      	b.n	8002e74 <SystemCoreClockUpdate+0x84>
  {
  case 0x00:  /* MSIS used as system clock source */
    /* Read RCC ICSR1 register */
    tmp = RCC->ICSCR1;
 8002e10:	4b25      	ldr	r3, [pc, #148]	@ (8002ea8 <SystemCoreClockUpdate+0xb8>)
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	603b      	str	r3, [r7, #0]
    /* Check which MSIS Range is selected */
    if ((tmp & RCC_ICSCR1_MSIRGSEL) != 0x00u)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d00f      	beq.n	8002e40 <SystemCoreClockUpdate+0x50>
    {
      /* Check which MSIRCx is selected as MSIS source */
      if ((tmp & RCC_ICSCR1_MSISSEL) != 0x00u)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	da03      	bge.n	8002e2e <SystemCoreClockUpdate+0x3e>
      {
        /* MSI RC1 is selected */
        SystemCoreClock = MSIRC1_VALUE;
 8002e26:	4b21      	ldr	r3, [pc, #132]	@ (8002eac <SystemCoreClockUpdate+0xbc>)
 8002e28:	4a21      	ldr	r2, [pc, #132]	@ (8002eb0 <SystemCoreClockUpdate+0xc0>)
 8002e2a:	601a      	str	r2, [r3, #0]
 8002e2c:	e002      	b.n	8002e34 <SystemCoreClockUpdate+0x44>
      }
      else
      {
        /* MSI RC0 is selected */
        SystemCoreClock = MSIRC0_VALUE;
 8002e2e:	4b1f      	ldr	r3, [pc, #124]	@ (8002eac <SystemCoreClockUpdate+0xbc>)
 8002e30:	4a20      	ldr	r2, [pc, #128]	@ (8002eb4 <SystemCoreClockUpdate+0xc4>)
 8002e32:	601a      	str	r2, [r3, #0]
      }

      /* Get MSIS range */
      msirange = (tmp & RCC_ICSCR1_MSISDIV) >> RCC_ICSCR1_MSISDIV_Pos;
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	0f5b      	lsrs	r3, r3, #29
 8002e38:	f003 0303 	and.w	r3, r3, #3
 8002e3c:	607b      	str	r3, [r7, #4]
 8002e3e:	e009      	b.n	8002e54 <SystemCoreClockUpdate+0x64>
    }
    else
    {
      /* MSI RC1 is selected */
      SystemCoreClock = MSIRC1_VALUE;
 8002e40:	4b1a      	ldr	r3, [pc, #104]	@ (8002eac <SystemCoreClockUpdate+0xbc>)
 8002e42:	4a1b      	ldr	r2, [pc, #108]	@ (8002eb0 <SystemCoreClockUpdate+0xc0>)
 8002e44:	601a      	str	r2, [r3, #0]

      /* Get MSIS range */
      msirange = (RCC->CSR & (RCC_CSR_MSISDIVS_1 | RCC_CSR_MSISDIVS_0)) >> RCC_CSR_MSISDIVS_Pos;
 8002e46:	4b18      	ldr	r3, [pc, #96]	@ (8002ea8 <SystemCoreClockUpdate+0xb8>)
 8002e48:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8002e4c:	0b1b      	lsrs	r3, r3, #12
 8002e4e:	f003 0303 	and.w	r3, r3, #3
 8002e52:	607b      	str	r3, [r7, #4]
    }

    /*MSIS frequency in HZ*/
    SystemCoreClock >>= msirange;
 8002e54:	4b15      	ldr	r3, [pc, #84]	@ (8002eac <SystemCoreClockUpdate+0xbc>)
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e5e:	4a13      	ldr	r2, [pc, #76]	@ (8002eac <SystemCoreClockUpdate+0xbc>)
 8002e60:	6013      	str	r3, [r2, #0]
    break;
 8002e62:	e00c      	b.n	8002e7e <SystemCoreClockUpdate+0x8e>

  case RCC_CFGR1_SWS_0:  /* HSI used as system clock source */
    SystemCoreClock = HSI_VALUE;
 8002e64:	4b11      	ldr	r3, [pc, #68]	@ (8002eac <SystemCoreClockUpdate+0xbc>)
 8002e66:	4a14      	ldr	r2, [pc, #80]	@ (8002eb8 <SystemCoreClockUpdate+0xc8>)
 8002e68:	601a      	str	r2, [r3, #0]
    break;
 8002e6a:	e008      	b.n	8002e7e <SystemCoreClockUpdate+0x8e>

  case RCC_CFGR1_SWS_1:  /* HSE used as system clock source */
    SystemCoreClock = HSE_VALUE;
 8002e6c:	4b0f      	ldr	r3, [pc, #60]	@ (8002eac <SystemCoreClockUpdate+0xbc>)
 8002e6e:	4a12      	ldr	r2, [pc, #72]	@ (8002eb8 <SystemCoreClockUpdate+0xc8>)
 8002e70:	601a      	str	r2, [r3, #0]
    break;
 8002e72:	e004      	b.n	8002e7e <SystemCoreClockUpdate+0x8e>

  default:
    SystemCoreClock = 0xFFFFFFFFu;
 8002e74:	4b0d      	ldr	r3, [pc, #52]	@ (8002eac <SystemCoreClockUpdate+0xbc>)
 8002e76:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002e7a:	601a      	str	r2, [r3, #0]
    break;
 8002e7c:	bf00      	nop
  }

  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos)];
 8002e7e:	4b0a      	ldr	r3, [pc, #40]	@ (8002ea8 <SystemCoreClockUpdate+0xb8>)
 8002e80:	6a1b      	ldr	r3, [r3, #32]
 8002e82:	f003 030f 	and.w	r3, r3, #15
 8002e86:	4a0d      	ldr	r2, [pc, #52]	@ (8002ebc <SystemCoreClockUpdate+0xcc>)
 8002e88:	5cd3      	ldrb	r3, [r2, r3]
 8002e8a:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8002e8c:	4b07      	ldr	r3, [pc, #28]	@ (8002eac <SystemCoreClockUpdate+0xbc>)
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	fa22 f303 	lsr.w	r3, r2, r3
 8002e96:	4a05      	ldr	r2, [pc, #20]	@ (8002eac <SystemCoreClockUpdate+0xbc>)
 8002e98:	6013      	str	r3, [r2, #0]
}
 8002e9a:	bf00      	nop
 8002e9c:	370c      	adds	r7, #12
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	40030c00 	.word	0x40030c00
 8002eac:	20000004 	.word	0x20000004
 8002eb0:	016e3600 	.word	0x016e3600
 8002eb4:	05b8d800 	.word	0x05b8d800
 8002eb8:	00f42400 	.word	0x00f42400
 8002ebc:	080231c0 	.word	0x080231c0

08002ec0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8002ec0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002ef8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002ec4:	f7ff ff82 	bl	8002dcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002ec8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002eca:	e003      	b.n	8002ed4 <LoopCopyDataInit>

08002ecc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002ecc:	4b0b      	ldr	r3, [pc, #44]	@ (8002efc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002ece:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002ed0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002ed2:	3104      	adds	r1, #4

08002ed4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002ed4:	480a      	ldr	r0, [pc, #40]	@ (8002f00 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002ed6:	4b0b      	ldr	r3, [pc, #44]	@ (8002f04 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002ed8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002eda:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002edc:	d3f6      	bcc.n	8002ecc <CopyDataInit>
	ldr	r2, =_sbss
 8002ede:	4a0a      	ldr	r2, [pc, #40]	@ (8002f08 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002ee0:	e002      	b.n	8002ee8 <LoopFillZerobss>

08002ee2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002ee2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002ee4:	f842 3b04 	str.w	r3, [r2], #4

08002ee8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002ee8:	4b08      	ldr	r3, [pc, #32]	@ (8002f0c <LoopForever+0x16>)
	cmp	r2, r3
 8002eea:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002eec:	d3f9      	bcc.n	8002ee2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002eee:	f006 ffb7 	bl	8009e60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002ef2:	f7fe fa2f 	bl	8001354 <main>

08002ef6 <LoopForever>:

LoopForever:
    b LoopForever
 8002ef6:	e7fe      	b.n	8002ef6 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8002ef8:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8002efc:	080235d4 	.word	0x080235d4
	ldr	r0, =_sdata
 8002f00:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002f04:	200001e8 	.word	0x200001e8
	ldr	r2, =_sbss
 8002f08:	200001e8 	.word	0x200001e8
	ldr	r3, = _ebss
 8002f0c:	200007c0 	.word	0x200007c0

08002f10 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002f10:	e7fe      	b.n	8002f10 <ADC1_IRQHandler>
	...

08002f14 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b088      	sub	sp, #32
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	460a      	mov	r2, r1
 8002f1e:	71fb      	strb	r3, [r7, #7]
 8002f20:	4613      	mov	r3, r2
 8002f22:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8002f24:	4b31      	ldr	r3, [pc, #196]	@ (8002fec <BSP_PB_Init+0xd8>)
 8002f26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f2a:	4a30      	ldr	r2, [pc, #192]	@ (8002fec <BSP_PB_Init+0xd8>)
 8002f2c:	f043 0304 	orr.w	r3, r3, #4
 8002f30:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002f34:	4b2d      	ldr	r3, [pc, #180]	@ (8002fec <BSP_PB_Init+0xd8>)
 8002f36:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f3a:	f003 0304 	and.w	r3, r3, #4
 8002f3e:	60bb      	str	r3, [r7, #8]
 8002f40:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8002f42:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002f46:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8002f48:	2302      	movs	r3, #2
 8002f4a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8002f50:	79bb      	ldrb	r3, [r7, #6]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d10c      	bne.n	8002f70 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8002f56:	2300      	movs	r3, #0
 8002f58:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8002f5a:	79fb      	ldrb	r3, [r7, #7]
 8002f5c:	4a24      	ldr	r2, [pc, #144]	@ (8002ff0 <BSP_PB_Init+0xdc>)
 8002f5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f62:	f107 020c 	add.w	r2, r7, #12
 8002f66:	4611      	mov	r1, r2
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f002 f8d7 	bl	800511c <HAL_GPIO_Init>
 8002f6e:	e037      	b.n	8002fe0 <BSP_PB_Init+0xcc>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8002f70:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002f74:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002f76:	79fb      	ldrb	r3, [r7, #7]
 8002f78:	4a1d      	ldr	r2, [pc, #116]	@ (8002ff0 <BSP_PB_Init+0xdc>)
 8002f7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f7e:	f107 020c 	add.w	r2, r7, #12
 8002f82:	4611      	mov	r1, r2
 8002f84:	4618      	mov	r0, r3
 8002f86:	f002 f8c9 	bl	800511c <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8002f8a:	79fa      	ldrb	r2, [r7, #7]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	005b      	lsls	r3, r3, #1
 8002f90:	4413      	add	r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	4a17      	ldr	r2, [pc, #92]	@ (8002ff4 <BSP_PB_Init+0xe0>)
 8002f96:	441a      	add	r2, r3
 8002f98:	79fb      	ldrb	r3, [r7, #7]
 8002f9a:	4917      	ldr	r1, [pc, #92]	@ (8002ff8 <BSP_PB_Init+0xe4>)
 8002f9c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	4610      	mov	r0, r2
 8002fa4:	f002 f862 	bl	800506c <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8002fa8:	79fa      	ldrb	r2, [r7, #7]
 8002faa:	4613      	mov	r3, r2
 8002fac:	005b      	lsls	r3, r3, #1
 8002fae:	4413      	add	r3, r2
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	4a10      	ldr	r2, [pc, #64]	@ (8002ff4 <BSP_PB_Init+0xe0>)
 8002fb4:	1898      	adds	r0, r3, r2
 8002fb6:	79fb      	ldrb	r3, [r7, #7]
 8002fb8:	4a10      	ldr	r2, [pc, #64]	@ (8002ffc <BSP_PB_Init+0xe8>)
 8002fba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	f002 f827 	bl	8005014 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8002fc6:	2018      	movs	r0, #24
 8002fc8:	79fb      	ldrb	r3, [r7, #7]
 8002fca:	4a0d      	ldr	r2, [pc, #52]	@ (8003000 <BSP_PB_Init+0xec>)
 8002fcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	f001 fcf6 	bl	80049c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8002fd8:	2318      	movs	r3, #24
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f001 fd0c 	bl	80049f8 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3720      	adds	r7, #32
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	40030c00 	.word	0x40030c00
 8002ff0:	2000000c 	.word	0x2000000c
 8002ff4:	200005cc 	.word	0x200005cc
 8002ff8:	080231d8 	.word	0x080231d8
 8002ffc:	20000010 	.word	0x20000010
 8003000:	20000014 	.word	0x20000014

08003004 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	4603      	mov	r3, r0
 800300c:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 800300e:	79fa      	ldrb	r2, [r7, #7]
 8003010:	4613      	mov	r3, r2
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	4413      	add	r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	4a04      	ldr	r2, [pc, #16]	@ (800302c <BSP_PB_IRQHandler+0x28>)
 800301a:	4413      	add	r3, r2
 800301c:	4618      	mov	r0, r3
 800301e:	f002 f839 	bl	8005094 <HAL_EXTI_IRQHandler>
}
 8003022:	bf00      	nop
 8003024:	3708      	adds	r7, #8
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	200005cc 	.word	0x200005cc

08003030 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a COM_InitTypeDef structure that contains the
  *                configuration information for the specified COM peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	4603      	mov	r3, r0
 8003038:	6039      	str	r1, [r7, #0]
 800303a:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800303c:	2300      	movs	r3, #0
 800303e:	60fb      	str	r3, [r7, #12]

  if (COM >= COMn)
 8003040:	79fb      	ldrb	r3, [r7, #7]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d003      	beq.n	800304e <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003046:	f06f 0301 	mvn.w	r3, #1
 800304a:	60fb      	str	r3, [r7, #12]
 800304c:	e018      	b.n	8003080 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 800304e:	79fb      	ldrb	r3, [r7, #7]
 8003050:	2294      	movs	r2, #148	@ 0x94
 8003052:	fb02 f303 	mul.w	r3, r2, r3
 8003056:	4a0d      	ldr	r2, [pc, #52]	@ (800308c <BSP_COM_Init+0x5c>)
 8003058:	4413      	add	r3, r2
 800305a:	4618      	mov	r0, r3
 800305c:	f000 f870 	bl	8003140 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8003060:	79fb      	ldrb	r3, [r7, #7]
 8003062:	2294      	movs	r2, #148	@ 0x94
 8003064:	fb02 f303 	mul.w	r3, r2, r3
 8003068:	4a08      	ldr	r2, [pc, #32]	@ (800308c <BSP_COM_Init+0x5c>)
 800306a:	4413      	add	r3, r2
 800306c:	6839      	ldr	r1, [r7, #0]
 800306e:	4618      	mov	r0, r3
 8003070:	f000 f80e 	bl	8003090 <MX_USART1_Init>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d002      	beq.n	8003080 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800307a:	f06f 0303 	mvn.w	r3, #3
 800307e:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8003080:	68fb      	ldr	r3, [r7, #12]
}
 8003082:	4618      	mov	r0, r3
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	200005d8 	.word	0x200005d8

08003090 <MX_USART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 800309a:	4b16      	ldr	r3, [pc, #88]	@ (80030f4 <MX_USART1_Init+0x64>)
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	220c      	movs	r2, #12
 80030ae:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	895b      	ldrh	r3, [r3, #10]
 80030b4:	461a      	mov	r2, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	685a      	ldr	r2, [r3, #4]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	891b      	ldrh	r3, [r3, #8]
 80030c6:	461a      	mov	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	899b      	ldrh	r3, [r3, #12]
 80030d0:	461a      	mov	r2, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80030dc:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f005 fb79 	bl	80087dc <HAL_UART_Init>
 80030ea:	4603      	mov	r3, r0
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3708      	adds	r7, #8
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	20000008 	.word	0x20000008

080030f8 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8003100:	4b09      	ldr	r3, [pc, #36]	@ (8003128 <__io_putchar+0x30>)
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	461a      	mov	r2, r3
 8003106:	2394      	movs	r3, #148	@ 0x94
 8003108:	fb02 f303 	mul.w	r3, r2, r3
 800310c:	4a07      	ldr	r2, [pc, #28]	@ (800312c <__io_putchar+0x34>)
 800310e:	1898      	adds	r0, r3, r2
 8003110:	1d39      	adds	r1, r7, #4
 8003112:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003116:	2201      	movs	r2, #1
 8003118:	f005 fbb0 	bl	800887c <HAL_UART_Transmit>
  return ch;
 800311c:	687b      	ldr	r3, [r7, #4]
}
 800311e:	4618      	mov	r0, r3
 8003120:	3708      	adds	r7, #8
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	2000066c 	.word	0x2000066c
 800312c:	200005d8 	.word	0x200005d8

08003130 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8003134:	2000      	movs	r0, #0
 8003136:	f7ff f97f 	bl	8002438 <BSP_PB_Callback>
}
 800313a:	bf00      	nop
 800313c:	bd80      	pop	{r7, pc}
	...

08003140 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b08a      	sub	sp, #40	@ 0x28
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8003148:	4b27      	ldr	r3, [pc, #156]	@ (80031e8 <COM1_MspInit+0xa8>)
 800314a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800314e:	4a26      	ldr	r2, [pc, #152]	@ (80031e8 <COM1_MspInit+0xa8>)
 8003150:	f043 0301 	orr.w	r3, r3, #1
 8003154:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003158:	4b23      	ldr	r3, [pc, #140]	@ (80031e8 <COM1_MspInit+0xa8>)
 800315a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	613b      	str	r3, [r7, #16]
 8003164:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8003166:	4b20      	ldr	r3, [pc, #128]	@ (80031e8 <COM1_MspInit+0xa8>)
 8003168:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800316c:	4a1e      	ldr	r2, [pc, #120]	@ (80031e8 <COM1_MspInit+0xa8>)
 800316e:	f043 0301 	orr.w	r3, r3, #1
 8003172:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003176:	4b1c      	ldr	r3, [pc, #112]	@ (80031e8 <COM1_MspInit+0xa8>)
 8003178:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800317c:	f003 0301 	and.w	r3, r3, #1
 8003180:	60fb      	str	r3, [r7, #12]
 8003182:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8003184:	4b18      	ldr	r3, [pc, #96]	@ (80031e8 <COM1_MspInit+0xa8>)
 8003186:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800318a:	4a17      	ldr	r2, [pc, #92]	@ (80031e8 <COM1_MspInit+0xa8>)
 800318c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003190:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8003194:	4b14      	ldr	r3, [pc, #80]	@ (80031e8 <COM1_MspInit+0xa8>)
 8003196:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800319a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800319e:	60bb      	str	r3, [r7, #8]
 80031a0:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 80031a2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80031a6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80031a8:	2302      	movs	r3, #2
 80031aa:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80031ac:	2302      	movs	r3, #2
 80031ae:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80031b0:	2301      	movs	r3, #1
 80031b2:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 80031b4:	2307      	movs	r3, #7
 80031b6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 80031b8:	f107 0314 	add.w	r3, r7, #20
 80031bc:	4619      	mov	r1, r3
 80031be:	480b      	ldr	r0, [pc, #44]	@ (80031ec <COM1_MspInit+0xac>)
 80031c0:	f001 ffac 	bl	800511c <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 80031c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80031c8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80031ca:	2302      	movs	r3, #2
 80031cc:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 80031ce:	2307      	movs	r3, #7
 80031d0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 80031d2:	f107 0314 	add.w	r3, r7, #20
 80031d6:	4619      	mov	r1, r3
 80031d8:	4804      	ldr	r0, [pc, #16]	@ (80031ec <COM1_MspInit+0xac>)
 80031da:	f001 ff9f 	bl	800511c <HAL_GPIO_Init>
}
 80031de:	bf00      	nop
 80031e0:	3728      	adds	r7, #40	@ 0x28
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	40030c00 	.word	0x40030c00
 80031ec:	42020000 	.word	0x42020000

080031f0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031f4:	4b0d      	ldr	r3, [pc, #52]	@ (800322c <HAL_Init+0x3c>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a0c      	ldr	r2, [pc, #48]	@ (800322c <HAL_Init+0x3c>)
 80031fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003200:	2003      	movs	r0, #3
 8003202:	f001 fbd4 	bl	80049ae <HAL_NVIC_SetPriorityGrouping>

  /* Ensure time base clock coherency */
  SystemCoreClockUpdate();
 8003206:	f7ff fdf3 	bl	8002df0 <SystemCoreClockUpdate>

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800320a:	2004      	movs	r0, #4
 800320c:	f001 fc24 	bl	8004a58 <HAL_SYSTICK_CLKSourceConfig>

  /* Initialize 1ms tick time base (default SysTick based on MSI clock after Reset) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003210:	200f      	movs	r0, #15
 8003212:	f000 f80d 	bl	8003230 <HAL_InitTick>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d001      	beq.n	8003220 <HAL_Init+0x30>
  {
    return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e002      	b.n	8003226 <HAL_Init+0x36>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003220:	f7ff f928 	bl	8002474 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	40022000 	.word	0x40022000

08003230 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8003238:	2300      	movs	r3, #0
 800323a:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 800323c:	4b36      	ldr	r3, [pc, #216]	@ (8003318 <HAL_InitTick+0xe8>)
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d101      	bne.n	8003248 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e062      	b.n	800330e <HAL_InitTick+0xde>
  }

  /* Check Clock source to calculate the tickNumber */
  if(READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8003248:	4b34      	ldr	r3, [pc, #208]	@ (800331c <HAL_InitTick+0xec>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0304 	and.w	r3, r3, #4
 8003250:	2b04      	cmp	r3, #4
 8003252:	d10c      	bne.n	800326e <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8003254:	4b32      	ldr	r3, [pc, #200]	@ (8003320 <HAL_InitTick+0xf0>)
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	4b2f      	ldr	r3, [pc, #188]	@ (8003318 <HAL_InitTick+0xe8>)
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	4619      	mov	r1, r3
 800325e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003262:	fbb3 f3f1 	udiv	r3, r3, r1
 8003266:	fbb2 f3f3 	udiv	r3, r2, r3
 800326a:	60fb      	str	r3, [r7, #12]
 800326c:	e03d      	b.n	80032ea <HAL_InitTick+0xba>
  }
  else
  {
    systicksel = __HAL_RCC_GET_SYSTICK_SOURCE();
 800326e:	4b2d      	ldr	r3, [pc, #180]	@ (8003324 <HAL_InitTick+0xf4>)
 8003270:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003274:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003278:	60bb      	str	r3, [r7, #8]
    switch (systicksel)
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003280:	d025      	beq.n	80032ce <HAL_InitTick+0x9e>
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003288:	d82e      	bhi.n	80032e8 <HAL_InitTick+0xb8>
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d004      	beq.n	800329a <HAL_InitTick+0x6a>
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003296:	d00d      	beq.n	80032b4 <HAL_InitTick+0x84>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;

      default:
        /* Nothing to do */
        break;
 8003298:	e026      	b.n	80032e8 <HAL_InitTick+0xb8>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 800329a:	4b21      	ldr	r3, [pc, #132]	@ (8003320 <HAL_InitTick+0xf0>)
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	4b1e      	ldr	r3, [pc, #120]	@ (8003318 <HAL_InitTick+0xe8>)
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	4619      	mov	r1, r3
 80032a4:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80032a8:	fbb3 f3f1 	udiv	r3, r3, r1
 80032ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80032b0:	60fb      	str	r3, [r7, #12]
        break;
 80032b2:	e01a      	b.n	80032ea <HAL_InitTick+0xba>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80032b4:	4b18      	ldr	r3, [pc, #96]	@ (8003318 <HAL_InitTick+0xe8>)
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	461a      	mov	r2, r3
 80032ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80032be:	fbb3 f3f2 	udiv	r3, r3, r2
 80032c2:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80032c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ca:	60fb      	str	r3, [r7, #12]
        break;
 80032cc:	e00d      	b.n	80032ea <HAL_InitTick+0xba>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80032ce:	4b12      	ldr	r3, [pc, #72]	@ (8003318 <HAL_InitTick+0xe8>)
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	461a      	mov	r2, r3
 80032d4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80032d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80032dc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80032e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e4:	60fb      	str	r3, [r7, #12]
        break;
 80032e6:	e000      	b.n	80032ea <HAL_InitTick+0xba>
        break;
 80032e8:	bf00      	nop
    }
  }

  /* Configure the SysTick */
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 80032ea:	68f8      	ldr	r0, [r7, #12]
 80032ec:	f001 fb92 	bl	8004a14 <HAL_SYSTICK_Config>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d001      	beq.n	80032fa <HAL_InitTick+0xca>
  {
    return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e009      	b.n	800330e <HAL_InitTick+0xde>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032fa:	2200      	movs	r2, #0
 80032fc:	6879      	ldr	r1, [r7, #4]
 80032fe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003302:	f001 fb5f 	bl	80049c4 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8003306:	4a08      	ldr	r2, [pc, #32]	@ (8003328 <HAL_InitTick+0xf8>)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	3710      	adds	r7, #16
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	2000001c 	.word	0x2000001c
 800331c:	e000e010 	.word	0xe000e010
 8003320:	20000004 	.word	0x20000004
 8003324:	40030c00 	.word	0x40030c00
 8003328:	20000018 	.word	0x20000018

0800332c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003330:	4b06      	ldr	r3, [pc, #24]	@ (800334c <HAL_IncTick+0x20>)
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	461a      	mov	r2, r3
 8003336:	4b06      	ldr	r3, [pc, #24]	@ (8003350 <HAL_IncTick+0x24>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4413      	add	r3, r2
 800333c:	4a04      	ldr	r2, [pc, #16]	@ (8003350 <HAL_IncTick+0x24>)
 800333e:	6013      	str	r3, [r2, #0]
}
 8003340:	bf00      	nop
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
 800334a:	bf00      	nop
 800334c:	2000001c 	.word	0x2000001c
 8003350:	20000670 	.word	0x20000670

08003354 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003354:	b480      	push	{r7}
 8003356:	af00      	add	r7, sp, #0
  return uwTick;
 8003358:	4b03      	ldr	r3, [pc, #12]	@ (8003368 <HAL_GetTick+0x14>)
 800335a:	681b      	ldr	r3, [r3, #0]
}
 800335c:	4618      	mov	r0, r3
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	20000670 	.word	0x20000670

0800336c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003374:	f7ff ffee 	bl	8003354 <HAL_GetTick>
 8003378:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003384:	d005      	beq.n	8003392 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003386:	4b0a      	ldr	r3, [pc, #40]	@ (80033b0 <HAL_Delay+0x44>)
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	461a      	mov	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	4413      	add	r3, r2
 8003390:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003392:	bf00      	nop
 8003394:	f7ff ffde 	bl	8003354 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d8f7      	bhi.n	8003394 <HAL_Delay+0x28>
  {
  }
}
 80033a4:	bf00      	nop
 80033a6:	bf00      	nop
 80033a8:	3710      	adds	r7, #16
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	2000001c 	.word	0x2000001c

080033b4 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	431a      	orrs	r2, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	609a      	str	r2, [r3, #8]
}
 80033ce:	bf00      	nop
 80033d0:	370c      	adds	r7, #12
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr

080033da <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80033da:	b480      	push	{r7}
 80033dc:	b083      	sub	sp, #12
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	370c      	adds	r7, #12
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr

080033f6 <LL_ADC_SetPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VDDCORE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetPathInternalCh(ADC_TypeDef *ADCx, uint32_t PathInternal)
{
 80033f6:	b480      	push	{r7}
 80033f8:	b083      	sub	sp, #12
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
 80033fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->OR, ADC_OR_VDDCOREEN, (PathInternal >> ADC_PATH_INTERNAL_POS));
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8003406:	f023 0201 	bic.w	r2, r3, #1
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	0c1b      	lsrs	r3, r3, #16
 800340e:	431a      	orrs	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
}
 8003416:	bf00      	nop
 8003418:	370c      	adds	r7, #12
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr

08003422 <LL_ADC_GetPathInternalCh>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VDDCORE
  */
__STATIC_INLINE uint32_t LL_ADC_GetPathInternalCh(const ADC_TypeDef *ADCx)
{
 8003422:	b480      	push	{r7}
 8003424:	b083      	sub	sp, #12
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->OR, ADC_OR_VDDCOREEN)) << ADC_PATH_INTERNAL_POS;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8003430:	041b      	lsls	r3, r3, #16
 8003432:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
}
 8003436:	4618      	mov	r0, r3
 8003438:	370c      	adds	r7, #12
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr

08003442 <LL_ADC_SetOffsetChannel>:
  *
  *         (1) On this STM32 series, parameter available only on ADC instance: ADC2.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel)
{
 8003442:	b480      	push	{r7}
 8003444:	b087      	sub	sp, #28
 8003446:	af00      	add	r7, sp, #0
 8003448:	60f8      	str	r0, [r7, #12]
 800344a:	60b9      	str	r1, [r7, #8]
 800344c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg_offset_cfg = __ADC_PTR_REG_OFFSET(ADCx->OFCFGR1, Offsety);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	3350      	adds	r3, #80	@ 0x50
 8003452:	461a      	mov	r2, r3
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	4413      	add	r3, r2
 800345a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg_offset_cfg,
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	06db      	lsls	r3, r3, #27
 8003468:	431a      	orrs	r2, r3
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	601a      	str	r2, [r3, #0]
             ADC_OFCFGR1_OFFSET_CH,
             (Channel & ADC_CHANNEL_NUMBER_MASK) << ADC_OFCFGR1_OFFSET_CH_Pos);
}
 800346e:	bf00      	nop
 8003470:	371c      	adds	r7, #28
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr

0800347a <LL_ADC_GetOffsetChannel>:
  *         (3) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800347a:	b480      	push	{r7}
 800347c:	b085      	sub	sp, #20
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
 8003482:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFCFGR1, Offsety);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	3350      	adds	r3, #80	@ 0x50
 8003488:	461a      	mov	r2, r3
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	4413      	add	r3, r2
 8003490:	60fb      	str	r3, [r7, #12]

  return (uint32_t) __LL_ADC_DECIMAL_NB_TO_CHANNEL(READ_BIT(*preg, ADC_OFCFGR1_OFFSET_CH) >> ADC_OFCFGR1_OFFSET_CH_Pos);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	0edb      	lsrs	r3, r3, #27
 8003498:	f003 031f 	and.w	r3, r3, #31
}
 800349c:	4618      	mov	r0, r3
 800349e:	3714      	adds	r7, #20
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <LL_ADC_SetOffsetLevel>:
  *         @arg @ref LL_ADC_OFFSET_4
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x00FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetLevel(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetLevel)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b087      	sub	sp, #28
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg_offset_val = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	3360      	adds	r3, #96	@ 0x60
 80034b8:	461a      	mov	r2, r3
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	4413      	add	r3, r2
 80034c0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg_offset_val,
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	0d9b      	lsrs	r3, r3, #22
 80034c8:	059b      	lsls	r3, r3, #22
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	431a      	orrs	r2, r3
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET,
             OffsetLevel);
}
 80034d2:	bf00      	nop
 80034d4:	371c      	adds	r7, #28
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr

080034de <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80034de:	b480      	push	{r7}
 80034e0:	b087      	sub	sp, #28
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	60f8      	str	r0, [r7, #12]
 80034e6:	60b9      	str	r1, [r7, #8]
 80034e8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFCFGR1, Offsety);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	3350      	adds	r3, #80	@ 0x50
 80034ee:	461a      	mov	r2, r3
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	4413      	add	r3, r2
 80034f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	431a      	orrs	r2, r3
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	601a      	str	r2, [r3, #0]
             ADC_OFCFGR1_POSOFF,
             OffsetSign);
}
 8003508:	bf00      	nop
 800350a:	371c      	adds	r7, #28
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SAT_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 8003514:	b480      	push	{r7}
 8003516:	b087      	sub	sp, #28
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFCFGR1, Offsety);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	3350      	adds	r3, #80	@ 0x50
 8003524:	461a      	mov	r2, r3
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	4413      	add	r3, r2
 800352c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFCFGR1_SSAT, OffsetSignedSaturation);
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	431a      	orrs	r2, r3
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	601a      	str	r2, [r3, #0]
}
 800353e:	bf00      	nop
 8003540:	371c      	adds	r7, #28
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr

0800354a <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SAT_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
 800354a:	b480      	push	{r7}
 800354c:	b087      	sub	sp, #28
 800354e:	af00      	add	r7, sp, #0
 8003550:	60f8      	str	r0, [r7, #12]
 8003552:	60b9      	str	r1, [r7, #8]
 8003554:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFCFGR1, Offsety);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	3350      	adds	r3, #80	@ 0x50
 800355a:	461a      	mov	r2, r3
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	4413      	add	r3, r2
 8003562:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFCFGR1_USAT, OffsetUnsignedSaturation);
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	431a      	orrs	r2, r3
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	601a      	str	r2, [r3, #0]
}
 8003574:	bf00      	nop
 8003576:	371c      	adds	r7, #28
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800358e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003592:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003596:	683a      	ldr	r2, [r7, #0]
 8003598:	431a      	orrs	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035a2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80035a6:	683a      	ldr	r2, [r7, #0]
 80035a8:	2a00      	cmp	r2, #0
 80035aa:	d002      	beq.n	80035b2 <LL_ADC_SetGainCompensation+0x32>
 80035ac:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80035b0:	e000      	b.n	80035b4 <LL_ADC_SetGainCompensation+0x34>
 80035b2:	2200      	movs	r2, #0
 80035b4:	431a      	orrs	r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	671a      	str	r2, [r3, #112]	@ 0x70
}
 80035ba:	bf00      	nop
 80035bc:	370c      	adds	r7, #12
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr

080035c6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80035c6:	b480      	push	{r7}
 80035c8:	b083      	sub	sp, #12
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d101      	bne.n	80035de <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80035da:	2301      	movs	r3, #1
 80035dc:	e000      	b.n	80035e0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <LL_ADC_REG_SetSequencerRanks>:
  *
  *         (1) On this STM32 series, parameter available only on ADC instance: ADC2.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b087      	sub	sp, #28
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	3330      	adds	r3, #48	@ 0x30
 80035fc:	461a      	mov	r2, r3
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	0a1b      	lsrs	r3, r3, #8
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	f003 030c 	and.w	r3, r3, #12
 8003608:	4413      	add	r3, r2
 800360a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	f003 031f 	and.w	r3, r3, #31
 8003616:	211f      	movs	r1, #31
 8003618:	fa01 f303 	lsl.w	r3, r1, r3
 800361c:	43db      	mvns	r3, r3
 800361e:	401a      	ands	r2, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f003 011f 	and.w	r1, r3, #31
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	f003 031f 	and.w	r3, r3, #31
 800362c:	fa01 f303 	lsl.w	r3, r1, r3
 8003630:	431a      	orrs	r2, r3
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003636:	bf00      	nop
 8003638:	371c      	adds	r7, #28
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr

08003642 <LL_ADC_SetChannelPreselection>:
  *
  *         (1) On this STM32 series, parameter available only on ADC instance: ADC2.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003642:	b480      	push	{r7}
 8003644:	b085      	sub	sp, #20
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
 800364a:	6039      	str	r1, [r7, #0]
  __IO uint32_t channel_preselectione = READ_REG(ADCx->PCSEL);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	69db      	ldr	r3, [r3, #28]
 8003650:	60fb      	str	r3, [r7, #12]
  WRITE_REG(ADCx->PCSEL,
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	f003 031f 	and.w	r3, r3, #31
 8003658:	2201      	movs	r2, #1
 800365a:	409a      	lsls	r2, r3
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	431a      	orrs	r2, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	61da      	str	r2, [r3, #28]
            channel_preselectione | (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)Channel) & 0x1FUL)));
}
 8003664:	bf00      	nop
 8003666:	3714      	adds	r7, #20
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_246CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_1499CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003670:	b480      	push	{r7}
 8003672:	b087      	sub	sp, #28
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  const uint32_t iChannel = __ADC_CHANNEL_INDEX(Channel);
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	f003 031f 	and.w	r3, r3, #31
 8003682:	2b00      	cmp	r3, #0
 8003684:	d07f      	beq.n	8003786 <LL_ADC_SetChannelSamplingTime+0x116>
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	f003 031f 	and.w	r3, r3, #31
 800368c:	2b01      	cmp	r3, #1
 800368e:	d078      	beq.n	8003782 <LL_ADC_SetChannelSamplingTime+0x112>
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	f003 031f 	and.w	r3, r3, #31
 8003696:	2b02      	cmp	r3, #2
 8003698:	d071      	beq.n	800377e <LL_ADC_SetChannelSamplingTime+0x10e>
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	f003 031f 	and.w	r3, r3, #31
 80036a0:	2b03      	cmp	r3, #3
 80036a2:	d06a      	beq.n	800377a <LL_ADC_SetChannelSamplingTime+0x10a>
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	f003 031f 	and.w	r3, r3, #31
 80036aa:	2b04      	cmp	r3, #4
 80036ac:	d063      	beq.n	8003776 <LL_ADC_SetChannelSamplingTime+0x106>
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	f003 031f 	and.w	r3, r3, #31
 80036b4:	2b05      	cmp	r3, #5
 80036b6:	d05c      	beq.n	8003772 <LL_ADC_SetChannelSamplingTime+0x102>
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	f003 031f 	and.w	r3, r3, #31
 80036be:	2b06      	cmp	r3, #6
 80036c0:	d055      	beq.n	800376e <LL_ADC_SetChannelSamplingTime+0xfe>
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	f003 031f 	and.w	r3, r3, #31
 80036c8:	2b07      	cmp	r3, #7
 80036ca:	d04e      	beq.n	800376a <LL_ADC_SetChannelSamplingTime+0xfa>
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	f003 031f 	and.w	r3, r3, #31
 80036d2:	2b08      	cmp	r3, #8
 80036d4:	d047      	beq.n	8003766 <LL_ADC_SetChannelSamplingTime+0xf6>
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	f003 031f 	and.w	r3, r3, #31
 80036dc:	2b09      	cmp	r3, #9
 80036de:	d040      	beq.n	8003762 <LL_ADC_SetChannelSamplingTime+0xf2>
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	f003 031f 	and.w	r3, r3, #31
 80036e6:	2b0a      	cmp	r3, #10
 80036e8:	d039      	beq.n	800375e <LL_ADC_SetChannelSamplingTime+0xee>
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	f003 031f 	and.w	r3, r3, #31
 80036f0:	2b0b      	cmp	r3, #11
 80036f2:	d032      	beq.n	800375a <LL_ADC_SetChannelSamplingTime+0xea>
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	f003 031f 	and.w	r3, r3, #31
 80036fa:	2b0c      	cmp	r3, #12
 80036fc:	d02b      	beq.n	8003756 <LL_ADC_SetChannelSamplingTime+0xe6>
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	f003 031f 	and.w	r3, r3, #31
 8003704:	2b0d      	cmp	r3, #13
 8003706:	d024      	beq.n	8003752 <LL_ADC_SetChannelSamplingTime+0xe2>
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	f003 031f 	and.w	r3, r3, #31
 800370e:	2b0e      	cmp	r3, #14
 8003710:	d01d      	beq.n	800374e <LL_ADC_SetChannelSamplingTime+0xde>
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	f003 031f 	and.w	r3, r3, #31
 8003718:	2b0f      	cmp	r3, #15
 800371a:	d016      	beq.n	800374a <LL_ADC_SetChannelSamplingTime+0xda>
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	f003 031f 	and.w	r3, r3, #31
 8003722:	2b10      	cmp	r3, #16
 8003724:	d00f      	beq.n	8003746 <LL_ADC_SetChannelSamplingTime+0xd6>
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	f003 031f 	and.w	r3, r3, #31
 800372c:	2b11      	cmp	r3, #17
 800372e:	d008      	beq.n	8003742 <LL_ADC_SetChannelSamplingTime+0xd2>
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	f003 031f 	and.w	r3, r3, #31
 8003736:	2b12      	cmp	r3, #18
 8003738:	d101      	bne.n	800373e <LL_ADC_SetChannelSamplingTime+0xce>
 800373a:	2312      	movs	r3, #18
 800373c:	e024      	b.n	8003788 <LL_ADC_SetChannelSamplingTime+0x118>
 800373e:	2300      	movs	r3, #0
 8003740:	e022      	b.n	8003788 <LL_ADC_SetChannelSamplingTime+0x118>
 8003742:	2311      	movs	r3, #17
 8003744:	e020      	b.n	8003788 <LL_ADC_SetChannelSamplingTime+0x118>
 8003746:	2310      	movs	r3, #16
 8003748:	e01e      	b.n	8003788 <LL_ADC_SetChannelSamplingTime+0x118>
 800374a:	230f      	movs	r3, #15
 800374c:	e01c      	b.n	8003788 <LL_ADC_SetChannelSamplingTime+0x118>
 800374e:	230e      	movs	r3, #14
 8003750:	e01a      	b.n	8003788 <LL_ADC_SetChannelSamplingTime+0x118>
 8003752:	230d      	movs	r3, #13
 8003754:	e018      	b.n	8003788 <LL_ADC_SetChannelSamplingTime+0x118>
 8003756:	230c      	movs	r3, #12
 8003758:	e016      	b.n	8003788 <LL_ADC_SetChannelSamplingTime+0x118>
 800375a:	230b      	movs	r3, #11
 800375c:	e014      	b.n	8003788 <LL_ADC_SetChannelSamplingTime+0x118>
 800375e:	230a      	movs	r3, #10
 8003760:	e012      	b.n	8003788 <LL_ADC_SetChannelSamplingTime+0x118>
 8003762:	2309      	movs	r3, #9
 8003764:	e010      	b.n	8003788 <LL_ADC_SetChannelSamplingTime+0x118>
 8003766:	2308      	movs	r3, #8
 8003768:	e00e      	b.n	8003788 <LL_ADC_SetChannelSamplingTime+0x118>
 800376a:	2307      	movs	r3, #7
 800376c:	e00c      	b.n	8003788 <LL_ADC_SetChannelSamplingTime+0x118>
 800376e:	2306      	movs	r3, #6
 8003770:	e00a      	b.n	8003788 <LL_ADC_SetChannelSamplingTime+0x118>
 8003772:	2305      	movs	r3, #5
 8003774:	e008      	b.n	8003788 <LL_ADC_SetChannelSamplingTime+0x118>
 8003776:	2304      	movs	r3, #4
 8003778:	e006      	b.n	8003788 <LL_ADC_SetChannelSamplingTime+0x118>
 800377a:	2303      	movs	r3, #3
 800377c:	e004      	b.n	8003788 <LL_ADC_SetChannelSamplingTime+0x118>
 800377e:	2302      	movs	r3, #2
 8003780:	e002      	b.n	8003788 <LL_ADC_SetChannelSamplingTime+0x118>
 8003782:	2301      	movs	r3, #1
 8003784:	e000      	b.n	8003788 <LL_ADC_SetChannelSamplingTime+0x118>
 8003786:	2300      	movs	r3, #0
 8003788:	617b      	str	r3, [r7, #20]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	3314      	adds	r3, #20
 800378e:	4619      	mov	r1, r3
 8003790:	4a15      	ldr	r2, [pc, #84]	@ (80037e8 <LL_ADC_SetChannelSamplingTime+0x178>)
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003798:	0e5b      	lsrs	r3, r3, #25
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	f003 0304 	and.w	r3, r3, #4
 80037a0:	440b      	add	r3, r1
 80037a2:	613b      	str	r3, [r7, #16]
                                             ((ADC_CHANNEL_LUT[iChannel]
                                               & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
  MODIFY_REG(*preg,
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	490f      	ldr	r1, [pc, #60]	@ (80037e8 <LL_ADC_SetChannelSamplingTime+0x178>)
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80037b0:	0d1b      	lsrs	r3, r3, #20
 80037b2:	f003 031f 	and.w	r3, r3, #31
 80037b6:	2107      	movs	r1, #7
 80037b8:	fa01 f303 	lsl.w	r3, r1, r3
 80037bc:	43db      	mvns	r3, r3
 80037be:	401a      	ands	r2, r3
 80037c0:	4909      	ldr	r1, [pc, #36]	@ (80037e8 <LL_ADC_SetChannelSamplingTime+0x178>)
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80037c8:	0d1b      	lsrs	r3, r3, #20
 80037ca:	f003 031f 	and.w	r3, r3, #31
 80037ce:	6879      	ldr	r1, [r7, #4]
 80037d0:	fa01 f303 	lsl.w	r3, r1, r3
 80037d4:	431a      	orrs	r2, r3
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((ADC_CHANNEL_LUT[iChannel] & ADC_CHANNEL_SMPx_BITOFFSET_MASK)
                                >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((ADC_CHANNEL_LUT[iChannel] & ADC_CHANNEL_SMPx_BITOFFSET_MASK)
                                >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80037da:	bf00      	nop
 80037dc:	371c      	adds	r7, #28
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	080231dc 	.word	0x080231dc

080037ec <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f003 031f 	and.w	r3, r3, #31
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <LL_ADC_GetMultiDataFormat>:
  *         @arg @ref LL_ADC_MULTI_REG_DATA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DATA_COMMON_32B
  *         @arg @ref LL_ADC_MULTI_REG_DATA_COMMON_16B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDataFormat(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8003818:	4618      	mov	r0, r3
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003834:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	6093      	str	r3, [r2, #8]
}
 800383c:	bf00      	nop
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003858:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800385c:	d101      	bne.n	8003862 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800385e:	2301      	movs	r3, #1
 8003860:	e000      	b.n	8003864 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003880:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003884:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800388c:	bf00      	nop
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80038ac:	d101      	bne.n	80038b2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80038ae:	2301      	movs	r3, #1
 80038b0:	e000      	b.n	80038b4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80038b2:	2300      	movs	r3, #0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80038d0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80038d4:	f043 0201 	orr.w	r2, r3, #1
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80038dc:	bf00      	nop
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80038f8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80038fc:	f043 0202 	orr.w	r2, r3, #2
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003904:	bf00      	nop
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f003 0301 	and.w	r3, r3, #1
 8003920:	2b01      	cmp	r3, #1
 8003922:	d101      	bne.n	8003928 <LL_ADC_IsEnabled+0x18>
 8003924:	2301      	movs	r3, #1
 8003926:	e000      	b.n	800392a <LL_ADC_IsEnabled+0x1a>
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	370c      	adds	r7, #12
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr

08003936 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8003936:	b480      	push	{r7}
 8003938:	b083      	sub	sp, #12
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f003 0302 	and.w	r3, r3, #2
 8003946:	2b02      	cmp	r3, #2
 8003948:	d101      	bne.n	800394e <LL_ADC_IsDisableOngoing+0x18>
 800394a:	2301      	movs	r3, #1
 800394c:	e000      	b.n	8003950 <LL_ADC_IsDisableOngoing+0x1a>
 800394e:	2300      	movs	r3, #0
}
 8003950:	4618      	mov	r0, r3
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800396c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003970:	f043 0204 	orr.w	r2, r3, #4
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003978:	bf00      	nop
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003994:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003998:	f043 0210 	orr.w	r2, r3, #16
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80039a0:	bf00      	nop
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f003 0304 	and.w	r3, r3, #4
 80039bc:	2b04      	cmp	r3, #4
 80039be:	d101      	bne.n	80039c4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80039c0:	2301      	movs	r3, #1
 80039c2:	e000      	b.n	80039c6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr

080039d2 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80039d2:	b480      	push	{r7}
 80039d4:	b083      	sub	sp, #12
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80039e2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80039e6:	f043 0220 	orr.w	r2, r3, #32
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80039ee:	bf00      	nop
 80039f0:	370c      	adds	r7, #12
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr

080039fa <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80039fa:	b480      	push	{r7}
 80039fc:	b083      	sub	sp, #12
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f003 0308 	and.w	r3, r3, #8
 8003a0a:	2b08      	cmp	r3, #8
 8003a0c:	d101      	bne.n	8003a12 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e000      	b.n	8003a14 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003a12:	2300      	movs	r3, #0
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <LL_ADC_IsActiveFlag_LDORDY>:
  * @rmtoll ISR      LDORDY          LL_ADC_IsActiveFlag_LDORDY
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_LDORDY(const ADC_TypeDef *ADCx)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_LDORDY) == (ADC_ISR_LDORDY)) ? 1UL : 0UL);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a34:	d101      	bne.n	8003a3a <LL_ADC_IsActiveFlag_LDORDY+0x1a>
 8003a36:	2301      	movs	r3, #1
 8003a38:	e000      	b.n	8003a3c <LL_ADC_IsActiveFlag_LDORDY+0x1c>
 8003a3a:	2300      	movs	r3, #0
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <LL_ADC_ClearFlag_LDORDY>:
  * @rmtoll ISR      LDORDY         LL_ADC_ClearFlag_LDORDY
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE void LL_ADC_ClearFlag_LDORDY(ADC_TypeDef *ADCx)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_LDORDY);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003a56:	601a      	str	r2, [r3, #0]
}
 8003a58:	bf00      	nop
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <HAL_ADC_Init>:
  *         without disabling the other ADCs sharing the same ADC common instance.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b088      	sub	sp, #32
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d101      	bne.n	8003a7a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e139      	b.n	8003cee <HAL_ADC_Init+0x28a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d109      	bne.n	8003a9c <HAL_ADC_Init+0x38>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f7fe fd0d 	bl	80024a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f7ff fed1 	bl	8003848 <LL_ADC_IsDeepPowerDownEnabled>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d004      	beq.n	8003ab6 <HAL_ADC_Init+0x52>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f7ff feb7 	bl	8003824 <LL_ADC_DisableDeepPowerDown>

    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7ff feec 	bl	8003898 <LL_ADC_IsInternalRegulatorEnabled>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d132      	bne.n	8003b2c <HAL_ADC_Init+0xc8>
  {
    /* Clear flag ADC internal voltage regulator ready */
    LL_ADC_ClearFlag_LDORDY(hadc->Instance);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7ff ffbc 	bl	8003a48 <LL_ADC_ClearFlag_LDORDY>

    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7ff fecb 	bl	8003870 <LL_ADC_EnableInternalRegulator>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8003ada:	f7ff fc3b 	bl	8003354 <HAL_GetTick>
 8003ade:	6178      	str	r0, [r7, #20]

    /* Delay for ADC stabilization time */
    while (LL_ADC_IsActiveFlag_LDORDY(hadc->Instance) == 0UL)
 8003ae0:	e01c      	b.n	8003b1c <HAL_ADC_Init+0xb8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_LDO_RDY_TIMEOUT)
 8003ae2:	f7ff fc37 	bl	8003354 <HAL_GetTick>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d915      	bls.n	8003b1c <HAL_ADC_Init+0xb8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsActiveFlag_LDORDY(hadc->Instance) == 0UL)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7ff ff93 	bl	8003a20 <LL_ADC_IsActiveFlag_LDORDY>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d10d      	bne.n	8003b1c <HAL_ADC_Init+0xb8>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b04:	f043 0210 	orr.w	r2, r3, #16
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b10:	f043 0201 	orr.w	r2, r3, #1
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e0e8      	b.n	8003cee <HAL_ADC_Init+0x28a>
    while (LL_ADC_IsActiveFlag_LDORDY(hadc->Instance) == 0UL)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4618      	mov	r0, r3
 8003b22:	f7ff ff7d 	bl	8003a20 <LL_ADC_IsActiveFlag_LDORDY>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d0da      	beq.n	8003ae2 <HAL_ADC_Init+0x7e>

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7ff ff3b 	bl	80039ac <LL_ADC_REG_IsConversionOngoing>
 8003b36:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b3c:	f003 0310 	and.w	r3, r3, #16
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	f040 80cb 	bne.w	8003cdc <HAL_ADC_Init+0x278>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f040 80c7 	bne.w	8003cdc <HAL_ADC_Init+0x278>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b52:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003b56:	f043 0202 	orr.w	r2, r3, #2
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

    tmpCFGR1 = (ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	7d5b      	ldrb	r3, [r3, #21]
 8003b62:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR1 = (ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003b68:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
                hadc->Init.Overrun                                                    |
 8003b6e:	431a      	orrs	r2, r3
                ADC_CFGR1_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	7f1b      	ldrb	r3, [r3, #28]
 8003b74:	041b      	lsls	r3, r3, #16
    tmpCFGR1 = (ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003b76:	4313      	orrs	r3, r2
 8003b78:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	7f1b      	ldrb	r3, [r3, #28]
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d106      	bne.n	8003b90 <HAL_ADC_Init+0x12c>
    {
      tmpCFGR1 |= ADC_CFGR1_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a1b      	ldr	r3, [r3, #32]
 8003b86:	3b01      	subs	r3, #1
 8003b88:	045b      	lsls	r3, r3, #17
 8003b8a:	69ba      	ldr	r2, [r7, #24]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d009      	beq.n	8003bac <HAL_ADC_Init+0x148>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b9c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ba4:	4313      	orrs	r3, r2
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL)
 8003ba6:	69ba      	ldr	r2, [r7, #24]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_FIELDS_1, tmpCFGR1);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68da      	ldr	r2, [r3, #12]
 8003bb2:	4b51      	ldr	r3, [pc, #324]	@ (8003cf8 <HAL_ADC_Init+0x294>)
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	6812      	ldr	r2, [r2, #0]
 8003bba:	69b9      	ldr	r1, [r7, #24]
 8003bbc:	430b      	orrs	r3, r1
 8003bbe:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	f423 4120 	bic.w	r1, r3, #40960	@ 0xa000
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	611a      	str	r2, [r3, #16]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7ff fee6 	bl	80039ac <LL_ADC_REG_IsConversionOngoing>
 8003be0:	60f8      	str	r0, [r7, #12]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4618      	mov	r0, r3
 8003be8:	f7ff ff07 	bl	80039fa <LL_ADC_INJ_IsConversionOngoing>
 8003bec:	60b8      	str	r0, [r7, #8]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d151      	bne.n	8003c98 <HAL_ADC_Init+0x234>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d14e      	bne.n	8003c98 <HAL_ADC_Init+0x234>
       )
    {
      tmpCFGR1 = (
                   ADC_CFGR1_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	7d1b      	ldrb	r3, [r3, #20]
 8003bfe:	039a      	lsls	r2, r3, #14
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR1 = (
 8003c04:	4313      	orrs	r3, r2
 8003c06:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_FIELDS_2, tmpCFGR1);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003c12:	f023 0303 	bic.w	r3, r3, #3
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	6812      	ldr	r2, [r2, #0]
 8003c1a:	69b9      	ldr	r1, [r7, #24]
 8003c1c:	430b      	orrs	r3, r1
 8003c1e:	60d3      	str	r3, [r2, #12]

      LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	4619      	mov	r1, r3
 8003c2a:	4610      	mov	r0, r2
 8003c2c:	f7ff fca8 	bl	8003580 <LL_ADC_SetGainCompensation>

      if (hadc->Init.OversamplingMode == ENABLE)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d11b      	bne.n	8003c72 <HAL_ADC_Init+0x20e>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	691a      	ldr	r2, [r3, #16]
 8003c46:	4b2d      	ldr	r3, [pc, #180]	@ (8003cfc <HAL_ADC_Init+0x298>)
 8003c48:	4013      	ands	r3, r2
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003c4e:	3a01      	subs	r2, #1
 8003c50:	0411      	lsls	r1, r2, #16
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003c56:	4311      	orrs	r1, r2
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003c5c:	4311      	orrs	r1, r2
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003c62:	430a      	orrs	r2, r1
 8003c64:	431a      	orrs	r2, r3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f042 0201 	orr.w	r2, r2, #1
 8003c6e:	611a      	str	r2, [r3, #16]
 8003c70:	e007      	b.n	8003c82 <HAL_ADC_Init+0x21e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	691a      	ldr	r2, [r3, #16]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f022 0201 	bic.w	r2, r2, #1
 8003c80:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	691b      	ldr	r3, [r3, #16]
 8003c88:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	430a      	orrs	r2, r1
 8003c96:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d10c      	bne.n	8003cba <HAL_ADC_Init+0x256>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ca6:	f023 010f 	bic.w	r1, r3, #15
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	1e5a      	subs	r2, r3, #1
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	631a      	str	r2, [r3, #48]	@ 0x30
 8003cb8:	e007      	b.n	8003cca <HAL_ADC_Init+0x266>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f022 020f 	bic.w	r2, r2, #15
 8003cc8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cce:	f023 0303 	bic.w	r3, r3, #3
 8003cd2:	f043 0201 	orr.w	r2, r3, #1
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	659a      	str	r2, [r3, #88]	@ 0x58
 8003cda:	e007      	b.n	8003cec <HAL_ADC_Init+0x288>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ce0:	f043 0210 	orr.w	r2, r3, #16
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8003cec:	7ffb      	ldrb	r3, [r7, #31]
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3720      	adds	r7, #32
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	fff0c013 	.word	0xfff0c013
 8003cfc:	fc00f81e 	.word	0xfc00f81e

08003d00 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b086      	sub	sp, #24
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d08:	4857      	ldr	r0, [pc, #348]	@ (8003e68 <HAL_ADC_Start+0x168>)
 8003d0a:	f7ff fd6f 	bl	80037ec <LL_ADC_GetMultimode>
 8003d0e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7ff fe49 	bl	80039ac <LL_ADC_REG_IsConversionOngoing>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	f040 809c 	bne.w	8003e5a <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d101      	bne.n	8003d30 <HAL_ADC_Start+0x30>
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	e097      	b.n	8003e60 <HAL_ADC_Start+0x160>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f000 fc1d 	bl	8004578 <ADC_Enable>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003d42:	7dfb      	ldrb	r3, [r7, #23]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	f040 8083 	bne.w	8003e50 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d4e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003d52:	f023 0301 	bic.w	r3, r3, #1
 8003d56:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	659a      	str	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a42      	ldr	r2, [pc, #264]	@ (8003e6c <HAL_ADC_Start+0x16c>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d002      	beq.n	8003d6e <HAL_ADC_Start+0x6e>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	e000      	b.n	8003d70 <HAL_ADC_Start+0x70>
 8003d6e:	4b40      	ldr	r3, [pc, #256]	@ (8003e70 <HAL_ADC_Start+0x170>)
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	6812      	ldr	r2, [r2, #0]
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d002      	beq.n	8003d7e <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d105      	bne.n	8003d8a <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d82:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d8e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d96:	d106      	bne.n	8003da6 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d9c:	f023 0206 	bic.w	r2, r3, #6
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003da4:	e002      	b.n	8003dac <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	221c      	movs	r2, #28
 8003db2:	601a      	str	r2, [r3, #0]

      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a2a      	ldr	r2, [pc, #168]	@ (8003e6c <HAL_ADC_Start+0x16c>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d002      	beq.n	8003dcc <HAL_ADC_Start+0xcc>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	e000      	b.n	8003dce <HAL_ADC_Start+0xce>
 8003dcc:	4b28      	ldr	r3, [pc, #160]	@ (8003e70 <HAL_ADC_Start+0x170>)
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	6812      	ldr	r2, [r2, #0]
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d008      	beq.n	8003de8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d005      	beq.n	8003de8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	2b05      	cmp	r3, #5
 8003de0:	d002      	beq.n	8003de8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	2b09      	cmp	r3, #9
 8003de6:	d114      	bne.n	8003e12 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_JAUTO) != 0UL)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d007      	beq.n	8003e06 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dfa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003dfe:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f7ff fda6 	bl	800395c <LL_ADC_REG_StartConversion>
 8003e10:	e025      	b.n	8003e5e <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e16:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	659a      	str	r2, [r3, #88]	@ 0x58
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a12      	ldr	r2, [pc, #72]	@ (8003e6c <HAL_ADC_Start+0x16c>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d002      	beq.n	8003e2e <HAL_ADC_Start+0x12e>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	e000      	b.n	8003e30 <HAL_ADC_Start+0x130>
 8003e2e:	4b10      	ldr	r3, [pc, #64]	@ (8003e70 <HAL_ADC_Start+0x170>)
 8003e30:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR1, ADC_CFGR1_JAUTO) != 0UL)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00f      	beq.n	8003e5e <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e42:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003e46:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	659a      	str	r2, [r3, #88]	@ 0x58
 8003e4e:	e006      	b.n	8003e5e <HAL_ADC_Start+0x15e>
      LL_ADC_REG_StartConversion(hadc->Instance);
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8003e58:	e001      	b.n	8003e5e <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003e5a:	2302      	movs	r3, #2
 8003e5c:	75fb      	strb	r3, [r7, #23]
  }

  return tmp_hal_status;
 8003e5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3718      	adds	r7, #24
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	42028300 	.word	0x42028300
 8003e6c:	42028100 	.word	0x42028100
 8003e70:	42028000 	.word	0x42028000

08003e74 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d101      	bne.n	8003e8a <HAL_ADC_Stop+0x16>
 8003e86:	2302      	movs	r3, #2
 8003e88:	e023      	b.n	8003ed2 <HAL_ADC_Stop+0x5e>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003e92:	2103      	movs	r1, #3
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f000 fab3 	bl	8004400 <ADC_ConversionStop>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003e9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d111      	bne.n	8003ec8 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f000 fbeb 	bl	8004680 <ADC_Disable>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003eae:	7bfb      	ldrb	r3, [r7, #15]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d109      	bne.n	8003ec8 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eb8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003ebc:	f023 0301 	bic.w	r3, r3, #1
 8003ec0:	f043 0201 	orr.w	r2, r3, #1
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8003ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3710      	adds	r7, #16
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
	...

08003edc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b088      	sub	sp, #32
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003ee6:	4866      	ldr	r0, [pc, #408]	@ (8004080 <HAL_ADC_PollForConversion+0x1a4>)
 8003ee8:	f7ff fc80 	bl	80037ec <LL_ADC_GetMultimode>
 8003eec:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	2b08      	cmp	r3, #8
 8003ef4:	d102      	bne.n	8003efc <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003ef6:	2308      	movs	r3, #8
 8003ef8:	61fb      	str	r3, [r7, #28]
 8003efa:	e02a      	b.n	8003f52 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d005      	beq.n	8003f0e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	2b05      	cmp	r3, #5
 8003f06:	d002      	beq.n	8003f0e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	2b09      	cmp	r3, #9
 8003f0c:	d111      	bne.n	8003f32 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMNGT_0) != 0UL)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	f003 0301 	and.w	r3, r3, #1
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d007      	beq.n	8003f2c <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f20:	f043 0220 	orr.w	r2, r3, #32
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	659a      	str	r2, [r3, #88]	@ 0x58
        return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e0a4      	b.n	8004076 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003f2c:	2304      	movs	r3, #4
 8003f2e:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMNGT_0) != 0UL)
 8003f30:	e00f      	b.n	8003f52 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDataFormat(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DATA_EACH_ADC)
 8003f32:	4853      	ldr	r0, [pc, #332]	@ (8004080 <HAL_ADC_PollForConversion+0x1a4>)
 8003f34:	f7ff fc68 	bl	8003808 <LL_ADC_GetMultiDataFormat>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d007      	beq.n	8003f4e <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f42:	f043 0220 	orr.w	r2, r3, #32
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	659a      	str	r2, [r3, #88]	@ 0x58
        return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e093      	b.n	8004076 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003f4e:	2304      	movs	r3, #4
 8003f50:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003f52:	f7ff f9ff 	bl	8003354 <HAL_GetTick>
 8003f56:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003f58:	e021      	b.n	8003f9e <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f60:	d01d      	beq.n	8003f9e <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003f62:	f7ff f9f7 	bl	8003354 <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	683a      	ldr	r2, [r7, #0]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d302      	bcc.n	8003f78 <HAL_ADC_PollForConversion+0x9c>
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d112      	bne.n	8003f9e <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	4013      	ands	r3, r2
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d10b      	bne.n	8003f9e <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f8a:	f043 0204 	orr.w	r2, r3, #4
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e06b      	b.n	8004076 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d0d6      	beq.n	8003f5a <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fb0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f7ff fb02 	bl	80035c6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d01c      	beq.n	8004002 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	7d5b      	ldrb	r3, [r3, #21]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d118      	bne.n	8004002 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0308 	and.w	r3, r3, #8
 8003fda:	2b08      	cmp	r3, #8
 8003fdc:	d111      	bne.n	8004002 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fe2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	659a      	str	r2, [r3, #88]	@ 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d105      	bne.n	8004002 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ffa:	f043 0201 	orr.w	r2, r3, #1
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a1f      	ldr	r2, [pc, #124]	@ (8004084 <HAL_ADC_PollForConversion+0x1a8>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d002      	beq.n	8004012 <HAL_ADC_PollForConversion+0x136>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	e000      	b.n	8004014 <HAL_ADC_PollForConversion+0x138>
 8004012:	4b1d      	ldr	r3, [pc, #116]	@ (8004088 <HAL_ADC_PollForConversion+0x1ac>)
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	6812      	ldr	r2, [r2, #0]
 8004018:	4293      	cmp	r3, r2
 800401a:	d008      	beq.n	800402e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d005      	beq.n	800402e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	2b05      	cmp	r3, #5
 8004026:	d002      	beq.n	800402e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	2b09      	cmp	r3, #9
 800402c:	d104      	bne.n	8004038 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve ADC CFGR1 register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	61bb      	str	r3, [r7, #24]
 8004036:	e00c      	b.n	8004052 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a11      	ldr	r2, [pc, #68]	@ (8004084 <HAL_ADC_PollForConversion+0x1a8>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d002      	beq.n	8004048 <HAL_ADC_PollForConversion+0x16c>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	e000      	b.n	800404a <HAL_ADC_PollForConversion+0x16e>
 8004048:	4b0f      	ldr	r3, [pc, #60]	@ (8004088 <HAL_ADC_PollForConversion+0x1ac>)
 800404a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR1);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	61bb      	str	r3, [r7, #24]
  /* Retrieve ADC CFGR1 register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	2b08      	cmp	r3, #8
 8004056:	d104      	bne.n	8004062 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	2208      	movs	r2, #8
 800405e:	601a      	str	r2, [r3, #0]
 8004060:	e008      	b.n	8004074 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR1_AUTDLY) == 0UL)
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d103      	bne.n	8004074 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	220c      	movs	r2, #12
 8004072:	601a      	str	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	3720      	adds	r7, #32
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	42028300 	.word	0x42028300
 8004084:	42028100 	.word	0x42028100
 8004088:	42028000 	.word	0x42028000

0800408c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800409a:	4618      	mov	r0, r3
 800409c:	370c      	adds	r7, #12
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
	...

080040a8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b08a      	sub	sp, #40	@ 0x28
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040b2:	2300      	movs	r3, #0
 80040b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_common_path_internal_channel;
  uint32_t tmp_config_path_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80040b8:	2300      	movs	r3, #0
 80040ba:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_OFFSET(pConfig->Offset));

  assert_param(IS_ADC_CHANNEL(hadc, pConfig->Channel));

  /* Process locked */
  __HAL_LOCK(hadc);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d101      	bne.n	80040ca <HAL_ADC_ConfigChannel+0x22>
 80040c6:	2302      	movs	r3, #2
 80040c8:	e183      	b.n	80043d2 <HAL_ADC_ConfigChannel+0x32a>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2201      	movs	r2, #1
 80040ce:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7ff fc68 	bl	80039ac <LL_ADC_REG_IsConversionOngoing>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	f040 8162 	bne.w	80043a8 <HAL_ADC_ConfigChannel+0x300>
  {
    /* ADC channels preselection */
    LL_ADC_SetChannelPreselection(hadc->Instance, pConfig->Channel);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4619      	mov	r1, r3
 80040ee:	4610      	mov	r0, r2
 80040f0:	f7ff faa7 	bl	8003642 <LL_ADC_SetChannelPreselection>

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6818      	ldr	r0, [r3, #0]
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	6859      	ldr	r1, [r3, #4]
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	461a      	mov	r2, r3
 8004102:	f7ff fa73 	bl	80035ec <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4618      	mov	r0, r3
 800410c:	f7ff fc4e 	bl	80039ac <LL_ADC_REG_IsConversionOngoing>
 8004110:	6238      	str	r0, [r7, #32]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4618      	mov	r0, r3
 8004118:	f7ff fc6f 	bl	80039fa <LL_ADC_INJ_IsConversionOngoing>
 800411c:	61f8      	str	r0, [r7, #28]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800411e:	6a3b      	ldr	r3, [r7, #32]
 8004120:	2b00      	cmp	r3, #0
 8004122:	f040 80aa 	bne.w	800427a <HAL_ADC_ConfigChannel+0x1d2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	2b00      	cmp	r3, #0
 800412a:	f040 80a6 	bne.w	800427a <HAL_ADC_ConfigChannel+0x1d2>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6818      	ldr	r0, [r3, #0]
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	6819      	ldr	r1, [r3, #0]
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	461a      	mov	r2, r3
 800413c:	f7ff fa98 	bl	8003670 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	695a      	ldr	r2, [r3, #20]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	089b      	lsrs	r3, r3, #2
 800414c:	f003 0303 	and.w	r3, r3, #3
 8004150:	005b      	lsls	r3, r3, #1
 8004152:	fa02 f303 	lsl.w	r3, r2, r3
 8004156:	61bb      	str	r3, [r7, #24]

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	691b      	ldr	r3, [r3, #16]
 800415c:	2b04      	cmp	r3, #4
 800415e:	d038      	beq.n	80041d2 <HAL_ADC_ConfigChannel+0x12a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffsetChannel(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6818      	ldr	r0, [r3, #0]
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	6919      	ldr	r1, [r3, #16]
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	461a      	mov	r2, r3
 800416e:	f7ff f968 	bl	8003442 <LL_ADC_SetOffsetChannel>
        LL_ADC_SetOffsetLevel(hadc->Instance, pConfig->OffsetNumber, tmpOffsetShifted);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6818      	ldr	r0, [r3, #0]
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	69ba      	ldr	r2, [r7, #24]
 800417c:	4619      	mov	r1, r3
 800417e:	f7ff f993 	bl	80034a8 <LL_ADC_SetOffsetLevel>
        /* Signed and unsigned saturation cannot be set at the same time */
        assert_param(!((pConfig->OffsetSignedSaturation == ENABLE) && (pConfig->OffsetSaturation == ENABLE)));


        /* Set ADC offset sign */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6818      	ldr	r0, [r3, #0]
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	6919      	ldr	r1, [r3, #16]
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	69db      	ldr	r3, [r3, #28]
 800418e:	461a      	mov	r2, r3
 8004190:	f7ff f9a5 	bl	80034de <LL_ADC_SetOffsetSign>
        /* Set ADC offset signed saturation */
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,      \
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6818      	ldr	r0, [r3, #0]
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	6919      	ldr	r1, [r3, #16]
                                         (pConfig->OffsetSignedSaturation == ENABLE) \
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	7e1b      	ldrb	r3, [r3, #24]
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,      \
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d102      	bne.n	80041aa <HAL_ADC_ConfigChannel+0x102>
 80041a4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80041a8:	e000      	b.n	80041ac <HAL_ADC_ConfigChannel+0x104>
 80041aa:	2300      	movs	r3, #0
 80041ac:	461a      	mov	r2, r3
 80041ae:	f7ff f9b1 	bl	8003514 <LL_ADC_SetOffsetSignedSaturation>
                                         ? LL_ADC_OFFSET_SIGNED_SAT_ENABLE           \
                                         : LL_ADC_OFFSET_SIGNED_SAT_DISABLE);
        /* Set ADC offset unsigned saturation */
        LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,    \
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6818      	ldr	r0, [r3, #0]
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	6919      	ldr	r1, [r3, #16]
                                           (pConfig->OffsetSaturation == ENABLE)     \
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	7e5b      	ldrb	r3, [r3, #25]
        LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,    \
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d102      	bne.n	80041c8 <HAL_ADC_ConfigChannel+0x120>
 80041c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80041c6:	e000      	b.n	80041ca <HAL_ADC_ConfigChannel+0x122>
 80041c8:	2300      	movs	r3, #0
 80041ca:	461a      	mov	r2, r3
 80041cc:	f7ff f9bd 	bl	800354a <LL_ADC_SetOffsetUnsignedSaturation>
 80041d0:	e053      	b.n	800427a <HAL_ADC_ConfigChannel+0x1d2>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted.
           If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	2100      	movs	r1, #0
 80041d8:	4618      	mov	r0, r3
 80041da:	f7ff f94e 	bl	800347a <LL_ADC_GetOffsetChannel>
 80041de:	4602      	mov	r2, r0
            == __HAL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4053      	eors	r3, r2
 80041e6:	f003 031f 	and.w	r3, r3, #31
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d106      	bne.n	80041fc <HAL_ADC_ConfigChannel+0x154>
        {
          LL_ADC_SetOffsetLevel(hadc->Instance, LL_ADC_OFFSET_1, 0UL);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2200      	movs	r2, #0
 80041f4:	2100      	movs	r1, #0
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7ff f956 	bl	80034a8 <LL_ADC_SetOffsetLevel>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2101      	movs	r1, #1
 8004202:	4618      	mov	r0, r3
 8004204:	f7ff f939 	bl	800347a <LL_ADC_GetOffsetChannel>
 8004208:	4602      	mov	r2, r0
            == __HAL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4053      	eors	r3, r2
 8004210:	f003 031f 	and.w	r3, r3, #31
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004214:	2b00      	cmp	r3, #0
 8004216:	d106      	bne.n	8004226 <HAL_ADC_ConfigChannel+0x17e>
        {
          LL_ADC_SetOffsetLevel(hadc->Instance, LL_ADC_OFFSET_2, 0UL);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2200      	movs	r2, #0
 800421e:	2101      	movs	r1, #1
 8004220:	4618      	mov	r0, r3
 8004222:	f7ff f941 	bl	80034a8 <LL_ADC_SetOffsetLevel>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2102      	movs	r1, #2
 800422c:	4618      	mov	r0, r3
 800422e:	f7ff f924 	bl	800347a <LL_ADC_GetOffsetChannel>
 8004232:	4602      	mov	r2, r0
            == __HAL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4053      	eors	r3, r2
 800423a:	f003 031f 	and.w	r3, r3, #31
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800423e:	2b00      	cmp	r3, #0
 8004240:	d106      	bne.n	8004250 <HAL_ADC_ConfigChannel+0x1a8>
        {
          LL_ADC_SetOffsetLevel(hadc->Instance, LL_ADC_OFFSET_3, 0UL);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2200      	movs	r2, #0
 8004248:	2102      	movs	r1, #2
 800424a:	4618      	mov	r0, r3
 800424c:	f7ff f92c 	bl	80034a8 <LL_ADC_SetOffsetLevel>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2103      	movs	r1, #3
 8004256:	4618      	mov	r0, r3
 8004258:	f7ff f90f 	bl	800347a <LL_ADC_GetOffsetChannel>
 800425c:	4602      	mov	r2, r0
            == __HAL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4053      	eors	r3, r2
 8004264:	f003 031f 	and.w	r3, r3, #31
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004268:	2b00      	cmp	r3, #0
 800426a:	d106      	bne.n	800427a <HAL_ADC_ConfigChannel+0x1d2>
        {
          LL_ADC_SetOffsetLevel(hadc->Instance, LL_ADC_OFFSET_4, 0UL);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2200      	movs	r2, #0
 8004272:	2103      	movs	r1, #3
 8004274:	4618      	mov	r0, r3
 8004276:	f7ff f917 	bl	80034a8 <LL_ADC_SetOffsetLevel>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004282:	2b00      	cmp	r3, #0
 8004284:	f000 809f 	beq.w	80043c6 <HAL_ADC_ConfigChannel+0x31e>
    {
      tmp_config_common_path_internal_channel =
        LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004288:	4854      	ldr	r0, [pc, #336]	@ (80043dc <HAL_ADC_ConfigChannel+0x334>)
 800428a:	f7ff f8a6 	bl	80033da <LL_ADC_GetCommonPathInternalCh>
 800428e:	6178      	str	r0, [r7, #20]
      tmp_config_path_internal_channel = LL_ADC_GetPathInternalCh(hadc->Instance);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4618      	mov	r0, r3
 8004296:	f7ff f8c4 	bl	8003422 <LL_ADC_GetPathInternalCh>
 800429a:	6138      	str	r0, [r7, #16]
      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a4f      	ldr	r2, [pc, #316]	@ (80043e0 <HAL_ADC_ConfigChannel+0x338>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d116      	bne.n	80042d4 <HAL_ADC_ConfigChannel+0x22c>
          && ((tmp_config_common_path_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d111      	bne.n	80042d4 <HAL_ADC_ConfigChannel+0x22c>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a4b      	ldr	r2, [pc, #300]	@ (80043e4 <HAL_ADC_ConfigChannel+0x33c>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d004      	beq.n	80042c4 <HAL_ADC_ConfigChannel+0x21c>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a4a      	ldr	r2, [pc, #296]	@ (80043e8 <HAL_ADC_ConfigChannel+0x340>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d17b      	bne.n	80043bc <HAL_ADC_ConfigChannel+0x314>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80042ca:	4619      	mov	r1, r3
 80042cc:	4843      	ldr	r0, [pc, #268]	@ (80043dc <HAL_ADC_ConfigChannel+0x334>)
 80042ce:	f7ff f871 	bl	80033b4 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_VREFINT_INSTANCE(hadc))
 80042d2:	e073      	b.n	80043bc <HAL_ADC_ConfigChannel+0x314>
                                         LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_common_path_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a44      	ldr	r2, [pc, #272]	@ (80043ec <HAL_ADC_ConfigChannel+0x344>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d12a      	bne.n	8004334 <HAL_ADC_ConfigChannel+0x28c>
               && ((tmp_config_common_path_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d125      	bne.n	8004334 <HAL_ADC_ConfigChannel+0x28c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a3d      	ldr	r2, [pc, #244]	@ (80043e4 <HAL_ADC_ConfigChannel+0x33c>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d004      	beq.n	80042fc <HAL_ADC_ConfigChannel+0x254>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a3c      	ldr	r2, [pc, #240]	@ (80043e8 <HAL_ADC_ConfigChannel+0x340>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d161      	bne.n	80043c0 <HAL_ADC_ConfigChannel+0x318>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004302:	4619      	mov	r1, r3
 8004304:	4835      	ldr	r0, [pc, #212]	@ (80043dc <HAL_ADC_ConfigChannel+0x334>)
 8004306:	f7ff f855 	bl	80033b4 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800430a:	4b39      	ldr	r3, [pc, #228]	@ (80043f0 <HAL_ADC_ConfigChannel+0x348>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	099b      	lsrs	r3, r3, #6
 8004310:	4a38      	ldr	r2, [pc, #224]	@ (80043f4 <HAL_ADC_ConfigChannel+0x34c>)
 8004312:	fba2 2303 	umull	r2, r3, r2, r3
 8004316:	099b      	lsrs	r3, r3, #6
 8004318:	1c5a      	adds	r2, r3, #1
 800431a:	4613      	mov	r3, r2
 800431c:	005b      	lsls	r3, r3, #1
 800431e:	4413      	add	r3, r2
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004324:	e002      	b.n	800432c <HAL_ADC_ConfigChannel+0x284>
          {
            wait_loop_index--;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	3b01      	subs	r3, #1
 800432a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d1f9      	bne.n	8004326 <HAL_ADC_ConfigChannel+0x27e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004332:	e045      	b.n	80043c0 <HAL_ADC_ConfigChannel+0x318>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a2f      	ldr	r2, [pc, #188]	@ (80043f8 <HAL_ADC_ConfigChannel+0x350>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d116      	bne.n	800436c <HAL_ADC_ConfigChannel+0x2c4>
               && ((tmp_config_common_path_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d111      	bne.n	800436c <HAL_ADC_ConfigChannel+0x2c4>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a25      	ldr	r2, [pc, #148]	@ (80043e4 <HAL_ADC_ConfigChannel+0x33c>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d004      	beq.n	800435c <HAL_ADC_ConfigChannel+0x2b4>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a24      	ldr	r2, [pc, #144]	@ (80043e8 <HAL_ADC_ConfigChannel+0x340>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d133      	bne.n	80043c4 <HAL_ADC_ConfigChannel+0x31c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004362:	4619      	mov	r1, r3
 8004364:	481d      	ldr	r0, [pc, #116]	@ (80043dc <HAL_ADC_ConfigChannel+0x334>)
 8004366:	f7ff f825 	bl	80033b4 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800436a:	e02b      	b.n	80043c4 <HAL_ADC_ConfigChannel+0x31c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_common_path_internal_channel);
        }
      }
      else if (((pConfig->Channel == ADC_CHANNEL_VDDCORE)
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a22      	ldr	r2, [pc, #136]	@ (80043fc <HAL_ADC_ConfigChannel+0x354>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d127      	bne.n	80043c6 <HAL_ADC_ConfigChannel+0x31e>
                && ((tmp_config_path_internal_channel & LL_ADC_PATH_INTERNAL_VDDCORE) == 0UL)))
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d122      	bne.n	80043c6 <HAL_ADC_ConfigChannel+0x31e>
      {
        if (ADC_VDDCORE_INSTANCE(hadc))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a17      	ldr	r2, [pc, #92]	@ (80043e4 <HAL_ADC_ConfigChannel+0x33c>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d004      	beq.n	8004394 <HAL_ADC_ConfigChannel+0x2ec>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a16      	ldr	r2, [pc, #88]	@ (80043e8 <HAL_ADC_ConfigChannel+0x340>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d118      	bne.n	80043c6 <HAL_ADC_ConfigChannel+0x31e>
        {
          LL_ADC_SetPathInternalCh(hadc->Instance, LL_ADC_PATH_INTERNAL_VDDCORE | tmp_config_path_internal_channel);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800439e:	4619      	mov	r1, r3
 80043a0:	4610      	mov	r0, r2
 80043a2:	f7ff f828 	bl	80033f6 <LL_ADC_SetPathInternalCh>
 80043a6:	e00e      	b.n	80043c6 <HAL_ADC_ConfigChannel+0x31e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043ac:	f043 0220 	orr.w	r2, r3, #32
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80043ba:	e004      	b.n	80043c6 <HAL_ADC_ConfigChannel+0x31e>
        if (ADC_VREFINT_INSTANCE(hadc))
 80043bc:	bf00      	nop
 80043be:	e002      	b.n	80043c6 <HAL_ADC_ConfigChannel+0x31e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80043c0:	bf00      	nop
 80043c2:	e000      	b.n	80043c6 <HAL_ADC_ConfigChannel+0x31e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80043c4:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 80043ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3728      	adds	r7, #40	@ 0x28
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	42028300 	.word	0x42028300
 80043e0:	00400c00 	.word	0x00400c00
 80043e4:	42028000 	.word	0x42028000
 80043e8:	42028100 	.word	0x42028100
 80043ec:	00800c11 	.word	0x00800c11
 80043f0:	20000004 	.word	0x20000004
 80043f4:	053e2d63 	.word	0x053e2d63
 80043f8:	01000c10 	.word	0x01000c10
 80043fc:	00010c12 	.word	0x00010c12

08004400 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b088      	sub	sp, #32
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t conversion_timeout_cpu_cycles = 0UL;
 800440a:	2300      	movs	r3, #0
 800440c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4618      	mov	r0, r3
 8004418:	f7ff fac8 	bl	80039ac <LL_ADC_REG_IsConversionOngoing>
 800441c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4618      	mov	r0, r3
 8004424:	f7ff fae9 	bl	80039fa <LL_ADC_INJ_IsConversionOngoing>
 8004428:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d103      	bne.n	8004438 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2b00      	cmp	r3, #0
 8004434:	f000 8098 	beq.w	8004568 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR1 & ADC_CFGR1_JAUTO) != 0UL)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d02a      	beq.n	800449c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	7d5b      	ldrb	r3, [r3, #21]
 800444a:	2b01      	cmp	r3, #1
 800444c:	d126      	bne.n	800449c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	7d1b      	ldrb	r3, [r3, #20]
 8004452:	2b01      	cmp	r3, #1
 8004454:	d122      	bne.n	800449c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8004456:	2301      	movs	r3, #1
 8004458:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800445a:	e014      	b.n	8004486 <ADC_ConversionStop+0x86>
      {
        if (conversion_timeout_cpu_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	4a45      	ldr	r2, [pc, #276]	@ (8004574 <ADC_ConversionStop+0x174>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d90d      	bls.n	8004480 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004468:	f043 0210 	orr.w	r2, r3, #16
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004474:	f043 0201 	orr.w	r2, r3, #1
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e074      	b.n	800456a <ADC_ConversionStop+0x16a>
        }
        conversion_timeout_cpu_cycles ++;
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	3301      	adds	r3, #1
 8004484:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004490:	2b40      	cmp	r3, #64	@ 0x40
 8004492:	d1e3      	bne.n	800445c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2240      	movs	r2, #64	@ 0x40
 800449a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d014      	beq.n	80044cc <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4618      	mov	r0, r3
 80044a8:	f7ff fa80 	bl	80039ac <LL_ADC_REG_IsConversionOngoing>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00c      	beq.n	80044cc <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7ff fa3d 	bl	8003936 <LL_ADC_IsDisableOngoing>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d104      	bne.n	80044cc <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4618      	mov	r0, r3
 80044c8:	f7ff fa5c 	bl	8003984 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d014      	beq.n	80044fc <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7ff fa8f 	bl	80039fa <LL_ADC_INJ_IsConversionOngoing>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00c      	beq.n	80044fc <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7ff fa25 	bl	8003936 <LL_ADC_IsDisableOngoing>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d104      	bne.n	80044fc <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7ff fa6b 	bl	80039d2 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d005      	beq.n	800450e <ADC_ConversionStop+0x10e>
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	2b03      	cmp	r3, #3
 8004506:	d105      	bne.n	8004514 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004508:	230c      	movs	r3, #12
 800450a:	617b      	str	r3, [r7, #20]
        break;
 800450c:	e005      	b.n	800451a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800450e:	2308      	movs	r3, #8
 8004510:	617b      	str	r3, [r7, #20]
        break;
 8004512:	e002      	b.n	800451a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004514:	2304      	movs	r3, #4
 8004516:	617b      	str	r3, [r7, #20]
        break;
 8004518:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800451a:	f7fe ff1b 	bl	8003354 <HAL_GetTick>
 800451e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004520:	e01b      	b.n	800455a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004522:	f7fe ff17 	bl	8003354 <HAL_GetTick>
 8004526:	4602      	mov	r2, r0
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	2b05      	cmp	r3, #5
 800452e:	d914      	bls.n	800455a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	689a      	ldr	r2, [r3, #8]
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	4013      	ands	r3, r2
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00d      	beq.n	800455a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004542:	f043 0210 	orr.w	r2, r3, #16
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800454e:	f043 0201 	orr.w	r2, r3, #1
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e007      	b.n	800456a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	689a      	ldr	r2, [r3, #8]
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	4013      	ands	r3, r2
 8004564:	2b00      	cmp	r3, #0
 8004566:	d1dc      	bne.n	8004522 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	3720      	adds	r7, #32
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	a33fffff 	.word	0xa33fffff

08004578 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4618      	mov	r0, r3
 8004586:	f7ff f9c3 	bl	8003910 <LL_ADC_IsEnabled>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d169      	bne.n	8004664 <ADC_Enable+0xec>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	689a      	ldr	r2, [r3, #8]
 8004596:	4b36      	ldr	r3, [pc, #216]	@ (8004670 <ADC_Enable+0xf8>)
 8004598:	4013      	ands	r3, r2
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00d      	beq.n	80045ba <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045a2:	f043 0210 	orr.w	r2, r3, #16
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045ae:	f043 0201 	orr.w	r2, r3, #1
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e055      	b.n	8004666 <ADC_Enable+0xee>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4618      	mov	r0, r3
 80045c0:	f7ff f97e 	bl	80038c0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80045c4:	482b      	ldr	r0, [pc, #172]	@ (8004674 <ADC_Enable+0xfc>)
 80045c6:	f7fe ff08 	bl	80033da <LL_ADC_GetCommonPathInternalCh>
 80045ca:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80045cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d013      	beq.n	80045fc <ADC_Enable+0x84>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80045d4:	4b28      	ldr	r3, [pc, #160]	@ (8004678 <ADC_Enable+0x100>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	099b      	lsrs	r3, r3, #6
 80045da:	4a28      	ldr	r2, [pc, #160]	@ (800467c <ADC_Enable+0x104>)
 80045dc:	fba2 2303 	umull	r2, r3, r2, r3
 80045e0:	099b      	lsrs	r3, r3, #6
 80045e2:	1c5a      	adds	r2, r3, #1
 80045e4:	4613      	mov	r3, r2
 80045e6:	005b      	lsls	r3, r3, #1
 80045e8:	4413      	add	r3, r2
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 80045ee:	e002      	b.n	80045f6 <ADC_Enable+0x7e>
      {
        wait_loop_index--;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	3b01      	subs	r3, #1
 80045f4:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d1f9      	bne.n	80045f0 <ADC_Enable+0x78>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80045fc:	f7fe feaa 	bl	8003354 <HAL_GetTick>
 8004600:	60b8      	str	r0, [r7, #8]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004602:	e028      	b.n	8004656 <ADC_Enable+0xde>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4618      	mov	r0, r3
 800460a:	f7ff f981 	bl	8003910 <LL_ADC_IsEnabled>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d104      	bne.n	800461e <ADC_Enable+0xa6>
      {
        LL_ADC_Enable(hadc->Instance);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4618      	mov	r0, r3
 800461a:	f7ff f951 	bl	80038c0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800461e:	f7fe fe99 	bl	8003354 <HAL_GetTick>
 8004622:	4602      	mov	r2, r0
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	2b02      	cmp	r3, #2
 800462a:	d914      	bls.n	8004656 <ADC_Enable+0xde>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0301 	and.w	r3, r3, #1
 8004636:	2b01      	cmp	r3, #1
 8004638:	d00d      	beq.n	8004656 <ADC_Enable+0xde>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800463e:	f043 0210 	orr.w	r2, r3, #16
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800464a:	f043 0201 	orr.w	r2, r3, #1
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e007      	b.n	8004666 <ADC_Enable+0xee>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0301 	and.w	r3, r3, #1
 8004660:	2b01      	cmp	r3, #1
 8004662:	d1cf      	bne.n	8004604 <ADC_Enable+0x8c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3710      	adds	r7, #16
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	8000003f 	.word	0x8000003f
 8004674:	42028300 	.word	0x42028300
 8004678:	20000004 	.word	0x20000004
 800467c:	053e2d63 	.word	0x053e2d63

08004680 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b084      	sub	sp, #16
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4618      	mov	r0, r3
 800468e:	f7ff f952 	bl	8003936 <LL_ADC_IsDisableOngoing>
 8004692:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4618      	mov	r0, r3
 800469a:	f7ff f939 	bl	8003910 <LL_ADC_IsEnabled>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d047      	beq.n	8004734 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d144      	bne.n	8004734 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	f003 030d 	and.w	r3, r3, #13
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d10c      	bne.n	80046d2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4618      	mov	r0, r3
 80046be:	f7ff f913 	bl	80038e8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2203      	movs	r2, #3
 80046c8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80046ca:	f7fe fe43 	bl	8003354 <HAL_GetTick>
 80046ce:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80046d0:	e029      	b.n	8004726 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046d6:	f043 0210 	orr.w	r2, r3, #16
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046e2:	f043 0201 	orr.w	r2, r3, #1
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e023      	b.n	8004736 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80046ee:	f7fe fe31 	bl	8003354 <HAL_GetTick>
 80046f2:	4602      	mov	r2, r0
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d914      	bls.n	8004726 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f003 0301 	and.w	r3, r3, #1
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00d      	beq.n	8004726 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800470e:	f043 0210 	orr.w	r2, r3, #16
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800471a:	f043 0201 	orr.w	r2, r3, #1
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e007      	b.n	8004736 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	f003 0301 	and.w	r3, r3, #1
 8004730:	2b00      	cmp	r3, #0
 8004732:	d1dc      	bne.n	80046ee <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	3710      	adds	r7, #16
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}

0800473e <LL_ADC_StartCalibration>:
{
 800473e:	b480      	push	{r7}
 8004740:	b083      	sub	sp, #12
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800474e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004752:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	609a      	str	r2, [r3, #8]
}
 800475a:	bf00      	nop
 800475c:	370c      	adds	r7, #12
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr

08004766 <LL_ADC_IsCalibrationOnGoing>:
{
 8004766:	b480      	push	{r7}
 8004768:	b083      	sub	sp, #12
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004776:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800477a:	d101      	bne.n	8004780 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800477c:	2301      	movs	r3, #1
 800477e:	e000      	b.n	8004782 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	370c      	adds	r7, #12
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
	...

08004790 <HAL_ADCEx_Calibration_Start>:
  *         This parameter can be one of the following values:
  *           @arg @ref ADC_SINGLE_ENDED      Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
  UNUSED(SingleDiff);
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800479a:	2300      	movs	r3, #0
 800479c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d101      	bne.n	80047ac <HAL_ADCEx_Calibration_Start+0x1c>
 80047a8:	2302      	movs	r3, #2
 80047aa:	e04c      	b.n	8004846 <HAL_ADCEx_Calibration_Start+0xb6>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f7ff ff63 	bl	8004680 <ADC_Disable>
 80047ba:	4603      	mov	r3, r0
 80047bc:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80047be:	7bfb      	ldrb	r3, [r7, #15]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d135      	bne.n	8004830 <HAL_ADCEx_Calibration_Start+0xa0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047c8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80047cc:	f023 0302 	bic.w	r3, r3, #2
 80047d0:	f043 0202 	orr.w	r2, r3, #2
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	659a      	str	r2, [r3, #88]	@ 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    /* Start ADC calibration */
    LL_ADC_StartCalibration(hadc->Instance);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4618      	mov	r0, r3
 80047de:	f7ff ffae 	bl	800473e <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80047e2:	e014      	b.n	800480e <HAL_ADCEx_Calibration_Start+0x7e>
    {

      wait_loop_index++;
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	3301      	adds	r3, #1
 80047e8:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	4a18      	ldr	r2, [pc, #96]	@ (8004850 <HAL_ADCEx_Calibration_Start+0xc0>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d90d      	bls.n	800480e <HAL_ADCEx_Calibration_Start+0x7e>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047f6:	f023 0312 	bic.w	r3, r3, #18
 80047fa:	f043 0210 	orr.w	r2, r3, #16
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	659a      	str	r2, [r3, #88]	@ 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e01b      	b.n	8004846 <HAL_ADCEx_Calibration_Start+0xb6>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4618      	mov	r0, r3
 8004814:	f7ff ffa7 	bl	8004766 <LL_ADC_IsCalibrationOnGoing>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d1e2      	bne.n	80047e4 <HAL_ADCEx_Calibration_Start+0x54>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004822:	f023 0303 	bic.w	r3, r3, #3
 8004826:	f043 0201 	orr.w	r2, r3, #1
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	659a      	str	r2, [r3, #88]	@ 0x58
 800482e:	e005      	b.n	800483c <HAL_ADCEx_Calibration_Start+0xac>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004834:	f043 0210 	orr.w	r2, r3, #16
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8004844:	7bfb      	ldrb	r3, [r7, #15]
}
 8004846:	4618      	mov	r0, r3
 8004848:	3710      	adds	r7, #16
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	0005e8ff 	.word	0x0005e8ff

08004854 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004854:	b480      	push	{r7}
 8004856:	b085      	sub	sp, #20
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f003 0307 	and.w	r3, r3, #7
 8004862:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004864:	4b0c      	ldr	r3, [pc, #48]	@ (8004898 <__NVIC_SetPriorityGrouping+0x44>)
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800486a:	68ba      	ldr	r2, [r7, #8]
 800486c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004870:	4013      	ands	r3, r2
 8004872:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800487c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004880:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004884:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004886:	4a04      	ldr	r2, [pc, #16]	@ (8004898 <__NVIC_SetPriorityGrouping+0x44>)
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	60d3      	str	r3, [r2, #12]
}
 800488c:	bf00      	nop
 800488e:	3714      	adds	r7, #20
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr
 8004898:	e000ed00 	.word	0xe000ed00

0800489c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800489c:	b480      	push	{r7}
 800489e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80048a0:	4b04      	ldr	r3, [pc, #16]	@ (80048b4 <__NVIC_GetPriorityGrouping+0x18>)
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	0a1b      	lsrs	r3, r3, #8
 80048a6:	f003 0307 	and.w	r3, r3, #7
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr
 80048b4:	e000ed00 	.word	0xe000ed00

080048b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	4603      	mov	r3, r0
 80048c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	db0b      	blt.n	80048e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048ca:	79fb      	ldrb	r3, [r7, #7]
 80048cc:	f003 021f 	and.w	r2, r3, #31
 80048d0:	4907      	ldr	r1, [pc, #28]	@ (80048f0 <__NVIC_EnableIRQ+0x38>)
 80048d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048d6:	095b      	lsrs	r3, r3, #5
 80048d8:	2001      	movs	r0, #1
 80048da:	fa00 f202 	lsl.w	r2, r0, r2
 80048de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80048e2:	bf00      	nop
 80048e4:	370c      	adds	r7, #12
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	e000e100 	.word	0xe000e100

080048f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	4603      	mov	r3, r0
 80048fc:	6039      	str	r1, [r7, #0]
 80048fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004904:	2b00      	cmp	r3, #0
 8004906:	db0a      	blt.n	800491e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	b2da      	uxtb	r2, r3
 800490c:	490c      	ldr	r1, [pc, #48]	@ (8004940 <__NVIC_SetPriority+0x4c>)
 800490e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004912:	0112      	lsls	r2, r2, #4
 8004914:	b2d2      	uxtb	r2, r2
 8004916:	440b      	add	r3, r1
 8004918:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800491c:	e00a      	b.n	8004934 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	b2da      	uxtb	r2, r3
 8004922:	4908      	ldr	r1, [pc, #32]	@ (8004944 <__NVIC_SetPriority+0x50>)
 8004924:	79fb      	ldrb	r3, [r7, #7]
 8004926:	f003 030f 	and.w	r3, r3, #15
 800492a:	3b04      	subs	r3, #4
 800492c:	0112      	lsls	r2, r2, #4
 800492e:	b2d2      	uxtb	r2, r2
 8004930:	440b      	add	r3, r1
 8004932:	761a      	strb	r2, [r3, #24]
}
 8004934:	bf00      	nop
 8004936:	370c      	adds	r7, #12
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr
 8004940:	e000e100 	.word	0xe000e100
 8004944:	e000ed00 	.word	0xe000ed00

08004948 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004948:	b480      	push	{r7}
 800494a:	b089      	sub	sp, #36	@ 0x24
 800494c:	af00      	add	r7, sp, #0
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f003 0307 	and.w	r3, r3, #7
 800495a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	f1c3 0307 	rsb	r3, r3, #7
 8004962:	2b04      	cmp	r3, #4
 8004964:	bf28      	it	cs
 8004966:	2304      	movcs	r3, #4
 8004968:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	3304      	adds	r3, #4
 800496e:	2b06      	cmp	r3, #6
 8004970:	d902      	bls.n	8004978 <NVIC_EncodePriority+0x30>
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	3b03      	subs	r3, #3
 8004976:	e000      	b.n	800497a <NVIC_EncodePriority+0x32>
 8004978:	2300      	movs	r3, #0
 800497a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800497c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	fa02 f303 	lsl.w	r3, r2, r3
 8004986:	43da      	mvns	r2, r3
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	401a      	ands	r2, r3
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004990:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	fa01 f303 	lsl.w	r3, r1, r3
 800499a:	43d9      	mvns	r1, r3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049a0:	4313      	orrs	r3, r2
         );
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3724      	adds	r7, #36	@ 0x24
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr

080049ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049ae:	b580      	push	{r7, lr}
 80049b0:	b082      	sub	sp, #8
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f7ff ff4c 	bl	8004854 <__NVIC_SetPriorityGrouping>
}
 80049bc:	bf00      	nop
 80049be:	3708      	adds	r7, #8
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b086      	sub	sp, #24
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	4603      	mov	r3, r0
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	607a      	str	r2, [r7, #4]
 80049d0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_PRIO_INTERRUPT(IRQn));
  prioritygroup = NVIC_GetPriorityGrouping();
 80049d2:	f7ff ff63 	bl	800489c <__NVIC_GetPriorityGrouping>
 80049d6:	6178      	str	r0, [r7, #20]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority, prioritygroup));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority, prioritygroup));

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	68b9      	ldr	r1, [r7, #8]
 80049dc:	6978      	ldr	r0, [r7, #20]
 80049de:	f7ff ffb3 	bl	8004948 <NVIC_EncodePriority>
 80049e2:	4602      	mov	r2, r0
 80049e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049e8:	4611      	mov	r1, r2
 80049ea:	4618      	mov	r0, r3
 80049ec:	f7ff ff82 	bl	80048f4 <__NVIC_SetPriority>
}
 80049f0:	bf00      	nop
 80049f2:	3718      	adds	r7, #24
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *         to the appropriate CMSIS device file (stm32u3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	4603      	mov	r3, r0
 8004a00:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7ff ff56 	bl	80048b8 <__NVIC_EnableIRQ>
}
 8004a0c:	bf00      	nop
 8004a0e:	3708      	adds	r7, #8
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}

08004a14 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a24:	d301      	bcc.n	8004a2a <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8004a26:	2301      	movs	r3, #1
 8004a28:	e00d      	b.n	8004a46 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8004a2a:	4a0a      	ldr	r2, [pc, #40]	@ (8004a54 <HAL_SYSTICK_Config+0x40>)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	3b01      	subs	r3, #1
 8004a30:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8004a32:	4b08      	ldr	r3, [pc, #32]	@ (8004a54 <HAL_SYSTICK_Config+0x40>)
 8004a34:	2200      	movs	r2, #0
 8004a36:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8004a38:	4b06      	ldr	r3, [pc, #24]	@ (8004a54 <HAL_SYSTICK_Config+0x40>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a05      	ldr	r2, [pc, #20]	@ (8004a54 <HAL_SYSTICK_Config+0x40>)
 8004a3e:	f043 0303 	orr.w	r3, r3, #3
 8004a42:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	370c      	adds	r7, #12
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr
 8004a52:	bf00      	nop
 8004a54:	e000e010 	.word	0xe000e010

08004a58 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8 AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2b04      	cmp	r3, #4
 8004a64:	d844      	bhi.n	8004af0 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8004a66:	a201      	add	r2, pc, #4	@ (adr r2, 8004a6c <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8004a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a6c:	08004a8f 	.word	0x08004a8f
 8004a70:	08004aad 	.word	0x08004aad
 8004a74:	08004acf 	.word	0x08004acf
 8004a78:	08004af1 	.word	0x08004af1
 8004a7c:	08004a81 	.word	0x08004a81
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8004a80:	4b1f      	ldr	r3, [pc, #124]	@ (8004b00 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a1e      	ldr	r2, [pc, #120]	@ (8004b00 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004a86:	f043 0304 	orr.w	r3, r3, #4
 8004a8a:	6013      	str	r3, [r2, #0]
      break;
 8004a8c:	e031      	b.n	8004af2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8004a8e:	4b1c      	ldr	r3, [pc, #112]	@ (8004b00 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a1b      	ldr	r2, [pc, #108]	@ (8004b00 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004a94:	f023 0304 	bic.w	r3, r3, #4
 8004a98:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8004a9a:	4b1a      	ldr	r3, [pc, #104]	@ (8004b04 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004a9c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004aa0:	4a18      	ldr	r2, [pc, #96]	@ (8004b04 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004aa2:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8004aa6:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
      break;
 8004aaa:	e022      	b.n	8004af2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8004aac:	4b14      	ldr	r3, [pc, #80]	@ (8004b00 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a13      	ldr	r2, [pc, #76]	@ (8004b00 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004ab2:	f023 0304 	bic.w	r3, r3, #4
 8004ab6:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8004ab8:	4b12      	ldr	r3, [pc, #72]	@ (8004b04 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004aba:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004abe:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8004ac2:	4a10      	ldr	r2, [pc, #64]	@ (8004b04 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004ac4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004ac8:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
      break;
 8004acc:	e011      	b.n	8004af2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8004ace:	4b0c      	ldr	r3, [pc, #48]	@ (8004b00 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a0b      	ldr	r2, [pc, #44]	@ (8004b00 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004ad4:	f023 0304 	bic.w	r3, r3, #4
 8004ad8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8004ada:	4b0a      	ldr	r3, [pc, #40]	@ (8004b04 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004adc:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004ae0:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8004ae4:	4a07      	ldr	r2, [pc, #28]	@ (8004b04 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004ae6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004aea:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
      break;
 8004aee:	e000      	b.n	8004af2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8004af0:	bf00      	nop
  }
}
 8004af2:	bf00      	nop
 8004af4:	370c      	adds	r7, #12
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	e000e010 	.word	0xe000e010
 8004b04:	40030c00 	.word	0x40030c00

08004b08 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d101      	bne.n	8004b1a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e014      	b.n	8004b44 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	791b      	ldrb	r3, [r3, #4]
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d105      	bne.n	8004b30 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f7fd fd76 	bl	800261c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2202      	movs	r2, #2
 8004b34:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3708      	adds	r7, #8
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b085      	sub	sp, #20
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d101      	bne.n	8004b60 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e056      	b.n	8004c0e <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	795b      	ldrb	r3, [r3, #5]
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d101      	bne.n	8004b6c <HAL_DAC_Start+0x20>
 8004b68:	2302      	movs	r3, #2
 8004b6a:	e050      	b.n	8004c0e <HAL_DAC_Start+0xc2>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2202      	movs	r2, #2
 8004b76:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	6819      	ldr	r1, [r3, #0]
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	f003 0310 	and.w	r3, r3, #16
 8004b84:	2201      	movs	r2, #1
 8004b86:	409a      	lsls	r2, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	430a      	orrs	r2, r1
 8004b8e:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004b90:	4b22      	ldr	r3, [pc, #136]	@ (8004c1c <HAL_DAC_Start+0xd0>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	099b      	lsrs	r3, r3, #6
 8004b96:	4a22      	ldr	r2, [pc, #136]	@ (8004c20 <HAL_DAC_Start+0xd4>)
 8004b98:	fba2 2303 	umull	r2, r3, r2, r3
 8004b9c:	099b      	lsrs	r3, r3, #6
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8004ba2:	e002      	b.n	8004baa <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d1f9      	bne.n	8004ba4 <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d10f      	bne.n	8004bd6 <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	d11d      	bne.n	8004c00 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	685a      	ldr	r2, [r3, #4]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f042 0201 	orr.w	r2, r2, #1
 8004bd2:	605a      	str	r2, [r3, #4]
 8004bd4:	e014      	b.n	8004c00 <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	f003 0310 	and.w	r3, r3, #16
 8004be6:	2102      	movs	r1, #2
 8004be8:	fa01 f303 	lsl.w	r3, r1, r3
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d107      	bne.n	8004c00 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	685a      	ldr	r2, [r3, #4]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f042 0202 	orr.w	r2, r2, #2
 8004bfe:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3714      	adds	r7, #20
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr
 8004c1a:	bf00      	nop
 8004c1c:	20000004 	.word	0x20000004
 8004c20:	053e2d63 	.word	0x053e2d63

08004c24 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b087      	sub	sp, #28
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	607a      	str	r2, [r7, #4]
 8004c30:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8004c32:	2300      	movs	r3, #0
 8004c34:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d101      	bne.n	8004c40 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e018      	b.n	8004c72 <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d105      	bne.n	8004c5e <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004c52:	697a      	ldr	r2, [r7, #20]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4413      	add	r3, r2
 8004c58:	3308      	adds	r3, #8
 8004c5a:	617b      	str	r3, [r7, #20]
 8004c5c:	e004      	b.n	8004c68 <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004c5e:	697a      	ldr	r2, [r7, #20]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	4413      	add	r3, r2
 8004c64:	3314      	adds	r3, #20
 8004c66:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	371c      	adds	r7, #28
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr
	...

08004c80 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b08a      	sub	sp, #40	@ 0x28
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d002      	beq.n	8004c9c <HAL_DAC_ConfigChannel+0x1c>
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d101      	bne.n	8004ca0 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e17b      	b.n	8004f98 <HAL_DAC_ConfigChannel+0x318>
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	795b      	ldrb	r3, [r3, #5]
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d101      	bne.n	8004cac <HAL_DAC_ConfigChannel+0x2c>
 8004ca8:	2302      	movs	r3, #2
 8004caa:	e175      	b.n	8004f98 <HAL_DAC_ConfigChannel+0x318>
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2202      	movs	r2, #2
 8004cb6:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	2b04      	cmp	r3, #4
 8004cbe:	d17a      	bne.n	8004db6 <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004cc0:	f7fe fb48 	bl	8003354 <HAL_GetTick>
 8004cc4:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d13d      	bne.n	8004d48 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004ccc:	e018      	b.n	8004d00 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004cce:	f7fe fb41 	bl	8003354 <HAL_GetTick>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d911      	bls.n	8004d00 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ce2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d00a      	beq.n	8004d00 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	f043 0208 	orr.w	r2, r3, #8
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2203      	movs	r2, #3
 8004cfa:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	e14b      	b.n	8004f98 <HAL_DAC_ConfigChannel+0x318>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d06:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d1df      	bne.n	8004cce <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68ba      	ldr	r2, [r7, #8]
 8004d14:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004d16:	641a      	str	r2, [r3, #64]	@ 0x40
 8004d18:	e020      	b.n	8004d5c <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004d1a:	f7fe fb1b 	bl	8003354 <HAL_GetTick>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d90f      	bls.n	8004d48 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	da0a      	bge.n	8004d48 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	f043 0208 	orr.w	r2, r3, #8
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2203      	movs	r2, #3
 8004d42:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004d44:	2303      	movs	r3, #3
 8004d46:	e127      	b.n	8004f98 <HAL_DAC_ConfigChannel+0x318>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	dbe3      	blt.n	8004d1a <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	68ba      	ldr	r2, [r7, #8]
 8004d58:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004d5a:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f003 0310 	and.w	r3, r3, #16
 8004d68:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8004d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8004d70:	43db      	mvns	r3, r3
 8004d72:	ea02 0103 	and.w	r1, r2, r3
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f003 0310 	and.w	r3, r3, #16
 8004d80:	409a      	lsls	r2, r3
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	430a      	orrs	r2, r1
 8004d88:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f003 0310 	and.w	r3, r3, #16
 8004d96:	21ff      	movs	r1, #255	@ 0xff
 8004d98:	fa01 f303 	lsl.w	r3, r1, r3
 8004d9c:	43db      	mvns	r3, r3
 8004d9e:	ea02 0103 	and.w	r1, r2, r3
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f003 0310 	and.w	r3, r3, #16
 8004dac:	409a      	lsls	r2, r3
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	430a      	orrs	r2, r1
 8004db4:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  /* Autonomous mode configuration */
  MODIFY_REG(hdac->Instance->AUTOCR, DAC_AUTOCR_AUTOMODE, sConfig->DAC_AutonomousMode);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dbc:	f423 0180 	bic.w	r1, r3, #4194304	@ 0x400000
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	685a      	ldr	r2, [r3, #4]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	430a      	orrs	r2, r1
 8004dca:	655a      	str	r2, [r3, #84]	@ 0x54

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	69db      	ldr	r3, [r3, #28]
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d11d      	bne.n	8004e10 <HAL_DAC_ConfigChannel+0x190>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dda:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f003 0310 	and.w	r3, r3, #16
 8004de2:	221f      	movs	r2, #31
 8004de4:	fa02 f303 	lsl.w	r3, r2, r3
 8004de8:	43db      	mvns	r3, r3
 8004dea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dec:	4013      	ands	r3, r2
 8004dee:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	6a1b      	ldr	r3, [r3, #32]
 8004df4:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f003 0310 	and.w	r3, r3, #16
 8004dfc:	697a      	ldr	r2, [r7, #20]
 8004dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004e02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e04:	4313      	orrs	r3, r2
 8004e06:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e0e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e16:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f003 0310 	and.w	r3, r3, #16
 8004e1e:	2207      	movs	r2, #7
 8004e20:	fa02 f303 	lsl.w	r3, r2, r3
 8004e24:	43db      	mvns	r3, r3
 8004e26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e28:	4013      	ands	r3, r2
 8004e2a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	699b      	ldr	r3, [r3, #24]
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d102      	bne.n	8004e3a <HAL_DAC_ConfigChannel+0x1ba>
  {
    connectOnChip = 0x00000000UL;
 8004e34:	2300      	movs	r3, #0
 8004e36:	623b      	str	r3, [r7, #32]
 8004e38:	e00f      	b.n	8004e5a <HAL_DAC_ConfigChannel+0x1da>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	699b      	ldr	r3, [r3, #24]
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d102      	bne.n	8004e48 <HAL_DAC_ConfigChannel+0x1c8>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004e42:	2301      	movs	r3, #1
 8004e44:	623b      	str	r3, [r7, #32]
 8004e46:	e008      	b.n	8004e5a <HAL_DAC_ConfigChannel+0x1da>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	695b      	ldr	r3, [r3, #20]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d102      	bne.n	8004e56 <HAL_DAC_ConfigChannel+0x1d6>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004e50:	2301      	movs	r3, #1
 8004e52:	623b      	str	r3, [r7, #32]
 8004e54:	e001      	b.n	8004e5a <HAL_DAC_ConfigChannel+0x1da>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004e56:	2300      	movs	r3, #0
 8004e58:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	68da      	ldr	r2, [r3, #12]
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	695b      	ldr	r3, [r3, #20]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	6a3a      	ldr	r2, [r7, #32]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f003 0310 	and.w	r3, r3, #16
 8004e70:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004e74:	fa02 f303 	lsl.w	r3, r2, r3
 8004e78:	43db      	mvns	r3, r3
 8004e7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	7a1b      	ldrb	r3, [r3, #8]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d102      	bne.n	8004e8e <HAL_DAC_ConfigChannel+0x20e>
 8004e88:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004e8c:	e000      	b.n	8004e90 <HAL_DAC_ConfigChannel+0x210>
 8004e8e:	2300      	movs	r3, #0
 8004e90:	697a      	ldr	r2, [r7, #20]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f003 0310 	and.w	r3, r3, #16
 8004e9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea4:	43db      	mvns	r3, r3
 8004ea6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	7a5b      	ldrb	r3, [r3, #9]
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d102      	bne.n	8004eba <HAL_DAC_ConfigChannel+0x23a>
 8004eb4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004eb8:	e000      	b.n	8004ebc <HAL_DAC_ConfigChannel+0x23c>
 8004eba:	2300      	movs	r3, #0
 8004ebc:	697a      	ldr	r2, [r7, #20]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8004ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8004ec8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	2b02      	cmp	r3, #2
 8004ed0:	d10b      	bne.n	8004eea <HAL_DAC_ConfigChannel+0x26a>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8004ed2:	f001 f93f 	bl	8006154 <HAL_RCC_GetHCLKFreq>
 8004ed6:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_48MHZ)
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	4a31      	ldr	r2, [pc, #196]	@ (8004fa0 <HAL_DAC_ConfigChannel+0x320>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d90a      	bls.n	8004ef6 <HAL_DAC_ConfigChannel+0x276>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_48MHZ;
 8004ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004ee6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ee8:	e006      	b.n	8004ef8 <HAL_DAC_ConfigChannel+0x278>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ef4:	e000      	b.n	8004ef8 <HAL_DAC_ConfigChannel+0x278>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8004ef6:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f003 0310 	and.w	r3, r3, #16
 8004efe:	697a      	ldr	r2, [r7, #20]
 8004f00:	fa02 f303 	lsl.w	r3, r2, r3
 8004f04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f06:	4313      	orrs	r3, r2
 8004f08:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f10:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	6819      	ldr	r1, [r3, #0]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f003 0310 	and.w	r3, r3, #16
 8004f1e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004f22:	fa02 f303 	lsl.w	r3, r2, r3
 8004f26:	43da      	mvns	r2, r3
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	400a      	ands	r2, r1
 8004f2e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f003 0310 	and.w	r3, r3, #16
 8004f3e:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8004f42:	fa02 f303 	lsl.w	r3, r2, r3
 8004f46:	43db      	mvns	r3, r3
 8004f48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f003 0310 	and.w	r3, r3, #16
 8004f5a:	697a      	ldr	r2, [r7, #20]
 8004f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f62:	4313      	orrs	r3, r2
 8004f64:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f6c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	6819      	ldr	r1, [r3, #0]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f003 0310 	and.w	r3, r3, #16
 8004f7a:	22c0      	movs	r2, #192	@ 0xc0
 8004f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f80:	43da      	mvns	r2, r3
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	400a      	ands	r2, r1
 8004f88:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2200      	movs	r2, #0
 8004f94:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8004f96:	7ffb      	ldrb	r3, [r7, #31]
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3728      	adds	r7, #40	@ 0x28
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	02dc6c00 	.word	0x02dc6c00

08004fa4 <HAL_DACEx_SetConfigAutonomousMode>:
  * @param sConfig pointer to Autonomous mode structure parameters.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_SetConfigAutonomousMode(DAC_HandleTypeDef *hdac,
                                                    const DAC_AutonomousModeConfTypeDef *sConfig)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle and autonomous mode configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d002      	beq.n	8004fba <HAL_DACEx_SetConfigAutonomousMode+0x16>
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d101      	bne.n	8004fbe <HAL_DACEx_SetConfigAutonomousMode+0x1a>
  {
    return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e024      	b.n	8005008 <HAL_DACEx_SetConfigAutonomousMode+0x64>
  }

  assert_param(IS_DAC_AUTONOMOUS(sConfig->AutonomousModeState));

  if (hdac->State == HAL_DAC_STATE_READY)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	791b      	ldrb	r3, [r3, #4]
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d11e      	bne.n	8005006 <HAL_DACEx_SetConfigAutonomousMode+0x62>
  {
    /* Process Locked */
    __HAL_LOCK(hdac);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	795b      	ldrb	r3, [r3, #5]
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d101      	bne.n	8004fd4 <HAL_DACEx_SetConfigAutonomousMode+0x30>
 8004fd0:	2302      	movs	r3, #2
 8004fd2:	e019      	b.n	8005008 <HAL_DACEx_SetConfigAutonomousMode+0x64>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	715a      	strb	r2, [r3, #5]

    hdac->State = HAL_DAC_STATE_BUSY;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2202      	movs	r2, #2
 8004fde:	711a      	strb	r2, [r3, #4]

    /* NOTE: The set/reset of the bit automode in the AUTOCR
             register is for both dac_channel1 and dac_channel2 */

    /* Update the AUTOCR register */
    MODIFY_REG(hdac->Instance->AUTOCR, DAC_AUTOCR_AUTOMODE, sConfig->AutonomousModeState);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fe6:	f423 0180 	bic.w	r1, r3, #4194304	@ 0x400000
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	430a      	orrs	r2, r1
 8004ff4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Update the DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	711a      	strb	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdac);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	715a      	strb	r2, [r3, #5]

    return HAL_OK;
 8005002:	2300      	movs	r3, #0
 8005004:	e000      	b.n	8005008 <HAL_DACEx_SetConfigAutonomousMode+0x64>
  }
  else
  {
    return HAL_BUSY;
 8005006:	2302      	movs	r3, #2
  }
}
 8005008:	4618      	mov	r0, r3
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <HAL_EXTI_RegisterCallback>:
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti,
                                            EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8005014:	b480      	push	{r7}
 8005016:	b087      	sub	sp, #28
 8005018:	af00      	add	r7, sp, #0
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	460b      	mov	r3, r1
 800501e:	607a      	str	r2, [r7, #4]
 8005020:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8005022:	2300      	movs	r3, #0
 8005024:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8005026:	7afb      	ldrb	r3, [r7, #11]
 8005028:	2b02      	cmp	r3, #2
 800502a:	d011      	beq.n	8005050 <HAL_EXTI_RegisterCallback+0x3c>
 800502c:	2b02      	cmp	r3, #2
 800502e:	dc13      	bgt.n	8005058 <HAL_EXTI_RegisterCallback+0x44>
 8005030:	2b00      	cmp	r3, #0
 8005032:	d002      	beq.n	800503a <HAL_EXTI_RegisterCallback+0x26>
 8005034:	2b01      	cmp	r3, #1
 8005036:	d007      	beq.n	8005048 <HAL_EXTI_RegisterCallback+0x34>
 8005038:	e00e      	b.n	8005058 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	609a      	str	r2, [r3, #8]
      break;
 8005046:	e00a      	b.n	800505e <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	605a      	str	r2, [r3, #4]
      break;
 800504e:	e006      	b.n	800505e <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	609a      	str	r2, [r3, #8]
      break;
 8005056:	e002      	b.n	800505e <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	75fb      	strb	r3, [r7, #23]
      break;
 800505c:	bf00      	nop
  }

  return status;
 800505e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005060:	4618      	mov	r0, r3
 8005062:	371c      	adds	r7, #28
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d101      	bne.n	8005080 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e003      	b.n	8005088 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	683a      	ldr	r2, [r7, #0]
 8005084:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8005086:	2300      	movs	r3, #0
  }
}
 8005088:	4618      	mov	r0, r3
 800508a:	370c      	adds	r7, #12
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b086      	sub	sp, #24
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800509c:	2300      	movs	r3, #0
 800509e:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 031f 	and.w	r3, r3, #31
 80050a8:	2201      	movs	r2, #1
 80050aa:	fa02 f303 	lsl.w	r3, r2, r3
 80050ae:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	015a      	lsls	r2, r3, #5
 80050b4:	4b17      	ldr	r3, [pc, #92]	@ (8005114 <HAL_EXTI_IRQHandler+0x80>)
 80050b6:	4413      	add	r3, r2
 80050b8:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	693a      	ldr	r2, [r7, #16]
 80050c0:	4013      	ands	r3, r2
 80050c2:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d009      	beq.n	80050de <HAL_EXTI_IRQHandler+0x4a>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	693a      	ldr	r2, [r7, #16]
 80050ce:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d002      	beq.n	80050de <HAL_EXTI_IRQHandler+0x4a>
    {
      hexti->RisingCallback();
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	015a      	lsls	r2, r3, #5
 80050e2:	4b0d      	ldr	r3, [pc, #52]	@ (8005118 <HAL_EXTI_IRQHandler+0x84>)
 80050e4:	4413      	add	r3, r2
 80050e6:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	693a      	ldr	r2, [r7, #16]
 80050ee:	4013      	ands	r3, r2
 80050f0:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d009      	beq.n	800510c <HAL_EXTI_IRQHandler+0x78>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	693a      	ldr	r2, [r7, #16]
 80050fc:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d002      	beq.n	800510c <HAL_EXTI_IRQHandler+0x78>
    {
      hexti->FallingCallback();
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	4798      	blx	r3
    }
  }
}
 800510c:	bf00      	nop
 800510e:	3718      	adds	r7, #24
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}
 8005114:	4003200c 	.word	0x4003200c
 8005118:	40032010 	.word	0x40032010

0800511c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800511c:	b480      	push	{r7}
 800511e:	b087      	sub	sp, #28
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005126:	2300      	movs	r3, #0
 8005128:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800512a:	e162      	b.n	80053f2 <HAL_GPIO_Init+0x2d6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	2101      	movs	r1, #1
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	fa01 f303 	lsl.w	r3, r1, r3
 8005138:	4013      	ands	r3, r2
 800513a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2b00      	cmp	r3, #0
 8005140:	f000 8154 	beq.w	80053ec <HAL_GPIO_Init+0x2d0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	f003 0303 	and.w	r3, r3, #3
 800514c:	2b01      	cmp	r3, #1
 800514e:	d005      	beq.n	800515c <HAL_GPIO_Init+0x40>
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	f003 0303 	and.w	r3, r3, #3
 8005158:	2b02      	cmp	r3, #2
 800515a:	d130      	bne.n	80051be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	005b      	lsls	r3, r3, #1
 8005166:	2203      	movs	r2, #3
 8005168:	fa02 f303 	lsl.w	r3, r2, r3
 800516c:	43db      	mvns	r3, r3
 800516e:	693a      	ldr	r2, [r7, #16]
 8005170:	4013      	ands	r3, r2
 8005172:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	68da      	ldr	r2, [r3, #12]
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	005b      	lsls	r3, r3, #1
 800517c:	fa02 f303 	lsl.w	r3, r2, r3
 8005180:	693a      	ldr	r2, [r7, #16]
 8005182:	4313      	orrs	r3, r2
 8005184:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	693a      	ldr	r2, [r7, #16]
 800518a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005192:	2201      	movs	r2, #1
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	fa02 f303 	lsl.w	r3, r2, r3
 800519a:	43db      	mvns	r3, r3
 800519c:	693a      	ldr	r2, [r7, #16]
 800519e:	4013      	ands	r3, r2
 80051a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	091b      	lsrs	r3, r3, #4
 80051a8:	f003 0201 	and.w	r2, r3, #1
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	fa02 f303 	lsl.w	r3, r2, r3
 80051b2:	693a      	ldr	r2, [r7, #16]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	693a      	ldr	r2, [r7, #16]
 80051bc:	605a      	str	r2, [r3, #4]
      }

      if (((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) ||
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	f003 0303 	and.w	r3, r3, #3
 80051c6:	2b03      	cmp	r3, #3
 80051c8:	d109      	bne.n	80051de <HAL_GPIO_Init+0xc2>
         (((GPIO_Init->Mode & GPIO_MODE) == MODE_ANALOG) && (GPIO_Init->Pull != GPIO_PULLUP)))
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) ||
 80051d2:	2b03      	cmp	r3, #3
 80051d4:	d11b      	bne.n	800520e <HAL_GPIO_Init+0xf2>
         (((GPIO_Init->Mode & GPIO_MODE) == MODE_ANALOG) && (GPIO_Init->Pull != GPIO_PULLUP)))
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d017      	beq.n	800520e <HAL_GPIO_Init+0xf2>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	005b      	lsls	r3, r3, #1
 80051e8:	2203      	movs	r2, #3
 80051ea:	fa02 f303 	lsl.w	r3, r2, r3
 80051ee:	43db      	mvns	r3, r3
 80051f0:	693a      	ldr	r2, [r7, #16]
 80051f2:	4013      	ands	r3, r2
 80051f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	689a      	ldr	r2, [r3, #8]
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	005b      	lsls	r3, r3, #1
 80051fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005202:	693a      	ldr	r2, [r7, #16]
 8005204:	4313      	orrs	r3, r2
 8005206:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	693a      	ldr	r2, [r7, #16]
 800520c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	f003 0303 	and.w	r3, r3, #3
 8005216:	2b02      	cmp	r3, #2
 8005218:	d123      	bne.n	8005262 <HAL_GPIO_Init+0x146>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	08da      	lsrs	r2, r3, #3
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	3208      	adds	r2, #8
 8005222:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005226:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	f003 0307 	and.w	r3, r3, #7
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	220f      	movs	r2, #15
 8005232:	fa02 f303 	lsl.w	r3, r2, r3
 8005236:	43db      	mvns	r3, r3
 8005238:	693a      	ldr	r2, [r7, #16]
 800523a:	4013      	ands	r3, r2
 800523c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	691a      	ldr	r2, [r3, #16]
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	f003 0307 	and.w	r3, r3, #7
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	fa02 f303 	lsl.w	r3, r2, r3
 800524e:	693a      	ldr	r2, [r7, #16]
 8005250:	4313      	orrs	r3, r2
 8005252:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	08da      	lsrs	r2, r3, #3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	3208      	adds	r2, #8
 800525c:	6939      	ldr	r1, [r7, #16]
 800525e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	005b      	lsls	r3, r3, #1
 800526c:	2203      	movs	r2, #3
 800526e:	fa02 f303 	lsl.w	r3, r2, r3
 8005272:	43db      	mvns	r3, r3
 8005274:	693a      	ldr	r2, [r7, #16]
 8005276:	4013      	ands	r3, r2
 8005278:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	f003 0203 	and.w	r2, r3, #3
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	005b      	lsls	r3, r3, #1
 8005286:	fa02 f303 	lsl.w	r3, r2, r3
 800528a:	693a      	ldr	r2, [r7, #16]
 800528c:	4313      	orrs	r3, r2
 800528e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	693a      	ldr	r2, [r7, #16]
 8005294:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800529e:	2b00      	cmp	r3, #0
 80052a0:	f000 80a4 	beq.w	80053ec <HAL_GPIO_Init+0x2d0>
      {
        temp = EXTI->EXTICR[position >> 2U];
 80052a4:	4a5a      	ldr	r2, [pc, #360]	@ (8005410 <HAL_GPIO_Init+0x2f4>)
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	089b      	lsrs	r3, r3, #2
 80052aa:	3318      	adds	r3, #24
 80052ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	f003 0303 	and.w	r3, r3, #3
 80052b8:	00db      	lsls	r3, r3, #3
 80052ba:	220f      	movs	r2, #15
 80052bc:	fa02 f303 	lsl.w	r3, r2, r3
 80052c0:	43db      	mvns	r3, r3
 80052c2:	693a      	ldr	r2, [r7, #16]
 80052c4:	4013      	ands	r3, r2
 80052c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4a52      	ldr	r2, [pc, #328]	@ (8005414 <HAL_GPIO_Init+0x2f8>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d025      	beq.n	800531c <HAL_GPIO_Init+0x200>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4a51      	ldr	r2, [pc, #324]	@ (8005418 <HAL_GPIO_Init+0x2fc>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d01f      	beq.n	8005318 <HAL_GPIO_Init+0x1fc>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4a50      	ldr	r2, [pc, #320]	@ (800541c <HAL_GPIO_Init+0x300>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d019      	beq.n	8005314 <HAL_GPIO_Init+0x1f8>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	4a4f      	ldr	r2, [pc, #316]	@ (8005420 <HAL_GPIO_Init+0x304>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d013      	beq.n	8005310 <HAL_GPIO_Init+0x1f4>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	4a4e      	ldr	r2, [pc, #312]	@ (8005424 <HAL_GPIO_Init+0x308>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d00d      	beq.n	800530c <HAL_GPIO_Init+0x1f0>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	4a4d      	ldr	r2, [pc, #308]	@ (8005428 <HAL_GPIO_Init+0x30c>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d007      	beq.n	8005308 <HAL_GPIO_Init+0x1ec>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	4a4c      	ldr	r2, [pc, #304]	@ (800542c <HAL_GPIO_Init+0x310>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d101      	bne.n	8005304 <HAL_GPIO_Init+0x1e8>
 8005300:	2307      	movs	r3, #7
 8005302:	e00c      	b.n	800531e <HAL_GPIO_Init+0x202>
 8005304:	2310      	movs	r3, #16
 8005306:	e00a      	b.n	800531e <HAL_GPIO_Init+0x202>
 8005308:	2306      	movs	r3, #6
 800530a:	e008      	b.n	800531e <HAL_GPIO_Init+0x202>
 800530c:	2304      	movs	r3, #4
 800530e:	e006      	b.n	800531e <HAL_GPIO_Init+0x202>
 8005310:	2303      	movs	r3, #3
 8005312:	e004      	b.n	800531e <HAL_GPIO_Init+0x202>
 8005314:	2302      	movs	r3, #2
 8005316:	e002      	b.n	800531e <HAL_GPIO_Init+0x202>
 8005318:	2301      	movs	r3, #1
 800531a:	e000      	b.n	800531e <HAL_GPIO_Init+0x202>
 800531c:	2300      	movs	r3, #0
 800531e:	697a      	ldr	r2, [r7, #20]
 8005320:	f002 0203 	and.w	r2, r2, #3
 8005324:	00d2      	lsls	r2, r2, #3
 8005326:	4093      	lsls	r3, r2
 8005328:	693a      	ldr	r2, [r7, #16]
 800532a:	4313      	orrs	r3, r2
 800532c:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 800532e:	4938      	ldr	r1, [pc, #224]	@ (8005410 <HAL_GPIO_Init+0x2f4>)
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	089b      	lsrs	r3, r3, #2
 8005334:	3318      	adds	r3, #24
 8005336:	693a      	ldr	r2, [r7, #16]
 8005338:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800533c:	4b34      	ldr	r3, [pc, #208]	@ (8005410 <HAL_GPIO_Init+0x2f4>)
 800533e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005342:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	43db      	mvns	r3, r3
 8005348:	693a      	ldr	r2, [r7, #16]
 800534a:	4013      	ands	r3, r2
 800534c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005356:	2b00      	cmp	r3, #0
 8005358:	d003      	beq.n	8005362 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800535a:	693a      	ldr	r2, [r7, #16]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	4313      	orrs	r3, r2
 8005360:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005362:	4a2b      	ldr	r2, [pc, #172]	@ (8005410 <HAL_GPIO_Init+0x2f4>)
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 800536a:	4b29      	ldr	r3, [pc, #164]	@ (8005410 <HAL_GPIO_Init+0x2f4>)
 800536c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005370:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	43db      	mvns	r3, r3
 8005376:	693a      	ldr	r2, [r7, #16]
 8005378:	4013      	ands	r3, r2
 800537a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005384:	2b00      	cmp	r3, #0
 8005386:	d003      	beq.n	8005390 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8005388:	693a      	ldr	r2, [r7, #16]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	4313      	orrs	r3, r2
 800538e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005390:	4a1f      	ldr	r2, [pc, #124]	@ (8005410 <HAL_GPIO_Init+0x2f4>)
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005398:	4b1d      	ldr	r3, [pc, #116]	@ (8005410 <HAL_GPIO_Init+0x2f4>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	43db      	mvns	r3, r3
 80053a2:	693a      	ldr	r2, [r7, #16]
 80053a4:	4013      	ands	r3, r2
 80053a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d003      	beq.n	80053bc <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 80053b4:	693a      	ldr	r2, [r7, #16]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80053bc:	4a14      	ldr	r2, [pc, #80]	@ (8005410 <HAL_GPIO_Init+0x2f4>)
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80053c2:	4b13      	ldr	r3, [pc, #76]	@ (8005410 <HAL_GPIO_Init+0x2f4>)
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	43db      	mvns	r3, r3
 80053cc:	693a      	ldr	r2, [r7, #16]
 80053ce:	4013      	ands	r3, r2
 80053d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d003      	beq.n	80053e6 <HAL_GPIO_Init+0x2ca>
        {
          temp |= iocurrent;
 80053de:	693a      	ldr	r2, [r7, #16]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80053e6:	4a0a      	ldr	r2, [pc, #40]	@ (8005410 <HAL_GPIO_Init+0x2f4>)
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	3301      	adds	r3, #1
 80053f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	fa22 f303 	lsr.w	r3, r2, r3
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	f47f ae95 	bne.w	800512c <HAL_GPIO_Init+0x10>
  }
}
 8005402:	bf00      	nop
 8005404:	bf00      	nop
 8005406:	371c      	adds	r7, #28
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr
 8005410:	40032000 	.word	0x40032000
 8005414:	42020000 	.word	0x42020000
 8005418:	42020400 	.word	0x42020400
 800541c:	42020800 	.word	0x42020800
 8005420:	42020c00 	.word	0x42020c00
 8005424:	42021000 	.word	0x42021000
 8005428:	42021800 	.word	0x42021800
 800542c:	42021c00 	.word	0x42021c00

08005430 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005430:	b480      	push	{r7}
 8005432:	b085      	sub	sp, #20
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	460b      	mov	r3, r1
 800543a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	691a      	ldr	r2, [r3, #16]
 8005440:	887b      	ldrh	r3, [r7, #2]
 8005442:	4013      	ands	r3, r2
 8005444:	2b00      	cmp	r3, #0
 8005446:	d002      	beq.n	800544e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005448:	2301      	movs	r3, #1
 800544a:	73fb      	strb	r3, [r7, #15]
 800544c:	e001      	b.n	8005452 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800544e:	2300      	movs	r3, #0
 8005450:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005452:	7bfb      	ldrb	r3, [r7, #15]
}
 8005454:	4618      	mov	r0, r3
 8005456:	3714      	adds	r7, #20
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr

08005460 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005460:	b480      	push	{r7}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	460b      	mov	r3, r1
 800546a:	807b      	strh	r3, [r7, #2]
 800546c:	4613      	mov	r3, r2
 800546e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005470:	787b      	ldrb	r3, [r7, #1]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d003      	beq.n	800547e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005476:	887a      	ldrh	r2, [r7, #2]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800547c:	e002      	b.n	8005484 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800547e:	887a      	ldrh	r2, [r7, #2]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005484:	bf00      	nop
 8005486:	370c      	adds	r7, #12
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp: OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005498:	2300      	movs	r3, #0
 800549a:	73fb      	strb	r3, [r7, #15]
  uint32_t updateotrlpotr;

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d101      	bne.n	80054a6 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e0ca      	b.n	800563c <HAL_OPAMP_Init+0x1ac>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	2b05      	cmp	r3, #5
 80054b0:	d101      	bne.n	80054b6 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e0c2      	b.n	800563c <HAL_OPAMP_Init+0x1ac>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	2b02      	cmp	r3, #2
 80054c0:	d101      	bne.n	80054c6 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e0ba      	b.n	800563c <HAL_OPAMP_Init+0x1ac>
    {
      assert_param(IS_OPAMP_PGA_GAIN(hopamp->Init.PgaGain));
    }

    assert_param(IS_OPAMP_TRIMMING(hopamp->Init.UserTrimming));
    if ((hopamp->Init.UserTrimming) == OPAMP_TRIMMING_USER)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	69db      	ldr	r3, [r3, #28]
 80054ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80054ce:	d109      	bne.n	80054e4 <HAL_OPAMP_Init+0x54>
    {
      if ((hopamp->Init.PowerMode == OPAMP_POWERMODE_NORMALPOWER_NORMALSPEED) || \
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d004      	beq.n	80054e2 <HAL_OPAMP_Init+0x52>
          (hopamp->Init.PowerMode == OPAMP_POWERMODE_NORMALPOWER_HIGHSPEED))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	689b      	ldr	r3, [r3, #8]
      if ((hopamp->Init.PowerMode == OPAMP_POWERMODE_NORMALPOWER_NORMALSPEED) || \
 80054dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054e0:	e000      	b.n	80054e4 <HAL_OPAMP_Init+0x54>
      {
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
 80054e2:	bf00      	nop
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValuePLowPower));
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueNLowPower));
      }
    }

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d103      	bne.n	80054f8 <HAL_OPAMP_Init+0x68>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f7fd f8ef 	bl	80026dc <HAL_OPAMP_MspInit>
#endif /* USE_HAL_OPAMP_REGISTER_CALLBACKS */

    /* Set operating mode */
    CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALON);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800550c:	601a      	str	r2, [r3, #0]

    if (hopamp->Init.Mode == OPAMP_PGA_MODE)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	68db      	ldr	r3, [r3, #12]
 8005512:	2b08      	cmp	r3, #8
 8005514:	d119      	bne.n	800554a <HAL_OPAMP_Init+0xba>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_PGA, \
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	4b49      	ldr	r3, [pc, #292]	@ (8005644 <HAL_OPAMP_Init+0x1b4>)
 800551e:	4013      	ands	r3, r2
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	6891      	ldr	r1, [r2, #8]
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	68d2      	ldr	r2, [r2, #12]
 8005528:	4311      	orrs	r1, r2
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	6992      	ldr	r2, [r2, #24]
 800552e:	4311      	orrs	r1, r2
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	6912      	ldr	r2, [r2, #16]
 8005534:	4311      	orrs	r1, r2
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	6952      	ldr	r2, [r2, #20]
 800553a:	4311      	orrs	r1, r2
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	69d2      	ldr	r2, [r2, #28]
 8005540:	4311      	orrs	r1, r2
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	6812      	ldr	r2, [r2, #0]
 8005546:	430b      	orrs	r3, r1
 8005548:	6013      	str	r3, [r2, #0]
                 hopamp->Init.InvertingInput    | \
                 hopamp->Init.NonInvertingInput | \
                 hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	2b0c      	cmp	r3, #12
 8005550:	d113      	bne.n	800557a <HAL_OPAMP_Init+0xea>
    {
      /* In Follower mode InvertingInput is Not Applicable  */
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_FOLLOWER, \
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	4b3b      	ldr	r3, [pc, #236]	@ (8005648 <HAL_OPAMP_Init+0x1b8>)
 800555a:	4013      	ands	r3, r2
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	6891      	ldr	r1, [r2, #8]
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	68d2      	ldr	r2, [r2, #12]
 8005564:	4311      	orrs	r1, r2
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	6952      	ldr	r2, [r2, #20]
 800556a:	4311      	orrs	r1, r2
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	69d2      	ldr	r2, [r2, #28]
 8005570:	4311      	orrs	r1, r2
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	6812      	ldr	r2, [r2, #0]
 8005576:	430b      	orrs	r3, r1
 8005578:	6013      	str	r3, [r2, #0]
                 hopamp->Init.Mode | \
                 hopamp->Init.NonInvertingInput | \
                 hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.Mode == OPAMP_STANDALONE_MODE)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d116      	bne.n	80055b0 <HAL_OPAMP_Init+0x120>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_STANDALONE, \
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	4b30      	ldr	r3, [pc, #192]	@ (800564c <HAL_OPAMP_Init+0x1bc>)
 800558a:	4013      	ands	r3, r2
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	6891      	ldr	r1, [r2, #8]
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	68d2      	ldr	r2, [r2, #12]
 8005594:	4311      	orrs	r1, r2
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	6912      	ldr	r2, [r2, #16]
 800559a:	4311      	orrs	r1, r2
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	6952      	ldr	r2, [r2, #20]
 80055a0:	4311      	orrs	r1, r2
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	69d2      	ldr	r2, [r2, #28]
 80055a6:	4311      	orrs	r1, r2
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	6812      	ldr	r2, [r2, #0]
 80055ac:	430b      	orrs	r3, r1
 80055ae:	6013      	str	r3, [r2, #0]
                 hopamp->Init.InvertingInput    | \
                 hopamp->Init.NonInvertingInput | \
                 hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.UserTrimming == OPAMP_TRIMMING_USER)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	69db      	ldr	r3, [r3, #28]
 80055b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80055b8:	d12f      	bne.n	800561a <HAL_OPAMP_Init+0x18a>
    {
      /* Set power mode and associated calibration parameters */
      if ((hopamp->Init.PowerMode != OPAMP_POWERMODE_LOWPOWER_NORMALSPEED) && \
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d018      	beq.n	80055f4 <HAL_OPAMP_Init+0x164>
          (hopamp->Init.PowerMode != OPAMP_POWERMODE_LOWPOWER_HIGHSPEED))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	689b      	ldr	r3, [r3, #8]
      if ((hopamp->Init.PowerMode != OPAMP_POWERMODE_LOWPOWER_NORMALSPEED) && \
 80055c6:	4a22      	ldr	r2, [pc, #136]	@ (8005650 <HAL_OPAMP_Init+0x1c0>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d013      	beq.n	80055f4 <HAL_OPAMP_Init+0x164>
      {
        /* OPAMP_POWERMODE_NORMALPOWER_HIGHSPEED or OPAMP_POWERMODE_NORMALPOWER_NORMALSPEED */
        /* Set calibration mode (factory or user) and values for            */
        /* transistors differential pair high (PMOS) and low (NMOS) for     */
        /* normal mode.                                                     */
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6a1b      	ldr	r3, [r3, #32]
 80055d0:	021a      	lsls	r2, r3, #8
                          | (hopamp->Init.TrimmingValueN));
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 80055d6:	4313      	orrs	r3, r2
 80055d8:	60bb      	str	r3, [r7, #8]
        MODIFY_REG(hopamp->Instance->OTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 80055e4:	f023 031f 	bic.w	r3, r3, #31
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	6812      	ldr	r2, [r2, #0]
 80055ec:	68b9      	ldr	r1, [r7, #8]
 80055ee:	430b      	orrs	r3, r1
 80055f0:	6053      	str	r3, [r2, #4]
 80055f2:	e012      	b.n	800561a <HAL_OPAMP_Init+0x18a>
      else
      {
        /* OPAMP_POWERMODE_LOWPOWER_HIGHSPEED or OPAMP_POWERMODE_LOWPOWER_NORMALSPEED */
        /* transistors differential pair high (PMOS) and low (NMOS) for     */
        /* low power mode.                                                     */
        updateotrlpotr = (((hopamp->Init.TrimmingValuePLowPower) << (OPAMP_INPUT_NONINVERTING)) \
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055f8:	021a      	lsls	r2, r3, #8
                          | (hopamp->Init.TrimmingValueNLowPower));
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        updateotrlpotr = (((hopamp->Init.TrimmingValuePLowPower) << (OPAMP_INPUT_NONINVERTING)) \
 80055fe:	4313      	orrs	r3, r2
 8005600:	60bb      	str	r3, [r7, #8]
        MODIFY_REG(hopamp->Instance->LPOTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 800560c:	f023 031f 	bic.w	r3, r3, #31
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	6812      	ldr	r2, [r2, #0]
 8005614:	68b9      	ldr	r1, [r7, #8]
 8005616:	430b      	orrs	r3, r1
 8005618:	6093      	str	r3, [r2, #8]
    }

    /* Set the power supply range to high for performance purpose    */
    /* The OPAMP_CSR_OPARANGE is common configuration for all OPAMPs */
    /* bit OPAMP_CSR_OPARANGE applies for both OPAMPs                */
    MODIFY_REG(OPAMP12_COMMON->CSR, OPAMP_CSR_OPARANGE, OPAMP_CSR_OPARANGE);
 800561a:	4b0e      	ldr	r3, [pc, #56]	@ (8005654 <HAL_OPAMP_Init+0x1c4>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a0d      	ldr	r2, [pc, #52]	@ (8005654 <HAL_OPAMP_Init+0x1c4>)
 8005620:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005624:	6013      	str	r3, [r2, #0]

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800562c:	b2db      	uxtb	r3, r3
 800562e:	2b00      	cmp	r3, #0
 8005630:	d103      	bne.n	800563a <HAL_OPAMP_Init+0x1aa>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2201      	movs	r2, #1
 8005636:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    }
    /* else: remain in READY or BUSY state (no update) */
    return status;
 800563a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800563c:	4618      	mov	r0, r3
 800563e:	3710      	adds	r7, #16
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}
 8005644:	bfffb8c1 	.word	0xbfffb8c1
 8005648:	bfffbbf1 	.word	0xbfffbbf1
 800564c:	bfffb8f1 	.word	0xbfffb8f1
 8005650:	40000002 	.word	0x40000002
 8005654:	40007000 	.word	0x40007000

08005658 <HAL_OPAMP_Start>:
  * @param  hopamp: OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8005658:	b480      	push	{r7}
 800565a:	b085      	sub	sp, #20
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005660:	2300      	movs	r3, #0
 8005662:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d102      	bne.n	8005670 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	73fb      	strb	r3, [r7, #15]
 800566e:	e01d      	b.n	80056ac <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005676:	b2db      	uxtb	r3, r3
 8005678:	2b05      	cmp	r3, #5
 800567a:	d102      	bne.n	8005682 <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	73fb      	strb	r3, [r7, #15]
 8005680:	e014      	b.n	80056ac <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005688:	b2db      	uxtb	r3, r3
 800568a:	2b01      	cmp	r3, #1
 800568c:	d10c      	bne.n	80056a8 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAEN);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f042 0201 	orr.w	r2, r2, #1
 800569c:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2204      	movs	r2, #4
 80056a2:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
 80056a6:	e001      	b.n	80056ac <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	73fb      	strb	r3, [r7, #15]
    }

  }
  return status;
 80056ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3714      	adds	r7, #20
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr
	...

080056bc <HAL_PWREx_ControlVoltageScaling>:
  * @note   Before moving to voltage scaling 2, it is mandatory to ensure that
  *         the system frequency is equal or below 16 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80056bc:	b480      	push	{r7}
 80056be:	b085      	sub	sp, #20
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Set voltage scaling level */
  vosr = (PWR->VOSR & ~(PWR_VOSR_R2EN | PWR_VOSR_R1EN));
 80056c4:	4b19      	ldr	r3, [pc, #100]	@ (800572c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80056c6:	68db      	ldr	r3, [r3, #12]
 80056c8:	f023 0303 	bic.w	r3, r3, #3
 80056cc:	60bb      	str	r3, [r7, #8]
  vosr |= VoltageScaling;
 80056ce:	68ba      	ldr	r2, [r7, #8]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	60bb      	str	r3, [r7, #8]
  PWR->VOSR = vosr;
 80056d6:	4a15      	ldr	r2, [pc, #84]	@ (800572c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	60d3      	str	r3, [r2, #12]

  /* Wait until VOSRDY is set */
  timeout = ((PWR_VOSF_SETTING_DELAY_VALUE * SystemCoreClock) / 1000000U) + 1U;
 80056dc:	4b14      	ldr	r3, [pc, #80]	@ (8005730 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2232      	movs	r2, #50	@ 0x32
 80056e2:	fb02 f303 	mul.w	r3, r2, r3
 80056e6:	4a13      	ldr	r2, [pc, #76]	@ (8005734 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80056e8:	fba2 2303 	umull	r2, r3, r2, r3
 80056ec:	0c9b      	lsrs	r3, r3, #18
 80056ee:	3301      	adds	r3, #1
 80056f0:	60fb      	str	r3, [r7, #12]

  /* store expected ready flag */
  vosr = (VoltageScaling << (PWR_VOSR_R1RDY_Pos - PWR_VOSR_R1EN_Pos));
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	041b      	lsls	r3, r3, #16
 80056f6:	60bb      	str	r3, [r7, #8]

  while (((PWR->VOSR & vosr) != vosr) && (timeout != 0U))
 80056f8:	e002      	b.n	8005700 <HAL_PWREx_ControlVoltageScaling+0x44>
  {
    timeout--;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	3b01      	subs	r3, #1
 80056fe:	60fb      	str	r3, [r7, #12]
  while (((PWR->VOSR & vosr) != vosr) && (timeout != 0U))
 8005700:	4b0a      	ldr	r3, [pc, #40]	@ (800572c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005702:	68da      	ldr	r2, [r3, #12]
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	4013      	ands	r3, r2
 8005708:	68ba      	ldr	r2, [r7, #8]
 800570a:	429a      	cmp	r2, r3
 800570c:	d002      	beq.n	8005714 <HAL_PWREx_ControlVoltageScaling+0x58>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d1f2      	bne.n	80056fa <HAL_PWREx_ControlVoltageScaling+0x3e>
  }

  /* Check time out */
  if (timeout == 0U)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d101      	bne.n	800571e <HAL_PWREx_ControlVoltageScaling+0x62>
  {
    return HAL_TIMEOUT;
 800571a:	2303      	movs	r3, #3
 800571c:	e000      	b.n	8005720 <HAL_PWREx_ControlVoltageScaling+0x64>
  }
  else
  {
    return HAL_OK;
 800571e:	2300      	movs	r3, #0
  }
}
 8005720:	4618      	mov	r0, r3
 8005722:	3714      	adds	r7, #20
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr
 800572c:	40030800 	.word	0x40030800
 8005730:	20000004 	.word	0x20000004
 8005734:	431bde83 	.word	0x431bde83

08005738 <HAL_PWREx_EnableVddA>:
  * @brief  Enable VDDA supply valid.
  * @note   Setting this bit is mandatory to use the analog peripherals.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8005738:	b480      	push	{r7}
 800573a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 800573c:	4b05      	ldr	r3, [pc, #20]	@ (8005754 <HAL_PWREx_EnableVddA+0x1c>)
 800573e:	691b      	ldr	r3, [r3, #16]
 8005740:	4a04      	ldr	r2, [pc, #16]	@ (8005754 <HAL_PWREx_EnableVddA+0x1c>)
 8005742:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005746:	6113      	str	r3, [r2, #16]
}
 8005748:	bf00      	nop
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr
 8005752:	bf00      	nop
 8005754:	40030800 	.word	0x40030800

08005758 <HAL_PWREx_EnableEpodBooster>:
  * @note   EPOD booster shall be enabled prior to increase system frequency above 24 MHz in all ranges.
  * @note   EPOD Booster clock source and divider shall be configured through RCC before calling this function.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_EnableEpodBooster(void)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b082      	sub	sp, #8
 800575c:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Set EPOD booster bit */
  PWR->VOSR |= PWR_VOSR_BOOSTEN;
 800575e:	4b13      	ldr	r3, [pc, #76]	@ (80057ac <HAL_PWREx_EnableEpodBooster+0x54>)
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	4a12      	ldr	r2, [pc, #72]	@ (80057ac <HAL_PWREx_EnableEpodBooster+0x54>)
 8005764:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005768:	60d3      	str	r3, [r2, #12]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800576a:	f7fd fdf3 	bl	8003354 <HAL_GetTick>
 800576e:	6078      	str	r0, [r7, #4]

  /* Wait till boster ready bit is set */
  while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) != PWR_VOSR_BOOSTRDY)
 8005770:	e00f      	b.n	8005792 <HAL_PWREx_EnableEpodBooster+0x3a>
  {
    if ((HAL_GetTick() - tickstart) > BOOSTER_TIMEOUT_VALUE)
 8005772:	f7fd fdef 	bl	8003354 <HAL_GetTick>
 8005776:	4602      	mov	r2, r0
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	1ad3      	subs	r3, r2, r3
 800577c:	2b01      	cmp	r3, #1
 800577e:	d908      	bls.n	8005792 <HAL_PWREx_EnableEpodBooster+0x3a>
    {
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) != PWR_VOSR_BOOSTRDY)
 8005780:	4b0a      	ldr	r3, [pc, #40]	@ (80057ac <HAL_PWREx_EnableEpodBooster+0x54>)
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005788:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800578c:	d001      	beq.n	8005792 <HAL_PWREx_EnableEpodBooster+0x3a>
      {
        return HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	e007      	b.n	80057a2 <HAL_PWREx_EnableEpodBooster+0x4a>
  while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) != PWR_VOSR_BOOSTRDY)
 8005792:	4b06      	ldr	r3, [pc, #24]	@ (80057ac <HAL_PWREx_EnableEpodBooster+0x54>)
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800579a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800579e:	d1e8      	bne.n	8005772 <HAL_PWREx_EnableEpodBooster+0x1a>
      }
    }
  }

  /* Booster is enabled and ready */
  return HAL_OK;
 80057a0:	2300      	movs	r3, #0
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3708      	adds	r7, #8
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop
 80057ac:	40030800 	.word	0x40030800

080057b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef *RCC_OscInitStruct)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b088      	sub	sp, #32
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t sysclksrc;
  uint32_t tmpreg1;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d101      	bne.n	80057c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e340      	b.n	8005e44 <HAL_RCC_OscConfig+0x694>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057c2:	4b98      	ldr	r3, [pc, #608]	@ (8005a24 <HAL_RCC_OscConfig+0x274>)
 80057c4:	69db      	ldr	r3, [r3, #28]
 80057c6:	f003 030c 	and.w	r3, r3, #12
 80057ca:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) != 0x00u)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 0301 	and.w	r3, r3, #1
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	f000 80ad 	beq.w	8005934 <HAL_RCC_OscConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock source, it is not allowed to be disabled */
    if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	2b08      	cmp	r3, #8
 80057de:	d106      	bne.n	80057ee <HAL_RCC_OscConfig+0x3e>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	f040 80a5 	bne.w	8005934 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	e32a      	b.n	8005e44 <HAL_RCC_OscConfig+0x694>
      }
    }
    else
    {
      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d04f      	beq.n	8005896 <HAL_RCC_OscConfig+0xe6>
      {
        /* Set the new HSE configuration ---------------------------------------*/
        __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057fe:	d106      	bne.n	800580e <HAL_RCC_OscConfig+0x5e>
 8005800:	4b88      	ldr	r3, [pc, #544]	@ (8005a24 <HAL_RCC_OscConfig+0x274>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a87      	ldr	r2, [pc, #540]	@ (8005a24 <HAL_RCC_OscConfig+0x274>)
 8005806:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800580a:	6013      	str	r3, [r2, #0]
 800580c:	e02f      	b.n	800586e <HAL_RCC_OscConfig+0xbe>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005816:	d10c      	bne.n	8005832 <HAL_RCC_OscConfig+0x82>
 8005818:	4b82      	ldr	r3, [pc, #520]	@ (8005a24 <HAL_RCC_OscConfig+0x274>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a81      	ldr	r2, [pc, #516]	@ (8005a24 <HAL_RCC_OscConfig+0x274>)
 800581e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005822:	6013      	str	r3, [r2, #0]
 8005824:	4b7f      	ldr	r3, [pc, #508]	@ (8005a24 <HAL_RCC_OscConfig+0x274>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a7e      	ldr	r2, [pc, #504]	@ (8005a24 <HAL_RCC_OscConfig+0x274>)
 800582a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800582e:	6013      	str	r3, [r2, #0]
 8005830:	e01d      	b.n	800586e <HAL_RCC_OscConfig+0xbe>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800583a:	d10c      	bne.n	8005856 <HAL_RCC_OscConfig+0xa6>
 800583c:	4b79      	ldr	r3, [pc, #484]	@ (8005a24 <HAL_RCC_OscConfig+0x274>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a78      	ldr	r2, [pc, #480]	@ (8005a24 <HAL_RCC_OscConfig+0x274>)
 8005842:	f443 13a0 	orr.w	r3, r3, #1310720	@ 0x140000
 8005846:	6013      	str	r3, [r2, #0]
 8005848:	4b76      	ldr	r3, [pc, #472]	@ (8005a24 <HAL_RCC_OscConfig+0x274>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a75      	ldr	r2, [pc, #468]	@ (8005a24 <HAL_RCC_OscConfig+0x274>)
 800584e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005852:	6013      	str	r3, [r2, #0]
 8005854:	e00b      	b.n	800586e <HAL_RCC_OscConfig+0xbe>
 8005856:	4b73      	ldr	r3, [pc, #460]	@ (8005a24 <HAL_RCC_OscConfig+0x274>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a72      	ldr	r2, [pc, #456]	@ (8005a24 <HAL_RCC_OscConfig+0x274>)
 800585c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005860:	6013      	str	r3, [r2, #0]
 8005862:	4b70      	ldr	r3, [pc, #448]	@ (8005a24 <HAL_RCC_OscConfig+0x274>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a6f      	ldr	r2, [pc, #444]	@ (8005a24 <HAL_RCC_OscConfig+0x274>)
 8005868:	f423 13a0 	bic.w	r3, r3, #1310720	@ 0x140000
 800586c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800586e:	f7fd fd71 	bl	8003354 <HAL_GetTick>
 8005872:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005874:	e008      	b.n	8005888 <HAL_RCC_OscConfig+0xd8>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005876:	f7fd fd6d 	bl	8003354 <HAL_GetTick>
 800587a:	4602      	mov	r2, r0
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	1ad3      	subs	r3, r2, r3
 8005880:	2b64      	cmp	r3, #100	@ 0x64
 8005882:	d901      	bls.n	8005888 <HAL_RCC_OscConfig+0xd8>
          {
            return HAL_TIMEOUT;
 8005884:	2303      	movs	r3, #3
 8005886:	e2dd      	b.n	8005e44 <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005888:	4b66      	ldr	r3, [pc, #408]	@ (8005a24 <HAL_RCC_OscConfig+0x274>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d0f0      	beq.n	8005876 <HAL_RCC_OscConfig+0xc6>
 8005894:	e04e      	b.n	8005934 <HAL_RCC_OscConfig+0x184>
        }
      }
      else
      {
        /* Set the new HSE configuration ---------------------------------------*/
        __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800589e:	d106      	bne.n	80058ae <HAL_RCC_OscConfig+0xfe>
 80058a0:	4b60      	ldr	r3, [pc, #384]	@ (8005a24 <HAL_RCC_OscConfig+0x274>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a5f      	ldr	r2, [pc, #380]	@ (8005a24 <HAL_RCC_OscConfig+0x274>)
 80058a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058aa:	6013      	str	r3, [r2, #0]
 80058ac:	e02f      	b.n	800590e <HAL_RCC_OscConfig+0x15e>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80058b6:	d10c      	bne.n	80058d2 <HAL_RCC_OscConfig+0x122>
 80058b8:	4b5a      	ldr	r3, [pc, #360]	@ (8005a24 <HAL_RCC_OscConfig+0x274>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a59      	ldr	r2, [pc, #356]	@ (8005a24 <HAL_RCC_OscConfig+0x274>)
 80058be:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80058c2:	6013      	str	r3, [r2, #0]
 80058c4:	4b57      	ldr	r3, [pc, #348]	@ (8005a24 <HAL_RCC_OscConfig+0x274>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a56      	ldr	r2, [pc, #344]	@ (8005a24 <HAL_RCC_OscConfig+0x274>)
 80058ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058ce:	6013      	str	r3, [r2, #0]
 80058d0:	e01d      	b.n	800590e <HAL_RCC_OscConfig+0x15e>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80058da:	d10c      	bne.n	80058f6 <HAL_RCC_OscConfig+0x146>
 80058dc:	4b51      	ldr	r3, [pc, #324]	@ (8005a24 <HAL_RCC_OscConfig+0x274>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a50      	ldr	r2, [pc, #320]	@ (8005a24 <HAL_RCC_OscConfig+0x274>)
 80058e2:	f443 13a0 	orr.w	r3, r3, #1310720	@ 0x140000
 80058e6:	6013      	str	r3, [r2, #0]
 80058e8:	4b4e      	ldr	r3, [pc, #312]	@ (8005a24 <HAL_RCC_OscConfig+0x274>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a4d      	ldr	r2, [pc, #308]	@ (8005a24 <HAL_RCC_OscConfig+0x274>)
 80058ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058f2:	6013      	str	r3, [r2, #0]
 80058f4:	e00b      	b.n	800590e <HAL_RCC_OscConfig+0x15e>
 80058f6:	4b4b      	ldr	r3, [pc, #300]	@ (8005a24 <HAL_RCC_OscConfig+0x274>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a4a      	ldr	r2, [pc, #296]	@ (8005a24 <HAL_RCC_OscConfig+0x274>)
 80058fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005900:	6013      	str	r3, [r2, #0]
 8005902:	4b48      	ldr	r3, [pc, #288]	@ (8005a24 <HAL_RCC_OscConfig+0x274>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a47      	ldr	r2, [pc, #284]	@ (8005a24 <HAL_RCC_OscConfig+0x274>)
 8005908:	f423 13a0 	bic.w	r3, r3, #1310720	@ 0x140000
 800590c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800590e:	f7fd fd21 	bl	8003354 <HAL_GetTick>
 8005912:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005914:	e008      	b.n	8005928 <HAL_RCC_OscConfig+0x178>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005916:	f7fd fd1d 	bl	8003354 <HAL_GetTick>
 800591a:	4602      	mov	r2, r0
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	1ad3      	subs	r3, r2, r3
 8005920:	2b64      	cmp	r3, #100	@ 0x64
 8005922:	d901      	bls.n	8005928 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8005924:	2303      	movs	r3, #3
 8005926:	e28d      	b.n	8005e44 <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005928:	4b3e      	ldr	r3, [pc, #248]	@ (8005a24 <HAL_RCC_OscConfig+0x274>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005930:	2b00      	cmp	r3, #0
 8005932:	d1f0      	bne.n	8005916 <HAL_RCC_OscConfig+0x166>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) != 0x00u)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 0302 	and.w	r3, r3, #2
 800593c:	2b00      	cmp	r3, #0
 800593e:	d054      	beq.n	80059ea <HAL_RCC_OscConfig+0x23a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock */
    if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	2b04      	cmp	r3, #4
 8005944:	d110      	bne.n	8005968 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d101      	bne.n	8005952 <HAL_RCC_OscConfig+0x1a2>
      {
        return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e278      	b.n	8005e44 <HAL_RCC_OscConfig+0x694>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005952:	4b34      	ldr	r3, [pc, #208]	@ (8005a24 <HAL_RCC_OscConfig+0x274>)
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	68db      	ldr	r3, [r3, #12]
 800595e:	041b      	lsls	r3, r3, #16
 8005960:	4930      	ldr	r1, [pc, #192]	@ (8005a24 <HAL_RCC_OscConfig+0x274>)
 8005962:	4313      	orrs	r3, r2
 8005964:	610b      	str	r3, [r1, #16]
 8005966:	e040      	b.n	80059ea <HAL_RCC_OscConfig+0x23a>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d023      	beq.n	80059b8 <HAL_RCC_OscConfig+0x208>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005970:	4b2c      	ldr	r3, [pc, #176]	@ (8005a24 <HAL_RCC_OscConfig+0x274>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a2b      	ldr	r2, [pc, #172]	@ (8005a24 <HAL_RCC_OscConfig+0x274>)
 8005976:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800597a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800597c:	f7fd fcea 	bl	8003354 <HAL_GetTick>
 8005980:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005982:	e008      	b.n	8005996 <HAL_RCC_OscConfig+0x1e6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005984:	f7fd fce6 	bl	8003354 <HAL_GetTick>
 8005988:	4602      	mov	r2, r0
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	2b02      	cmp	r3, #2
 8005990:	d901      	bls.n	8005996 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	e256      	b.n	8005e44 <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005996:	4b23      	ldr	r3, [pc, #140]	@ (8005a24 <HAL_RCC_OscConfig+0x274>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d0f0      	beq.n	8005984 <HAL_RCC_OscConfig+0x1d4>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059a2:	4b20      	ldr	r3, [pc, #128]	@ (8005a24 <HAL_RCC_OscConfig+0x274>)
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	041b      	lsls	r3, r3, #16
 80059b0:	491c      	ldr	r1, [pc, #112]	@ (8005a24 <HAL_RCC_OscConfig+0x274>)
 80059b2:	4313      	orrs	r3, r2
 80059b4:	610b      	str	r3, [r1, #16]
 80059b6:	e018      	b.n	80059ea <HAL_RCC_OscConfig+0x23a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059b8:	4b1a      	ldr	r3, [pc, #104]	@ (8005a24 <HAL_RCC_OscConfig+0x274>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a19      	ldr	r2, [pc, #100]	@ (8005a24 <HAL_RCC_OscConfig+0x274>)
 80059be:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80059c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059c4:	f7fd fcc6 	bl	8003354 <HAL_GetTick>
 80059c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80059ca:	e008      	b.n	80059de <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059cc:	f7fd fcc2 	bl	8003354 <HAL_GetTick>
 80059d0:	4602      	mov	r2, r0
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	1ad3      	subs	r3, r2, r3
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	d901      	bls.n	80059de <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 80059da:	2303      	movs	r3, #3
 80059dc:	e232      	b.n	8005e44 <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80059de:	4b11      	ldr	r3, [pc, #68]	@ (8005a24 <HAL_RCC_OscConfig+0x274>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d1f0      	bne.n	80059cc <HAL_RCC_OscConfig+0x21c>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) != 0x00u)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 0310 	and.w	r3, r3, #16
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d038      	beq.n	8005a68 <HAL_RCC_OscConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d01b      	beq.n	8005a36 <HAL_RCC_OscConfig+0x286>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80059fe:	4b09      	ldr	r3, [pc, #36]	@ (8005a24 <HAL_RCC_OscConfig+0x274>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a08      	ldr	r2, [pc, #32]	@ (8005a24 <HAL_RCC_OscConfig+0x274>)
 8005a04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005a08:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a0a:	f7fd fca3 	bl	8003354 <HAL_GetTick>
 8005a0e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005a10:	e00a      	b.n	8005a28 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005a12:	f7fd fc9f 	bl	8003354 <HAL_GetTick>
 8005a16:	4602      	mov	r2, r0
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	1ad3      	subs	r3, r2, r3
 8005a1c:	2b02      	cmp	r3, #2
 8005a1e:	d903      	bls.n	8005a28 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005a20:	2303      	movs	r3, #3
 8005a22:	e20f      	b.n	8005e44 <HAL_RCC_OscConfig+0x694>
 8005a24:	40030c00 	.word	0x40030c00
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005a28:	4ba0      	ldr	r3, [pc, #640]	@ (8005cac <HAL_RCC_OscConfig+0x4fc>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d0ee      	beq.n	8005a12 <HAL_RCC_OscConfig+0x262>
 8005a34:	e018      	b.n	8005a68 <HAL_RCC_OscConfig+0x2b8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005a36:	4b9d      	ldr	r3, [pc, #628]	@ (8005cac <HAL_RCC_OscConfig+0x4fc>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a9c      	ldr	r2, [pc, #624]	@ (8005cac <HAL_RCC_OscConfig+0x4fc>)
 8005a3c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a40:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a42:	f7fd fc87 	bl	8003354 <HAL_GetTick>
 8005a46:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005a48:	e008      	b.n	8005a5c <HAL_RCC_OscConfig+0x2ac>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005a4a:	f7fd fc83 	bl	8003354 <HAL_GetTick>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	1ad3      	subs	r3, r2, r3
 8005a54:	2b02      	cmp	r3, #2
 8005a56:	d901      	bls.n	8005a5c <HAL_RCC_OscConfig+0x2ac>
        {
          return HAL_TIMEOUT;
 8005a58:	2303      	movs	r3, #3
 8005a5a:	e1f3      	b.n	8005e44 <HAL_RCC_OscConfig+0x694>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005a5c:	4b93      	ldr	r3, [pc, #588]	@ (8005cac <HAL_RCC_OscConfig+0x4fc>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d1f0      	bne.n	8005a4a <HAL_RCC_OscConfig+0x29a>
    }
  }


  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) != 0x00u)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 0304 	and.w	r3, r3, #4
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	f000 80a7 	beq.w	8005bc4 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a76:	2300      	movs	r3, #0
 8005a78:	76fb      	strb	r3, [r7, #27]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_ENABLED() != 0x01)
 8005a7a:	4b8c      	ldr	r3, [pc, #560]	@ (8005cac <HAL_RCC_OscConfig+0x4fc>)
 8005a7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a80:	f003 0304 	and.w	r3, r3, #4
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d110      	bne.n	8005aaa <HAL_RCC_OscConfig+0x2fa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a88:	4b88      	ldr	r3, [pc, #544]	@ (8005cac <HAL_RCC_OscConfig+0x4fc>)
 8005a8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a8e:	4a87      	ldr	r2, [pc, #540]	@ (8005cac <HAL_RCC_OscConfig+0x4fc>)
 8005a90:	f043 0304 	orr.w	r3, r3, #4
 8005a94:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005a98:	4b84      	ldr	r3, [pc, #528]	@ (8005cac <HAL_RCC_OscConfig+0x4fc>)
 8005a9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a9e:	f003 0304 	and.w	r3, r3, #4
 8005aa2:	60fb      	str	r3, [r7, #12]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	76fb      	strb	r3, [r7, #27]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8005aaa:	4b81      	ldr	r3, [pc, #516]	@ (8005cb0 <HAL_RCC_OscConfig+0x500>)
 8005aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aae:	4a80      	ldr	r2, [pc, #512]	@ (8005cb0 <HAL_RCC_OscConfig+0x500>)
 8005ab0:	f043 0301 	orr.w	r3, r3, #1
 8005ab4:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Set the new LSE configuration -----------------------------------------*/
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	695b      	ldr	r3, [r3, #20]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d051      	beq.n	8005b62 <HAL_RCC_OscConfig+0x3b2>
    {
      /* If LSE is already on or in bypass mode, only LSE system can be modified */
      tmpreg1 = (RCC->BDCR & ~RCC_BDCR_LSESYSEN);
 8005abe:	4b7b      	ldr	r3, [pc, #492]	@ (8005cac <HAL_RCC_OscConfig+0x4fc>)
 8005ac0:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8005ac4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ac8:	61fb      	str	r3, [r7, #28]
      tmpreg1 |= RCC_OscInitStruct->LSEState;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	695b      	ldr	r3, [r3, #20]
 8005ace:	69fa      	ldr	r2, [r7, #28]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	61fb      	str	r3, [r7, #28]
      RCC->BDCR = tmpreg1;
 8005ad4:	4a75      	ldr	r2, [pc, #468]	@ (8005cac <HAL_RCC_OscConfig+0x4fc>)
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005adc:	f7fd fc3a 	bl	8003354 <HAL_GetTick>
 8005ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ae2:	e00a      	b.n	8005afa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ae4:	f7fd fc36 	bl	8003354 <HAL_GetTick>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	1ad3      	subs	r3, r2, r3
 8005aee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d901      	bls.n	8005afa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005af6:	2303      	movs	r3, #3
 8005af8:	e1a4      	b.n	8005e44 <HAL_RCC_OscConfig+0x694>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005afa:	4b6c      	ldr	r3, [pc, #432]	@ (8005cac <HAL_RCC_OscConfig+0x4fc>)
 8005afc:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8005b00:	f003 0302 	and.w	r3, r3, #2
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d0ed      	beq.n	8005ae4 <HAL_RCC_OscConfig+0x334>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	695b      	ldr	r3, [r3, #20]
 8005b0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d01e      	beq.n	8005b52 <HAL_RCC_OscConfig+0x3a2>
      {
        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005b14:	e00a      	b.n	8005b2c <HAL_RCC_OscConfig+0x37c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b16:	f7fd fc1d 	bl	8003354 <HAL_GetTick>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	1ad3      	subs	r3, r2, r3
 8005b20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d901      	bls.n	8005b2c <HAL_RCC_OscConfig+0x37c>
          {
            return HAL_TIMEOUT;
 8005b28:	2303      	movs	r3, #3
 8005b2a:	e18b      	b.n	8005e44 <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005b2c:	4b5f      	ldr	r3, [pc, #380]	@ (8005cac <HAL_RCC_OscConfig+0x4fc>)
 8005b2e:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8005b32:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d0ed      	beq.n	8005b16 <HAL_RCC_OscConfig+0x366>
 8005b3a:	e038      	b.n	8005bae <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b3c:	f7fd fc0a 	bl	8003354 <HAL_GetTick>
 8005b40:	4602      	mov	r2, r0
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	1ad3      	subs	r3, r2, r3
 8005b46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d901      	bls.n	8005b52 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	e178      	b.n	8005e44 <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005b52:	4b56      	ldr	r3, [pc, #344]	@ (8005cac <HAL_RCC_OscConfig+0x4fc>)
 8005b54:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8005b58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d1ed      	bne.n	8005b3c <HAL_RCC_OscConfig+0x38c>
 8005b60:	e025      	b.n	8005bae <HAL_RCC_OscConfig+0x3fe>
        }
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, (RCC_BDCR_LSEON | RCC_BDCR_LSESYSEN));
 8005b62:	4b52      	ldr	r3, [pc, #328]	@ (8005cac <HAL_RCC_OscConfig+0x4fc>)
 8005b64:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8005b68:	4a50      	ldr	r2, [pc, #320]	@ (8005cac <HAL_RCC_OscConfig+0x4fc>)
 8005b6a:	f023 0381 	bic.w	r3, r3, #129	@ 0x81
 8005b6e:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005b72:	4b4e      	ldr	r3, [pc, #312]	@ (8005cac <HAL_RCC_OscConfig+0x4fc>)
 8005b74:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8005b78:	4a4c      	ldr	r2, [pc, #304]	@ (8005cac <HAL_RCC_OscConfig+0x4fc>)
 8005b7a:	f023 0304 	bic.w	r3, r3, #4
 8005b7e:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b82:	f7fd fbe7 	bl	8003354 <HAL_GetTick>
 8005b86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005b88:	e00a      	b.n	8005ba0 <HAL_RCC_OscConfig+0x3f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b8a:	f7fd fbe3 	bl	8003354 <HAL_GetTick>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d901      	bls.n	8005ba0 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	e151      	b.n	8005e44 <HAL_RCC_OscConfig+0x694>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005ba0:	4b42      	ldr	r3, [pc, #264]	@ (8005cac <HAL_RCC_OscConfig+0x4fc>)
 8005ba2:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8005ba6:	f003 0302 	and.w	r3, r3, #2
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d1ed      	bne.n	8005b8a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005bae:	7efb      	ldrb	r3, [r7, #27]
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d107      	bne.n	8005bc4 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bb4:	4b3d      	ldr	r3, [pc, #244]	@ (8005cac <HAL_RCC_OscConfig+0x4fc>)
 8005bb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005bba:	4a3c      	ldr	r2, [pc, #240]	@ (8005cac <HAL_RCC_OscConfig+0x4fc>)
 8005bbc:	f023 0304 	bic.w	r3, r3, #4
 8005bc0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) != 0x00u)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 0308 	and.w	r3, r3, #8
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d078      	beq.n	8005cc2 <HAL_RCC_OscConfig+0x512>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Get CSR register value */
    tmpreg1 = RCC->CSR;
 8005bd0:	4b36      	ldr	r3, [pc, #216]	@ (8005cac <HAL_RCC_OscConfig+0x4fc>)
 8005bd2:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8005bd6:	61fb      	str	r3, [r7, #28]

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	699b      	ldr	r3, [r3, #24]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d050      	beq.n	8005c82 <HAL_RCC_OscConfig+0x4d2>
    {
      /* Check LSI division factor */
      assert_param(IS_RCC_LSI_DIV(RCC_OscInitStruct->LSIDiv));

      /* Check is LSIDiv is requested to be changed and LSI is already ON */
      if ((RCC_OscInitStruct->LSIDiv != (tmpreg1 & RCC_CSR_LSIPREDIV)) && ((tmpreg1 & RCC_CSR_LSIRDY) != 0x00u))
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	69da      	ldr	r2, [r3, #28]
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	f003 0304 	and.w	r3, r3, #4
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d023      	beq.n	8005c36 <HAL_RCC_OscConfig+0x486>
 8005bee:	69fb      	ldr	r3, [r7, #28]
 8005bf0:	f003 0302 	and.w	r3, r3, #2
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d01e      	beq.n	8005c36 <HAL_RCC_OscConfig+0x486>
      {
        /* Disable LSI (end clear ready bit from tmpreg to avoid its propagation below) */
        tmpreg1 &= ~(RCC_CSR_LSION | RCC_CSR_LSIRDY);
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	f023 0303 	bic.w	r3, r3, #3
 8005bfe:	61fb      	str	r3, [r7, #28]
        RCC->CSR = tmpreg1;
 8005c00:	4a2a      	ldr	r2, [pc, #168]	@ (8005cac <HAL_RCC_OscConfig+0x4fc>)
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c08:	f7fd fba4 	bl	8003354 <HAL_GetTick>
 8005c0c:	6138      	str	r0, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0x00u)
 8005c0e:	e008      	b.n	8005c22 <HAL_RCC_OscConfig+0x472>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c10:	f7fd fba0 	bl	8003354 <HAL_GetTick>
 8005c14:	4602      	mov	r2, r0
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	1ad3      	subs	r3, r2, r3
 8005c1a:	2b14      	cmp	r3, #20
 8005c1c:	d901      	bls.n	8005c22 <HAL_RCC_OscConfig+0x472>
          {
            /* LSI may be forced ON by IWDG */
            return HAL_TIMEOUT;
 8005c1e:	2303      	movs	r3, #3
 8005c20:	e110      	b.n	8005e44 <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0x00u)
 8005c22:	4b22      	ldr	r3, [pc, #136]	@ (8005cac <HAL_RCC_OscConfig+0x4fc>)
 8005c24:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8005c28:	f003 0302 	and.w	r3, r3, #2
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d1ef      	bne.n	8005c10 <HAL_RCC_OscConfig+0x460>
          }
        }
        /* Wait at least a half of LSI clock period before applying the new LSI prediv value */
        HAL_Delay(1);
 8005c30:	2001      	movs	r0, #1
 8005c32:	f7fd fb9b 	bl	800336c <HAL_Delay>
      }

      /* Set LSI division factor */
      tmpreg1 &= ~RCC_CSR_LSIPREDIV;
 8005c36:	69fb      	ldr	r3, [r7, #28]
 8005c38:	f023 0304 	bic.w	r3, r3, #4
 8005c3c:	61fb      	str	r3, [r7, #28]
      tmpreg1 |= RCC_OscInitStruct->LSIDiv;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	69db      	ldr	r3, [r3, #28]
 8005c42:	69fa      	ldr	r2, [r7, #28]
 8005c44:	4313      	orrs	r3, r2
 8005c46:	61fb      	str	r3, [r7, #28]

      /* Enable  LSI */
      tmpreg1 |= RCC_CSR_LSION;
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	f043 0301 	orr.w	r3, r3, #1
 8005c4e:	61fb      	str	r3, [r7, #28]
      RCC->CSR = tmpreg1;
 8005c50:	4a16      	ldr	r2, [pc, #88]	@ (8005cac <HAL_RCC_OscConfig+0x4fc>)
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c58:	f7fd fb7c 	bl	8003354 <HAL_GetTick>
 8005c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0x00u)
 8005c5e:	e008      	b.n	8005c72 <HAL_RCC_OscConfig+0x4c2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c60:	f7fd fb78 	bl	8003354 <HAL_GetTick>
 8005c64:	4602      	mov	r2, r0
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	1ad3      	subs	r3, r2, r3
 8005c6a:	2b14      	cmp	r3, #20
 8005c6c:	d901      	bls.n	8005c72 <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8005c6e:	2303      	movs	r3, #3
 8005c70:	e0e8      	b.n	8005e44 <HAL_RCC_OscConfig+0x694>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0x00u)
 8005c72:	4b0e      	ldr	r3, [pc, #56]	@ (8005cac <HAL_RCC_OscConfig+0x4fc>)
 8005c74:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8005c78:	f003 0302 	and.w	r3, r3, #2
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d0ef      	beq.n	8005c60 <HAL_RCC_OscConfig+0x4b0>
 8005c80:	e01f      	b.n	8005cc2 <HAL_RCC_OscConfig+0x512>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator */
      tmpreg1 &= ~RCC_CSR_LSION;
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	f023 0301 	bic.w	r3, r3, #1
 8005c88:	61fb      	str	r3, [r7, #28]
      RCC->CSR = tmpreg1;
 8005c8a:	4a08      	ldr	r2, [pc, #32]	@ (8005cac <HAL_RCC_OscConfig+0x4fc>)
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c92:	f7fd fb5f 	bl	8003354 <HAL_GetTick>
 8005c96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0x00u)
 8005c98:	e00c      	b.n	8005cb4 <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c9a:	f7fd fb5b 	bl	8003354 <HAL_GetTick>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	1ad3      	subs	r3, r2, r3
 8005ca4:	2b14      	cmp	r3, #20
 8005ca6:	d905      	bls.n	8005cb4 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8005ca8:	2303      	movs	r3, #3
 8005caa:	e0cb      	b.n	8005e44 <HAL_RCC_OscConfig+0x694>
 8005cac:	40030c00 	.word	0x40030c00
 8005cb0:	40030800 	.word	0x40030800
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0x00u)
 8005cb4:	4b65      	ldr	r3, [pc, #404]	@ (8005e4c <HAL_RCC_OscConfig+0x69c>)
 8005cb6:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8005cba:	f003 0302 	and.w	r3, r3, #2
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d1eb      	bne.n	8005c9a <HAL_RCC_OscConfig+0x4ea>
      }
    }
  }

  /*------------------------------ MSIS Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIS) != 0x00u)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 0320 	and.w	r3, r3, #32
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d068      	beq.n	8005da0 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSISState));

    /* Check if MSIS is asked to be turn off */
    if (RCC_OscInitStruct->MSISState == RCC_MSI_OFF)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6a1b      	ldr	r3, [r3, #32]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d10d      	bne.n	8005cf2 <HAL_RCC_OscConfig+0x542>
    {
      /* When MSIS is used as system clock it will not be disabled */
      if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSIS)
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d101      	bne.n	8005ce0 <HAL_RCC_OscConfig+0x530>
      {
        return HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	e0b1      	b.n	8005e44 <HAL_RCC_OscConfig+0x694>
      }
      else
      {
        /* Disable the MSIS */
        __HAL_RCC_MSIS_DISABLE();
 8005ce0:	4b5a      	ldr	r3, [pc, #360]	@ (8005e4c <HAL_RCC_OscConfig+0x69c>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a59      	ldr	r2, [pc, #356]	@ (8005e4c <HAL_RCC_OscConfig+0x69c>)
 8005ce6:	f023 0301 	bic.w	r3, r3, #1
 8005cea:	6013      	str	r3, [r2, #0]

        /* Store ready bit value for timeout */
        tmpreg1 = 0x00u;
 8005cec:	2300      	movs	r3, #0
 8005cee:	61fb      	str	r3, [r7, #28]
 8005cf0:	e03b      	b.n	8005d6a <HAL_RCC_OscConfig+0x5ba>
      /* Otherwise, turn it ON or if already ON, changing source and range is allowed */
      assert_param(IS_RCC_MSI_SOURCE(RCC_OscInitStruct->MSISSource));
      assert_param(IS_RCC_MSI_DIV(RCC_OscInitStruct->MSISDiv));

      /* Changing source and range is not possible when osnillator is ON but not Ready */
      if ((RCC->CR & (RCC_CR_MSISON | RCC_CR_MSISRDY)) == RCC_CR_MSISON)
 8005cf2:	4b56      	ldr	r3, [pc, #344]	@ (8005e4c <HAL_RCC_OscConfig+0x69c>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 0305 	and.w	r3, r3, #5
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d101      	bne.n	8005d02 <HAL_RCC_OscConfig+0x552>
      {
        return HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e0a0      	b.n	8005e44 <HAL_RCC_OscConfig+0x694>
      }
      else
      {
        /* Adjusts the MSIS source and divider, and force MSI selection to ICSCR1 */
        tmpreg1 = RCC->ICSCR1 & ~(RCC_ICSCR1_MSISSEL | RCC_ICSCR1_MSISDIV);
 8005d02:	4b52      	ldr	r3, [pc, #328]	@ (8005e4c <HAL_RCC_OscConfig+0x69c>)
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 8005d0a:	61fb      	str	r3, [r7, #28]
        tmpreg1 |= (RCC_ICSCR1_MSIRGSEL | RCC_OscInitStruct->MSISSource | RCC_OscInitStruct->MSISDiv);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d14:	431a      	orrs	r2, r3
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005d1e:	61fb      	str	r3, [r7, #28]
        RCC->ICSCR1 = tmpreg1;
 8005d20:	4a4a      	ldr	r2, [pc, #296]	@ (8005e4c <HAL_RCC_OscConfig+0x69c>)
 8005d22:	69fb      	ldr	r3, [r7, #28]
 8005d24:	6093      	str	r3, [r2, #8]

        /* If MSIS is already selected as system clock, update Systick */
        if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSIS)
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d116      	bne.n	8005d5a <HAL_RCC_OscConfig+0x5aa>
        {
          /* Update the SystemCoreClock global variable */
          SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005d2c:	f000 f9ca 	bl	80060c4 <HAL_RCC_GetSysClockFreq>
 8005d30:	4602      	mov	r2, r0
 8005d32:	4b46      	ldr	r3, [pc, #280]	@ (8005e4c <HAL_RCC_OscConfig+0x69c>)
 8005d34:	6a1b      	ldr	r3, [r3, #32]
 8005d36:	f003 030f 	and.w	r3, r3, #15
 8005d3a:	4945      	ldr	r1, [pc, #276]	@ (8005e50 <HAL_RCC_OscConfig+0x6a0>)
 8005d3c:	5ccb      	ldrb	r3, [r1, r3]
 8005d3e:	fa22 f303 	lsr.w	r3, r2, r3
 8005d42:	4a44      	ldr	r2, [pc, #272]	@ (8005e54 <HAL_RCC_OscConfig+0x6a4>)
 8005d44:	6013      	str	r3, [r2, #0]

          /* Configure the source of time base considering new system clocks settings*/
          if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005d46:	4b44      	ldr	r3, [pc, #272]	@ (8005e58 <HAL_RCC_OscConfig+0x6a8>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f7fd fa70 	bl	8003230 <HAL_InitTick>
 8005d50:	4603      	mov	r3, r0
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d007      	beq.n	8005d66 <HAL_RCC_OscConfig+0x5b6>
          {
            return HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	e074      	b.n	8005e44 <HAL_RCC_OscConfig+0x694>
          }
        }
        else
        {
          /* Enable the MSIS */
          __HAL_RCC_MSIS_ENABLE();
 8005d5a:	4b3c      	ldr	r3, [pc, #240]	@ (8005e4c <HAL_RCC_OscConfig+0x69c>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a3b      	ldr	r2, [pc, #236]	@ (8005e4c <HAL_RCC_OscConfig+0x69c>)
 8005d60:	f043 0301 	orr.w	r3, r3, #1
 8005d64:	6013      	str	r3, [r2, #0]
        }

        /* Store ready bit value for timeout */
        tmpreg1 = RCC_CR_MSISRDY;
 8005d66:	2304      	movs	r3, #4
 8005d68:	61fb      	str	r3, [r7, #28]
      }
    }

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d6a:	f7fd faf3 	bl	8003354 <HAL_GetTick>
 8005d6e:	6138      	str	r0, [r7, #16]

    /* Wait till HSI48 is disabled */
    while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != tmpreg1)
 8005d70:	e00f      	b.n	8005d92 <HAL_RCC_OscConfig+0x5e2>
    {
      if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005d72:	f7fd faef 	bl	8003354 <HAL_GetTick>
 8005d76:	4602      	mov	r2, r0
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	1ad3      	subs	r3, r2, r3
 8005d7c:	2b02      	cmp	r3, #2
 8005d7e:	d908      	bls.n	8005d92 <HAL_RCC_OscConfig+0x5e2>
      {
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != tmpreg1)
 8005d80:	4b32      	ldr	r3, [pc, #200]	@ (8005e4c <HAL_RCC_OscConfig+0x69c>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f003 0304 	and.w	r3, r3, #4
 8005d88:	69fa      	ldr	r2, [r7, #28]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d001      	beq.n	8005d92 <HAL_RCC_OscConfig+0x5e2>
        {
          return HAL_TIMEOUT;
 8005d8e:	2303      	movs	r3, #3
 8005d90:	e058      	b.n	8005e44 <HAL_RCC_OscConfig+0x694>
    while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != tmpreg1)
 8005d92:	4b2e      	ldr	r3, [pc, #184]	@ (8005e4c <HAL_RCC_OscConfig+0x69c>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f003 0304 	and.w	r3, r3, #4
 8005d9a:	69fa      	ldr	r2, [r7, #28]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d1e8      	bne.n	8005d72 <HAL_RCC_OscConfig+0x5c2>
      }
    }
  }

  /*------------------------------ MSIK Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) != 0x00u)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d04a      	beq.n	8005e42 <HAL_RCC_OscConfig+0x692>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIKState));

    /* Check if MSIK is asked to be turn off */
    if (RCC_OscInitStruct->MSIKState == RCC_MSI_OFF)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d108      	bne.n	8005dc6 <HAL_RCC_OscConfig+0x616>
    {
      /* Disable the MSIK */
      __HAL_RCC_MSIK_DISABLE();
 8005db4:	4b25      	ldr	r3, [pc, #148]	@ (8005e4c <HAL_RCC_OscConfig+0x69c>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a24      	ldr	r2, [pc, #144]	@ (8005e4c <HAL_RCC_OscConfig+0x69c>)
 8005dba:	f023 0308 	bic.w	r3, r3, #8
 8005dbe:	6013      	str	r3, [r2, #0]

      /* Store ready bit value for timeout */
      tmpreg1 = 0x00u;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	61fb      	str	r3, [r7, #28]
 8005dc4:	e022      	b.n	8005e0c <HAL_RCC_OscConfig+0x65c>
      /* Otherwise, turn it ON or if already ON, changing source and range is allowed */
      assert_param(IS_RCC_MSI_SOURCE(RCC_OscInitStruct->MSIKSource));
      assert_param(IS_RCC_MSI_DIV(RCC_OscInitStruct->MSIKDiv));

      /* Changing source and range is not possible when osnillator is ON but not Ready */
      if ((RCC->CR & (RCC_CR_MSIKON | RCC_CR_MSIKRDY)) == RCC_CR_MSIKON)
 8005dc6:	4b21      	ldr	r3, [pc, #132]	@ (8005e4c <HAL_RCC_OscConfig+0x69c>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 0318 	and.w	r3, r3, #24
 8005dce:	2b08      	cmp	r3, #8
 8005dd0:	d101      	bne.n	8005dd6 <HAL_RCC_OscConfig+0x626>
      {
        return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e036      	b.n	8005e44 <HAL_RCC_OscConfig+0x694>
      }
      else
      {
        /* Adjusts the MSIK source and divider, and force MSI selection to ICSCR1 */
        tmpreg1 = RCC->ICSCR1 & ~(RCC_ICSCR1_MSIKSEL | RCC_ICSCR1_MSIKDIV);
 8005dd6:	4b1d      	ldr	r3, [pc, #116]	@ (8005e4c <HAL_RCC_OscConfig+0x69c>)
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	f023 53e0 	bic.w	r3, r3, #469762048	@ 0x1c000000
 8005dde:	61fb      	str	r3, [r7, #28]
        tmpreg1 |= (RCC_ICSCR1_MSIRGSEL | ((RCC_OscInitStruct->MSIKSource | RCC_OscInitStruct->MSIKDiv) >> (RCC_ICSCR1_MSISSEL_Pos - RCC_ICSCR1_MSIKSEL_Pos)));
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005de8:	4313      	orrs	r3, r2
 8005dea:	08da      	lsrs	r2, r3, #3
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005df4:	61fb      	str	r3, [r7, #28]
        RCC->ICSCR1 = tmpreg1;
 8005df6:	4a15      	ldr	r2, [pc, #84]	@ (8005e4c <HAL_RCC_OscConfig+0x69c>)
 8005df8:	69fb      	ldr	r3, [r7, #28]
 8005dfa:	6093      	str	r3, [r2, #8]

        /* Enable the MSIK */
        __HAL_RCC_MSIK_ENABLE();
 8005dfc:	4b13      	ldr	r3, [pc, #76]	@ (8005e4c <HAL_RCC_OscConfig+0x69c>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a12      	ldr	r2, [pc, #72]	@ (8005e4c <HAL_RCC_OscConfig+0x69c>)
 8005e02:	f043 0308 	orr.w	r3, r3, #8
 8005e06:	6013      	str	r3, [r2, #0]

        /* Store ready bit value for timeout */
        tmpreg1 = RCC_CR_MSIKRDY;
 8005e08:	2310      	movs	r3, #16
 8005e0a:	61fb      	str	r3, [r7, #28]
      }
    }

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e0c:	f7fd faa2 	bl	8003354 <HAL_GetTick>
 8005e10:	6138      	str	r0, [r7, #16]

    /* Wait till HSI48 is disabled */
    while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != tmpreg1)
 8005e12:	e00f      	b.n	8005e34 <HAL_RCC_OscConfig+0x684>
    {
      if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005e14:	f7fd fa9e 	bl	8003354 <HAL_GetTick>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	1ad3      	subs	r3, r2, r3
 8005e1e:	2b02      	cmp	r3, #2
 8005e20:	d908      	bls.n	8005e34 <HAL_RCC_OscConfig+0x684>
      {
        if (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != tmpreg1)
 8005e22:	4b0a      	ldr	r3, [pc, #40]	@ (8005e4c <HAL_RCC_OscConfig+0x69c>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f003 0310 	and.w	r3, r3, #16
 8005e2a:	69fa      	ldr	r2, [r7, #28]
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d001      	beq.n	8005e34 <HAL_RCC_OscConfig+0x684>
        {
          return HAL_TIMEOUT;
 8005e30:	2303      	movs	r3, #3
 8005e32:	e007      	b.n	8005e44 <HAL_RCC_OscConfig+0x694>
    while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != tmpreg1)
 8005e34:	4b05      	ldr	r3, [pc, #20]	@ (8005e4c <HAL_RCC_OscConfig+0x69c>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 0310 	and.w	r3, r3, #16
 8005e3c:	69fa      	ldr	r2, [r7, #28]
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d1e8      	bne.n	8005e14 <HAL_RCC_OscConfig+0x664>
        }
      }
    }
  }

  return HAL_OK;
 8005e42:	2300      	movs	r3, #0
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3720      	adds	r7, #32
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}
 8005e4c:	40030c00 	.word	0x40030c00
 8005e50:	080231c0 	.word	0x080231c0
 8005e54:	20000004 	.word	0x20000004
 8005e58:	20000018 	.word	0x20000018

08005e5c <HAL_RCC_ClockConfig>:
  * @note   You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval None
  */
HAL_StatusTypeDef  HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b086      	sub	sp, #24
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;
  uint32_t update;
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d101      	bne.n	8005e70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e0d2      	b.n	8006016 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005e70:	4b6b      	ldr	r3, [pc, #428]	@ (8006020 <HAL_RCC_ClockConfig+0x1c4>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 030f 	and.w	r3, r3, #15
 8005e78:	683a      	ldr	r2, [r7, #0]
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d910      	bls.n	8005ea0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e7e:	4b68      	ldr	r3, [pc, #416]	@ (8006020 <HAL_RCC_ClockConfig+0x1c4>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f023 020f 	bic.w	r2, r3, #15
 8005e86:	4966      	ldr	r1, [pc, #408]	@ (8006020 <HAL_RCC_ClockConfig+0x1c4>)
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e8e:	4b64      	ldr	r3, [pc, #400]	@ (8006020 <HAL_RCC_ClockConfig+0x1c4>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f003 030f 	and.w	r3, r3, #15
 8005e96:	683a      	ldr	r2, [r7, #0]
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d001      	beq.n	8005ea0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	e0ba      	b.n	8006016 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 0301 	and.w	r3, r3, #1
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d040      	beq.n	8005f2e <HAL_RCC_ClockConfig+0xd2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* Read CR register */
    tmpreg1 = RCC->CR;
 8005eac:	4b5d      	ldr	r3, [pc, #372]	@ (8006024 <HAL_RCC_ClockConfig+0x1c8>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	617b      	str	r3, [r7, #20]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	2b02      	cmp	r3, #2
 8005eb8:	d106      	bne.n	8005ec8 <HAL_RCC_ClockConfig+0x6c>
    {
      /* Check the HSE ready flag */
      if ((tmpreg1 & RCC_CR_HSERDY) == 0U)
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d113      	bne.n	8005eec <HAL_RCC_ClockConfig+0x90>
      {
        return HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e0a6      	b.n	8006016 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d106      	bne.n	8005ede <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSI ready flag */
      if ((tmpreg1 & RCC_CR_HSIRDY) == 0U)
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d108      	bne.n	8005eec <HAL_RCC_ClockConfig+0x90>
      {
        return HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	e09b      	b.n	8006016 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* MSIS is selected as System Clock Source */
    else
    {
      /* Check the MSIS ready flag */
      if ((tmpreg1 & RCC_CR_MSISRDY) == 0U)
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	f003 0304 	and.w	r3, r3, #4
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d101      	bne.n	8005eec <HAL_RCC_ClockConfig+0x90>
      {
        return HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	e094      	b.n	8006016 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    /* Switch System clock source */
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005eec:	4b4d      	ldr	r3, [pc, #308]	@ (8006024 <HAL_RCC_ClockConfig+0x1c8>)
 8005eee:	69db      	ldr	r3, [r3, #28]
 8005ef0:	f023 0203 	bic.w	r2, r3, #3
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	494a      	ldr	r1, [pc, #296]	@ (8006024 <HAL_RCC_ClockConfig+0x1c8>)
 8005efa:	4313      	orrs	r3, r2
 8005efc:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005efe:	f7fd fa29 	bl	8003354 <HAL_GetTick>
 8005f02:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR1_SWS_Pos))
 8005f04:	e00a      	b.n	8005f1c <HAL_RCC_ClockConfig+0xc0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f06:	f7fd fa25 	bl	8003354 <HAL_GetTick>
 8005f0a:	4602      	mov	r2, r0
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	1ad3      	subs	r3, r2, r3
 8005f10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d901      	bls.n	8005f1c <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_TIMEOUT;
 8005f18:	2303      	movs	r3, #3
 8005f1a:	e07c      	b.n	8006016 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR1_SWS_Pos))
 8005f1c:	4b41      	ldr	r3, [pc, #260]	@ (8006024 <HAL_RCC_ClockConfig+0x1c8>)
 8005f1e:	69db      	ldr	r3, [r3, #28]
 8005f20:	f003 020c 	and.w	r2, r3, #12
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d1eb      	bne.n	8005f06 <HAL_RCC_ClockConfig+0xaa>
      }
    }
  }

  /* Get CFGR2 content value, and reset update variable */
  tmpreg1 = RCC->CFGR2;
 8005f2e:	4b3d      	ldr	r3, [pc, #244]	@ (8006024 <HAL_RCC_ClockConfig+0x1c8>)
 8005f30:	6a1b      	ldr	r3, [r3, #32]
 8005f32:	617b      	str	r3, [r7, #20]
  update = 0x00u;
 8005f34:	2300      	movs	r3, #0
 8005f36:	613b      	str	r3, [r7, #16]

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 0302 	and.w	r3, r3, #2
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d00a      	beq.n	8005f5a <HAL_RCC_ClockConfig+0xfe>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    /* update HCLK1 divider and notify register is required */
    tmpreg1 &= ~RCC_CFGR2_HPRE;
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	f023 030f 	bic.w	r3, r3, #15
 8005f4a:	617b      	str	r3, [r7, #20]
    tmpreg1 |= RCC_ClkInitStruct->AHBCLKDivider;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	697a      	ldr	r2, [r7, #20]
 8005f52:	4313      	orrs	r3, r2
 8005f54:	617b      	str	r3, [r7, #20]
    update = 0x01u;
 8005f56:	2301      	movs	r3, #1
 8005f58:	613b      	str	r3, [r7, #16]
  }


  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f003 0304 	and.w	r3, r3, #4
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d00a      	beq.n	8005f7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));

    /* update PCLK1 divider and notify register is required */
    tmpreg1 &= ~RCC_CFGR2_PPRE1;
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f6c:	617b      	str	r3, [r7, #20]
    tmpreg1 |= RCC_ClkInitStruct->APB1CLKDivider;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	697a      	ldr	r2, [r7, #20]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	617b      	str	r3, [r7, #20]
    update = 0x01u;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	613b      	str	r3, [r7, #16]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 0308 	and.w	r3, r3, #8
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d00b      	beq.n	8005fa0 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));

    /* update PCLK2 divider and notify register is required */
    tmpreg1 &= ~RCC_CFGR2_PPRE2;
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005f8e:	617b      	str	r3, [r7, #20]
    tmpreg1 |= (RCC_ClkInitStruct->APB2CLKDivider << (RCC_CFGR2_PPRE2_Pos - RCC_CFGR2_PPRE1_Pos));
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	691b      	ldr	r3, [r3, #16]
 8005f94:	011b      	lsls	r3, r3, #4
 8005f96:	697a      	ldr	r2, [r7, #20]
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	617b      	str	r3, [r7, #20]
    update = 0x01u;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	613b      	str	r3, [r7, #16]
  }

  /* update CFGR2 if required */
  if (update != 0x00u)
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d002      	beq.n	8005fac <HAL_RCC_ClockConfig+0x150>
  {
    RCC->CFGR2 = tmpreg1;
 8005fa6:	4a1f      	ldr	r2, [pc, #124]	@ (8006024 <HAL_RCC_ClockConfig+0x1c8>)
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	6213      	str	r3, [r2, #32]
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f003 0310 	and.w	r3, r3, #16
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d003      	beq.n	8005fc0 <HAL_RCC_ClockConfig+0x164>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB3CLKDivider));
    WRITE_REG(RCC->CFGR3, RCC_ClkInitStruct->APB3CLKDivider);
 8005fb8:	4a1a      	ldr	r2, [pc, #104]	@ (8006024 <HAL_RCC_ClockConfig+0x1c8>)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	695b      	ldr	r3, [r3, #20]
 8005fbe:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005fc0:	4b17      	ldr	r3, [pc, #92]	@ (8006020 <HAL_RCC_ClockConfig+0x1c4>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f003 030f 	and.w	r3, r3, #15
 8005fc8:	683a      	ldr	r2, [r7, #0]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d210      	bcs.n	8005ff0 <HAL_RCC_ClockConfig+0x194>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fce:	4b14      	ldr	r3, [pc, #80]	@ (8006020 <HAL_RCC_ClockConfig+0x1c4>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f023 020f 	bic.w	r2, r3, #15
 8005fd6:	4912      	ldr	r1, [pc, #72]	@ (8006020 <HAL_RCC_ClockConfig+0x1c4>)
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fde:	4b10      	ldr	r3, [pc, #64]	@ (8006020 <HAL_RCC_ClockConfig+0x1c4>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f003 030f 	and.w	r3, r3, #15
 8005fe6:	683a      	ldr	r2, [r7, #0]
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d001      	beq.n	8005ff0 <HAL_RCC_ClockConfig+0x194>
    {
      return HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	e012      	b.n	8006016 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005ff0:	f000 f868 	bl	80060c4 <HAL_RCC_GetSysClockFreq>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	4b0b      	ldr	r3, [pc, #44]	@ (8006024 <HAL_RCC_ClockConfig+0x1c8>)
 8005ff8:	6a1b      	ldr	r3, [r3, #32]
 8005ffa:	f003 030f 	and.w	r3, r3, #15
 8005ffe:	490a      	ldr	r1, [pc, #40]	@ (8006028 <HAL_RCC_ClockConfig+0x1cc>)
 8006000:	5ccb      	ldrb	r3, [r1, r3]
 8006002:	fa22 f303 	lsr.w	r3, r2, r3
 8006006:	4a09      	ldr	r2, [pc, #36]	@ (800602c <HAL_RCC_ClockConfig+0x1d0>)
 8006008:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800600a:	4b09      	ldr	r3, [pc, #36]	@ (8006030 <HAL_RCC_ClockConfig+0x1d4>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4618      	mov	r0, r3
 8006010:	f7fd f90e 	bl	8003230 <HAL_InitTick>
 8006014:	4603      	mov	r3, r0
}
 8006016:	4618      	mov	r0, r3
 8006018:	3718      	adds	r7, #24
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
 800601e:	bf00      	nop
 8006020:	40022000 	.word	0x40022000
 8006024:	40030c00 	.word	0x40030c00
 8006028:	080231c0 	.word	0x080231c0
 800602c:	20000004 	.word	0x20000004
 8006030:	20000018 	.word	0x20000018

08006034 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCO2DIV_64  division by 64 applied to MCO2 clock
  *            @arg @ref RCC_MCO2DIV_128 division by 128 applied to MCO2 clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b08c      	sub	sp, #48	@ 0x30
 8006038:	af00      	add	r7, sp, #0
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	60b9      	str	r1, [r7, #8]
 800603e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));

  /* MCO Clock Enable. On U3, MCO1 and MCO2 are always on GPIOA */
  __MCO_CLK_ENABLE();
 8006040:	4b1e      	ldr	r3, [pc, #120]	@ (80060bc <HAL_RCC_MCOConfig+0x88>)
 8006042:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006046:	4a1d      	ldr	r2, [pc, #116]	@ (80060bc <HAL_RCC_MCOConfig+0x88>)
 8006048:	f043 0301 	orr.w	r3, r3, #1
 800604c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8006050:	4b1a      	ldr	r3, [pc, #104]	@ (80060bc <HAL_RCC_MCOConfig+0x88>)
 8006052:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006056:	f003 0301 	and.w	r3, r3, #1
 800605a:	617b      	str	r3, [r7, #20]
 800605c:	697b      	ldr	r3, [r7, #20]

  /* Configure the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin = (RCC_MCOx & RCC_MCO_GPIOPIN_MASK);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	b29b      	uxth	r3, r3
 8006062:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006064:	2302      	movs	r3, #2
 8006066:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006068:	2303      	movs	r3, #3
 800606a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800606c:	2300      	movs	r3, #0
 800606e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = ((RCC_MCOx & RCC_MCO_GPIOAF_MASK) >> RCC_MCO_GPIOAF_POS);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	0d1b      	lsrs	r3, r3, #20
 8006074:	f003 030f 	and.w	r3, r3, #15
 8006078:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(MCO_GPIO_PORT, &GPIO_InitStruct);
 800607a:	f107 0318 	add.w	r3, r7, #24
 800607e:	4619      	mov	r1, r3
 8006080:	480f      	ldr	r0, [pc, #60]	@ (80060c0 <HAL_RCC_MCOConfig+0x8c>)
 8006082:	f7ff f84b 	bl	800511c <HAL_GPIO_Init>

  if ((RCC_MCOx & RCC_MCO_INDEX_MASK) != 0x00u)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800608c:	2b00      	cmp	r3, #0
 800608e:	d003      	beq.n	8006098 <HAL_RCC_MCOConfig+0x64>
  {
    assert_param(IS_RCC_MCO2DIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO2SOURCE(RCC_MCOSource));
    clearmask = (RCC_CFGR1_MCO2SEL | RCC_CFGR1_MCO2PRE);
 8006090:	f44f 03fe 	mov.w	r3, #8323072	@ 0x7f0000
 8006094:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006096:	e002      	b.n	800609e <HAL_RCC_MCOConfig+0x6a>
  }
  else
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    clearmask = (RCC_CFGR1_MCOSEL | RCC_CFGR1_MCOPRE);
 8006098:	f04f 43fe 	mov.w	r3, #2130706432	@ 0x7f000000
 800609c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Mask MCOxSEL[] and MCOxPRE[] bits then set MCOx clock source and prescaler */
  MODIFY_REG(RCC->CFGR1, clearmask, (RCC_MCOSource | RCC_MCODiv));
 800609e:	4b07      	ldr	r3, [pc, #28]	@ (80060bc <HAL_RCC_MCOConfig+0x88>)
 80060a0:	69da      	ldr	r2, [r3, #28]
 80060a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060a4:	43db      	mvns	r3, r3
 80060a6:	401a      	ands	r2, r3
 80060a8:	68b9      	ldr	r1, [r7, #8]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	430b      	orrs	r3, r1
 80060ae:	4903      	ldr	r1, [pc, #12]	@ (80060bc <HAL_RCC_MCOConfig+0x88>)
 80060b0:	4313      	orrs	r3, r2
 80060b2:	61cb      	str	r3, [r1, #28]
}
 80060b4:	bf00      	nop
 80060b6:	3730      	adds	r7, #48	@ 0x30
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}
 80060bc:	40030c00 	.word	0x40030c00
 80060c0:	42020000 	.word	0x42020000

080060c4 <HAL_RCC_GetSysClockFreq>:
  * @note   This function can be used by the user application to compute the
  *         baudrate for the communication peripherals or configure other parameters.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b083      	sub	sp, #12
 80060c8:	af00      	add	r7, sp, #0
  uint32_t tmpcfgr;
  uint32_t sysclk;

  /* Get SYSCLK source */
  tmpcfgr = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060ca:	4b1e      	ldr	r3, [pc, #120]	@ (8006144 <HAL_RCC_GetSysClockFreq+0x80>)
 80060cc:	69db      	ldr	r3, [r3, #28]
 80060ce:	f003 030c 	and.w	r3, r3, #12
 80060d2:	607b      	str	r3, [r7, #4]

  if (tmpcfgr == RCC_SYSCLKSOURCE_STATUS_HSE)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2b08      	cmp	r3, #8
 80060d8:	d102      	bne.n	80060e0 <HAL_RCC_GetSysClockFreq+0x1c>
  {
    /* HSE used as system clock source */
    sysclk = HSE_VALUE;
 80060da:	4b1b      	ldr	r3, [pc, #108]	@ (8006148 <HAL_RCC_GetSysClockFreq+0x84>)
 80060dc:	603b      	str	r3, [r7, #0]
 80060de:	e029      	b.n	8006134 <HAL_RCC_GetSysClockFreq+0x70>
  }
  else if (tmpcfgr == RCC_SYSCLKSOURCE_STATUS_HSI)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2b04      	cmp	r3, #4
 80060e4:	d102      	bne.n	80060ec <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* HSI used as system clock source */
    sysclk = HSI_VALUE;
 80060e6:	4b18      	ldr	r3, [pc, #96]	@ (8006148 <HAL_RCC_GetSysClockFreq+0x84>)
 80060e8:	603b      	str	r3, [r7, #0]
 80060ea:	e023      	b.n	8006134 <HAL_RCC_GetSysClockFreq+0x70>
  }
  else
  {
    /* MSIS used as system clock source. Read ICSR1 register */
    tmpcfgr = RCC->ICSCR1;
 80060ec:	4b15      	ldr	r3, [pc, #84]	@ (8006144 <HAL_RCC_GetSysClockFreq+0x80>)
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	607b      	str	r3, [r7, #4]

    /* Check which MSIS Range is selected */
    if ((tmpcfgr & RCC_ICSCR1_MSIRGSEL) != 0x00u)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d00d      	beq.n	8006118 <HAL_RCC_GetSysClockFreq+0x54>
    {
      /* Check which MSIRCx is selected as MSIS source */
      if ((tmpcfgr & RCC_ICSCR1_MSISSEL) != 0x00u)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	da02      	bge.n	8006108 <HAL_RCC_GetSysClockFreq+0x44>
      {
        /* MSI RC1 is selected */
        sysclk = MSIRC1_VALUE;
 8006102:	4b12      	ldr	r3, [pc, #72]	@ (800614c <HAL_RCC_GetSysClockFreq+0x88>)
 8006104:	603b      	str	r3, [r7, #0]
 8006106:	e001      	b.n	800610c <HAL_RCC_GetSysClockFreq+0x48>
      }
      else
      {
        /* MSI RC0 is selected */
        sysclk = MSIRC0_VALUE;
 8006108:	4b11      	ldr	r3, [pc, #68]	@ (8006150 <HAL_RCC_GetSysClockFreq+0x8c>)
 800610a:	603b      	str	r3, [r7, #0]
      }

      /* Get MSIS range */
      tmpcfgr = (tmpcfgr & RCC_ICSCR1_MSISDIV) >> RCC_ICSCR1_MSISDIV_Pos;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	0f5b      	lsrs	r3, r3, #29
 8006110:	f003 0303 	and.w	r3, r3, #3
 8006114:	607b      	str	r3, [r7, #4]
 8006116:	e008      	b.n	800612a <HAL_RCC_GetSysClockFreq+0x66>
    }
    else
    {
      /* MSI RC1 is selected */
      sysclk = MSIRC1_VALUE;
 8006118:	4b0c      	ldr	r3, [pc, #48]	@ (800614c <HAL_RCC_GetSysClockFreq+0x88>)
 800611a:	603b      	str	r3, [r7, #0]

      /* Get MSIS range */
      tmpcfgr = (RCC->CSR & (RCC_CSR_MSISDIVS_1 | RCC_CSR_MSISDIVS_0)) >> RCC_CSR_MSISDIVS_Pos;
 800611c:	4b09      	ldr	r3, [pc, #36]	@ (8006144 <HAL_RCC_GetSysClockFreq+0x80>)
 800611e:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8006122:	0b1b      	lsrs	r3, r3, #12
 8006124:	f003 0303 	and.w	r3, r3, #3
 8006128:	607b      	str	r3, [r7, #4]
    }

    /* MSIS frequency in HZ*/
    sysclk >>= tmpcfgr;
 800612a:	683a      	ldr	r2, [r7, #0]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	fa22 f303 	lsr.w	r3, r2, r3
 8006132:	603b      	str	r3, [r7, #0]
  }

  return sysclk;
 8006134:	683b      	ldr	r3, [r7, #0]
}
 8006136:	4618      	mov	r0, r3
 8006138:	370c      	adds	r7, #12
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr
 8006142:	bf00      	nop
 8006144:	40030c00 	.word	0x40030c00
 8006148:	00f42400 	.word	0x00f42400
 800614c:	016e3600 	.word	0x016e3600
 8006150:	05b8d800 	.word	0x05b8d800

08006154 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8006158:	f7ff ffb4 	bl	80060c4 <HAL_RCC_GetSysClockFreq>
 800615c:	4602      	mov	r2, r0
 800615e:	4b07      	ldr	r3, [pc, #28]	@ (800617c <HAL_RCC_GetHCLKFreq+0x28>)
 8006160:	6a1b      	ldr	r3, [r3, #32]
 8006162:	f003 030f 	and.w	r3, r3, #15
 8006166:	4906      	ldr	r1, [pc, #24]	@ (8006180 <HAL_RCC_GetHCLKFreq+0x2c>)
 8006168:	5ccb      	ldrb	r3, [r1, r3]
 800616a:	fa22 f303 	lsr.w	r3, r2, r3
 800616e:	4a05      	ldr	r2, [pc, #20]	@ (8006184 <HAL_RCC_GetHCLKFreq+0x30>)
 8006170:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8006172:	4b04      	ldr	r3, [pc, #16]	@ (8006184 <HAL_RCC_GetHCLKFreq+0x30>)
 8006174:	681b      	ldr	r3, [r3, #0]
}
 8006176:	4618      	mov	r0, r3
 8006178:	bd80      	pop	{r7, pc}
 800617a:	bf00      	nop
 800617c:	40030c00 	.word	0x40030c00
 8006180:	080231c0 	.word	0x080231c0
 8006184:	20000004 	.word	0x20000004

08006188 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 800618c:	f7ff ffe2 	bl	8006154 <HAL_RCC_GetHCLKFreq>
 8006190:	4602      	mov	r2, r0
 8006192:	4b05      	ldr	r3, [pc, #20]	@ (80061a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006194:	6a1b      	ldr	r3, [r3, #32]
 8006196:	091b      	lsrs	r3, r3, #4
 8006198:	f003 0307 	and.w	r3, r3, #7
 800619c:	4903      	ldr	r1, [pc, #12]	@ (80061ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800619e:	5ccb      	ldrb	r3, [r1, r3]
 80061a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	40030c00 	.word	0x40030c00
 80061ac:	080231d0 	.word	0x080231d0

080061b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 80061b4:	f7ff ffce 	bl	8006154 <HAL_RCC_GetHCLKFreq>
 80061b8:	4602      	mov	r2, r0
 80061ba:	4b05      	ldr	r3, [pc, #20]	@ (80061d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80061bc:	6a1b      	ldr	r3, [r3, #32]
 80061be:	0a1b      	lsrs	r3, r3, #8
 80061c0:	f003 0307 	and.w	r3, r3, #7
 80061c4:	4903      	ldr	r1, [pc, #12]	@ (80061d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80061c6:	5ccb      	ldrb	r3, [r1, r3]
 80061c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	bd80      	pop	{r7, pc}
 80061d0:	40030c00 	.word	0x40030c00
 80061d4:	080231d0 	.word	0x080231d0

080061d8 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 80061dc:	f7ff ffba 	bl	8006154 <HAL_RCC_GetHCLKFreq>
 80061e0:	4602      	mov	r2, r0
 80061e2:	4b05      	ldr	r3, [pc, #20]	@ (80061f8 <HAL_RCC_GetPCLK3Freq+0x20>)
 80061e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061e6:	091b      	lsrs	r3, r3, #4
 80061e8:	f003 0307 	and.w	r3, r3, #7
 80061ec:	4903      	ldr	r1, [pc, #12]	@ (80061fc <HAL_RCC_GetPCLK3Freq+0x24>)
 80061ee:	5ccb      	ldrb	r3, [r1, r3]
 80061f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	40030c00 	.word	0x40030c00
 80061fc:	080231d0 	.word	0x080231d0

08006200 <HAL_RCC_GetMSIKFreq>:
/**
  * @brief  Return the MSIK frequency.
  * @retval MSIK frequency in Hz
  */
uint32_t HAL_RCC_GetMSIKFreq(void)
{
 8006200:	b480      	push	{r7}
 8006202:	b083      	sub	sp, #12
 8006204:	af00      	add	r7, sp, #0
  uint32_t tmp;
  uint32_t msirange;

  /* Compute MSIK frequency ------------------------------------------------*/
  /* Read RCC ICSR1 register */
  tmp = RCC->ICSCR1;
 8006206:	4b16      	ldr	r3, [pc, #88]	@ (8006260 <HAL_RCC_GetMSIKFreq+0x60>)
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	607b      	str	r3, [r7, #4]

  /* Check which MSIK Range is selected */
  if ((tmp & RCC_ICSCR1_MSIRGSEL) != 0x00u)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006212:	2b00      	cmp	r3, #0
 8006214:	d00f      	beq.n	8006236 <HAL_RCC_GetMSIKFreq+0x36>
  {
    /* Get MSIK range */
    msirange = (tmp & RCC_ICSCR1_MSIKDIV) >> RCC_ICSCR1_MSIKDIV_Pos;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	0e9b      	lsrs	r3, r3, #26
 800621a:	f003 0303 	and.w	r3, r3, #3
 800621e:	603b      	str	r3, [r7, #0]

    /* Check which MSIRCx is selected as MSIK source */
    if ((tmp & RCC_ICSCR1_MSIKSEL) != 0x00u)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006226:	2b00      	cmp	r3, #0
 8006228:	d002      	beq.n	8006230 <HAL_RCC_GetMSIKFreq+0x30>
    {
      /* MSI RC1 is selected */
      tmp = MSIRC1_VALUE;
 800622a:	4b0e      	ldr	r3, [pc, #56]	@ (8006264 <HAL_RCC_GetMSIKFreq+0x64>)
 800622c:	607b      	str	r3, [r7, #4]
 800622e:	e00b      	b.n	8006248 <HAL_RCC_GetMSIKFreq+0x48>
    }
    else
    {
      /* MSI RC0 is selected */
      tmp = MSIRC0_VALUE;
 8006230:	4b0d      	ldr	r3, [pc, #52]	@ (8006268 <HAL_RCC_GetMSIKFreq+0x68>)
 8006232:	607b      	str	r3, [r7, #4]
 8006234:	e008      	b.n	8006248 <HAL_RCC_GetMSIKFreq+0x48>
    }
  }
  else
  {
    /* MSI RC1 is selected */
    tmp = MSIRC1_VALUE;
 8006236:	4b0b      	ldr	r3, [pc, #44]	@ (8006264 <HAL_RCC_GetMSIKFreq+0x64>)
 8006238:	607b      	str	r3, [r7, #4]

    /* Get MSIK range */
    msirange = (RCC->CSR & (RCC_CSR_MSIKDIVS_1 | RCC_CSR_MSIKDIVS_0)) >> RCC_CSR_MSIKDIVS_Pos;
 800623a:	4b09      	ldr	r3, [pc, #36]	@ (8006260 <HAL_RCC_GetMSIKFreq+0x60>)
 800623c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8006240:	0a1b      	lsrs	r3, r3, #8
 8006242:	f003 0303 	and.w	r3, r3, #3
 8006246:	603b      	str	r3, [r7, #0]
  }

  /*MSIK frequency in HZ*/
  tmp >>= msirange;
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	fa22 f303 	lsr.w	r3, r2, r3
 8006250:	607b      	str	r3, [r7, #4]

  return tmp;
 8006252:	687b      	ldr	r3, [r7, #4]
}
 8006254:	4618      	mov	r0, r3
 8006256:	370c      	adds	r7, #12
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr
 8006260:	40030c00 	.word	0x40030c00
 8006264:	016e3600 	.word	0x016e3600
 8006268:	05b8d800 	.word	0x05b8d800

0800626c <HAL_RCCEx_PeriphCLKConfig>:
  * @note   Care must be taken when HAL_RCCEx_PeriphCLKConfig() is used to select
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef *PeriphClkInit)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b088      	sub	sp, #32
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f003 0301 	and.w	r3, r3, #1
 800627c:	2b00      	cmp	r3, #0
 800627e:	d00a      	beq.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006280:	4bad      	ldr	r3, [pc, #692]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8006282:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8006286:	f023 0201 	bic.w	r2, r3, #1
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	49aa      	ldr	r1, [pc, #680]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8006290:	4313      	orrs	r3, r2
 8006292:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f003 0302 	and.w	r3, r3, #2
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d00a      	beq.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80062a2:	4ba5      	ldr	r3, [pc, #660]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80062a4:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80062a8:	f023 0204 	bic.w	r2, r3, #4
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	49a1      	ldr	r1, [pc, #644]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80062b2:	4313      	orrs	r3, r2
 80062b4:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- UART4 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f003 0304 	and.w	r3, r3, #4
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d00a      	beq.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80062c4:	4b9c      	ldr	r3, [pc, #624]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80062c6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80062ca:	f023 0210 	bic.w	r2, r3, #16
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	68db      	ldr	r3, [r3, #12]
 80062d2:	4999      	ldr	r1, [pc, #612]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80062d4:	4313      	orrs	r3, r2
 80062d6:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- UART5 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 0308 	and.w	r3, r3, #8
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d00a      	beq.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80062e6:	4b94      	ldr	r3, [pc, #592]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80062e8:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80062ec:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	691b      	ldr	r3, [r3, #16]
 80062f4:	4990      	ldr	r1, [pc, #576]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80062f6:	4313      	orrs	r3, r2
 80062f8:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f003 0310 	and.w	r3, r3, #16
 8006304:	2b00      	cmp	r3, #0
 8006306:	d00a      	beq.n	800631e <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(PeriphClkInit->I3c1ClockSelection));

    /* Configure the I3C1 clock source */
    __HAL_RCC_I3C1_CONFIG(PeriphClkInit->I3c1ClockSelection);
 8006308:	4b8b      	ldr	r3, [pc, #556]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800630a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800630e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	695b      	ldr	r3, [r3, #20]
 8006316:	4988      	ldr	r1, [pc, #544]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8006318:	4313      	orrs	r3, r2
 800631a:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f003 0320 	and.w	r3, r3, #32
 8006326:	2b00      	cmp	r3, #0
 8006328:	d00a      	beq.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800632a:	4b83      	ldr	r3, [pc, #524]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800632c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8006330:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	699b      	ldr	r3, [r3, #24]
 8006338:	497f      	ldr	r1, [pc, #508]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800633a:	4313      	orrs	r3, r2
 800633c:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

#if defined(I2C2)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006348:	2b00      	cmp	r3, #0
 800634a:	d00a      	beq.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0xf6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800634c:	4b7a      	ldr	r3, [pc, #488]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800634e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8006352:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	69db      	ldr	r3, [r3, #28]
 800635a:	4977      	ldr	r1, [pc, #476]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800635c:	4313      	orrs	r3, r2
 800635e:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }
#endif /* I2C2 */

#if defined(I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800636a:	2b00      	cmp	r3, #0
 800636c:	d00a      	beq.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(PeriphClkInit->I3c2ClockSelection));

    /* Configure the I3C2 clock source */
    __HAL_RCC_I3C2_CONFIG(PeriphClkInit->I3c2ClockSelection);
 800636e:	4b72      	ldr	r3, [pc, #456]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8006370:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8006374:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6a1b      	ldr	r3, [r3, #32]
 800637c:	496e      	ldr	r1, [pc, #440]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800637e:	4313      	orrs	r3, r2
 8006380:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }
#endif /* I3C2 */

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800638c:	2b00      	cmp	r3, #0
 800638e:	d00a      	beq.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(PeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(PeriphClkInit->Spi2ClockSelection);
 8006390:	4b69      	ldr	r3, [pc, #420]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8006392:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8006396:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800639e:	4966      	ldr	r1, [pc, #408]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80063a0:	4313      	orrs	r3, r2
 80063a2:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d00a      	beq.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80063b2:	4b61      	ldr	r3, [pc, #388]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80063b4:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80063b8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063c0:	495d      	ldr	r1, [pc, #372]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80063c2:	4313      	orrs	r3, r2
 80063c4:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d00a      	beq.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x17e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(PeriphClkInit->Spi1ClockSelection);
 80063d4:	4b58      	ldr	r3, [pc, #352]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80063d6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80063da:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063e2:	4955      	ldr	r1, [pc, #340]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80063e4:	4313      	orrs	r3, r2
 80063e6:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- SYSTICK clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SYSTICK) == RCC_PERIPHCLK_SYSTICK)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d00a      	beq.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SYSTICKCLKSOURCE(PeriphClkInit->SystickClockSelection));

    /* Configure the SYSTICK clock source */
    __HAL_RCC_SYSTICK_CONFIG(PeriphClkInit->SystickClockSelection);
 80063f6:	4b50      	ldr	r3, [pc, #320]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80063f8:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80063fc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006404:	494c      	ldr	r1, [pc, #304]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8006406:	4313      	orrs	r3, r2
 8006408:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006414:	2b00      	cmp	r3, #0
 8006416:	d00a      	beq.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN1 clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006418:	4b47      	ldr	r3, [pc, #284]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800641a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800641e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006426:	4944      	ldr	r1, [pc, #272]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8006428:	4313      	orrs	r3, r2
 800642a:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }
#endif /* FDCAN1 */

  /*-------------------------- ICLK clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006436:	2b00      	cmp	r3, #0
 8006438:	d00a      	beq.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(PeriphClkInit->IclkClockSelection));

    /* Set the source of ICLK clock*/
    __HAL_RCC_ICLK_CONFIG(PeriphClkInit->IclkClockSelection);
 800643a:	4b3f      	ldr	r3, [pc, #252]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800643c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8006440:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006448:	493b      	ldr	r1, [pc, #236]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800644a:	4313      	orrs	r3, r2
 800644c:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- USB1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB1) == RCC_PERIPHCLK_USB1)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006458:	2b00      	cmp	r3, #0
 800645a:	d00a      	beq.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USB1CLKSOURCE(PeriphClkInit->Usb1ClockSelection));

    /* Set the source of USB1 clock*/
    __HAL_RCC_USB1_CONFIG(PeriphClkInit->Usb1ClockSelection);
 800645c:	4b36      	ldr	r3, [pc, #216]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800645e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8006462:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800646a:	4933      	ldr	r1, [pc, #204]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800646c:	4313      	orrs	r3, r2
 800646e:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- TIMIC clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIMIC) == RCC_PERIPHCLK_TIMIC)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800647a:	2b00      	cmp	r3, #0
 800647c:	d00a      	beq.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMICCLKSOURCE(PeriphClkInit->TimIcClockSelection));

    /* Configure the TIMIC clock source */
    __HAL_RCC_TIMIC_CONFIG(PeriphClkInit->TimIcClockSelection);
 800647e:	4b2e      	ldr	r3, [pc, #184]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8006480:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8006484:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800648c:	492a      	ldr	r1, [pc, #168]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800648e:	4313      	orrs	r3, r2
 8006490:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

#if defined(ADF1)
  /*-------------------------- ADF1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800649c:	2b00      	cmp	r3, #0
 800649e:	d00a      	beq.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(PeriphClkInit->Adf1ClockSelection));

    /* Set the source of ADF1 clock*/
    __HAL_RCC_ADF1_CONFIG(PeriphClkInit->Adf1ClockSelection);
 80064a0:	4b25      	ldr	r3, [pc, #148]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80064a2:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80064a6:	f023 0203 	bic.w	r2, r3, #3
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064ae:	4922      	ldr	r1, [pc, #136]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80064b0:	4313      	orrs	r3, r2
 80064b2:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }
#endif /* ADF1 */

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d00a      	beq.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(PeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(PeriphClkInit->Spi3ClockSelection);
 80064c2:	4b1d      	ldr	r3, [pc, #116]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80064c4:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80064c8:	f023 0208 	bic.w	r2, r3, #8
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064d0:	4919      	ldr	r1, [pc, #100]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80064d2:	4313      	orrs	r3, r2
 80064d4:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d00a      	beq.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Set the source of SAI1 clock*/
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80064e4:	4b14      	ldr	r3, [pc, #80]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80064e6:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80064ea:	f023 0260 	bic.w	r2, r3, #96	@ 0x60
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064f2:	4911      	ldr	r1, [pc, #68]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80064f4:	4313      	orrs	r3, r2
 80064f6:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }
#endif /* SAI1 */

  /*-------------------------- RNG clock source configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006502:	2b00      	cmp	r3, #0
 8006504:	d00a      	beq.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Set the source of RNG clock*/
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006506:	4b0c      	ldr	r3, [pc, #48]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8006508:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800650c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006514:	4908      	ldr	r1, [pc, #32]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8006516:	4313      	orrs	r3, r2
 8006518:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006524:	2b00      	cmp	r3, #0
 8006526:	d019      	beq.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(PeriphClkInit->AdcDacClockSelection));
    assert_param(IS_RCC_ADCDAC_DIV(PeriphClkInit->AdcDacClockDivider));

    /* Configure the ADC12 and DAC1 interface clock source */
    __HAL_RCC_ADCDAC_CONFIG(PeriphClkInit->AdcDacClockSelection);
 8006528:	4b03      	ldr	r3, [pc, #12]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800652a:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800652e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	e002      	b.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8006536:	bf00      	nop
 8006538:	40030c00 	.word	0x40030c00
 800653c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800653e:	4980      	ldr	r1, [pc, #512]	@ (8006740 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8006540:	4313      	orrs	r3, r2
 8006542:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104

    /* Configure the ADC12 and DAC1 interface clock divider */
    __HAL_RCC_ADCDAC_DIV_CONFIG(PeriphClkInit->AdcDacClockDivider);
 8006546:	4b7e      	ldr	r3, [pc, #504]	@ (8006740 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8006548:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800654c:	f423 4270 	bic.w	r2, r3, #61440	@ 0xf000
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006554:	497a      	ldr	r1, [pc, #488]	@ (8006740 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8006556:	4313      	orrs	r3, r2
 8006558:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }

  /*-------------------------- DAC1SH clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1SH) == RCC_PERIPHCLK_DAC1SH)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006564:	2b00      	cmp	r3, #0
 8006566:	d00a      	beq.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DAC1SHCLKSOURCE(PeriphClkInit->Dac1SampleHoldClockSelection));

    /* Configure the DAC1 sample and hold interface clock source */
    __HAL_RCC_DAC1SH_CONFIG(PeriphClkInit->Dac1SampleHoldClockSelection);
 8006568:	4b75      	ldr	r3, [pc, #468]	@ (8006740 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800656a:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800656e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006576:	4972      	ldr	r1, [pc, #456]	@ (8006740 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8006578:	4313      	orrs	r3, r2
 800657a:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }

  /*-------------------------- OCTOSPI1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OCTOSPI1) == RCC_PERIPHCLK_OCTOSPI1)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006586:	2b00      	cmp	r3, #0
 8006588:	d00a      	beq.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OCTOSPICLKSOURCE(PeriphClkInit->Octospi1ClockSelection));

    /* Configure the OCTOSPI1 clock source */
    __HAL_RCC_OCTOSPI_CONFIG(PeriphClkInit->Octospi1ClockSelection);
 800658a:	4b6d      	ldr	r3, [pc, #436]	@ (8006740 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800658c:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8006590:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006598:	4969      	ldr	r1, [pc, #420]	@ (8006740 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800659a:	4313      	orrs	r3, r2
 800659c:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d00a      	beq.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x356>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80065ac:	4b64      	ldr	r3, [pc, #400]	@ (8006740 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80065ae:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80065b2:	f023 0203 	bic.w	r2, r3, #3
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80065ba:	4961      	ldr	r1, [pc, #388]	@ (8006740 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80065bc:	4313      	orrs	r3, r2
 80065be:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d00a      	beq.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x378>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80065ce:	4b5c      	ldr	r3, [pc, #368]	@ (8006740 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80065d0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80065d4:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80065dc:	4958      	ldr	r1, [pc, #352]	@ (8006740 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80065de:	4313      	orrs	r3, r2
 80065e0:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d00a      	beq.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x39a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM34CLKSOURCE(PeriphClkInit->Lptim34ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_LPTIM34_CONFIG(PeriphClkInit->Lptim34ClockSelection);
 80065f0:	4b53      	ldr	r3, [pc, #332]	@ (8006740 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80065f2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80065f6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80065fe:	4950      	ldr	r1, [pc, #320]	@ (8006740 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8006600:	4313      	orrs	r3, r2
 8006602:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800660e:	2b00      	cmp	r3, #0
 8006610:	d00a      	beq.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006612:	4b4b      	ldr	r3, [pc, #300]	@ (8006740 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8006614:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006618:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006620:	4947      	ldr	r1, [pc, #284]	@ (8006740 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8006622:	4313      	orrs	r3, r2
 8006624:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
    __HAL_RCC_SPI4_CONFIG(PeriphClkInit->Spi4ClockSelection);
  }
#endif /* SPI4 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	2b00      	cmp	r3, #0
 800662e:	f280 8082 	bge.w	8006736 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Reset the Backup domain only if the RTC Clock source selection is different then axisting one */
    tmpreg1 = RCC->BDCR;
 8006632:	4b43      	ldr	r3, [pc, #268]	@ (8006740 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8006634:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8006638:	61fb      	str	r3, [r7, #28]
    tmpreg2 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800663a:	4b41      	ldr	r3, [pc, #260]	@ (8006740 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800663c:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8006640:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006644:	617b      	str	r3, [r7, #20]

    /* Check if RTC clock source needs to be changed */
    if (tmpreg2 != PeriphClkInit->RTCClockSelection)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800664a:	697a      	ldr	r2, [r7, #20]
 800664c:	429a      	cmp	r2, r3
 800664e:	d072      	beq.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      FlagStatus       pwrclkchanged = RESET;
 8006650:	2300      	movs	r3, #0
 8006652:	76fb      	strb	r3, [r7, #27]

      /* Enable Power Clock */
      if (__HAL_RCC_PWR_IS_CLK_ENABLED() != 0x01u)
 8006654:	4b3a      	ldr	r3, [pc, #232]	@ (8006740 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8006656:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800665a:	f003 0304 	and.w	r3, r3, #4
 800665e:	2b00      	cmp	r3, #0
 8006660:	d110      	bne.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x418>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8006662:	4b37      	ldr	r3, [pc, #220]	@ (8006740 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8006664:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006668:	4a35      	ldr	r2, [pc, #212]	@ (8006740 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800666a:	f043 0304 	orr.w	r3, r3, #4
 800666e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006672:	4b33      	ldr	r3, [pc, #204]	@ (8006740 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8006674:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006678:	f003 0304 	and.w	r3, r3, #4
 800667c:	60fb      	str	r3, [r7, #12]
 800667e:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8006680:	2301      	movs	r3, #1
 8006682:	76fb      	strb	r3, [r7, #27]
      }

      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006684:	4b2f      	ldr	r3, [pc, #188]	@ (8006744 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 8006686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006688:	4a2e      	ldr	r2, [pc, #184]	@ (8006744 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800668a:	f043 0301 	orr.w	r3, r3, #1
 800668e:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Check if a backup domain reset is required */
      if (tmpreg2 != RCC_RTCCLKSOURCE_DISABLE)
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d00f      	beq.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006696:	4b2a      	ldr	r3, [pc, #168]	@ (8006740 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8006698:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800669c:	4a28      	ldr	r2, [pc, #160]	@ (8006740 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800669e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066a2:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
        __HAL_RCC_BACKUPRESET_RELEASE();
 80066a6:	4b26      	ldr	r3, [pc, #152]	@ (8006740 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80066a8:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80066ac:	4a24      	ldr	r2, [pc, #144]	@ (8006740 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80066ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066b2:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
      }

      /* Apply new RTC clock source selection */
      tmpreg1 &= ~(RCC_BDCR_RTCSEL | RCC_BDCR_RTCEN);
 80066b6:	69fb      	ldr	r3, [r7, #28]
 80066b8:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80066bc:	61fb      	str	r3, [r7, #28]

      /* Check is RTC disable is asked */
      if (PeriphClkInit->RTCClockSelection != RCC_RTCCLKSOURCE_DISABLE)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d006      	beq.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x468>
      {
        tmpreg1 |= (RCC_BDCR_RTCEN | PeriphClkInit->RTCClockSelection);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 80066ca:	69fb      	ldr	r3, [r7, #28]
 80066cc:	4313      	orrs	r3, r2
 80066ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066d2:	61fb      	str	r3, [r7, #28]
      }
      RCC->BDCR = tmpreg1;
 80066d4:	4a1a      	ldr	r2, [pc, #104]	@ (8006740 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80066d6:	69fb      	ldr	r3, [r7, #28]
 80066d8:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110

      /* Check if an oscillator was enable */
      if ((tmpreg1 & RCC_BDCR_LSEON) != 0x00u)
 80066dc:	69fb      	ldr	r3, [r7, #28]
 80066de:	f003 0301 	and.w	r3, r3, #1
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d01c      	beq.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x4b4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066e6:	f7fc fe35 	bl	8003354 <HAL_GetTick>
 80066ea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0x00u)
 80066ec:	e011      	b.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066ee:	f7fc fe31 	bl	8003354 <HAL_GetTick>
 80066f2:	4602      	mov	r2, r0
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	1ad3      	subs	r3, r2, r3
 80066f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d908      	bls.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
          {
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0x00u)
 8006700:	4b0f      	ldr	r3, [pc, #60]	@ (8006740 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8006702:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8006706:	f003 0302 	and.w	r3, r3, #2
 800670a:	2b00      	cmp	r3, #0
 800670c:	d101      	bne.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
            {
              return HAL_TIMEOUT;
 800670e:	2303      	movs	r3, #3
 8006710:	e012      	b.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0x00u)
 8006712:	4b0b      	ldr	r3, [pc, #44]	@ (8006740 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8006714:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8006718:	f003 0302 	and.w	r3, r3, #2
 800671c:	2b00      	cmp	r3, #0
 800671e:	d0e6      	beq.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x482>
            }
          }
        }
      }
      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8006720:	7efb      	ldrb	r3, [r7, #27]
 8006722:	2b01      	cmp	r3, #1
 8006724:	d107      	bne.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8006726:	4b06      	ldr	r3, [pc, #24]	@ (8006740 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8006728:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800672c:	4a04      	ldr	r2, [pc, #16]	@ (8006740 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800672e:	f023 0304 	bic.w	r3, r3, #4
 8006732:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }
    }
  }

  return HAL_OK;
 8006736:	2300      	movs	r3, #0
}
 8006738:	4618      	mov	r0, r3
 800673a:	3720      	adds	r7, #32
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}
 8006740:	40030c00 	.word	0x40030c00
 8006744:	40030800 	.word	0x40030800

08006748 <HAL_RCCEx_GetPeriphCLKFreq>:
  *
  *            (*) value not defined in all devices.
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b084      	sub	sp, #16
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0;
 8006750:	2300      	movs	r3, #0
 8006752:	60fb      	str	r3, [r7, #12]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800675a:	f000 8469 	beq.w	8007030 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006764:	f200 84a0 	bhi.w	80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800676e:	f000 8420 	beq.w	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006778:	f200 8496 	bhi.w	80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006782:	f000 83d3 	beq.w	8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800678c:	f200 848c 	bhi.w	80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006796:	f000 83b8 	beq.w	8006f0a <HAL_RCCEx_GetPeriphCLKFreq+0x7c2>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80067a0:	f200 8482 	bhi.w	80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80067aa:	f000 8378 	beq.w	8006e9e <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80067b4:	f200 8478 	bhi.w	80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80067be:	f000 835d 	beq.w	8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80067c8:	f200 846e 	bhi.w	80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80067d2:	f000 8326 	beq.w	8006e22 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80067dc:	f200 8464 	bhi.w	80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80067e6:	f000 82db 	beq.w	8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80067f0:	f200 845a 	bhi.w	80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80067fa:	f000 82b9 	beq.w	8006d70 <HAL_RCCEx_GetPeriphCLKFreq+0x628>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006804:	f200 8450 	bhi.w	80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800680e:	f000 828c 	beq.w	8006d2a <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006818:	f200 8446 	bhi.w	80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006822:	f000 8271 	beq.w	8006d08 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800682c:	f200 843c 	bhi.w	80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006836:	f000 8246 	beq.w	8006cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006840:	f200 8432 	bhi.w	80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800684a:	f000 8228 	beq.w	8006c9e <HAL_RCCEx_GetPeriphCLKFreq+0x556>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006854:	f200 8428 	bhi.w	80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800685e:	f000 81ef 	beq.w	8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006868:	f200 841e 	bhi.w	80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006872:	f000 81ce 	beq.w	8006c12 <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800687c:	f200 8414 	bhi.w	80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006886:	f000 8189 	beq.w	8006b9c <HAL_RCCEx_GetPeriphCLKFreq+0x454>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006890:	f200 840a 	bhi.w	80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800689a:	f000 816e 	beq.w	8006b7a <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068a4:	f200 8400 	bhi.w	80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068ae:	f000 8121 	beq.w	8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068b8:	f200 83f6 	bhi.w	80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068c2:	f000 8106 	beq.w	8006ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x38a>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068cc:	f200 83ec 	bhi.w	80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2b80      	cmp	r3, #128	@ 0x80
 80068d4:	f000 80ec 	beq.w	8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x368>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2b80      	cmp	r3, #128	@ 0x80
 80068dc:	f200 83e4 	bhi.w	80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2b20      	cmp	r3, #32
 80068e4:	d84c      	bhi.n	8006980 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	f000 83dd 	beq.w	80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	3b01      	subs	r3, #1
 80068f2:	2b1f      	cmp	r3, #31
 80068f4:	f200 83d8 	bhi.w	80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80068f8:	a201      	add	r2, pc, #4	@ (adr r2, 8006900 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 80068fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068fe:	bf00      	nop
 8006900:	0800698b 	.word	0x0800698b
 8006904:	080069bb 	.word	0x080069bb
 8006908:	080070a9 	.word	0x080070a9
 800690c:	080069eb 	.word	0x080069eb
 8006910:	080070a9 	.word	0x080070a9
 8006914:	080070a9 	.word	0x080070a9
 8006918:	080070a9 	.word	0x080070a9
 800691c:	08006a1b 	.word	0x08006a1b
 8006920:	080070a9 	.word	0x080070a9
 8006924:	080070a9 	.word	0x080070a9
 8006928:	080070a9 	.word	0x080070a9
 800692c:	080070a9 	.word	0x080070a9
 8006930:	080070a9 	.word	0x080070a9
 8006934:	080070a9 	.word	0x080070a9
 8006938:	080070a9 	.word	0x080070a9
 800693c:	08006a4b 	.word	0x08006a4b
 8006940:	080070a9 	.word	0x080070a9
 8006944:	080070a9 	.word	0x080070a9
 8006948:	080070a9 	.word	0x080070a9
 800694c:	080070a9 	.word	0x080070a9
 8006950:	080070a9 	.word	0x080070a9
 8006954:	080070a9 	.word	0x080070a9
 8006958:	080070a9 	.word	0x080070a9
 800695c:	080070a9 	.word	0x080070a9
 8006960:	080070a9 	.word	0x080070a9
 8006964:	080070a9 	.word	0x080070a9
 8006968:	080070a9 	.word	0x080070a9
 800696c:	080070a9 	.word	0x080070a9
 8006970:	080070a9 	.word	0x080070a9
 8006974:	080070a9 	.word	0x080070a9
 8006978:	080070a9 	.word	0x080070a9
 800697c:	08006a6d 	.word	0x08006a6d
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2b40      	cmp	r3, #64	@ 0x40
 8006984:	f000 8083 	beq.w	8006a8e <HAL_RCCEx_GetPeriphCLKFreq+0x346>
      break;

    /* Do nothing for Timer input capture as clock source is selected in timer block */
    case RCC_PERIPHCLK_TIMIC:
    default:
      break;
 8006988:	e38e      	b.n	80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
      srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800698a:	4ba9      	ldr	r3, [pc, #676]	@ (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800698c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8006990:	f003 0301 	and.w	r3, r3, #1
 8006994:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d103      	bne.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
        frequency = HAL_RCC_GetPCLK2Freq();
 800699c:	f7ff fc08 	bl	80061b0 <HAL_RCC_GetPCLK2Freq>
 80069a0:	60f8      	str	r0, [r7, #12]
      break;
 80069a2:	e383      	b.n	80070ac <HAL_RCCEx_GetPeriphCLKFreq+0x964>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80069a4:	4ba2      	ldr	r3, [pc, #648]	@ (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80069ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069b0:	f040 837c 	bne.w	80070ac <HAL_RCCEx_GetPeriphCLKFreq+0x964>
          frequency = HSI_VALUE;
 80069b4:	4b9f      	ldr	r3, [pc, #636]	@ (8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80069b6:	60fb      	str	r3, [r7, #12]
      break;
 80069b8:	e378      	b.n	80070ac <HAL_RCCEx_GetPeriphCLKFreq+0x964>
      srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80069ba:	4b9d      	ldr	r3, [pc, #628]	@ (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80069bc:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80069c0:	f003 0304 	and.w	r3, r3, #4
 80069c4:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d103      	bne.n	80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
        frequency = HAL_RCC_GetPCLK1Freq();
 80069cc:	f7ff fbdc 	bl	8006188 <HAL_RCC_GetPCLK1Freq>
 80069d0:	60f8      	str	r0, [r7, #12]
      break;
 80069d2:	e36d      	b.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x968>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80069d4:	4b96      	ldr	r3, [pc, #600]	@ (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80069dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069e0:	f040 8366 	bne.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x968>
          frequency = HSI_VALUE;
 80069e4:	4b93      	ldr	r3, [pc, #588]	@ (8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80069e6:	60fb      	str	r3, [r7, #12]
      break;
 80069e8:	e362      	b.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x968>
      srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80069ea:	4b91      	ldr	r3, [pc, #580]	@ (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80069ec:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80069f0:	f003 0310 	and.w	r3, r3, #16
 80069f4:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d103      	bne.n	8006a04 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
        frequency = HAL_RCC_GetPCLK1Freq();
 80069fc:	f7ff fbc4 	bl	8006188 <HAL_RCC_GetPCLK1Freq>
 8006a00:	60f8      	str	r0, [r7, #12]
      break;
 8006a02:	e357      	b.n	80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006a04:	4b8a      	ldr	r3, [pc, #552]	@ (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006a0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a10:	f040 8350 	bne.w	80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
          frequency = HSI_VALUE;
 8006a14:	4b87      	ldr	r3, [pc, #540]	@ (8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8006a16:	60fb      	str	r3, [r7, #12]
      break;
 8006a18:	e34c      	b.n	80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
      srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006a1a:	4b85      	ldr	r3, [pc, #532]	@ (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8006a1c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8006a20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a24:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d103      	bne.n	8006a34 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>
        frequency = HAL_RCC_GetPCLK1Freq();
 8006a2c:	f7ff fbac 	bl	8006188 <HAL_RCC_GetPCLK1Freq>
 8006a30:	60f8      	str	r0, [r7, #12]
      break;
 8006a32:	e341      	b.n	80070b8 <HAL_RCCEx_GetPeriphCLKFreq+0x970>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006a34:	4b7e      	ldr	r3, [pc, #504]	@ (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006a3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a40:	f040 833a 	bne.w	80070b8 <HAL_RCCEx_GetPeriphCLKFreq+0x970>
          frequency = HSI_VALUE;
 8006a44:	4b7b      	ldr	r3, [pc, #492]	@ (8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8006a46:	60fb      	str	r3, [r7, #12]
      break;
 8006a48:	e336      	b.n	80070b8 <HAL_RCCEx_GetPeriphCLKFreq+0x970>
      srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8006a4a:	4b79      	ldr	r3, [pc, #484]	@ (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8006a4c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8006a50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a54:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d103      	bne.n	8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0x31c>
        frequency = HAL_RCC_GetPCLK1Freq();
 8006a5c:	f7ff fb94 	bl	8006188 <HAL_RCC_GetPCLK1Freq>
 8006a60:	60f8      	str	r0, [r7, #12]
      break;
 8006a62:	e340      	b.n	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 8006a64:	f7ff fbcc 	bl	8006200 <HAL_RCC_GetMSIKFreq>
 8006a68:	60f8      	str	r0, [r7, #12]
      break;
 8006a6a:	e33c      	b.n	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006a6c:	4b70      	ldr	r3, [pc, #448]	@ (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8006a6e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8006a72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a76:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d103      	bne.n	8006a86 <HAL_RCCEx_GetPeriphCLKFreq+0x33e>
        frequency = HAL_RCC_GetPCLK1Freq();
 8006a7e:	f7ff fb83 	bl	8006188 <HAL_RCC_GetPCLK1Freq>
 8006a82:	60f8      	str	r0, [r7, #12]
      break;
 8006a84:	e32f      	b.n	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 8006a86:	f7ff fbbb 	bl	8006200 <HAL_RCC_GetMSIKFreq>
 8006a8a:	60f8      	str	r0, [r7, #12]
      break;
 8006a8c:	e32b      	b.n	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006a8e:	4b68      	ldr	r3, [pc, #416]	@ (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8006a90:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8006a94:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006a98:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d103      	bne.n	8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        frequency = HAL_RCC_GetPCLK1Freq();
 8006aa0:	f7ff fb72 	bl	8006188 <HAL_RCC_GetPCLK1Freq>
 8006aa4:	60f8      	str	r0, [r7, #12]
      break;
 8006aa6:	e31e      	b.n	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 8006aa8:	f7ff fbaa 	bl	8006200 <HAL_RCC_GetMSIKFreq>
 8006aac:	60f8      	str	r0, [r7, #12]
      break;
 8006aae:	e31a      	b.n	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 8006ab0:	4b5f      	ldr	r3, [pc, #380]	@ (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8006ab2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8006ab6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006aba:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_I3C2CLKSOURCE_PCLK2)
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d103      	bne.n	8006aca <HAL_RCCEx_GetPeriphCLKFreq+0x382>
        frequency = HAL_RCC_GetPCLK2Freq();
 8006ac2:	f7ff fb75 	bl	80061b0 <HAL_RCC_GetPCLK2Freq>
 8006ac6:	60f8      	str	r0, [r7, #12]
      break;
 8006ac8:	e30d      	b.n	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 8006aca:	f7ff fb99 	bl	8006200 <HAL_RCC_GetMSIKFreq>
 8006ace:	60f8      	str	r0, [r7, #12]
      break;
 8006ad0:	e309      	b.n	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8006ad2:	4b57      	ldr	r3, [pc, #348]	@ (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8006ad4:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8006ad8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006adc:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_SPI2CLKSOURCE_PCLK1)
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d103      	bne.n	8006aec <HAL_RCCEx_GetPeriphCLKFreq+0x3a4>
        frequency = HAL_RCC_GetPCLK1Freq();
 8006ae4:	f7ff fb50 	bl	8006188 <HAL_RCC_GetPCLK1Freq>
 8006ae8:	60f8      	str	r0, [r7, #12]
      break;
 8006aea:	e2fc      	b.n	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 8006aec:	f7ff fb88 	bl	8006200 <HAL_RCC_GetMSIKFreq>
 8006af0:	60f8      	str	r0, [r7, #12]
      break;
 8006af2:	e2f8      	b.n	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006af4:	4b4e      	ldr	r3, [pc, #312]	@ (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8006af6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8006afa:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8006afe:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d103      	bne.n	8006b0e <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
        frequency = HAL_RCC_GetPCLK1Freq();
 8006b06:	f7ff fb3f 	bl	8006188 <HAL_RCC_GetPCLK1Freq>
 8006b0a:	60f8      	str	r0, [r7, #12]
      break;
 8006b0c:	e2d6      	b.n	80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x974>
      else if (srcclk == RCC_LPTIM2CLKSOURCE_LSI)
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006b14:	d116      	bne.n	8006b44 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006b16:	4b46      	ldr	r3, [pc, #280]	@ (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8006b18:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8006b1c:	f003 0302 	and.w	r3, r3, #2
 8006b20:	2b02      	cmp	r3, #2
 8006b22:	f040 82cb 	bne.w	80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = LSI_VALUE;
 8006b26:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006b2a:	60fb      	str	r3, [r7, #12]
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8006b2c:	4b40      	ldr	r3, [pc, #256]	@ (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8006b2e:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8006b32:	f003 0304 	and.w	r3, r3, #4
 8006b36:	2b04      	cmp	r3, #4
 8006b38:	f040 82c0 	bne.w	80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x974>
            frequency /= 128U;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	09db      	lsrs	r3, r3, #7
 8006b40:	60fb      	str	r3, [r7, #12]
      break;
 8006b42:	e2bb      	b.n	80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x974>
      else if (srcclk == RCC_LPTIM2CLKSOURCE_HSI)
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006b4a:	d10a      	bne.n	8006b62 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006b4c:	4b38      	ldr	r3, [pc, #224]	@ (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006b54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b58:	f040 82b0 	bne.w	80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = HSI_VALUE;
 8006b5c:	4b35      	ldr	r3, [pc, #212]	@ (8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8006b5e:	60fb      	str	r3, [r7, #12]
      break;
 8006b60:	e2ac      	b.n	80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x974>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006b62:	4b33      	ldr	r3, [pc, #204]	@ (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8006b64:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8006b68:	f003 0302 	and.w	r3, r3, #2
 8006b6c:	2b02      	cmp	r3, #2
 8006b6e:	f040 82a5 	bne.w	80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = LSE_VALUE;
 8006b72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b76:	60fb      	str	r3, [r7, #12]
      break;
 8006b78:	e2a0      	b.n	80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x974>
      srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8006b7a:	4b2d      	ldr	r3, [pc, #180]	@ (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8006b7c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8006b80:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006b84:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_SPI1CLKSOURCE_PCLK2)
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d103      	bne.n	8006b94 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
        frequency = HAL_RCC_GetPCLK2Freq();
 8006b8c:	f7ff fb10 	bl	80061b0 <HAL_RCC_GetPCLK2Freq>
 8006b90:	60f8      	str	r0, [r7, #12]
      break;
 8006b92:	e2a8      	b.n	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 8006b94:	f7ff fb34 	bl	8006200 <HAL_RCC_GetMSIKFreq>
 8006b98:	60f8      	str	r0, [r7, #12]
      break;
 8006b9a:	e2a4      	b.n	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_SYSTICK_SOURCE();
 8006b9c:	4b24      	ldr	r3, [pc, #144]	@ (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8006b9e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8006ba2:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8006ba6:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_SYSTICKCLKSOURCE_HCLK_DIV8)
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d105      	bne.n	8006bba <HAL_RCCEx_GetPeriphCLKFreq+0x472>
        frequency = (HAL_RCC_GetHCLKFreq() / 8u);
 8006bae:	f7ff fad1 	bl	8006154 <HAL_RCC_GetHCLKFreq>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	08db      	lsrs	r3, r3, #3
 8006bb6:	60fb      	str	r3, [r7, #12]
      break;
 8006bb8:	e282      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
      else if (srcclk == RCC_SYSTICKCLKSOURCE_LSE)
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006bc0:	d10b      	bne.n	8006bda <HAL_RCCEx_GetPeriphCLKFreq+0x492>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006bc2:	4b1b      	ldr	r3, [pc, #108]	@ (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8006bc4:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8006bc8:	f003 0302 	and.w	r3, r3, #2
 8006bcc:	2b02      	cmp	r3, #2
 8006bce:	f040 8277 	bne.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = LSE_VALUE;
 8006bd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006bd6:	60fb      	str	r3, [r7, #12]
      break;
 8006bd8:	e272      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
      else if (srcclk == RCC_SYSTICKCLKSOURCE_LSI)
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006be0:	f040 826e 	bne.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006be4:	4b12      	ldr	r3, [pc, #72]	@ (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8006be6:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8006bea:	f003 0302 	and.w	r3, r3, #2
 8006bee:	2b02      	cmp	r3, #2
 8006bf0:	f040 8266 	bne.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = LSI_VALUE;
 8006bf4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006bf8:	60fb      	str	r3, [r7, #12]
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8006bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8006bfc:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8006c00:	f003 0304 	and.w	r3, r3, #4
 8006c04:	2b04      	cmp	r3, #4
 8006c06:	f040 825b 	bne.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
            frequency /= 128u;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	09db      	lsrs	r3, r3, #7
 8006c0e:	60fb      	str	r3, [r7, #12]
      break;
 8006c10:	e256      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
      srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8006c12:	4b07      	ldr	r3, [pc, #28]	@ (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8006c14:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8006c18:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006c1c:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_FDCANCLKSOURCE_MSIK)
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006c24:	d108      	bne.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>
        frequency = HAL_RCC_GetMSIKFreq();
 8006c26:	f7ff faeb 	bl	8006200 <HAL_RCC_GetMSIKFreq>
 8006c2a:	60f8      	str	r0, [r7, #12]
      break;
 8006c2c:	e25b      	b.n	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8006c2e:	bf00      	nop
 8006c30:	40030c00 	.word	0x40030c00
 8006c34:	00f42400 	.word	0x00f42400
        frequency = HAL_RCC_GetSysClockFreq();
 8006c38:	f7ff fa44 	bl	80060c4 <HAL_RCC_GetSysClockFreq>
 8006c3c:	60f8      	str	r0, [r7, #12]
      break;
 8006c3e:	e252      	b.n	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8006c40:	4ba4      	ldr	r3, [pc, #656]	@ (8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006c42:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8006c46:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006c4a:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_ICLKCLKSOURCE_HSI48)
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d10a      	bne.n	8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006c52:	4ba0      	ldr	r3, [pc, #640]	@ (8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006c5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c5e:	f040 8231 	bne.w	80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x97c>
          frequency = HSI48_VALUE;
 8006c62:	4b9d      	ldr	r3, [pc, #628]	@ (8006ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8006c64:	60fb      	str	r3, [r7, #12]
      break;
 8006c66:	e22d      	b.n	80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x97c>
      else if (srcclk == RCC_ICLKCLKSOURCE_MSIK)
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006c6e:	d103      	bne.n	8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>
        frequency = HAL_RCC_GetMSIKFreq();
 8006c70:	f7ff fac6 	bl	8006200 <HAL_RCC_GetMSIKFreq>
 8006c74:	60f8      	str	r0, [r7, #12]
      break;
 8006c76:	e225      	b.n	80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x97c>
      else if (srcclk == RCC_ICLKCLKSOURCE_HSE)
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c7e:	d10a      	bne.n	8006c96 <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006c80:	4b94      	ldr	r3, [pc, #592]	@ (8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c8c:	f040 821a 	bne.w	80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x97c>
          frequency = HSE_VALUE;
 8006c90:	4b92      	ldr	r3, [pc, #584]	@ (8006edc <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8006c92:	60fb      	str	r3, [r7, #12]
      break;
 8006c94:	e216      	b.n	80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x97c>
        frequency = HAL_RCC_GetSysClockFreq();
 8006c96:	f7ff fa15 	bl	80060c4 <HAL_RCC_GetSysClockFreq>
 8006c9a:	60f8      	str	r0, [r7, #12]
      break;
 8006c9c:	e212      	b.n	80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x97c>
      frequency = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ICLK);
 8006c9e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8006ca2:	f7ff fd51 	bl	8006748 <HAL_RCCEx_GetPeriphCLKFreq>
 8006ca6:	60f8      	str	r0, [r7, #12]
      srcclk = __HAL_RCC_GET_USB1_SOURCE();
 8006ca8:	4b8a      	ldr	r3, [pc, #552]	@ (8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006caa:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8006cae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006cb2:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_USB1CLKSOURCE_ICLK_DIV2)
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006cba:	f040 8205 	bne.w	80070c8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
        frequency = (frequency >> 1u);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	085b      	lsrs	r3, r3, #1
 8006cc2:	60fb      	str	r3, [r7, #12]
      break;
 8006cc4:	e200      	b.n	80070c8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8006cc6:	4b83      	ldr	r3, [pc, #524]	@ (8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006cc8:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8006ccc:	f003 0303 	and.w	r3, r3, #3
 8006cd0:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_ADF1CLKSOURCE_HCLK)
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d103      	bne.n	8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
        frequency = HAL_RCC_GetHCLKFreq();
 8006cd8:	f7ff fa3c 	bl	8006154 <HAL_RCC_GetHCLKFreq>
 8006cdc:	60f8      	str	r0, [r7, #12]
      break;
 8006cde:	e202      	b.n	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      else if (srcclk == RCC_ADF1CLKSOURCE_PIN)
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d103      	bne.n	8006cee <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006ce6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006cea:	60fb      	str	r3, [r7, #12]
      break;
 8006cec:	e1fb      	b.n	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      else if (srcclk == RCC_ADF1CLKSOURCE_MSIK)
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	2b02      	cmp	r3, #2
 8006cf2:	d103      	bne.n	8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
        frequency = HAL_RCC_GetMSIKFreq();
 8006cf4:	f7ff fa84 	bl	8006200 <HAL_RCC_GetMSIKFreq>
 8006cf8:	60f8      	str	r0, [r7, #12]
      break;
 8006cfa:	e1f4      	b.n	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8006cfc:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8006d00:	f7ff fd22 	bl	8006748 <HAL_RCCEx_GetPeriphCLKFreq>
 8006d04:	60f8      	str	r0, [r7, #12]
      break;
 8006d06:	e1ee      	b.n	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8006d08:	4b72      	ldr	r3, [pc, #456]	@ (8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006d0a:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8006d0e:	f003 0308 	and.w	r3, r3, #8
 8006d12:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_SPI3CLKSOURCE_PCLK1)
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d103      	bne.n	8006d22 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
        frequency = HAL_RCC_GetPCLK1Freq();
 8006d1a:	f7ff fa35 	bl	8006188 <HAL_RCC_GetPCLK1Freq>
 8006d1e:	60f8      	str	r0, [r7, #12]
      break;
 8006d20:	e1e1      	b.n	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 8006d22:	f7ff fa6d 	bl	8006200 <HAL_RCC_GetMSIKFreq>
 8006d26:	60f8      	str	r0, [r7, #12]
      break;
 8006d28:	e1dd      	b.n	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006d2a:	4b6a      	ldr	r3, [pc, #424]	@ (8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006d2c:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8006d30:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006d34:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_SAI1CLKSOURCE_MSIK)
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d103      	bne.n	8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
        frequency = HAL_RCC_GetMSIKFreq();
 8006d3c:	f7ff fa60 	bl	8006200 <HAL_RCC_GetMSIKFreq>
 8006d40:	60f8      	str	r0, [r7, #12]
      break;
 8006d42:	e1c3      	b.n	80070cc <HAL_RCCEx_GetPeriphCLKFreq+0x984>
      else if (srcclk == RCC_SAI1CLKSOURCE_PIN)
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	2b20      	cmp	r3, #32
 8006d48:	d103      	bne.n	8006d52 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006d4a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006d4e:	60fb      	str	r3, [r7, #12]
      break;
 8006d50:	e1bc      	b.n	80070cc <HAL_RCCEx_GetPeriphCLKFreq+0x984>
      else if (srcclk == RCC_SAI1CLKSOURCE_HSE)
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	2b40      	cmp	r3, #64	@ 0x40
 8006d56:	f040 81b9 	bne.w	80070cc <HAL_RCCEx_GetPeriphCLKFreq+0x984>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006d5a:	4b5e      	ldr	r3, [pc, #376]	@ (8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d62:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d66:	f040 81b1 	bne.w	80070cc <HAL_RCCEx_GetPeriphCLKFreq+0x984>
          frequency = HSE_VALUE;
 8006d6a:	4b5c      	ldr	r3, [pc, #368]	@ (8006edc <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8006d6c:	60fb      	str	r3, [r7, #12]
      break;
 8006d6e:	e1ad      	b.n	80070cc <HAL_RCCEx_GetPeriphCLKFreq+0x984>
      srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8006d70:	4b58      	ldr	r3, [pc, #352]	@ (8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006d72:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8006d76:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006d7a:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_RNGCLKSOURCE_HSI48)
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d10a      	bne.n	8006d98 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006d82:	4b54      	ldr	r3, [pc, #336]	@ (8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006d8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d8e:	f040 819f 	bne.w	80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = HSI48_VALUE;
 8006d92:	4b51      	ldr	r3, [pc, #324]	@ (8006ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8006d94:	60fb      	str	r3, [r7, #12]
      break;
 8006d96:	e19b      	b.n	80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        frequency = HAL_RCC_GetMSIKFreq();
 8006d98:	f7ff fa32 	bl	8006200 <HAL_RCC_GetMSIKFreq>
 8006d9c:	60f8      	str	r0, [r7, #12]
      break;
 8006d9e:	e197      	b.n	80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
      srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8006da0:	4b4c      	ldr	r3, [pc, #304]	@ (8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006da2:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8006da6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006daa:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d103      	bne.n	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x672>
        frequency = HAL_RCC_GetHCLKFreq();
 8006db2:	f7ff f9cf 	bl	8006154 <HAL_RCC_GetHCLKFreq>
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	e014      	b.n	8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
      else if (srcclk == RCC_ADCDACCLKSOURCE_HSE)
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006dc0:	d109      	bne.n	8006dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006dc2:	4b44      	ldr	r3, [pc, #272]	@ (8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006dca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006dce:	d109      	bne.n	8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
          frequency = HSE_VALUE;
 8006dd0:	4b42      	ldr	r3, [pc, #264]	@ (8006edc <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8006dd2:	60fb      	str	r3, [r7, #12]
 8006dd4:	e006      	b.n	8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
      else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ddc:	d102      	bne.n	8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
        frequency = HAL_RCC_GetMSIKFreq();
 8006dde:	f7ff fa0f 	bl	8006200 <HAL_RCC_GetMSIKFreq>
 8006de2:	60f8      	str	r0, [r7, #12]
      srcclk = __HAL_RCC_GET_ADCDAC_DIV();
 8006de4:	4b3b      	ldr	r3, [pc, #236]	@ (8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006de6:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8006dea:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8006dee:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_ADCDACCLK_DIV1)
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d102      	bne.n	8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
        srcclk = 0u;
 8006df6:	2300      	movs	r3, #0
 8006df8:	60bb      	str	r3, [r7, #8]
 8006dfa:	e00c      	b.n	8006e16 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
      else if (srcclk < RCC_CCIPR2_ADCDACPRE_3)
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e02:	d202      	bcs.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x6c2>
        srcclk = 1u;
 8006e04:	2301      	movs	r3, #1
 8006e06:	60bb      	str	r3, [r7, #8]
 8006e08:	e005      	b.n	8006e16 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        srcclk = ((srcclk & ~RCC_CCIPR2_ADCDACPRE_3) >> RCC_CCIPR2_ADCDACPRE_Pos) + 2u;
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	0b1a      	lsrs	r2, r3, #12
 8006e0e:	4b34      	ldr	r3, [pc, #208]	@ (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006e10:	4013      	ands	r3, r2
 8006e12:	3302      	adds	r3, #2
 8006e14:	60bb      	str	r3, [r7, #8]
      frequency = (frequency >> srcclk);
 8006e16:	68fa      	ldr	r2, [r7, #12]
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	fa22 f303 	lsr.w	r3, r2, r3
 8006e1e:	60fb      	str	r3, [r7, #12]
      break;
 8006e20:	e161      	b.n	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_DAC1SH_SOURCE();
 8006e22:	4b2c      	ldr	r3, [pc, #176]	@ (8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006e24:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8006e28:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006e2c:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_DAC1SHCLKSOURCE_LSI)
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006e34:	d116      	bne.n	8006e64 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006e36:	4b27      	ldr	r3, [pc, #156]	@ (8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006e38:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8006e3c:	f003 0302 	and.w	r3, r3, #2
 8006e40:	2b02      	cmp	r3, #2
 8006e42:	f040 8147 	bne.w	80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
          frequency = LSI_VALUE;
 8006e46:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006e4a:	60fb      	str	r3, [r7, #12]
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8006e4c:	4b21      	ldr	r3, [pc, #132]	@ (8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006e4e:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8006e52:	f003 0304 	and.w	r3, r3, #4
 8006e56:	2b04      	cmp	r3, #4
 8006e58:	f040 813c 	bne.w	80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
            frequency /= 128u;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	09db      	lsrs	r3, r3, #7
 8006e60:	60fb      	str	r3, [r7, #12]
      break;
 8006e62:	e137      	b.n	80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006e64:	4b1b      	ldr	r3, [pc, #108]	@ (8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006e66:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8006e6a:	f003 0302 	and.w	r3, r3, #2
 8006e6e:	2b02      	cmp	r3, #2
 8006e70:	f040 8130 	bne.w	80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
          frequency = LSE_VALUE;
 8006e74:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e78:	60fb      	str	r3, [r7, #12]
      break;
 8006e7a:	e12b      	b.n	80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
      srcclk = __HAL_RCC_GET_OCTOSPI_SOURCE();
 8006e7c:	4b15      	ldr	r3, [pc, #84]	@ (8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006e7e:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8006e82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006e86:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_OCTOSPICLKSOURCE_SYSCLK)
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d103      	bne.n	8006e96 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
        frequency = HAL_RCC_GetSysClockFreq();
 8006e8e:	f7ff f919 	bl	80060c4 <HAL_RCC_GetSysClockFreq>
 8006e92:	60f8      	str	r0, [r7, #12]
      break;
 8006e94:	e127      	b.n	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 8006e96:	f7ff f9b3 	bl	8006200 <HAL_RCC_GetMSIKFreq>
 8006e9a:	60f8      	str	r0, [r7, #12]
      break;
 8006e9c:	e123      	b.n	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006e9e:	4b0d      	ldr	r3, [pc, #52]	@ (8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006ea0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006ea4:	f003 0303 	and.w	r3, r3, #3
 8006ea8:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d103      	bne.n	8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
        frequency = HAL_RCC_GetPCLK3Freq();
 8006eb0:	f7ff f992 	bl	80061d8 <HAL_RCC_GetPCLK3Freq>
 8006eb4:	60f8      	str	r0, [r7, #12]
      break;
 8006eb6:	e10f      	b.n	80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
      else if (srcclk == RCC_LPUART1CLKSOURCE_HSI)
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d112      	bne.n	8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006ebe:	4b05      	ldr	r3, [pc, #20]	@ (8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006ec6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006eca:	f040 8105 	bne.w	80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
          frequency = HSI_VALUE;
 8006ece:	4b03      	ldr	r3, [pc, #12]	@ (8006edc <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8006ed0:	60fb      	str	r3, [r7, #12]
      break;
 8006ed2:	e101      	b.n	80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
 8006ed4:	40030c00 	.word	0x40030c00
 8006ed8:	02dc6c00 	.word	0x02dc6c00
 8006edc:	00f42400 	.word	0x00f42400
 8006ee0:	000ffff7 	.word	0x000ffff7
      else if (srcclk == RCC_LPUART1CLKSOURCE_LSE)
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	2b02      	cmp	r3, #2
 8006ee8:	d10b      	bne.n	8006f02 <HAL_RCCEx_GetPeriphCLKFreq+0x7ba>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006eea:	4b81      	ldr	r3, [pc, #516]	@ (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8006eec:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8006ef0:	f003 0302 	and.w	r3, r3, #2
 8006ef4:	2b02      	cmp	r3, #2
 8006ef6:	f040 80ef 	bne.w	80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
          frequency = LSE_VALUE;
 8006efa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006efe:	60fb      	str	r3, [r7, #12]
      break;
 8006f00:	e0ea      	b.n	80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
        frequency = HAL_RCC_GetMSIKFreq();
 8006f02:	f7ff f97d 	bl	8006200 <HAL_RCC_GetMSIKFreq>
 8006f06:	60f8      	str	r0, [r7, #12]
      break;
 8006f08:	e0e6      	b.n	80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
      srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006f0a:	4b79      	ldr	r3, [pc, #484]	@ (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8006f0c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006f10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f14:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d103      	bne.n	8006f24 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
        frequency = HAL_RCC_GetPCLK3Freq();
 8006f1c:	f7ff f95c 	bl	80061d8 <HAL_RCC_GetPCLK3Freq>
 8006f20:	60f8      	str	r0, [r7, #12]
      break;
 8006f22:	e0e0      	b.n	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 8006f24:	f7ff f96c 	bl	8006200 <HAL_RCC_GetMSIKFreq>
 8006f28:	60f8      	str	r0, [r7, #12]
      break;
 8006f2a:	e0dc      	b.n	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8006f2c:	4b70      	ldr	r3, [pc, #448]	@ (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8006f2e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006f32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f36:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d103      	bne.n	8006f46 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
        frequency = HAL_RCC_GetMSIKFreq();
 8006f3e:	f7ff f95f 	bl	8006200 <HAL_RCC_GetMSIKFreq>
 8006f42:	60f8      	str	r0, [r7, #12]
      break;
 8006f44:	e0ca      	b.n	80070dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>
      else if (srcclk == RCC_LPTIM34CLKSOURCE_LSI)
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f4c:	d116      	bne.n	8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006f4e:	4b68      	ldr	r3, [pc, #416]	@ (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8006f50:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8006f54:	f003 0302 	and.w	r3, r3, #2
 8006f58:	2b02      	cmp	r3, #2
 8006f5a:	f040 80bf 	bne.w	80070dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>
          frequency = LSI_VALUE;
 8006f5e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006f62:	60fb      	str	r3, [r7, #12]
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8006f64:	4b62      	ldr	r3, [pc, #392]	@ (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8006f66:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8006f6a:	f003 0304 	and.w	r3, r3, #4
 8006f6e:	2b04      	cmp	r3, #4
 8006f70:	f040 80b4 	bne.w	80070dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>
            frequency /= 128u;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	09db      	lsrs	r3, r3, #7
 8006f78:	60fb      	str	r3, [r7, #12]
      break;
 8006f7a:	e0af      	b.n	80070dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>
      else if (srcclk == RCC_LPTIM34CLKSOURCE_HSI)
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f82:	d10a      	bne.n	8006f9a <HAL_RCCEx_GetPeriphCLKFreq+0x852>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006f84:	4b5a      	ldr	r3, [pc, #360]	@ (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006f8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f90:	f040 80a4 	bne.w	80070dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>
          frequency = HSI_VALUE;
 8006f94:	4b57      	ldr	r3, [pc, #348]	@ (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 8006f96:	60fb      	str	r3, [r7, #12]
      break;
 8006f98:	e0a0      	b.n	80070dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006f9a:	4b55      	ldr	r3, [pc, #340]	@ (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8006f9c:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8006fa0:	f003 0302 	and.w	r3, r3, #2
 8006fa4:	2b02      	cmp	r3, #2
 8006fa6:	f040 8099 	bne.w	80070dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>
          frequency = LSE_VALUE;
 8006faa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006fae:	60fb      	str	r3, [r7, #12]
      break;
 8006fb0:	e094      	b.n	80070dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>
      srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006fb2:	4b4f      	ldr	r3, [pc, #316]	@ (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8006fb4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006fb8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006fbc:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d103      	bne.n	8006fcc <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        frequency = HAL_RCC_GetMSIKFreq();
 8006fc4:	f7ff f91c 	bl	8006200 <HAL_RCC_GetMSIKFreq>
 8006fc8:	60f8      	str	r0, [r7, #12]
      break;
 8006fca:	e089      	b.n	80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
      else if (srcclk == RCC_LPTIM1CLKSOURCE_LSI)
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fd2:	d114      	bne.n	8006ffe <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006fd4:	4b46      	ldr	r3, [pc, #280]	@ (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8006fd6:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8006fda:	f003 0302 	and.w	r3, r3, #2
 8006fde:	2b02      	cmp	r3, #2
 8006fe0:	d17e      	bne.n	80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
          frequency = LSI_VALUE;
 8006fe2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006fe6:	60fb      	str	r3, [r7, #12]
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8006fe8:	4b41      	ldr	r3, [pc, #260]	@ (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8006fea:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8006fee:	f003 0304 	and.w	r3, r3, #4
 8006ff2:	2b04      	cmp	r3, #4
 8006ff4:	d174      	bne.n	80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
            frequency /= 128u;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	09db      	lsrs	r3, r3, #7
 8006ffa:	60fb      	str	r3, [r7, #12]
      break;
 8006ffc:	e070      	b.n	80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
      else if (srcclk == RCC_LPTIM1CLKSOURCE_HSI)
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007004:	d109      	bne.n	800701a <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007006:	4b3a      	ldr	r3, [pc, #232]	@ (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800700e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007012:	d165      	bne.n	80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
          frequency = HSI_VALUE;
 8007014:	4b37      	ldr	r3, [pc, #220]	@ (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 8007016:	60fb      	str	r3, [r7, #12]
      break;
 8007018:	e062      	b.n	80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800701a:	4b35      	ldr	r3, [pc, #212]	@ (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800701c:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8007020:	f003 0302 	and.w	r3, r3, #2
 8007024:	2b02      	cmp	r3, #2
 8007026:	d15b      	bne.n	80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
          frequency = LSE_VALUE;
 8007028:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800702c:	60fb      	str	r3, [r7, #12]
      break;
 800702e:	e057      	b.n	80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
      srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8007030:	4b2f      	ldr	r3, [pc, #188]	@ (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8007032:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8007036:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800703a:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_RTCCLKSOURCE_LSE)
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007042:	d10a      	bne.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0x912>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007044:	4b2a      	ldr	r3, [pc, #168]	@ (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8007046:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800704a:	f003 0302 	and.w	r3, r3, #2
 800704e:	2b02      	cmp	r3, #2
 8007050:	d148      	bne.n	80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
          frequency = LSE_VALUE;
 8007052:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007056:	60fb      	str	r3, [r7, #12]
      break;
 8007058:	e044      	b.n	80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
      else if (srcclk == RCC_RTCCLKSOURCE_LSI)
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007060:	d114      	bne.n	800708c <HAL_RCCEx_GetPeriphCLKFreq+0x944>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8007062:	4b23      	ldr	r3, [pc, #140]	@ (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8007064:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8007068:	f003 0302 	and.w	r3, r3, #2
 800706c:	2b02      	cmp	r3, #2
 800706e:	d139      	bne.n	80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
          frequency = LSI_VALUE;
 8007070:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007074:	60fb      	str	r3, [r7, #12]
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8007076:	4b1e      	ldr	r3, [pc, #120]	@ (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8007078:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800707c:	f003 0304 	and.w	r3, r3, #4
 8007080:	2b04      	cmp	r3, #4
 8007082:	d12f      	bne.n	80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
            frequency /= 128u;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	09db      	lsrs	r3, r3, #7
 8007088:	60fb      	str	r3, [r7, #12]
      break;
 800708a:	e02b      	b.n	80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
      else if (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32)
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007092:	d127      	bne.n	80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007094:	4b16      	ldr	r3, [pc, #88]	@ (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800709c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80070a0:	d120      	bne.n	80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
          frequency = HSE_VALUE / 32u;
 80070a2:	4b15      	ldr	r3, [pc, #84]	@ (80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b0>)
 80070a4:	60fb      	str	r3, [r7, #12]
      break;
 80070a6:	e01d      	b.n	80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
      break;
 80070a8:	bf00      	nop
 80070aa:	e01c      	b.n	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 80070ac:	bf00      	nop
 80070ae:	e01a      	b.n	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 80070b0:	bf00      	nop
 80070b2:	e018      	b.n	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 80070b4:	bf00      	nop
 80070b6:	e016      	b.n	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 80070b8:	bf00      	nop
 80070ba:	e014      	b.n	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 80070bc:	bf00      	nop
 80070be:	e012      	b.n	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 80070c0:	bf00      	nop
 80070c2:	e010      	b.n	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 80070c4:	bf00      	nop
 80070c6:	e00e      	b.n	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 80070c8:	bf00      	nop
 80070ca:	e00c      	b.n	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 80070cc:	bf00      	nop
 80070ce:	e00a      	b.n	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 80070d0:	bf00      	nop
 80070d2:	e008      	b.n	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 80070d4:	bf00      	nop
 80070d6:	e006      	b.n	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 80070d8:	bf00      	nop
 80070da:	e004      	b.n	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 80070dc:	bf00      	nop
 80070de:	e002      	b.n	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 80070e0:	bf00      	nop
 80070e2:	e000      	b.n	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 80070e4:	bf00      	nop
  }

  return (frequency);
 80070e6:	68fb      	ldr	r3, [r7, #12]
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3710      	adds	r7, #16
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}
 80070f0:	40030c00 	.word	0x40030c00
 80070f4:	00f42400 	.word	0x00f42400
 80070f8:	0007a120 	.word	0x0007a120

080070fc <HAL_RCCEx_EpodBoosterClkConfig>:
  *         will be ignored
  * @note   When booster is not user, clock source shall be set to RCC_EPODBOOSTER_SOURCE_NONE to save power.
  * @retval None
  */
HAL_StatusTypeDef HAL_RCCEx_EpodBoosterClkConfig(uint32_t Source, uint32_t Divider)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b085      	sub	sp, #20
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	6039      	str	r1, [r7, #0]

  assert_param(IS_RCC_EPODBOOSTER_SOURCE(Source));
  assert_param(IS_RCC_EPODBOOSTER_DIV(Divider));

  /* check if any source is selected and ready */
  tmpreg1 = RCC->CR;
 8007106:	4b1e      	ldr	r3, [pc, #120]	@ (8007180 <HAL_RCCEx_EpodBoosterClkConfig+0x84>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	60bb      	str	r3, [r7, #8]

  /* MSIS is selected as EPOD Booster clock source, check if MSIS is ready */
  if ((Source == RCC_EPODBOOSTER_SOURCE_MSIS) && ((tmpreg1 & RCC_CR_MSISRDY) == 0U))
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2b01      	cmp	r3, #1
 8007110:	d107      	bne.n	8007122 <HAL_RCCEx_EpodBoosterClkConfig+0x26>
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	f003 0304 	and.w	r3, r3, #4
 8007118:	2b00      	cmp	r3, #0
 800711a:	d102      	bne.n	8007122 <HAL_RCCEx_EpodBoosterClkConfig+0x26>
  {
    status = HAL_ERROR;
 800711c:	2301      	movs	r3, #1
 800711e:	73fb      	strb	r3, [r7, #15]
 8007120:	e027      	b.n	8007172 <HAL_RCCEx_EpodBoosterClkConfig+0x76>
  }
  /* HSI is selected as EPOD Booster clock source, check if HSI is ready */
  else if ((Source == RCC_EPODBOOSTER_SOURCE_HSI) && ((tmpreg1 & RCC_CR_HSIRDY) == 0U))
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2b02      	cmp	r3, #2
 8007126:	d107      	bne.n	8007138 <HAL_RCCEx_EpodBoosterClkConfig+0x3c>
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800712e:	2b00      	cmp	r3, #0
 8007130:	d102      	bne.n	8007138 <HAL_RCCEx_EpodBoosterClkConfig+0x3c>
  {
    status = HAL_ERROR;
 8007132:	2301      	movs	r3, #1
 8007134:	73fb      	strb	r3, [r7, #15]
 8007136:	e01c      	b.n	8007172 <HAL_RCCEx_EpodBoosterClkConfig+0x76>
  }
  /* HSE is selected as EPOD Booster clock source, check if HSE is ready */
  else if ((Source == RCC_EPODBOOSTER_SOURCE_HSE) && ((tmpreg1 & RCC_CR_HSERDY) == 0U))
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2b03      	cmp	r3, #3
 800713c:	d107      	bne.n	800714e <HAL_RCCEx_EpodBoosterClkConfig+0x52>
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007144:	2b00      	cmp	r3, #0
 8007146:	d102      	bne.n	800714e <HAL_RCCEx_EpodBoosterClkConfig+0x52>
  {
    status = HAL_ERROR;
 8007148:	2301      	movs	r3, #1
 800714a:	73fb      	strb	r3, [r7, #15]
 800714c:	e011      	b.n	8007172 <HAL_RCCEx_EpodBoosterClkConfig+0x76>
  }
  else
  {
    /* Apply configuration */
    tmpreg1 = (RCC->CFGR4 & ~(RCC_CFGR4_BOOSTDIV | RCC_CFGR4_BOOSTSEL));
 800714e:	4b0c      	ldr	r3, [pc, #48]	@ (8007180 <HAL_RCCEx_EpodBoosterClkConfig+0x84>)
 8007150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007152:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007156:	f023 0303 	bic.w	r3, r3, #3
 800715a:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= (Divider | Source);
 800715c:	683a      	ldr	r2, [r7, #0]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	4313      	orrs	r3, r2
 8007162:	68ba      	ldr	r2, [r7, #8]
 8007164:	4313      	orrs	r3, r2
 8007166:	60bb      	str	r3, [r7, #8]
    RCC->CFGR4 = tmpreg1;
 8007168:	4a05      	ldr	r2, [pc, #20]	@ (8007180 <HAL_RCCEx_EpodBoosterClkConfig+0x84>)
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* update status is ok */
    status = HAL_OK;
 800716e:	2300      	movs	r3, #0
 8007170:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007172:	7bfb      	ldrb	r3, [r7, #15]
}
 8007174:	4618      	mov	r0, r3
 8007176:	3714      	adds	r7, #20
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr
 8007180:	40030c00 	.word	0x40030c00

08007184 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b084      	sub	sp, #16
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d101      	bne.n	8007196 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007192:	2301      	movs	r3, #1
 8007194:	e0dc      	b.n	8007350 <HAL_SPI_Init+0x1cc>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2200      	movs	r2, #0
 800719a:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a6d      	ldr	r2, [pc, #436]	@ (8007358 <HAL_SPI_Init+0x1d4>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d105      	bne.n	80071b2 <HAL_SPI_Init+0x2e>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	68db      	ldr	r3, [r3, #12]
 80071aa:	2b0f      	cmp	r3, #15
 80071ac:	d901      	bls.n	80071b2 <HAL_SPI_Init+0x2e>
  {
    return HAL_ERROR;
 80071ae:	2301      	movs	r3, #1
 80071b0:	e0ce      	b.n	8007350 <HAL_SPI_Init+0x1cc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f000 fba6 	bl	8007904 <SPI_GetPacketSize>
 80071b8:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a66      	ldr	r2, [pc, #408]	@ (8007358 <HAL_SPI_Init+0x1d4>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d102      	bne.n	80071ca <HAL_SPI_Init+0x46>
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2b08      	cmp	r3, #8
 80071c8:	d80c      	bhi.n	80071e4 <HAL_SPI_Init+0x60>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80071ce:	4a63      	ldr	r2, [pc, #396]	@ (800735c <HAL_SPI_Init+0x1d8>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d004      	beq.n	80071de <HAL_SPI_Init+0x5a>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a61      	ldr	r2, [pc, #388]	@ (8007360 <HAL_SPI_Init+0x1dc>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d104      	bne.n	80071e8 <HAL_SPI_Init+0x64>
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2b10      	cmp	r3, #16
 80071e2:	d901      	bls.n	80071e8 <HAL_SPI_Init+0x64>
  {
    return HAL_ERROR;
 80071e4:	2301      	movs	r3, #1
 80071e6:	e0b3      	b.n	8007350 <HAL_SPI_Init+0x1cc>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80071ee:	b2db      	uxtb	r3, r3
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d106      	bne.n	8007202 <HAL_SPI_Init+0x7e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2200      	movs	r2, #0
 80071f8:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f7fb fb15 	bl	800282c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2202      	movs	r2, #2
 8007206:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	681a      	ldr	r2, [r3, #0]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f022 0201 	bic.w	r2, r2, #1
 8007218:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8007224:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	699b      	ldr	r3, [r3, #24]
 800722a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800722e:	d119      	bne.n	8007264 <HAL_SPI_Init+0xe0>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007238:	d103      	bne.n	8007242 <HAL_SPI_Init+0xbe>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800723e:	2b00      	cmp	r3, #0
 8007240:	d008      	beq.n	8007254 <HAL_SPI_Init+0xd0>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007246:	2b00      	cmp	r3, #0
 8007248:	d10c      	bne.n	8007264 <HAL_SPI_Init+0xe0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800724e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007252:	d107      	bne.n	8007264 <HAL_SPI_Init+0xe0>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007262:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800726c:	2b00      	cmp	r3, #0
 800726e:	d00f      	beq.n	8007290 <HAL_SPI_Init+0x10c>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	68db      	ldr	r3, [r3, #12]
 8007274:	2b06      	cmp	r3, #6
 8007276:	d90b      	bls.n	8007290 <HAL_SPI_Init+0x10c>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	430a      	orrs	r2, r1
 800728c:	601a      	str	r2, [r3, #0]
 800728e:	e007      	b.n	80072a0 <HAL_SPI_Init+0x11c>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800729e:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	69da      	ldr	r2, [r3, #28]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072a8:	431a      	orrs	r2, r3
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	431a      	orrs	r2, r3
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072b2:	ea42 0103 	orr.w	r1, r2, r3
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	68da      	ldr	r2, [r3, #12]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	430a      	orrs	r2, r1
 80072c0:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072ca:	431a      	orrs	r2, r3
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072d0:	431a      	orrs	r2, r3
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	699b      	ldr	r3, [r3, #24]
 80072d6:	431a      	orrs	r2, r3
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	691b      	ldr	r3, [r3, #16]
 80072dc:	431a      	orrs	r2, r3
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	695b      	ldr	r3, [r3, #20]
 80072e2:	431a      	orrs	r2, r3
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6a1b      	ldr	r3, [r3, #32]
 80072e8:	431a      	orrs	r2, r3
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	431a      	orrs	r2, r3
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072f4:	431a      	orrs	r2, r3
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	431a      	orrs	r2, r3
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007300:	431a      	orrs	r2, r3
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007306:	431a      	orrs	r2, r3
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800730c:	ea42 0103 	orr.w	r1, r2, r3
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	430a      	orrs	r2, r1
 800731a:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007324:	2b00      	cmp	r3, #0
 8007326:	d00a      	beq.n	800733e <HAL_SPI_Init+0x1ba>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	68db      	ldr	r3, [r3, #12]
 800732e:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	430a      	orrs	r2, r1
 800733c:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2200      	movs	r2, #0
 8007342:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2201      	movs	r2, #1
 800734a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 800734e:	2300      	movs	r3, #0
}
 8007350:	4618      	mov	r0, r3
 8007352:	3710      	adds	r7, #16
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}
 8007358:	40002000 	.word	0x40002000
 800735c:	40013000 	.word	0x40013000
 8007360:	40003800 	.word	0x40003800

08007364 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b088      	sub	sp, #32
 8007368:	af02      	add	r7, sp, #8
 800736a:	60f8      	str	r0, [r7, #12]
 800736c:	60b9      	str	r1, [r7, #8]
 800736e:	603b      	str	r3, [r7, #0]
 8007370:	4613      	mov	r3, r2
 8007372:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	3320      	adds	r3, #32
 800737a:	617b      	str	r3, [r7, #20]
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800737c:	f7fb ffea 	bl	8003354 <HAL_GetTick>
 8007380:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007388:	b2db      	uxtb	r3, r3
 800738a:	2b01      	cmp	r3, #1
 800738c:	d001      	beq.n	8007392 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800738e:	2302      	movs	r3, #2
 8007390:	e1e5      	b.n	800775e <HAL_SPI_Transmit+0x3fa>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d002      	beq.n	800739e <HAL_SPI_Transmit+0x3a>
 8007398:	88fb      	ldrh	r3, [r7, #6]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d101      	bne.n	80073a2 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	e1dd      	b.n	800775e <HAL_SPI_Transmit+0x3fa>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d101      	bne.n	80073b0 <HAL_SPI_Transmit+0x4c>
 80073ac:	2302      	movs	r3, #2
 80073ae:	e1d6      	b.n	800775e <HAL_SPI_Transmit+0x3fa>
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2201      	movs	r2, #1
 80073b4:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2203      	movs	r2, #3
 80073bc:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2200      	movs	r2, #0
 80073c4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	68ba      	ldr	r2, [r7, #8]
 80073cc:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	88fa      	ldrh	r2, [r7, #6]
 80073d2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	88fa      	ldrh	r2, [r7, #6]
 80073da:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2200      	movs	r2, #0
 80073e2:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2200      	movs	r2, #0
 80073e8:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2200      	movs	r2, #0
 80073f0:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2200      	movs	r2, #0
 80073f8:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2200      	movs	r2, #0
 80073fe:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	689b      	ldr	r3, [r3, #8]
 8007404:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8007408:	d108      	bne.n	800741c <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	681a      	ldr	r2, [r3, #0]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007418:	601a      	str	r2, [r3, #0]
 800741a:	e009      	b.n	8007430 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	68db      	ldr	r3, [r3, #12]
 8007422:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800742e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	0c1b      	lsrs	r3, r3, #16
 8007438:	041b      	lsls	r3, r3, #16
 800743a:	88f9      	ldrh	r1, [r7, #6]
 800743c:	68fa      	ldr	r2, [r7, #12]
 800743e:	6812      	ldr	r2, [r2, #0]
 8007440:	430b      	orrs	r3, r1
 8007442:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f042 0201 	orr.w	r2, r2, #1
 8007452:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	69db      	ldr	r3, [r3, #28]
 800745a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800745e:	2b00      	cmp	r3, #0
 8007460:	d10c      	bne.n	800747c <HAL_SPI_Transmit+0x118>
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800746a:	d107      	bne.n	800747c <HAL_SPI_Transmit+0x118>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	681a      	ldr	r2, [r3, #0]
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800747a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	68db      	ldr	r3, [r3, #12]
 8007480:	2b0f      	cmp	r3, #15
 8007482:	d951      	bls.n	8007528 <HAL_SPI_Transmit+0x1c4>
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a8a      	ldr	r2, [pc, #552]	@ (80076b4 <HAL_SPI_Transmit+0x350>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d045      	beq.n	800751a <HAL_SPI_Transmit+0x1b6>
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a89      	ldr	r2, [pc, #548]	@ (80076b8 <HAL_SPI_Transmit+0x354>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d147      	bne.n	8007528 <HAL_SPI_Transmit+0x1c4>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007498:	e03f      	b.n	800751a <HAL_SPI_Transmit+0x1b6>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	695b      	ldr	r3, [r3, #20]
 80074a0:	f003 0302 	and.w	r3, r3, #2
 80074a4:	2b02      	cmp	r3, #2
 80074a6:	d114      	bne.n	80074d2 <HAL_SPI_Transmit+0x16e>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	6812      	ldr	r2, [r2, #0]
 80074b2:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80074b8:	1d1a      	adds	r2, r3, #4
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	3b01      	subs	r3, #1
 80074c8:	b29a      	uxth	r2, r3
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80074d0:	e023      	b.n	800751a <HAL_SPI_Transmit+0x1b6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80074d2:	f7fb ff3f 	bl	8003354 <HAL_GetTick>
 80074d6:	4602      	mov	r2, r0
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	1ad3      	subs	r3, r2, r3
 80074dc:	683a      	ldr	r2, [r7, #0]
 80074de:	429a      	cmp	r2, r3
 80074e0:	d803      	bhi.n	80074ea <HAL_SPI_Transmit+0x186>
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80074e8:	d102      	bne.n	80074f0 <HAL_SPI_Transmit+0x18c>
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d114      	bne.n	800751a <HAL_SPI_Transmit+0x1b6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80074f0:	68f8      	ldr	r0, [r7, #12]
 80074f2:	f000 f939 	bl	8007768 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80074fc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2201      	movs	r2, #1
 800750a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2200      	movs	r2, #0
 8007512:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8007516:	2303      	movs	r3, #3
 8007518:	e121      	b.n	800775e <HAL_SPI_Transmit+0x3fa>
    while (hspi->TxXferCount > 0UL)
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007520:	b29b      	uxth	r3, r3
 8007522:	2b00      	cmp	r3, #0
 8007524:	d1b9      	bne.n	800749a <HAL_SPI_Transmit+0x136>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8007526:	e0f4      	b.n	8007712 <HAL_SPI_Transmit+0x3ae>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	68db      	ldr	r3, [r3, #12]
 800752c:	2b07      	cmp	r3, #7
 800752e:	f240 80e9 	bls.w	8007704 <HAL_SPI_Transmit+0x3a0>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007532:	e05d      	b.n	80075f0 <HAL_SPI_Transmit+0x28c>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	695b      	ldr	r3, [r3, #20]
 800753a:	f003 0302 	and.w	r3, r3, #2
 800753e:	2b02      	cmp	r3, #2
 8007540:	d132      	bne.n	80075a8 <HAL_SPI_Transmit+0x244>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007548:	b29b      	uxth	r3, r3
 800754a:	2b01      	cmp	r3, #1
 800754c:	d918      	bls.n	8007580 <HAL_SPI_Transmit+0x21c>
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007552:	2b00      	cmp	r3, #0
 8007554:	d014      	beq.n	8007580 <HAL_SPI_Transmit+0x21c>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	6812      	ldr	r2, [r2, #0]
 8007560:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007566:	1d1a      	adds	r2, r3, #4
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007572:	b29b      	uxth	r3, r3
 8007574:	3b02      	subs	r3, #2
 8007576:	b29a      	uxth	r2, r3
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800757e:	e037      	b.n	80075f0 <HAL_SPI_Transmit+0x28c>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007584:	881a      	ldrh	r2, [r3, #0]
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800758e:	1c9a      	adds	r2, r3, #2
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800759a:	b29b      	uxth	r3, r3
 800759c:	3b01      	subs	r3, #1
 800759e:	b29a      	uxth	r2, r3
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80075a6:	e023      	b.n	80075f0 <HAL_SPI_Transmit+0x28c>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075a8:	f7fb fed4 	bl	8003354 <HAL_GetTick>
 80075ac:	4602      	mov	r2, r0
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	1ad3      	subs	r3, r2, r3
 80075b2:	683a      	ldr	r2, [r7, #0]
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d803      	bhi.n	80075c0 <HAL_SPI_Transmit+0x25c>
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80075be:	d102      	bne.n	80075c6 <HAL_SPI_Transmit+0x262>
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d114      	bne.n	80075f0 <HAL_SPI_Transmit+0x28c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80075c6:	68f8      	ldr	r0, [r7, #12]
 80075c8:	f000 f8ce 	bl	8007768 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80075d2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2201      	movs	r2, #1
 80075e0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	2200      	movs	r2, #0
 80075e8:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 80075ec:	2303      	movs	r3, #3
 80075ee:	e0b6      	b.n	800775e <HAL_SPI_Transmit+0x3fa>
    while (hspi->TxXferCount > 0UL)
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d19b      	bne.n	8007534 <HAL_SPI_Transmit+0x1d0>
 80075fc:	e089      	b.n	8007712 <HAL_SPI_Transmit+0x3ae>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	695b      	ldr	r3, [r3, #20]
 8007604:	f003 0302 	and.w	r3, r3, #2
 8007608:	2b02      	cmp	r3, #2
 800760a:	d157      	bne.n	80076bc <HAL_SPI_Transmit+0x358>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007612:	b29b      	uxth	r3, r3
 8007614:	2b03      	cmp	r3, #3
 8007616:	d918      	bls.n	800764a <HAL_SPI_Transmit+0x2e6>
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800761c:	2b40      	cmp	r3, #64	@ 0x40
 800761e:	d914      	bls.n	800764a <HAL_SPI_Transmit+0x2e6>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	6812      	ldr	r2, [r2, #0]
 800762a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007630:	1d1a      	adds	r2, r3, #4
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800763c:	b29b      	uxth	r3, r3
 800763e:	3b04      	subs	r3, #4
 8007640:	b29a      	uxth	r2, r3
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007648:	e05c      	b.n	8007704 <HAL_SPI_Transmit+0x3a0>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007650:	b29b      	uxth	r3, r3
 8007652:	2b01      	cmp	r3, #1
 8007654:	d917      	bls.n	8007686 <HAL_SPI_Transmit+0x322>
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800765a:	2b00      	cmp	r3, #0
 800765c:	d013      	beq.n	8007686 <HAL_SPI_Transmit+0x322>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007662:	881a      	ldrh	r2, [r3, #0]
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800766c:	1c9a      	adds	r2, r3, #2
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007678:	b29b      	uxth	r3, r3
 800767a:	3b02      	subs	r3, #2
 800767c:	b29a      	uxth	r2, r3
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007684:	e03e      	b.n	8007704 <HAL_SPI_Transmit+0x3a0>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	3320      	adds	r3, #32
 8007690:	7812      	ldrb	r2, [r2, #0]
 8007692:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007698:	1c5a      	adds	r2, r3, #1
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	3b01      	subs	r3, #1
 80076a8:	b29a      	uxth	r2, r3
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80076b0:	e028      	b.n	8007704 <HAL_SPI_Transmit+0x3a0>
 80076b2:	bf00      	nop
 80076b4:	40013000 	.word	0x40013000
 80076b8:	40003800 	.word	0x40003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80076bc:	f7fb fe4a 	bl	8003354 <HAL_GetTick>
 80076c0:	4602      	mov	r2, r0
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	1ad3      	subs	r3, r2, r3
 80076c6:	683a      	ldr	r2, [r7, #0]
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d803      	bhi.n	80076d4 <HAL_SPI_Transmit+0x370>
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80076d2:	d102      	bne.n	80076da <HAL_SPI_Transmit+0x376>
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d114      	bne.n	8007704 <HAL_SPI_Transmit+0x3a0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80076da:	68f8      	ldr	r0, [r7, #12]
 80076dc:	f000 f844 	bl	8007768 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80076e6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2201      	movs	r2, #1
 80076f4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2200      	movs	r2, #0
 80076fc:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8007700:	2303      	movs	r3, #3
 8007702:	e02c      	b.n	800775e <HAL_SPI_Transmit+0x3fa>
    while (hspi->TxXferCount > 0UL)
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800770a:	b29b      	uxth	r3, r3
 800770c:	2b00      	cmp	r3, #0
 800770e:	f47f af76 	bne.w	80075fe <HAL_SPI_Transmit+0x29a>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	9300      	str	r3, [sp, #0]
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	2200      	movs	r2, #0
 800771a:	2108      	movs	r1, #8
 800771c:	68f8      	ldr	r0, [r7, #12]
 800771e:	f000 f8c3 	bl	80078a8 <SPI_WaitOnFlagUntilTimeout>
 8007722:	4603      	mov	r3, r0
 8007724:	2b00      	cmp	r3, #0
 8007726:	d007      	beq.n	8007738 <HAL_SPI_Transmit+0x3d4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800772e:	f043 0220 	orr.w	r2, r3, #32
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007738:	68f8      	ldr	r0, [r7, #12]
 800773a:	f000 f815 	bl	8007768 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2201      	movs	r2, #1
 8007742:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2200      	movs	r2, #0
 800774a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007754:	2b00      	cmp	r3, #0
 8007756:	d001      	beq.n	800775c <HAL_SPI_Transmit+0x3f8>
  {
    return HAL_ERROR;
 8007758:	2301      	movs	r3, #1
 800775a:	e000      	b.n	800775e <HAL_SPI_Transmit+0x3fa>
  }
  else
  {
    return HAL_OK;
 800775c:	2300      	movs	r3, #0
  }
}
 800775e:	4618      	mov	r0, r3
 8007760:	3718      	adds	r7, #24
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}
 8007766:	bf00      	nop

08007768 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007768:	b480      	push	{r7}
 800776a:	b085      	sub	sp, #20
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	695b      	ldr	r3, [r3, #20]
 8007776:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	699a      	ldr	r2, [r3, #24]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f042 0208 	orr.w	r2, r2, #8
 8007786:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	699a      	ldr	r2, [r3, #24]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f042 0210 	orr.w	r2, r2, #16
 8007796:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	681a      	ldr	r2, [r3, #0]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f022 0201 	bic.w	r2, r2, #1
 80077a6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	691b      	ldr	r3, [r3, #16]
 80077ae:	687a      	ldr	r2, [r7, #4]
 80077b0:	6812      	ldr	r2, [r2, #0]
 80077b2:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 80077b6:	f023 0303 	bic.w	r3, r3, #3
 80077ba:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	689a      	ldr	r2, [r3, #8]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80077ca:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80077d2:	b2db      	uxtb	r3, r3
 80077d4:	2b04      	cmp	r3, #4
 80077d6:	d014      	beq.n	8007802 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f003 0320 	and.w	r3, r3, #32
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d00f      	beq.n	8007802 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80077e8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	699a      	ldr	r2, [r3, #24]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f042 0220 	orr.w	r2, r2, #32
 8007800:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007808:	b2db      	uxtb	r3, r3
 800780a:	2b03      	cmp	r3, #3
 800780c:	d014      	beq.n	8007838 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007814:	2b00      	cmp	r3, #0
 8007816:	d00f      	beq.n	8007838 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800781e:	f043 0204 	orr.w	r2, r3, #4
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	699a      	ldr	r2, [r3, #24]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007836:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800783e:	2b00      	cmp	r3, #0
 8007840:	d00f      	beq.n	8007862 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007848:	f043 0201 	orr.w	r2, r3, #1
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	699a      	ldr	r2, [r3, #24]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007860:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007868:	2b00      	cmp	r3, #0
 800786a:	d00f      	beq.n	800788c <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007872:	f043 0208 	orr.w	r2, r3, #8
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	699a      	ldr	r2, [r3, #24]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800788a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2200      	movs	r2, #0
 8007890:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2200      	movs	r2, #0
 8007898:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 800789c:	bf00      	nop
 800789e:	3714      	adds	r7, #20
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr

080078a8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b084      	sub	sp, #16
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	60f8      	str	r0, [r7, #12]
 80078b0:	60b9      	str	r1, [r7, #8]
 80078b2:	603b      	str	r3, [r7, #0]
 80078b4:	4613      	mov	r3, r2
 80078b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80078b8:	e010      	b.n	80078dc <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80078ba:	f7fb fd4b 	bl	8003354 <HAL_GetTick>
 80078be:	4602      	mov	r2, r0
 80078c0:	69bb      	ldr	r3, [r7, #24]
 80078c2:	1ad3      	subs	r3, r2, r3
 80078c4:	683a      	ldr	r2, [r7, #0]
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d803      	bhi.n	80078d2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80078d0:	d102      	bne.n	80078d8 <SPI_WaitOnFlagUntilTimeout+0x30>
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d101      	bne.n	80078dc <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80078d8:	2303      	movs	r3, #3
 80078da:	e00f      	b.n	80078fc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	695a      	ldr	r2, [r3, #20]
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	4013      	ands	r3, r2
 80078e6:	68ba      	ldr	r2, [r7, #8]
 80078e8:	429a      	cmp	r2, r3
 80078ea:	bf0c      	ite	eq
 80078ec:	2301      	moveq	r3, #1
 80078ee:	2300      	movne	r3, #0
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	461a      	mov	r2, r3
 80078f4:	79fb      	ldrb	r3, [r7, #7]
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d0df      	beq.n	80078ba <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80078fa:	2300      	movs	r3, #0
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3710      	adds	r7, #16
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}

08007904 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8007904:	b480      	push	{r7}
 8007906:	b085      	sub	sp, #20
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007910:	095b      	lsrs	r3, r3, #5
 8007912:	3301      	adds	r3, #1
 8007914:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	68db      	ldr	r3, [r3, #12]
 800791a:	3301      	adds	r3, #1
 800791c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	3307      	adds	r3, #7
 8007922:	08db      	lsrs	r3, r3, #3
 8007924:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	68fa      	ldr	r2, [r7, #12]
 800792a:	fb02 f303 	mul.w	r3, r2, r3
}
 800792e:	4618      	mov	r0, r3
 8007930:	3714      	adds	r7, #20
 8007932:	46bd      	mov	sp, r7
 8007934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007938:	4770      	bx	lr

0800793a <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 800793a:	b480      	push	{r7}
 800793c:	b083      	sub	sp, #12
 800793e:	af00      	add	r7, sp, #0
 8007940:	6078      	str	r0, [r7, #4]
 8007942:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800794a:	b2db      	uxtb	r3, r3
 800794c:	2b01      	cmp	r3, #1
 800794e:	d12e      	bne.n	80079ae <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8007956:	2b01      	cmp	r3, #1
 8007958:	d101      	bne.n	800795e <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 800795a:	2302      	movs	r3, #2
 800795c:	e028      	b.n	80079b0 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2201      	movs	r2, #1
 8007962:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2202      	movs	r2, #2
 800796a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	681a      	ldr	r2, [r3, #0]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f022 0201 	bic.w	r2, r2, #1
 800797c:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	681a      	ldr	r2, [r3, #0]
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800798a:	ea42 0103 	orr.w	r1, r2, r3
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	689a      	ldr	r2, [r3, #8]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	430a      	orrs	r2, r1
 8007998:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2201      	movs	r2, #1
 800799e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2200      	movs	r2, #0
 80079a6:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80079aa:	2300      	movs	r3, #0
 80079ac:	e000      	b.n	80079b0 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 80079ae:	2301      	movs	r3, #1
  }
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	370c      	adds	r7, #12
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr

080079bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b082      	sub	sp, #8
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d101      	bne.n	80079ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80079ca:	2301      	movs	r3, #1
 80079cc:	e049      	b.n	8007a62 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80079d4:	b2db      	uxtb	r3, r3
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d106      	bne.n	80079e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2200      	movs	r2, #0
 80079de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f7fb f80e 	bl	8002a04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2202      	movs	r2, #2
 80079ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681a      	ldr	r2, [r3, #0]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	3304      	adds	r3, #4
 80079f8:	4619      	mov	r1, r3
 80079fa:	4610      	mov	r0, r2
 80079fc:	f000 fa92 	bl	8007f24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2201      	movs	r2, #1
 8007a04:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2201      	movs	r2, #1
 8007a14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2201      	movs	r2, #1
 8007a24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2201      	movs	r2, #1
 8007a34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2201      	movs	r2, #1
 8007a44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2201      	movs	r2, #1
 8007a54:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007a60:	2300      	movs	r3, #0
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3708      	adds	r7, #8
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}

08007a6a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007a6a:	b580      	push	{r7, lr}
 8007a6c:	b082      	sub	sp, #8
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d101      	bne.n	8007a7c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007a78:	2301      	movs	r3, #1
 8007a7a:	e049      	b.n	8007b10 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d106      	bne.n	8007a96 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 f841 	bl	8007b18 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2202      	movs	r2, #2
 8007a9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681a      	ldr	r2, [r3, #0]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	3304      	adds	r3, #4
 8007aa6:	4619      	mov	r1, r3
 8007aa8:	4610      	mov	r0, r2
 8007aaa:	f000 fa3b 	bl	8007f24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2201      	movs	r2, #1
 8007aba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2201      	movs	r2, #1
 8007aca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2201      	movs	r2, #1
 8007ada:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2201      	movs	r2, #1
 8007ae2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2201      	movs	r2, #1
 8007aea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2201      	movs	r2, #1
 8007af2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2201      	movs	r2, #1
 8007afa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2201      	movs	r2, #1
 8007b02:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2201      	movs	r2, #1
 8007b0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007b0e:	2300      	movs	r3, #0
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3708      	adds	r7, #8
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b083      	sub	sp, #12
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007b20:	bf00      	nop
 8007b22:	370c      	adds	r7, #12
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr

08007b2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b086      	sub	sp, #24
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	60f8      	str	r0, [r7, #12]
 8007b34:	60b9      	str	r1, [r7, #8]
 8007b36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b42:	2b01      	cmp	r3, #1
 8007b44:	d101      	bne.n	8007b4a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007b46:	2302      	movs	r3, #2
 8007b48:	e0ff      	b.n	8007d4a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2b14      	cmp	r3, #20
 8007b56:	f200 80f0 	bhi.w	8007d3a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007b5a:	a201      	add	r2, pc, #4	@ (adr r2, 8007b60 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b60:	08007bb5 	.word	0x08007bb5
 8007b64:	08007d3b 	.word	0x08007d3b
 8007b68:	08007d3b 	.word	0x08007d3b
 8007b6c:	08007d3b 	.word	0x08007d3b
 8007b70:	08007bf5 	.word	0x08007bf5
 8007b74:	08007d3b 	.word	0x08007d3b
 8007b78:	08007d3b 	.word	0x08007d3b
 8007b7c:	08007d3b 	.word	0x08007d3b
 8007b80:	08007c37 	.word	0x08007c37
 8007b84:	08007d3b 	.word	0x08007d3b
 8007b88:	08007d3b 	.word	0x08007d3b
 8007b8c:	08007d3b 	.word	0x08007d3b
 8007b90:	08007c77 	.word	0x08007c77
 8007b94:	08007d3b 	.word	0x08007d3b
 8007b98:	08007d3b 	.word	0x08007d3b
 8007b9c:	08007d3b 	.word	0x08007d3b
 8007ba0:	08007cb9 	.word	0x08007cb9
 8007ba4:	08007d3b 	.word	0x08007d3b
 8007ba8:	08007d3b 	.word	0x08007d3b
 8007bac:	08007d3b 	.word	0x08007d3b
 8007bb0:	08007cf9 	.word	0x08007cf9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	68b9      	ldr	r1, [r7, #8]
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f000 fa3a 	bl	8008034 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	699a      	ldr	r2, [r3, #24]
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f042 0208 	orr.w	r2, r2, #8
 8007bce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	699a      	ldr	r2, [r3, #24]
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f022 0204 	bic.w	r2, r2, #4
 8007bde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	6999      	ldr	r1, [r3, #24]
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	691a      	ldr	r2, [r3, #16]
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	430a      	orrs	r2, r1
 8007bf0:	619a      	str	r2, [r3, #24]
      break;
 8007bf2:	e0a5      	b.n	8007d40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	68b9      	ldr	r1, [r7, #8]
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f000 faa0 	bl	8008140 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	699a      	ldr	r2, [r3, #24]
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007c0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	699a      	ldr	r2, [r3, #24]
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007c1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	6999      	ldr	r1, [r3, #24]
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	691b      	ldr	r3, [r3, #16]
 8007c2a:	021a      	lsls	r2, r3, #8
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	430a      	orrs	r2, r1
 8007c32:	619a      	str	r2, [r3, #24]
      break;
 8007c34:	e084      	b.n	8007d40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	68b9      	ldr	r1, [r7, #8]
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f000 faff 	bl	8008240 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	69da      	ldr	r2, [r3, #28]
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f042 0208 	orr.w	r2, r2, #8
 8007c50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	69da      	ldr	r2, [r3, #28]
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f022 0204 	bic.w	r2, r2, #4
 8007c60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	69d9      	ldr	r1, [r3, #28]
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	691a      	ldr	r2, [r3, #16]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	430a      	orrs	r2, r1
 8007c72:	61da      	str	r2, [r3, #28]
      break;
 8007c74:	e064      	b.n	8007d40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	68b9      	ldr	r1, [r7, #8]
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f000 fb5d 	bl	800833c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	69da      	ldr	r2, [r3, #28]
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007c90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	69da      	ldr	r2, [r3, #28]
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ca0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	69d9      	ldr	r1, [r3, #28]
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	691b      	ldr	r3, [r3, #16]
 8007cac:	021a      	lsls	r2, r3, #8
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	430a      	orrs	r2, r1
 8007cb4:	61da      	str	r2, [r3, #28]
      break;
 8007cb6:	e043      	b.n	8007d40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	68b9      	ldr	r1, [r7, #8]
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f000 fbbc 	bl	800843c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f042 0208 	orr.w	r2, r2, #8
 8007cd2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f022 0204 	bic.w	r2, r2, #4
 8007ce2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	691a      	ldr	r2, [r3, #16]
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	430a      	orrs	r2, r1
 8007cf4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007cf6:	e023      	b.n	8007d40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	68b9      	ldr	r1, [r7, #8]
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f000 fbfa 	bl	80084f8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007d12:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007d22:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	691b      	ldr	r3, [r3, #16]
 8007d2e:	021a      	lsls	r2, r3, #8
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	430a      	orrs	r2, r1
 8007d36:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007d38:	e002      	b.n	8007d40 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	75fb      	strb	r3, [r7, #23]
      break;
 8007d3e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2200      	movs	r2, #0
 8007d44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007d48:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3718      	adds	r7, #24
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}
 8007d52:	bf00      	nop

08007d54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b084      	sub	sp, #16
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	d101      	bne.n	8007d70 <HAL_TIM_ConfigClockSource+0x1c>
 8007d6c:	2302      	movs	r3, #2
 8007d6e:	e0ce      	b.n	8007f0e <HAL_TIM_ConfigClockSource+0x1ba>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2201      	movs	r2, #1
 8007d74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2202      	movs	r2, #2
 8007d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	689b      	ldr	r3, [r3, #8]
 8007d86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8007d8e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007d92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007d9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	68ba      	ldr	r2, [r7, #8]
 8007da2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a5b      	ldr	r2, [pc, #364]	@ (8007f18 <HAL_TIM_ConfigClockSource+0x1c4>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	f000 8099 	beq.w	8007ee2 <HAL_TIM_ConfigClockSource+0x18e>
 8007db0:	4a59      	ldr	r2, [pc, #356]	@ (8007f18 <HAL_TIM_ConfigClockSource+0x1c4>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	f200 809e 	bhi.w	8007ef4 <HAL_TIM_ConfigClockSource+0x1a0>
 8007db8:	4a58      	ldr	r2, [pc, #352]	@ (8007f1c <HAL_TIM_ConfigClockSource+0x1c8>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	f000 8091 	beq.w	8007ee2 <HAL_TIM_ConfigClockSource+0x18e>
 8007dc0:	4a56      	ldr	r2, [pc, #344]	@ (8007f1c <HAL_TIM_ConfigClockSource+0x1c8>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	f200 8096 	bhi.w	8007ef4 <HAL_TIM_ConfigClockSource+0x1a0>
 8007dc8:	4a55      	ldr	r2, [pc, #340]	@ (8007f20 <HAL_TIM_ConfigClockSource+0x1cc>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	f000 8089 	beq.w	8007ee2 <HAL_TIM_ConfigClockSource+0x18e>
 8007dd0:	4a53      	ldr	r2, [pc, #332]	@ (8007f20 <HAL_TIM_ConfigClockSource+0x1cc>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	f200 808e 	bhi.w	8007ef4 <HAL_TIM_ConfigClockSource+0x1a0>
 8007dd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ddc:	d03e      	beq.n	8007e5c <HAL_TIM_ConfigClockSource+0x108>
 8007dde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007de2:	f200 8087 	bhi.w	8007ef4 <HAL_TIM_ConfigClockSource+0x1a0>
 8007de6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007dea:	f000 8086 	beq.w	8007efa <HAL_TIM_ConfigClockSource+0x1a6>
 8007dee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007df2:	d87f      	bhi.n	8007ef4 <HAL_TIM_ConfigClockSource+0x1a0>
 8007df4:	2b70      	cmp	r3, #112	@ 0x70
 8007df6:	d01a      	beq.n	8007e2e <HAL_TIM_ConfigClockSource+0xda>
 8007df8:	2b70      	cmp	r3, #112	@ 0x70
 8007dfa:	d87b      	bhi.n	8007ef4 <HAL_TIM_ConfigClockSource+0x1a0>
 8007dfc:	2b60      	cmp	r3, #96	@ 0x60
 8007dfe:	d050      	beq.n	8007ea2 <HAL_TIM_ConfigClockSource+0x14e>
 8007e00:	2b60      	cmp	r3, #96	@ 0x60
 8007e02:	d877      	bhi.n	8007ef4 <HAL_TIM_ConfigClockSource+0x1a0>
 8007e04:	2b50      	cmp	r3, #80	@ 0x50
 8007e06:	d03c      	beq.n	8007e82 <HAL_TIM_ConfigClockSource+0x12e>
 8007e08:	2b50      	cmp	r3, #80	@ 0x50
 8007e0a:	d873      	bhi.n	8007ef4 <HAL_TIM_ConfigClockSource+0x1a0>
 8007e0c:	2b40      	cmp	r3, #64	@ 0x40
 8007e0e:	d058      	beq.n	8007ec2 <HAL_TIM_ConfigClockSource+0x16e>
 8007e10:	2b40      	cmp	r3, #64	@ 0x40
 8007e12:	d86f      	bhi.n	8007ef4 <HAL_TIM_ConfigClockSource+0x1a0>
 8007e14:	2b30      	cmp	r3, #48	@ 0x30
 8007e16:	d064      	beq.n	8007ee2 <HAL_TIM_ConfigClockSource+0x18e>
 8007e18:	2b30      	cmp	r3, #48	@ 0x30
 8007e1a:	d86b      	bhi.n	8007ef4 <HAL_TIM_ConfigClockSource+0x1a0>
 8007e1c:	2b20      	cmp	r3, #32
 8007e1e:	d060      	beq.n	8007ee2 <HAL_TIM_ConfigClockSource+0x18e>
 8007e20:	2b20      	cmp	r3, #32
 8007e22:	d867      	bhi.n	8007ef4 <HAL_TIM_ConfigClockSource+0x1a0>
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d05c      	beq.n	8007ee2 <HAL_TIM_ConfigClockSource+0x18e>
 8007e28:	2b10      	cmp	r3, #16
 8007e2a:	d05a      	beq.n	8007ee2 <HAL_TIM_ConfigClockSource+0x18e>
 8007e2c:	e062      	b.n	8007ef4 <HAL_TIM_ConfigClockSource+0x1a0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007e3e:	f000 fc37 	bl	80086b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	689b      	ldr	r3, [r3, #8]
 8007e48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007e50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	68ba      	ldr	r2, [r7, #8]
 8007e58:	609a      	str	r2, [r3, #8]
      break;
 8007e5a:	e04f      	b.n	8007efc <HAL_TIM_ConfigClockSource+0x1a8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007e6c:	f000 fc20 	bl	80086b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	689a      	ldr	r2, [r3, #8]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007e7e:	609a      	str	r2, [r3, #8]
      break;
 8007e80:	e03c      	b.n	8007efc <HAL_TIM_ConfigClockSource+0x1a8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e8e:	461a      	mov	r2, r3
 8007e90:	f000 fb92 	bl	80085b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	2150      	movs	r1, #80	@ 0x50
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f000 fbeb 	bl	8008676 <TIM_ITRx_SetConfig>
      break;
 8007ea0:	e02c      	b.n	8007efc <HAL_TIM_ConfigClockSource+0x1a8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007eae:	461a      	mov	r2, r3
 8007eb0:	f000 fbb1 	bl	8008616 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	2160      	movs	r1, #96	@ 0x60
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f000 fbdb 	bl	8008676 <TIM_ITRx_SetConfig>
      break;
 8007ec0:	e01c      	b.n	8007efc <HAL_TIM_ConfigClockSource+0x1a8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ece:	461a      	mov	r2, r3
 8007ed0:	f000 fb72 	bl	80085b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	2140      	movs	r1, #64	@ 0x40
 8007eda:	4618      	mov	r0, r3
 8007edc:	f000 fbcb 	bl	8008676 <TIM_ITRx_SetConfig>
      break;
 8007ee0:	e00c      	b.n	8007efc <HAL_TIM_ConfigClockSource+0x1a8>
#endif /* TIM12 */
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681a      	ldr	r2, [r3, #0]
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4619      	mov	r1, r3
 8007eec:	4610      	mov	r0, r2
 8007eee:	f000 fbc2 	bl	8008676 <TIM_ITRx_SetConfig>
      break;
 8007ef2:	e003      	b.n	8007efc <HAL_TIM_ConfigClockSource+0x1a8>
    }

    default:
      status = HAL_ERROR;
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	73fb      	strb	r3, [r7, #15]
      break;
 8007ef8:	e000      	b.n	8007efc <HAL_TIM_ConfigClockSource+0x1a8>
      break;
 8007efa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2201      	movs	r2, #1
 8007f00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2200      	movs	r2, #0
 8007f08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3710      	adds	r7, #16
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}
 8007f16:	bf00      	nop
 8007f18:	00100040 	.word	0x00100040
 8007f1c:	00100030 	.word	0x00100030
 8007f20:	00100020 	.word	0x00100020

08007f24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b085      	sub	sp, #20
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	4a39      	ldr	r2, [pc, #228]	@ (800801c <TIM_Base_SetConfig+0xf8>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d00b      	beq.n	8007f54 <TIM_Base_SetConfig+0x30>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f42:	d007      	beq.n	8007f54 <TIM_Base_SetConfig+0x30>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	4a36      	ldr	r2, [pc, #216]	@ (8008020 <TIM_Base_SetConfig+0xfc>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d003      	beq.n	8007f54 <TIM_Base_SetConfig+0x30>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	4a35      	ldr	r2, [pc, #212]	@ (8008024 <TIM_Base_SetConfig+0x100>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d108      	bne.n	8007f66 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	685b      	ldr	r3, [r3, #4]
 8007f60:	68fa      	ldr	r2, [r7, #12]
 8007f62:	4313      	orrs	r3, r2
 8007f64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	4a2c      	ldr	r2, [pc, #176]	@ (800801c <TIM_Base_SetConfig+0xf8>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d017      	beq.n	8007f9e <TIM_Base_SetConfig+0x7a>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f74:	d013      	beq.n	8007f9e <TIM_Base_SetConfig+0x7a>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	4a29      	ldr	r2, [pc, #164]	@ (8008020 <TIM_Base_SetConfig+0xfc>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d00f      	beq.n	8007f9e <TIM_Base_SetConfig+0x7a>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	4a28      	ldr	r2, [pc, #160]	@ (8008024 <TIM_Base_SetConfig+0x100>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d00b      	beq.n	8007f9e <TIM_Base_SetConfig+0x7a>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	4a27      	ldr	r2, [pc, #156]	@ (8008028 <TIM_Base_SetConfig+0x104>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d007      	beq.n	8007f9e <TIM_Base_SetConfig+0x7a>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	4a26      	ldr	r2, [pc, #152]	@ (800802c <TIM_Base_SetConfig+0x108>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d003      	beq.n	8007f9e <TIM_Base_SetConfig+0x7a>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	4a25      	ldr	r2, [pc, #148]	@ (8008030 <TIM_Base_SetConfig+0x10c>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d108      	bne.n	8007fb0 <TIM_Base_SetConfig+0x8c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007fa4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	68db      	ldr	r3, [r3, #12]
 8007faa:	68fa      	ldr	r2, [r7, #12]
 8007fac:	4313      	orrs	r3, r2
 8007fae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	695b      	ldr	r3, [r3, #20]
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	689a      	ldr	r2, [r3, #8]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	681a      	ldr	r2, [r3, #0]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	4a12      	ldr	r2, [pc, #72]	@ (800801c <TIM_Base_SetConfig+0xf8>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d00b      	beq.n	8007fee <TIM_Base_SetConfig+0xca>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	4a13      	ldr	r2, [pc, #76]	@ (8008028 <TIM_Base_SetConfig+0x104>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d007      	beq.n	8007fee <TIM_Base_SetConfig+0xca>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	4a12      	ldr	r2, [pc, #72]	@ (800802c <TIM_Base_SetConfig+0x108>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d003      	beq.n	8007fee <TIM_Base_SetConfig+0xca>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	4a11      	ldr	r2, [pc, #68]	@ (8008030 <TIM_Base_SetConfig+0x10c>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d103      	bne.n	8007ff6 <TIM_Base_SetConfig+0xd2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	691a      	ldr	r2, [r3, #16]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f043 0204 	orr.w	r2, r3, #4
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2201      	movs	r2, #1
 8008006:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	68fa      	ldr	r2, [r7, #12]
 800800c:	601a      	str	r2, [r3, #0]
}
 800800e:	bf00      	nop
 8008010:	3714      	adds	r7, #20
 8008012:	46bd      	mov	sp, r7
 8008014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008018:	4770      	bx	lr
 800801a:	bf00      	nop
 800801c:	40012c00 	.word	0x40012c00
 8008020:	40000400 	.word	0x40000400
 8008024:	40000800 	.word	0x40000800
 8008028:	40014000 	.word	0x40014000
 800802c:	40014400 	.word	0x40014400
 8008030:	40014800 	.word	0x40014800

08008034 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008034:	b480      	push	{r7}
 8008036:	b087      	sub	sp, #28
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
 800803c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6a1b      	ldr	r3, [r3, #32]
 8008042:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6a1b      	ldr	r3, [r3, #32]
 8008048:	f023 0201 	bic.w	r2, r3, #1
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	699b      	ldr	r3, [r3, #24]
 800805a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008062:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008066:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	f023 0303 	bic.w	r3, r3, #3
 800806e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	68fa      	ldr	r2, [r7, #12]
 8008076:	4313      	orrs	r3, r2
 8008078:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	f023 0302 	bic.w	r3, r3, #2
 8008080:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	689b      	ldr	r3, [r3, #8]
 8008086:	697a      	ldr	r2, [r7, #20]
 8008088:	4313      	orrs	r3, r2
 800808a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	4a28      	ldr	r2, [pc, #160]	@ (8008130 <TIM_OC1_SetConfig+0xfc>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d00b      	beq.n	80080ac <TIM_OC1_SetConfig+0x78>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	4a27      	ldr	r2, [pc, #156]	@ (8008134 <TIM_OC1_SetConfig+0x100>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d007      	beq.n	80080ac <TIM_OC1_SetConfig+0x78>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	4a26      	ldr	r2, [pc, #152]	@ (8008138 <TIM_OC1_SetConfig+0x104>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d003      	beq.n	80080ac <TIM_OC1_SetConfig+0x78>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	4a25      	ldr	r2, [pc, #148]	@ (800813c <TIM_OC1_SetConfig+0x108>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d10c      	bne.n	80080c6 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	f023 0308 	bic.w	r3, r3, #8
 80080b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	68db      	ldr	r3, [r3, #12]
 80080b8:	697a      	ldr	r2, [r7, #20]
 80080ba:	4313      	orrs	r3, r2
 80080bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	f023 0304 	bic.w	r3, r3, #4
 80080c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	4a19      	ldr	r2, [pc, #100]	@ (8008130 <TIM_OC1_SetConfig+0xfc>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d00b      	beq.n	80080e6 <TIM_OC1_SetConfig+0xb2>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	4a18      	ldr	r2, [pc, #96]	@ (8008134 <TIM_OC1_SetConfig+0x100>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d007      	beq.n	80080e6 <TIM_OC1_SetConfig+0xb2>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	4a17      	ldr	r2, [pc, #92]	@ (8008138 <TIM_OC1_SetConfig+0x104>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d003      	beq.n	80080e6 <TIM_OC1_SetConfig+0xb2>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	4a16      	ldr	r2, [pc, #88]	@ (800813c <TIM_OC1_SetConfig+0x108>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d111      	bne.n	800810a <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80080ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80080f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	695b      	ldr	r3, [r3, #20]
 80080fa:	693a      	ldr	r2, [r7, #16]
 80080fc:	4313      	orrs	r3, r2
 80080fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	699b      	ldr	r3, [r3, #24]
 8008104:	693a      	ldr	r2, [r7, #16]
 8008106:	4313      	orrs	r3, r2
 8008108:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	693a      	ldr	r2, [r7, #16]
 800810e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	68fa      	ldr	r2, [r7, #12]
 8008114:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	685a      	ldr	r2, [r3, #4]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	697a      	ldr	r2, [r7, #20]
 8008122:	621a      	str	r2, [r3, #32]
}
 8008124:	bf00      	nop
 8008126:	371c      	adds	r7, #28
 8008128:	46bd      	mov	sp, r7
 800812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812e:	4770      	bx	lr
 8008130:	40012c00 	.word	0x40012c00
 8008134:	40014000 	.word	0x40014000
 8008138:	40014400 	.word	0x40014400
 800813c:	40014800 	.word	0x40014800

08008140 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008140:	b480      	push	{r7}
 8008142:	b087      	sub	sp, #28
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6a1b      	ldr	r3, [r3, #32]
 800814e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6a1b      	ldr	r3, [r3, #32]
 8008154:	f023 0210 	bic.w	r2, r3, #16
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	699b      	ldr	r3, [r3, #24]
 8008166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800816e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008172:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800817a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	021b      	lsls	r3, r3, #8
 8008182:	68fa      	ldr	r2, [r7, #12]
 8008184:	4313      	orrs	r3, r2
 8008186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	f023 0320 	bic.w	r3, r3, #32
 800818e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	689b      	ldr	r3, [r3, #8]
 8008194:	011b      	lsls	r3, r3, #4
 8008196:	697a      	ldr	r2, [r7, #20]
 8008198:	4313      	orrs	r3, r2
 800819a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	4a24      	ldr	r2, [pc, #144]	@ (8008230 <TIM_OC2_SetConfig+0xf0>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d10d      	bne.n	80081c0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80081aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	68db      	ldr	r3, [r3, #12]
 80081b0:	011b      	lsls	r3, r3, #4
 80081b2:	697a      	ldr	r2, [r7, #20]
 80081b4:	4313      	orrs	r3, r2
 80081b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80081be:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	4a1b      	ldr	r2, [pc, #108]	@ (8008230 <TIM_OC2_SetConfig+0xf0>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d00b      	beq.n	80081e0 <TIM_OC2_SetConfig+0xa0>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	4a1a      	ldr	r2, [pc, #104]	@ (8008234 <TIM_OC2_SetConfig+0xf4>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d007      	beq.n	80081e0 <TIM_OC2_SetConfig+0xa0>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	4a19      	ldr	r2, [pc, #100]	@ (8008238 <TIM_OC2_SetConfig+0xf8>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d003      	beq.n	80081e0 <TIM_OC2_SetConfig+0xa0>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	4a18      	ldr	r2, [pc, #96]	@ (800823c <TIM_OC2_SetConfig+0xfc>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d113      	bne.n	8008208 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80081e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80081ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	695b      	ldr	r3, [r3, #20]
 80081f4:	009b      	lsls	r3, r3, #2
 80081f6:	693a      	ldr	r2, [r7, #16]
 80081f8:	4313      	orrs	r3, r2
 80081fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	699b      	ldr	r3, [r3, #24]
 8008200:	009b      	lsls	r3, r3, #2
 8008202:	693a      	ldr	r2, [r7, #16]
 8008204:	4313      	orrs	r3, r2
 8008206:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	693a      	ldr	r2, [r7, #16]
 800820c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	68fa      	ldr	r2, [r7, #12]
 8008212:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	685a      	ldr	r2, [r3, #4]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	697a      	ldr	r2, [r7, #20]
 8008220:	621a      	str	r2, [r3, #32]
}
 8008222:	bf00      	nop
 8008224:	371c      	adds	r7, #28
 8008226:	46bd      	mov	sp, r7
 8008228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822c:	4770      	bx	lr
 800822e:	bf00      	nop
 8008230:	40012c00 	.word	0x40012c00
 8008234:	40014000 	.word	0x40014000
 8008238:	40014400 	.word	0x40014400
 800823c:	40014800 	.word	0x40014800

08008240 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008240:	b480      	push	{r7}
 8008242:	b087      	sub	sp, #28
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6a1b      	ldr	r3, [r3, #32]
 800824e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6a1b      	ldr	r3, [r3, #32]
 8008254:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	685b      	ldr	r3, [r3, #4]
 8008260:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	69db      	ldr	r3, [r3, #28]
 8008266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800826e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008272:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	f023 0303 	bic.w	r3, r3, #3
 800827a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	68fa      	ldr	r2, [r7, #12]
 8008282:	4313      	orrs	r3, r2
 8008284:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800828c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	689b      	ldr	r3, [r3, #8]
 8008292:	021b      	lsls	r3, r3, #8
 8008294:	697a      	ldr	r2, [r7, #20]
 8008296:	4313      	orrs	r3, r2
 8008298:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	4a23      	ldr	r2, [pc, #140]	@ (800832c <TIM_OC3_SetConfig+0xec>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d10d      	bne.n	80082be <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80082a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	68db      	ldr	r3, [r3, #12]
 80082ae:	021b      	lsls	r3, r3, #8
 80082b0:	697a      	ldr	r2, [r7, #20]
 80082b2:	4313      	orrs	r3, r2
 80082b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80082bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	4a1a      	ldr	r2, [pc, #104]	@ (800832c <TIM_OC3_SetConfig+0xec>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d00b      	beq.n	80082de <TIM_OC3_SetConfig+0x9e>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	4a19      	ldr	r2, [pc, #100]	@ (8008330 <TIM_OC3_SetConfig+0xf0>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d007      	beq.n	80082de <TIM_OC3_SetConfig+0x9e>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	4a18      	ldr	r2, [pc, #96]	@ (8008334 <TIM_OC3_SetConfig+0xf4>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d003      	beq.n	80082de <TIM_OC3_SetConfig+0x9e>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	4a17      	ldr	r2, [pc, #92]	@ (8008338 <TIM_OC3_SetConfig+0xf8>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d113      	bne.n	8008306 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80082e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80082ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	695b      	ldr	r3, [r3, #20]
 80082f2:	011b      	lsls	r3, r3, #4
 80082f4:	693a      	ldr	r2, [r7, #16]
 80082f6:	4313      	orrs	r3, r2
 80082f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	699b      	ldr	r3, [r3, #24]
 80082fe:	011b      	lsls	r3, r3, #4
 8008300:	693a      	ldr	r2, [r7, #16]
 8008302:	4313      	orrs	r3, r2
 8008304:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	693a      	ldr	r2, [r7, #16]
 800830a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	68fa      	ldr	r2, [r7, #12]
 8008310:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	685a      	ldr	r2, [r3, #4]
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	697a      	ldr	r2, [r7, #20]
 800831e:	621a      	str	r2, [r3, #32]
}
 8008320:	bf00      	nop
 8008322:	371c      	adds	r7, #28
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr
 800832c:	40012c00 	.word	0x40012c00
 8008330:	40014000 	.word	0x40014000
 8008334:	40014400 	.word	0x40014400
 8008338:	40014800 	.word	0x40014800

0800833c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800833c:	b480      	push	{r7}
 800833e:	b087      	sub	sp, #28
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6a1b      	ldr	r3, [r3, #32]
 800834a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6a1b      	ldr	r3, [r3, #32]
 8008350:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	69db      	ldr	r3, [r3, #28]
 8008362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800836a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800836e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008376:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	021b      	lsls	r3, r3, #8
 800837e:	68fa      	ldr	r2, [r7, #12]
 8008380:	4313      	orrs	r3, r2
 8008382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800838a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	031b      	lsls	r3, r3, #12
 8008392:	697a      	ldr	r2, [r7, #20]
 8008394:	4313      	orrs	r3, r2
 8008396:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	4a24      	ldr	r2, [pc, #144]	@ (800842c <TIM_OC4_SetConfig+0xf0>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d10d      	bne.n	80083bc <TIM_OC4_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80083a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	68db      	ldr	r3, [r3, #12]
 80083ac:	031b      	lsls	r3, r3, #12
 80083ae:	697a      	ldr	r2, [r7, #20]
 80083b0:	4313      	orrs	r3, r2
 80083b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80083ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	4a1b      	ldr	r2, [pc, #108]	@ (800842c <TIM_OC4_SetConfig+0xf0>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d00b      	beq.n	80083dc <TIM_OC4_SetConfig+0xa0>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	4a1a      	ldr	r2, [pc, #104]	@ (8008430 <TIM_OC4_SetConfig+0xf4>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d007      	beq.n	80083dc <TIM_OC4_SetConfig+0xa0>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	4a19      	ldr	r2, [pc, #100]	@ (8008434 <TIM_OC4_SetConfig+0xf8>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d003      	beq.n	80083dc <TIM_OC4_SetConfig+0xa0>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	4a18      	ldr	r2, [pc, #96]	@ (8008438 <TIM_OC4_SetConfig+0xfc>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d113      	bne.n	8008404 <TIM_OC4_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80083e2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80083ea:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	695b      	ldr	r3, [r3, #20]
 80083f0:	019b      	lsls	r3, r3, #6
 80083f2:	693a      	ldr	r2, [r7, #16]
 80083f4:	4313      	orrs	r3, r2
 80083f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	699b      	ldr	r3, [r3, #24]
 80083fc:	019b      	lsls	r3, r3, #6
 80083fe:	693a      	ldr	r2, [r7, #16]
 8008400:	4313      	orrs	r3, r2
 8008402:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	693a      	ldr	r2, [r7, #16]
 8008408:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	68fa      	ldr	r2, [r7, #12]
 800840e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	685a      	ldr	r2, [r3, #4]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	697a      	ldr	r2, [r7, #20]
 800841c:	621a      	str	r2, [r3, #32]
}
 800841e:	bf00      	nop
 8008420:	371c      	adds	r7, #28
 8008422:	46bd      	mov	sp, r7
 8008424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008428:	4770      	bx	lr
 800842a:	bf00      	nop
 800842c:	40012c00 	.word	0x40012c00
 8008430:	40014000 	.word	0x40014000
 8008434:	40014400 	.word	0x40014400
 8008438:	40014800 	.word	0x40014800

0800843c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800843c:	b480      	push	{r7}
 800843e:	b087      	sub	sp, #28
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6a1b      	ldr	r3, [r3, #32]
 800844a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6a1b      	ldr	r3, [r3, #32]
 8008450:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	685b      	ldr	r3, [r3, #4]
 800845c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800846a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800846e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	68fa      	ldr	r2, [r7, #12]
 8008476:	4313      	orrs	r3, r2
 8008478:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008480:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	689b      	ldr	r3, [r3, #8]
 8008486:	041b      	lsls	r3, r3, #16
 8008488:	693a      	ldr	r2, [r7, #16]
 800848a:	4313      	orrs	r3, r2
 800848c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	4a15      	ldr	r2, [pc, #84]	@ (80084e8 <TIM_OC5_SetConfig+0xac>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d00b      	beq.n	80084ae <TIM_OC5_SetConfig+0x72>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	4a14      	ldr	r2, [pc, #80]	@ (80084ec <TIM_OC5_SetConfig+0xb0>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d007      	beq.n	80084ae <TIM_OC5_SetConfig+0x72>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	4a13      	ldr	r2, [pc, #76]	@ (80084f0 <TIM_OC5_SetConfig+0xb4>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d003      	beq.n	80084ae <TIM_OC5_SetConfig+0x72>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	4a12      	ldr	r2, [pc, #72]	@ (80084f4 <TIM_OC5_SetConfig+0xb8>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d109      	bne.n	80084c2 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80084b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	695b      	ldr	r3, [r3, #20]
 80084ba:	021b      	lsls	r3, r3, #8
 80084bc:	697a      	ldr	r2, [r7, #20]
 80084be:	4313      	orrs	r3, r2
 80084c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	697a      	ldr	r2, [r7, #20]
 80084c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	68fa      	ldr	r2, [r7, #12]
 80084cc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	685a      	ldr	r2, [r3, #4]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	693a      	ldr	r2, [r7, #16]
 80084da:	621a      	str	r2, [r3, #32]
}
 80084dc:	bf00      	nop
 80084de:	371c      	adds	r7, #28
 80084e0:	46bd      	mov	sp, r7
 80084e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e6:	4770      	bx	lr
 80084e8:	40012c00 	.word	0x40012c00
 80084ec:	40014000 	.word	0x40014000
 80084f0:	40014400 	.word	0x40014400
 80084f4:	40014800 	.word	0x40014800

080084f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b087      	sub	sp, #28
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6a1b      	ldr	r3, [r3, #32]
 8008506:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6a1b      	ldr	r3, [r3, #32]
 800850c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800851e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008526:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800852a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	021b      	lsls	r3, r3, #8
 8008532:	68fa      	ldr	r2, [r7, #12]
 8008534:	4313      	orrs	r3, r2
 8008536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800853e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	689b      	ldr	r3, [r3, #8]
 8008544:	051b      	lsls	r3, r3, #20
 8008546:	693a      	ldr	r2, [r7, #16]
 8008548:	4313      	orrs	r3, r2
 800854a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	4a16      	ldr	r2, [pc, #88]	@ (80085a8 <TIM_OC6_SetConfig+0xb0>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d00b      	beq.n	800856c <TIM_OC6_SetConfig+0x74>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	4a15      	ldr	r2, [pc, #84]	@ (80085ac <TIM_OC6_SetConfig+0xb4>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d007      	beq.n	800856c <TIM_OC6_SetConfig+0x74>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	4a14      	ldr	r2, [pc, #80]	@ (80085b0 <TIM_OC6_SetConfig+0xb8>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d003      	beq.n	800856c <TIM_OC6_SetConfig+0x74>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	4a13      	ldr	r2, [pc, #76]	@ (80085b4 <TIM_OC6_SetConfig+0xbc>)
 8008568:	4293      	cmp	r3, r2
 800856a:	d109      	bne.n	8008580 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008572:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	695b      	ldr	r3, [r3, #20]
 8008578:	029b      	lsls	r3, r3, #10
 800857a:	697a      	ldr	r2, [r7, #20]
 800857c:	4313      	orrs	r3, r2
 800857e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	697a      	ldr	r2, [r7, #20]
 8008584:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	68fa      	ldr	r2, [r7, #12]
 800858a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	685a      	ldr	r2, [r3, #4]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	693a      	ldr	r2, [r7, #16]
 8008598:	621a      	str	r2, [r3, #32]
}
 800859a:	bf00      	nop
 800859c:	371c      	adds	r7, #28
 800859e:	46bd      	mov	sp, r7
 80085a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a4:	4770      	bx	lr
 80085a6:	bf00      	nop
 80085a8:	40012c00 	.word	0x40012c00
 80085ac:	40014000 	.word	0x40014000
 80085b0:	40014400 	.word	0x40014400
 80085b4:	40014800 	.word	0x40014800

080085b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80085b8:	b480      	push	{r7}
 80085ba:	b087      	sub	sp, #28
 80085bc:	af00      	add	r7, sp, #0
 80085be:	60f8      	str	r0, [r7, #12]
 80085c0:	60b9      	str	r1, [r7, #8]
 80085c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	6a1b      	ldr	r3, [r3, #32]
 80085c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	6a1b      	ldr	r3, [r3, #32]
 80085ce:	f023 0201 	bic.w	r2, r3, #1
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	699b      	ldr	r3, [r3, #24]
 80085da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80085e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	011b      	lsls	r3, r3, #4
 80085e8:	693a      	ldr	r2, [r7, #16]
 80085ea:	4313      	orrs	r3, r2
 80085ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	f023 030a 	bic.w	r3, r3, #10
 80085f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80085f6:	697a      	ldr	r2, [r7, #20]
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	4313      	orrs	r3, r2
 80085fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	693a      	ldr	r2, [r7, #16]
 8008602:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	697a      	ldr	r2, [r7, #20]
 8008608:	621a      	str	r2, [r3, #32]
}
 800860a:	bf00      	nop
 800860c:	371c      	adds	r7, #28
 800860e:	46bd      	mov	sp, r7
 8008610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008614:	4770      	bx	lr

08008616 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008616:	b480      	push	{r7}
 8008618:	b087      	sub	sp, #28
 800861a:	af00      	add	r7, sp, #0
 800861c:	60f8      	str	r0, [r7, #12]
 800861e:	60b9      	str	r1, [r7, #8]
 8008620:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	6a1b      	ldr	r3, [r3, #32]
 8008626:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	6a1b      	ldr	r3, [r3, #32]
 800862c:	f023 0210 	bic.w	r2, r3, #16
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	699b      	ldr	r3, [r3, #24]
 8008638:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800863a:	693b      	ldr	r3, [r7, #16]
 800863c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008640:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	031b      	lsls	r3, r3, #12
 8008646:	693a      	ldr	r2, [r7, #16]
 8008648:	4313      	orrs	r3, r2
 800864a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008652:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	011b      	lsls	r3, r3, #4
 8008658:	697a      	ldr	r2, [r7, #20]
 800865a:	4313      	orrs	r3, r2
 800865c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	693a      	ldr	r2, [r7, #16]
 8008662:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	697a      	ldr	r2, [r7, #20]
 8008668:	621a      	str	r2, [r3, #32]
}
 800866a:	bf00      	nop
 800866c:	371c      	adds	r7, #28
 800866e:	46bd      	mov	sp, r7
 8008670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008674:	4770      	bx	lr

08008676 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008676:	b480      	push	{r7}
 8008678:	b085      	sub	sp, #20
 800867a:	af00      	add	r7, sp, #0
 800867c:	6078      	str	r0, [r7, #4]
 800867e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	689b      	ldr	r3, [r3, #8]
 8008684:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800868c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008690:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008692:	683a      	ldr	r2, [r7, #0]
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	4313      	orrs	r3, r2
 8008698:	f043 0307 	orr.w	r3, r3, #7
 800869c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	68fa      	ldr	r2, [r7, #12]
 80086a2:	609a      	str	r2, [r3, #8]
}
 80086a4:	bf00      	nop
 80086a6:	3714      	adds	r7, #20
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr

080086b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b087      	sub	sp, #28
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	60f8      	str	r0, [r7, #12]
 80086b8:	60b9      	str	r1, [r7, #8]
 80086ba:	607a      	str	r2, [r7, #4]
 80086bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	689b      	ldr	r3, [r3, #8]
 80086c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80086ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	021a      	lsls	r2, r3, #8
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	431a      	orrs	r2, r3
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	4313      	orrs	r3, r2
 80086d8:	697a      	ldr	r2, [r7, #20]
 80086da:	4313      	orrs	r3, r2
 80086dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	697a      	ldr	r2, [r7, #20]
 80086e2:	609a      	str	r2, [r3, #8]
}
 80086e4:	bf00      	nop
 80086e6:	371c      	adds	r7, #28
 80086e8:	46bd      	mov	sp, r7
 80086ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ee:	4770      	bx	lr

080086f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80086f0:	b480      	push	{r7}
 80086f2:	b085      	sub	sp, #20
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
 80086f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008700:	2b01      	cmp	r3, #1
 8008702:	d101      	bne.n	8008708 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008704:	2302      	movs	r3, #2
 8008706:	e05b      	b.n	80087c0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2201      	movs	r2, #1
 800870c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2202      	movs	r2, #2
 8008714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	685b      	ldr	r3, [r3, #4]
 800871e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	689b      	ldr	r3, [r3, #8]
 8008726:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4a27      	ldr	r2, [pc, #156]	@ (80087cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d108      	bne.n	8008744 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008738:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	68fa      	ldr	r2, [r7, #12]
 8008740:	4313      	orrs	r3, r2
 8008742:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800874a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800874e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	68fa      	ldr	r2, [r7, #12]
 8008756:	4313      	orrs	r3, r2
 8008758:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	68fa      	ldr	r2, [r7, #12]
 8008760:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4a19      	ldr	r2, [pc, #100]	@ (80087cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d013      	beq.n	8008794 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008774:	d00e      	beq.n	8008794 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4a15      	ldr	r2, [pc, #84]	@ (80087d0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d009      	beq.n	8008794 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4a13      	ldr	r2, [pc, #76]	@ (80087d4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d004      	beq.n	8008794 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4a12      	ldr	r2, [pc, #72]	@ (80087d8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d10c      	bne.n	80087ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800879a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	689b      	ldr	r3, [r3, #8]
 80087a0:	68ba      	ldr	r2, [r7, #8]
 80087a2:	4313      	orrs	r3, r2
 80087a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	68ba      	ldr	r2, [r7, #8]
 80087ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2201      	movs	r2, #1
 80087b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2200      	movs	r2, #0
 80087ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80087be:	2300      	movs	r3, #0
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3714      	adds	r7, #20
 80087c4:	46bd      	mov	sp, r7
 80087c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ca:	4770      	bx	lr
 80087cc:	40012c00 	.word	0x40012c00
 80087d0:	40000400 	.word	0x40000400
 80087d4:	40000800 	.word	0x40000800
 80087d8:	40014000 	.word	0x40014000

080087dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b082      	sub	sp, #8
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d101      	bne.n	80087ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80087ea:	2301      	movs	r3, #1
 80087ec:	e042      	b.n	8008874 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d106      	bne.n	8008806 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2200      	movs	r2, #0
 80087fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f7fa f95d 	bl	8002ac0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2224      	movs	r2, #36	@ 0x24
 800880a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	681a      	ldr	r2, [r3, #0]
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f022 0201 	bic.w	r2, r2, #1
 800881c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008822:	2b00      	cmp	r3, #0
 8008824:	d002      	beq.n	800882c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 fa2a 	bl	8008c80 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f000 f8b3 	bl	8008998 <UART_SetConfig>
 8008832:	4603      	mov	r3, r0
 8008834:	2b01      	cmp	r3, #1
 8008836:	d101      	bne.n	800883c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008838:	2301      	movs	r3, #1
 800883a:	e01b      	b.n	8008874 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	685a      	ldr	r2, [r3, #4]
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800884a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	689a      	ldr	r2, [r3, #8]
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800885a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	681a      	ldr	r2, [r3, #0]
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f042 0201 	orr.w	r2, r2, #1
 800886a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f000 faa9 	bl	8008dc4 <UART_CheckIdleState>
 8008872:	4603      	mov	r3, r0
}
 8008874:	4618      	mov	r0, r3
 8008876:	3708      	adds	r7, #8
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}

0800887c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b08a      	sub	sp, #40	@ 0x28
 8008880:	af02      	add	r7, sp, #8
 8008882:	60f8      	str	r0, [r7, #12]
 8008884:	60b9      	str	r1, [r7, #8]
 8008886:	603b      	str	r3, [r7, #0]
 8008888:	4613      	mov	r3, r2
 800888a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008892:	2b20      	cmp	r3, #32
 8008894:	d17b      	bne.n	800898e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d002      	beq.n	80088a2 <HAL_UART_Transmit+0x26>
 800889c:	88fb      	ldrh	r3, [r7, #6]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d101      	bne.n	80088a6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80088a2:	2301      	movs	r3, #1
 80088a4:	e074      	b.n	8008990 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	2200      	movs	r2, #0
 80088aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	2221      	movs	r2, #33	@ 0x21
 80088b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80088b6:	f7fa fd4d 	bl	8003354 <HAL_GetTick>
 80088ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	88fa      	ldrh	r2, [r7, #6]
 80088c0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	88fa      	ldrh	r2, [r7, #6]
 80088c8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	689b      	ldr	r3, [r3, #8]
 80088d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80088d4:	d108      	bne.n	80088e8 <HAL_UART_Transmit+0x6c>
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	691b      	ldr	r3, [r3, #16]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d104      	bne.n	80088e8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80088de:	2300      	movs	r3, #0
 80088e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	61bb      	str	r3, [r7, #24]
 80088e6:	e003      	b.n	80088f0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80088ec:	2300      	movs	r3, #0
 80088ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80088f0:	e030      	b.n	8008954 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	9300      	str	r3, [sp, #0]
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	2200      	movs	r2, #0
 80088fa:	2180      	movs	r1, #128	@ 0x80
 80088fc:	68f8      	ldr	r0, [r7, #12]
 80088fe:	f000 fb0b 	bl	8008f18 <UART_WaitOnFlagUntilTimeout>
 8008902:	4603      	mov	r3, r0
 8008904:	2b00      	cmp	r3, #0
 8008906:	d005      	beq.n	8008914 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2220      	movs	r2, #32
 800890c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008910:	2303      	movs	r3, #3
 8008912:	e03d      	b.n	8008990 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008914:	69fb      	ldr	r3, [r7, #28]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d10b      	bne.n	8008932 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800891a:	69bb      	ldr	r3, [r7, #24]
 800891c:	881b      	ldrh	r3, [r3, #0]
 800891e:	461a      	mov	r2, r3
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008928:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800892a:	69bb      	ldr	r3, [r7, #24]
 800892c:	3302      	adds	r3, #2
 800892e:	61bb      	str	r3, [r7, #24]
 8008930:	e007      	b.n	8008942 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008932:	69fb      	ldr	r3, [r7, #28]
 8008934:	781a      	ldrb	r2, [r3, #0]
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800893c:	69fb      	ldr	r3, [r7, #28]
 800893e:	3301      	adds	r3, #1
 8008940:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008948:	b29b      	uxth	r3, r3
 800894a:	3b01      	subs	r3, #1
 800894c:	b29a      	uxth	r2, r3
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800895a:	b29b      	uxth	r3, r3
 800895c:	2b00      	cmp	r3, #0
 800895e:	d1c8      	bne.n	80088f2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	9300      	str	r3, [sp, #0]
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	2200      	movs	r2, #0
 8008968:	2140      	movs	r1, #64	@ 0x40
 800896a:	68f8      	ldr	r0, [r7, #12]
 800896c:	f000 fad4 	bl	8008f18 <UART_WaitOnFlagUntilTimeout>
 8008970:	4603      	mov	r3, r0
 8008972:	2b00      	cmp	r3, #0
 8008974:	d005      	beq.n	8008982 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	2220      	movs	r2, #32
 800897a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800897e:	2303      	movs	r3, #3
 8008980:	e006      	b.n	8008990 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2220      	movs	r2, #32
 8008986:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800898a:	2300      	movs	r3, #0
 800898c:	e000      	b.n	8008990 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800898e:	2302      	movs	r3, #2
  }
}
 8008990:	4618      	mov	r0, r3
 8008992:	3720      	adds	r7, #32
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}

08008998 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008998:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800899c:	b08e      	sub	sp, #56	@ 0x38
 800899e:	af00      	add	r7, sp, #0
 80089a0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80089a2:	2300      	movs	r3, #0
 80089a4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	689a      	ldr	r2, [r3, #8]
 80089ac:	697b      	ldr	r3, [r7, #20]
 80089ae:	691b      	ldr	r3, [r3, #16]
 80089b0:	431a      	orrs	r2, r3
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	695b      	ldr	r3, [r3, #20]
 80089b6:	431a      	orrs	r2, r3
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	69db      	ldr	r3, [r3, #28]
 80089bc:	4313      	orrs	r3, r2
 80089be:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	681a      	ldr	r2, [r3, #0]
 80089c6:	4b9b      	ldr	r3, [pc, #620]	@ (8008c34 <UART_SetConfig+0x29c>)
 80089c8:	4013      	ands	r3, r2
 80089ca:	697a      	ldr	r2, [r7, #20]
 80089cc:	6812      	ldr	r2, [r2, #0]
 80089ce:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80089d0:	430b      	orrs	r3, r1
 80089d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	685b      	ldr	r3, [r3, #4]
 80089da:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	68da      	ldr	r2, [r3, #12]
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	430a      	orrs	r2, r1
 80089e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	699b      	ldr	r3, [r3, #24]
 80089ee:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4a90      	ldr	r2, [pc, #576]	@ (8008c38 <UART_SetConfig+0x2a0>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d004      	beq.n	8008a04 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	6a1b      	ldr	r3, [r3, #32]
 80089fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008a00:	4313      	orrs	r3, r2
 8008a02:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	689b      	ldr	r3, [r3, #8]
 8008a0a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8008a0e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008a12:	697a      	ldr	r2, [r7, #20]
 8008a14:	6812      	ldr	r2, [r2, #0]
 8008a16:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008a18:	430b      	orrs	r3, r1
 8008a1a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a22:	f023 010f 	bic.w	r1, r3, #15
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	430a      	orrs	r2, r1
 8008a30:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	4a81      	ldr	r2, [pc, #516]	@ (8008c3c <UART_SetConfig+0x2a4>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d102      	bne.n	8008a42 <UART_SetConfig+0xaa>
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008a40:	e022      	b.n	8008a88 <UART_SetConfig+0xf0>
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	4a7e      	ldr	r2, [pc, #504]	@ (8008c40 <UART_SetConfig+0x2a8>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d102      	bne.n	8008a52 <UART_SetConfig+0xba>
 8008a4c:	2302      	movs	r3, #2
 8008a4e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008a50:	e01a      	b.n	8008a88 <UART_SetConfig+0xf0>
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	4a7b      	ldr	r2, [pc, #492]	@ (8008c44 <UART_SetConfig+0x2ac>)
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d102      	bne.n	8008a62 <UART_SetConfig+0xca>
 8008a5c:	2304      	movs	r3, #4
 8008a5e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008a60:	e012      	b.n	8008a88 <UART_SetConfig+0xf0>
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4a78      	ldr	r2, [pc, #480]	@ (8008c48 <UART_SetConfig+0x2b0>)
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	d102      	bne.n	8008a72 <UART_SetConfig+0xda>
 8008a6c:	2308      	movs	r3, #8
 8008a6e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008a70:	e00a      	b.n	8008a88 <UART_SetConfig+0xf0>
 8008a72:	697b      	ldr	r3, [r7, #20]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4a70      	ldr	r2, [pc, #448]	@ (8008c38 <UART_SetConfig+0x2a0>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d103      	bne.n	8008a84 <UART_SetConfig+0xec>
 8008a7c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8008a80:	633b      	str	r3, [r7, #48]	@ 0x30
 8008a82:	e001      	b.n	8008a88 <UART_SetConfig+0xf0>
 8008a84:	2300      	movs	r3, #0
 8008a86:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4a6a      	ldr	r2, [pc, #424]	@ (8008c38 <UART_SetConfig+0x2a0>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d16c      	bne.n	8008b6c <UART_SetConfig+0x1d4>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008a92:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008a94:	f7fd fe58 	bl	8006748 <HAL_RCCEx_GetPeriphCLKFreq>
 8008a98:	62b8      	str	r0, [r7, #40]	@ 0x28

    /* If proper clock source reported */
    if (pclk != 0U)
 8008a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	f000 80da 	beq.w	8008c56 <UART_SetConfig+0x2be>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008aa6:	4a69      	ldr	r2, [pc, #420]	@ (8008c4c <UART_SetConfig+0x2b4>)
 8008aa8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008aac:	461a      	mov	r2, r3
 8008aae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ab0:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ab4:	61fb      	str	r3, [r7, #28]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	685a      	ldr	r2, [r3, #4]
 8008aba:	4613      	mov	r3, r2
 8008abc:	005b      	lsls	r3, r3, #1
 8008abe:	4413      	add	r3, r2
 8008ac0:	69fa      	ldr	r2, [r7, #28]
 8008ac2:	429a      	cmp	r2, r3
 8008ac4:	d305      	bcc.n	8008ad2 <UART_SetConfig+0x13a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	685b      	ldr	r3, [r3, #4]
 8008aca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008acc:	69fa      	ldr	r2, [r7, #28]
 8008ace:	429a      	cmp	r2, r3
 8008ad0:	d903      	bls.n	8008ada <UART_SetConfig+0x142>
      {
        ret = HAL_ERROR;
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8008ad8:	e0bd      	b.n	8008c56 <UART_SetConfig+0x2be>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008adc:	2200      	movs	r2, #0
 8008ade:	60bb      	str	r3, [r7, #8]
 8008ae0:	60fa      	str	r2, [r7, #12]
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ae6:	4a59      	ldr	r2, [pc, #356]	@ (8008c4c <UART_SetConfig+0x2b4>)
 8008ae8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008aec:	b29b      	uxth	r3, r3
 8008aee:	2200      	movs	r2, #0
 8008af0:	603b      	str	r3, [r7, #0]
 8008af2:	607a      	str	r2, [r7, #4]
 8008af4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008af8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008afc:	f7f8 f858 	bl	8000bb0 <__aeabi_uldivmod>
 8008b00:	4602      	mov	r2, r0
 8008b02:	460b      	mov	r3, r1
 8008b04:	4610      	mov	r0, r2
 8008b06:	4619      	mov	r1, r3
 8008b08:	f04f 0200 	mov.w	r2, #0
 8008b0c:	f04f 0300 	mov.w	r3, #0
 8008b10:	020b      	lsls	r3, r1, #8
 8008b12:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008b16:	0202      	lsls	r2, r0, #8
 8008b18:	6979      	ldr	r1, [r7, #20]
 8008b1a:	6849      	ldr	r1, [r1, #4]
 8008b1c:	0849      	lsrs	r1, r1, #1
 8008b1e:	2000      	movs	r0, #0
 8008b20:	460c      	mov	r4, r1
 8008b22:	4605      	mov	r5, r0
 8008b24:	eb12 0804 	adds.w	r8, r2, r4
 8008b28:	eb43 0905 	adc.w	r9, r3, r5
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	685b      	ldr	r3, [r3, #4]
 8008b30:	2200      	movs	r2, #0
 8008b32:	469a      	mov	sl, r3
 8008b34:	4693      	mov	fp, r2
 8008b36:	4652      	mov	r2, sl
 8008b38:	465b      	mov	r3, fp
 8008b3a:	4640      	mov	r0, r8
 8008b3c:	4649      	mov	r1, r9
 8008b3e:	f7f8 f837 	bl	8000bb0 <__aeabi_uldivmod>
 8008b42:	4602      	mov	r2, r0
 8008b44:	460b      	mov	r3, r1
 8008b46:	4613      	mov	r3, r2
 8008b48:	627b      	str	r3, [r7, #36]	@ 0x24
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b4c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008b50:	d308      	bcc.n	8008b64 <UART_SetConfig+0x1cc>
 8008b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b54:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008b58:	d204      	bcs.n	8008b64 <UART_SetConfig+0x1cc>
        {
          huart->Instance->BRR = usartdiv;
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b60:	60da      	str	r2, [r3, #12]
 8008b62:	e078      	b.n	8008c56 <UART_SetConfig+0x2be>
        }
        else
        {
          ret = HAL_ERROR;
 8008b64:	2301      	movs	r3, #1
 8008b66:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8008b6a:	e074      	b.n	8008c56 <UART_SetConfig+0x2be>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b6c:	697b      	ldr	r3, [r7, #20]
 8008b6e:	69db      	ldr	r3, [r3, #28]
 8008b70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008b74:	d137      	bne.n	8008be6 <UART_SetConfig+0x24e>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008b76:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008b78:	f7fd fde6 	bl	8006748 <HAL_RCCEx_GetPeriphCLKFreq>
 8008b7c:	62b8      	str	r0, [r7, #40]	@ 0x28

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d068      	beq.n	8008c56 <UART_SetConfig+0x2be>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b88:	4a30      	ldr	r2, [pc, #192]	@ (8008c4c <UART_SetConfig+0x2b4>)
 8008b8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b8e:	461a      	mov	r2, r3
 8008b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b92:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b96:	005a      	lsls	r2, r3, #1
 8008b98:	697b      	ldr	r3, [r7, #20]
 8008b9a:	685b      	ldr	r3, [r3, #4]
 8008b9c:	085b      	lsrs	r3, r3, #1
 8008b9e:	441a      	add	r2, r3
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ba8:	627b      	str	r3, [r7, #36]	@ 0x24
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bac:	2b0f      	cmp	r3, #15
 8008bae:	d916      	bls.n	8008bde <UART_SetConfig+0x246>
 8008bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bb2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008bb6:	d212      	bcs.n	8008bde <UART_SetConfig+0x246>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bba:	b29b      	uxth	r3, r3
 8008bbc:	f023 030f 	bic.w	r3, r3, #15
 8008bc0:	847b      	strh	r3, [r7, #34]	@ 0x22
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bc4:	085b      	lsrs	r3, r3, #1
 8008bc6:	b29b      	uxth	r3, r3
 8008bc8:	f003 0307 	and.w	r3, r3, #7
 8008bcc:	b29a      	uxth	r2, r3
 8008bce:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008bd0:	4313      	orrs	r3, r2
 8008bd2:	847b      	strh	r3, [r7, #34]	@ 0x22
        huart->Instance->BRR = brrtemp;
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8008bda:	60da      	str	r2, [r3, #12]
 8008bdc:	e03b      	b.n	8008c56 <UART_SetConfig+0x2be>
      }
      else
      {
        ret = HAL_ERROR;
 8008bde:	2301      	movs	r3, #1
 8008be0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8008be4:	e037      	b.n	8008c56 <UART_SetConfig+0x2be>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008be6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008be8:	f7fd fdae 	bl	8006748 <HAL_RCCEx_GetPeriphCLKFreq>
 8008bec:	62b8      	str	r0, [r7, #40]	@ 0x28

    if (pclk != 0U)
 8008bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d030      	beq.n	8008c56 <UART_SetConfig+0x2be>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008bf4:	697b      	ldr	r3, [r7, #20]
 8008bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bf8:	4a14      	ldr	r2, [pc, #80]	@ (8008c4c <UART_SetConfig+0x2b4>)
 8008bfa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008bfe:	461a      	mov	r2, r3
 8008c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c02:	fbb3 f2f2 	udiv	r2, r3, r2
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	685b      	ldr	r3, [r3, #4]
 8008c0a:	085b      	lsrs	r3, r3, #1
 8008c0c:	441a      	add	r2, r3
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	685b      	ldr	r3, [r3, #4]
 8008c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c16:	627b      	str	r3, [r7, #36]	@ 0x24
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c1a:	2b0f      	cmp	r3, #15
 8008c1c:	d918      	bls.n	8008c50 <UART_SetConfig+0x2b8>
 8008c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c24:	d214      	bcs.n	8008c50 <UART_SetConfig+0x2b8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c28:	b29a      	uxth	r2, r3
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	60da      	str	r2, [r3, #12]
 8008c30:	e011      	b.n	8008c56 <UART_SetConfig+0x2be>
 8008c32:	bf00      	nop
 8008c34:	cfff69f3 	.word	0xcfff69f3
 8008c38:	40042400 	.word	0x40042400
 8008c3c:	40013800 	.word	0x40013800
 8008c40:	40004800 	.word	0x40004800
 8008c44:	40004c00 	.word	0x40004c00
 8008c48:	40005000 	.word	0x40005000
 8008c4c:	08023228 	.word	0x08023228
      }
      else
      {
        ret = HAL_ERROR;
 8008c50:	2301      	movs	r3, #1
 8008c52:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	2201      	movs	r2, #1
 8008c5a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	2201      	movs	r2, #1
 8008c62:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008c72:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3738      	adds	r7, #56	@ 0x38
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008c80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b083      	sub	sp, #12
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c8c:	f003 0308 	and.w	r3, r3, #8
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d00a      	beq.n	8008caa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	685b      	ldr	r3, [r3, #4]
 8008c9a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	430a      	orrs	r2, r1
 8008ca8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cae:	f003 0301 	and.w	r3, r3, #1
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d00a      	beq.n	8008ccc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	685b      	ldr	r3, [r3, #4]
 8008cbc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	430a      	orrs	r2, r1
 8008cca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cd0:	f003 0302 	and.w	r3, r3, #2
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d00a      	beq.n	8008cee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	430a      	orrs	r2, r1
 8008cec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cf2:	f003 0304 	and.w	r3, r3, #4
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d00a      	beq.n	8008d10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	685b      	ldr	r3, [r3, #4]
 8008d00:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	430a      	orrs	r2, r1
 8008d0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d14:	f003 0310 	and.w	r3, r3, #16
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d00a      	beq.n	8008d32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	689b      	ldr	r3, [r3, #8]
 8008d22:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	430a      	orrs	r2, r1
 8008d30:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d36:	f003 0320 	and.w	r3, r3, #32
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d00a      	beq.n	8008d54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	689b      	ldr	r3, [r3, #8]
 8008d44:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	430a      	orrs	r2, r1
 8008d52:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d01a      	beq.n	8008d96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	685b      	ldr	r3, [r3, #4]
 8008d66:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	430a      	orrs	r2, r1
 8008d74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008d7e:	d10a      	bne.n	8008d96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	685b      	ldr	r3, [r3, #4]
 8008d86:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	430a      	orrs	r2, r1
 8008d94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d00a      	beq.n	8008db8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	430a      	orrs	r2, r1
 8008db6:	605a      	str	r2, [r3, #4]
  }
}
 8008db8:	bf00      	nop
 8008dba:	370c      	adds	r7, #12
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc2:	4770      	bx	lr

08008dc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b098      	sub	sp, #96	@ 0x60
 8008dc8:	af02      	add	r7, sp, #8
 8008dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008dd4:	f7fa fabe 	bl	8003354 <HAL_GetTick>
 8008dd8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f003 0308 	and.w	r3, r3, #8
 8008de4:	2b08      	cmp	r3, #8
 8008de6:	d12f      	bne.n	8008e48 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008de8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008dec:	9300      	str	r3, [sp, #0]
 8008dee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008df0:	2200      	movs	r2, #0
 8008df2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f000 f88e 	bl	8008f18 <UART_WaitOnFlagUntilTimeout>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d022      	beq.n	8008e48 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e0a:	e853 3f00 	ldrex	r3, [r3]
 8008e0e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008e10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008e16:	653b      	str	r3, [r7, #80]	@ 0x50
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	461a      	mov	r2, r3
 8008e1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008e20:	647b      	str	r3, [r7, #68]	@ 0x44
 8008e22:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e24:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008e26:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008e28:	e841 2300 	strex	r3, r2, [r1]
 8008e2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008e2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d1e6      	bne.n	8008e02 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2220      	movs	r2, #32
 8008e38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e44:	2303      	movs	r3, #3
 8008e46:	e063      	b.n	8008f10 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f003 0304 	and.w	r3, r3, #4
 8008e52:	2b04      	cmp	r3, #4
 8008e54:	d149      	bne.n	8008eea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e56:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008e5a:	9300      	str	r3, [sp, #0]
 8008e5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008e5e:	2200      	movs	r2, #0
 8008e60:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f000 f857 	bl	8008f18 <UART_WaitOnFlagUntilTimeout>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d03c      	beq.n	8008eea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e78:	e853 3f00 	ldrex	r3, [r3]
 8008e7c:	623b      	str	r3, [r7, #32]
   return(result);
 8008e7e:	6a3b      	ldr	r3, [r7, #32]
 8008e80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008e84:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	461a      	mov	r2, r3
 8008e8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e8e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008e90:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008e94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e96:	e841 2300 	strex	r3, r2, [r1]
 8008e9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008e9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d1e6      	bne.n	8008e70 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	3308      	adds	r3, #8
 8008ea8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eaa:	693b      	ldr	r3, [r7, #16]
 8008eac:	e853 3f00 	ldrex	r3, [r3]
 8008eb0:	60fb      	str	r3, [r7, #12]
   return(result);
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	f023 0301 	bic.w	r3, r3, #1
 8008eb8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	3308      	adds	r3, #8
 8008ec0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008ec2:	61fa      	str	r2, [r7, #28]
 8008ec4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ec6:	69b9      	ldr	r1, [r7, #24]
 8008ec8:	69fa      	ldr	r2, [r7, #28]
 8008eca:	e841 2300 	strex	r3, r2, [r1]
 8008ece:	617b      	str	r3, [r7, #20]
   return(result);
 8008ed0:	697b      	ldr	r3, [r7, #20]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d1e5      	bne.n	8008ea2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2220      	movs	r2, #32
 8008eda:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ee6:	2303      	movs	r3, #3
 8008ee8:	e012      	b.n	8008f10 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2220      	movs	r2, #32
 8008eee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2220      	movs	r2, #32
 8008ef6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2200      	movs	r2, #0
 8008efe:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2200      	movs	r2, #0
 8008f04:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008f0e:	2300      	movs	r3, #0
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3758      	adds	r7, #88	@ 0x58
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}

08008f18 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b084      	sub	sp, #16
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	60f8      	str	r0, [r7, #12]
 8008f20:	60b9      	str	r1, [r7, #8]
 8008f22:	603b      	str	r3, [r7, #0]
 8008f24:	4613      	mov	r3, r2
 8008f26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f28:	e04f      	b.n	8008fca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f2a:	69bb      	ldr	r3, [r7, #24]
 8008f2c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008f30:	d04b      	beq.n	8008fca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f32:	f7fa fa0f 	bl	8003354 <HAL_GetTick>
 8008f36:	4602      	mov	r2, r0
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	1ad3      	subs	r3, r2, r3
 8008f3c:	69ba      	ldr	r2, [r7, #24]
 8008f3e:	429a      	cmp	r2, r3
 8008f40:	d302      	bcc.n	8008f48 <UART_WaitOnFlagUntilTimeout+0x30>
 8008f42:	69bb      	ldr	r3, [r7, #24]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d101      	bne.n	8008f4c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008f48:	2303      	movs	r3, #3
 8008f4a:	e04e      	b.n	8008fea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f003 0304 	and.w	r3, r3, #4
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d037      	beq.n	8008fca <UART_WaitOnFlagUntilTimeout+0xb2>
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	2b80      	cmp	r3, #128	@ 0x80
 8008f5e:	d034      	beq.n	8008fca <UART_WaitOnFlagUntilTimeout+0xb2>
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	2b40      	cmp	r3, #64	@ 0x40
 8008f64:	d031      	beq.n	8008fca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	69db      	ldr	r3, [r3, #28]
 8008f6c:	f003 0308 	and.w	r3, r3, #8
 8008f70:	2b08      	cmp	r3, #8
 8008f72:	d110      	bne.n	8008f96 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	2208      	movs	r2, #8
 8008f7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008f7c:	68f8      	ldr	r0, [r7, #12]
 8008f7e:	f000 f838 	bl	8008ff2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	2208      	movs	r2, #8
 8008f86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008f92:	2301      	movs	r3, #1
 8008f94:	e029      	b.n	8008fea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	69db      	ldr	r3, [r3, #28]
 8008f9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008fa0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008fa4:	d111      	bne.n	8008fca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008fae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008fb0:	68f8      	ldr	r0, [r7, #12]
 8008fb2:	f000 f81e 	bl	8008ff2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2220      	movs	r2, #32
 8008fba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008fc6:	2303      	movs	r3, #3
 8008fc8:	e00f      	b.n	8008fea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	69da      	ldr	r2, [r3, #28]
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	4013      	ands	r3, r2
 8008fd4:	68ba      	ldr	r2, [r7, #8]
 8008fd6:	429a      	cmp	r2, r3
 8008fd8:	bf0c      	ite	eq
 8008fda:	2301      	moveq	r3, #1
 8008fdc:	2300      	movne	r3, #0
 8008fde:	b2db      	uxtb	r3, r3
 8008fe0:	461a      	mov	r2, r3
 8008fe2:	79fb      	ldrb	r3, [r7, #7]
 8008fe4:	429a      	cmp	r2, r3
 8008fe6:	d0a0      	beq.n	8008f2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008fe8:	2300      	movs	r3, #0
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	3710      	adds	r7, #16
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}

08008ff2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008ff2:	b480      	push	{r7}
 8008ff4:	b095      	sub	sp, #84	@ 0x54
 8008ff6:	af00      	add	r7, sp, #0
 8008ff8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009000:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009002:	e853 3f00 	ldrex	r3, [r3]
 8009006:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800900a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800900e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	461a      	mov	r2, r3
 8009016:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009018:	643b      	str	r3, [r7, #64]	@ 0x40
 800901a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800901c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800901e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009020:	e841 2300 	strex	r3, r2, [r1]
 8009024:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009028:	2b00      	cmp	r3, #0
 800902a:	d1e6      	bne.n	8008ffa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	3308      	adds	r3, #8
 8009032:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009034:	6a3b      	ldr	r3, [r7, #32]
 8009036:	e853 3f00 	ldrex	r3, [r3]
 800903a:	61fb      	str	r3, [r7, #28]
   return(result);
 800903c:	69fb      	ldr	r3, [r7, #28]
 800903e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009042:	f023 0301 	bic.w	r3, r3, #1
 8009046:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	3308      	adds	r3, #8
 800904e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009050:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009052:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009054:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009056:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009058:	e841 2300 	strex	r3, r2, [r1]
 800905c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800905e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009060:	2b00      	cmp	r3, #0
 8009062:	d1e3      	bne.n	800902c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009068:	2b01      	cmp	r3, #1
 800906a:	d118      	bne.n	800909e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	e853 3f00 	ldrex	r3, [r3]
 8009078:	60bb      	str	r3, [r7, #8]
   return(result);
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	f023 0310 	bic.w	r3, r3, #16
 8009080:	647b      	str	r3, [r7, #68]	@ 0x44
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	461a      	mov	r2, r3
 8009088:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800908a:	61bb      	str	r3, [r7, #24]
 800908c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800908e:	6979      	ldr	r1, [r7, #20]
 8009090:	69ba      	ldr	r2, [r7, #24]
 8009092:	e841 2300 	strex	r3, r2, [r1]
 8009096:	613b      	str	r3, [r7, #16]
   return(result);
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d1e6      	bne.n	800906c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2220      	movs	r2, #32
 80090a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2200      	movs	r2, #0
 80090aa:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2200      	movs	r2, #0
 80090b0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80090b2:	bf00      	nop
 80090b4:	3754      	adds	r7, #84	@ 0x54
 80090b6:	46bd      	mov	sp, r7
 80090b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090bc:	4770      	bx	lr

080090be <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80090be:	b480      	push	{r7}
 80090c0:	b085      	sub	sp, #20
 80090c2:	af00      	add	r7, sp, #0
 80090c4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80090cc:	2b01      	cmp	r3, #1
 80090ce:	d101      	bne.n	80090d4 <HAL_UARTEx_DisableFifoMode+0x16>
 80090d0:	2302      	movs	r3, #2
 80090d2:	e027      	b.n	8009124 <HAL_UARTEx_DisableFifoMode+0x66>
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2201      	movs	r2, #1
 80090d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2224      	movs	r2, #36	@ 0x24
 80090e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	681a      	ldr	r2, [r3, #0]
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f022 0201 	bic.w	r2, r2, #1
 80090fa:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009102:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2200      	movs	r2, #0
 8009108:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	68fa      	ldr	r2, [r7, #12]
 8009110:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2220      	movs	r2, #32
 8009116:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2200      	movs	r2, #0
 800911e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009122:	2300      	movs	r3, #0
}
 8009124:	4618      	mov	r0, r3
 8009126:	3714      	adds	r7, #20
 8009128:	46bd      	mov	sp, r7
 800912a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912e:	4770      	bx	lr

08009130 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b084      	sub	sp, #16
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009140:	2b01      	cmp	r3, #1
 8009142:	d101      	bne.n	8009148 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009144:	2302      	movs	r3, #2
 8009146:	e02d      	b.n	80091a4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2201      	movs	r2, #1
 800914c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2224      	movs	r2, #36	@ 0x24
 8009154:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	681a      	ldr	r2, [r3, #0]
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f022 0201 	bic.w	r2, r2, #1
 800916e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	689b      	ldr	r3, [r3, #8]
 8009176:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	683a      	ldr	r2, [r7, #0]
 8009180:	430a      	orrs	r2, r1
 8009182:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f000 f84f 	bl	8009228 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	68fa      	ldr	r2, [r7, #12]
 8009190:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2220      	movs	r2, #32
 8009196:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2200      	movs	r2, #0
 800919e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80091a2:	2300      	movs	r3, #0
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	3710      	adds	r7, #16
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}

080091ac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b084      	sub	sp, #16
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80091bc:	2b01      	cmp	r3, #1
 80091be:	d101      	bne.n	80091c4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80091c0:	2302      	movs	r3, #2
 80091c2:	e02d      	b.n	8009220 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2201      	movs	r2, #1
 80091c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2224      	movs	r2, #36	@ 0x24
 80091d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	681a      	ldr	r2, [r3, #0]
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f022 0201 	bic.w	r2, r2, #1
 80091ea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	689b      	ldr	r3, [r3, #8]
 80091f2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	683a      	ldr	r2, [r7, #0]
 80091fc:	430a      	orrs	r2, r1
 80091fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	f000 f811 	bl	8009228 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	68fa      	ldr	r2, [r7, #12]
 800920c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2220      	movs	r2, #32
 8009212:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2200      	movs	r2, #0
 800921a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800921e:	2300      	movs	r3, #0
}
 8009220:	4618      	mov	r0, r3
 8009222:	3710      	adds	r7, #16
 8009224:	46bd      	mov	sp, r7
 8009226:	bd80      	pop	{r7, pc}

08009228 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009228:	b480      	push	{r7}
 800922a:	b085      	sub	sp, #20
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009234:	2b00      	cmp	r3, #0
 8009236:	d108      	bne.n	800924a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2201      	movs	r2, #1
 800923c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2201      	movs	r2, #1
 8009244:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009248:	e031      	b.n	80092ae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800924a:	2308      	movs	r3, #8
 800924c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800924e:	2308      	movs	r3, #8
 8009250:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	689b      	ldr	r3, [r3, #8]
 8009258:	0e5b      	lsrs	r3, r3, #25
 800925a:	b2db      	uxtb	r3, r3
 800925c:	f003 0307 	and.w	r3, r3, #7
 8009260:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	689b      	ldr	r3, [r3, #8]
 8009268:	0f5b      	lsrs	r3, r3, #29
 800926a:	b2db      	uxtb	r3, r3
 800926c:	f003 0307 	and.w	r3, r3, #7
 8009270:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009272:	7bbb      	ldrb	r3, [r7, #14]
 8009274:	7b3a      	ldrb	r2, [r7, #12]
 8009276:	4911      	ldr	r1, [pc, #68]	@ (80092bc <UARTEx_SetNbDataToProcess+0x94>)
 8009278:	5c8a      	ldrb	r2, [r1, r2]
 800927a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800927e:	7b3a      	ldrb	r2, [r7, #12]
 8009280:	490f      	ldr	r1, [pc, #60]	@ (80092c0 <UARTEx_SetNbDataToProcess+0x98>)
 8009282:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009284:	fb93 f3f2 	sdiv	r3, r3, r2
 8009288:	b29a      	uxth	r2, r3
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009290:	7bfb      	ldrb	r3, [r7, #15]
 8009292:	7b7a      	ldrb	r2, [r7, #13]
 8009294:	4909      	ldr	r1, [pc, #36]	@ (80092bc <UARTEx_SetNbDataToProcess+0x94>)
 8009296:	5c8a      	ldrb	r2, [r1, r2]
 8009298:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800929c:	7b7a      	ldrb	r2, [r7, #13]
 800929e:	4908      	ldr	r1, [pc, #32]	@ (80092c0 <UARTEx_SetNbDataToProcess+0x98>)
 80092a0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80092a2:	fb93 f3f2 	sdiv	r3, r3, r2
 80092a6:	b29a      	uxth	r2, r3
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80092ae:	bf00      	nop
 80092b0:	3714      	adds	r7, #20
 80092b2:	46bd      	mov	sp, r7
 80092b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b8:	4770      	bx	lr
 80092ba:	bf00      	nop
 80092bc:	08023240 	.word	0x08023240
 80092c0:	08023248 	.word	0x08023248

080092c4 <__cvt>:
 80092c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80092c8:	ec57 6b10 	vmov	r6, r7, d0
 80092cc:	2f00      	cmp	r7, #0
 80092ce:	460c      	mov	r4, r1
 80092d0:	4619      	mov	r1, r3
 80092d2:	463b      	mov	r3, r7
 80092d4:	bfb4      	ite	lt
 80092d6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80092da:	2300      	movge	r3, #0
 80092dc:	4691      	mov	r9, r2
 80092de:	bfbf      	itttt	lt
 80092e0:	4632      	movlt	r2, r6
 80092e2:	461f      	movlt	r7, r3
 80092e4:	232d      	movlt	r3, #45	@ 0x2d
 80092e6:	4616      	movlt	r6, r2
 80092e8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80092ec:	700b      	strb	r3, [r1, #0]
 80092ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80092f0:	f023 0820 	bic.w	r8, r3, #32
 80092f4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80092f8:	d005      	beq.n	8009306 <__cvt+0x42>
 80092fa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80092fe:	d100      	bne.n	8009302 <__cvt+0x3e>
 8009300:	3401      	adds	r4, #1
 8009302:	2102      	movs	r1, #2
 8009304:	e000      	b.n	8009308 <__cvt+0x44>
 8009306:	2103      	movs	r1, #3
 8009308:	ab03      	add	r3, sp, #12
 800930a:	4622      	mov	r2, r4
 800930c:	9301      	str	r3, [sp, #4]
 800930e:	ab02      	add	r3, sp, #8
 8009310:	ec47 6b10 	vmov	d0, r6, r7
 8009314:	9300      	str	r3, [sp, #0]
 8009316:	4653      	mov	r3, sl
 8009318:	f000 fe76 	bl	800a008 <_dtoa_r>
 800931c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009320:	4605      	mov	r5, r0
 8009322:	d119      	bne.n	8009358 <__cvt+0x94>
 8009324:	f019 0f01 	tst.w	r9, #1
 8009328:	d00e      	beq.n	8009348 <__cvt+0x84>
 800932a:	eb00 0904 	add.w	r9, r0, r4
 800932e:	2200      	movs	r2, #0
 8009330:	2300      	movs	r3, #0
 8009332:	4630      	mov	r0, r6
 8009334:	4639      	mov	r1, r7
 8009336:	f7f7 fbcb 	bl	8000ad0 <__aeabi_dcmpeq>
 800933a:	b108      	cbz	r0, 8009340 <__cvt+0x7c>
 800933c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009340:	2230      	movs	r2, #48	@ 0x30
 8009342:	9b03      	ldr	r3, [sp, #12]
 8009344:	454b      	cmp	r3, r9
 8009346:	d31e      	bcc.n	8009386 <__cvt+0xc2>
 8009348:	9b03      	ldr	r3, [sp, #12]
 800934a:	4628      	mov	r0, r5
 800934c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800934e:	1b5b      	subs	r3, r3, r5
 8009350:	6013      	str	r3, [r2, #0]
 8009352:	b004      	add	sp, #16
 8009354:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009358:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800935c:	eb00 0904 	add.w	r9, r0, r4
 8009360:	d1e5      	bne.n	800932e <__cvt+0x6a>
 8009362:	7803      	ldrb	r3, [r0, #0]
 8009364:	2b30      	cmp	r3, #48	@ 0x30
 8009366:	d10a      	bne.n	800937e <__cvt+0xba>
 8009368:	2200      	movs	r2, #0
 800936a:	2300      	movs	r3, #0
 800936c:	4630      	mov	r0, r6
 800936e:	4639      	mov	r1, r7
 8009370:	f7f7 fbae 	bl	8000ad0 <__aeabi_dcmpeq>
 8009374:	b918      	cbnz	r0, 800937e <__cvt+0xba>
 8009376:	f1c4 0401 	rsb	r4, r4, #1
 800937a:	f8ca 4000 	str.w	r4, [sl]
 800937e:	f8da 3000 	ldr.w	r3, [sl]
 8009382:	4499      	add	r9, r3
 8009384:	e7d3      	b.n	800932e <__cvt+0x6a>
 8009386:	1c59      	adds	r1, r3, #1
 8009388:	9103      	str	r1, [sp, #12]
 800938a:	701a      	strb	r2, [r3, #0]
 800938c:	e7d9      	b.n	8009342 <__cvt+0x7e>

0800938e <__exponent>:
 800938e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009390:	2900      	cmp	r1, #0
 8009392:	7002      	strb	r2, [r0, #0]
 8009394:	bfba      	itte	lt
 8009396:	4249      	neglt	r1, r1
 8009398:	232d      	movlt	r3, #45	@ 0x2d
 800939a:	232b      	movge	r3, #43	@ 0x2b
 800939c:	2909      	cmp	r1, #9
 800939e:	7043      	strb	r3, [r0, #1]
 80093a0:	dd28      	ble.n	80093f4 <__exponent+0x66>
 80093a2:	f10d 0307 	add.w	r3, sp, #7
 80093a6:	270a      	movs	r7, #10
 80093a8:	461d      	mov	r5, r3
 80093aa:	461a      	mov	r2, r3
 80093ac:	3b01      	subs	r3, #1
 80093ae:	fbb1 f6f7 	udiv	r6, r1, r7
 80093b2:	fb07 1416 	mls	r4, r7, r6, r1
 80093b6:	3430      	adds	r4, #48	@ 0x30
 80093b8:	f802 4c01 	strb.w	r4, [r2, #-1]
 80093bc:	460c      	mov	r4, r1
 80093be:	4631      	mov	r1, r6
 80093c0:	2c63      	cmp	r4, #99	@ 0x63
 80093c2:	dcf2      	bgt.n	80093aa <__exponent+0x1c>
 80093c4:	3130      	adds	r1, #48	@ 0x30
 80093c6:	1e94      	subs	r4, r2, #2
 80093c8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80093cc:	1c41      	adds	r1, r0, #1
 80093ce:	4623      	mov	r3, r4
 80093d0:	42ab      	cmp	r3, r5
 80093d2:	d30a      	bcc.n	80093ea <__exponent+0x5c>
 80093d4:	f10d 0309 	add.w	r3, sp, #9
 80093d8:	1a9b      	subs	r3, r3, r2
 80093da:	42ac      	cmp	r4, r5
 80093dc:	bf88      	it	hi
 80093de:	2300      	movhi	r3, #0
 80093e0:	3302      	adds	r3, #2
 80093e2:	4403      	add	r3, r0
 80093e4:	1a18      	subs	r0, r3, r0
 80093e6:	b003      	add	sp, #12
 80093e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093ea:	f813 6b01 	ldrb.w	r6, [r3], #1
 80093ee:	f801 6f01 	strb.w	r6, [r1, #1]!
 80093f2:	e7ed      	b.n	80093d0 <__exponent+0x42>
 80093f4:	2330      	movs	r3, #48	@ 0x30
 80093f6:	3130      	adds	r1, #48	@ 0x30
 80093f8:	7083      	strb	r3, [r0, #2]
 80093fa:	1d03      	adds	r3, r0, #4
 80093fc:	70c1      	strb	r1, [r0, #3]
 80093fe:	e7f1      	b.n	80093e4 <__exponent+0x56>

08009400 <_printf_float>:
 8009400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009404:	b08d      	sub	sp, #52	@ 0x34
 8009406:	460c      	mov	r4, r1
 8009408:	4616      	mov	r6, r2
 800940a:	461f      	mov	r7, r3
 800940c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009410:	4605      	mov	r5, r0
 8009412:	f000 fd4d 	bl	8009eb0 <_localeconv_r>
 8009416:	6803      	ldr	r3, [r0, #0]
 8009418:	4618      	mov	r0, r3
 800941a:	9304      	str	r3, [sp, #16]
 800941c:	f7f6 ff2c 	bl	8000278 <strlen>
 8009420:	2300      	movs	r3, #0
 8009422:	9005      	str	r0, [sp, #20]
 8009424:	930a      	str	r3, [sp, #40]	@ 0x28
 8009426:	f8d8 3000 	ldr.w	r3, [r8]
 800942a:	f894 a018 	ldrb.w	sl, [r4, #24]
 800942e:	3307      	adds	r3, #7
 8009430:	f8d4 b000 	ldr.w	fp, [r4]
 8009434:	f023 0307 	bic.w	r3, r3, #7
 8009438:	f103 0208 	add.w	r2, r3, #8
 800943c:	f8c8 2000 	str.w	r2, [r8]
 8009440:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009444:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009448:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800944c:	f8cd 8018 	str.w	r8, [sp, #24]
 8009450:	9307      	str	r3, [sp, #28]
 8009452:	4b9d      	ldr	r3, [pc, #628]	@ (80096c8 <_printf_float+0x2c8>)
 8009454:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009458:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800945c:	f7f7 fb6a 	bl	8000b34 <__aeabi_dcmpun>
 8009460:	bb70      	cbnz	r0, 80094c0 <_printf_float+0xc0>
 8009462:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009466:	4b98      	ldr	r3, [pc, #608]	@ (80096c8 <_printf_float+0x2c8>)
 8009468:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800946c:	f7f7 fb44 	bl	8000af8 <__aeabi_dcmple>
 8009470:	bb30      	cbnz	r0, 80094c0 <_printf_float+0xc0>
 8009472:	2200      	movs	r2, #0
 8009474:	2300      	movs	r3, #0
 8009476:	4640      	mov	r0, r8
 8009478:	4649      	mov	r1, r9
 800947a:	f7f7 fb33 	bl	8000ae4 <__aeabi_dcmplt>
 800947e:	b110      	cbz	r0, 8009486 <_printf_float+0x86>
 8009480:	232d      	movs	r3, #45	@ 0x2d
 8009482:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009486:	4a91      	ldr	r2, [pc, #580]	@ (80096cc <_printf_float+0x2cc>)
 8009488:	4b91      	ldr	r3, [pc, #580]	@ (80096d0 <_printf_float+0x2d0>)
 800948a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800948e:	bf8c      	ite	hi
 8009490:	4690      	movhi	r8, r2
 8009492:	4698      	movls	r8, r3
 8009494:	2303      	movs	r3, #3
 8009496:	f04f 0900 	mov.w	r9, #0
 800949a:	6123      	str	r3, [r4, #16]
 800949c:	f02b 0304 	bic.w	r3, fp, #4
 80094a0:	6023      	str	r3, [r4, #0]
 80094a2:	4633      	mov	r3, r6
 80094a4:	aa0b      	add	r2, sp, #44	@ 0x2c
 80094a6:	4621      	mov	r1, r4
 80094a8:	4628      	mov	r0, r5
 80094aa:	9700      	str	r7, [sp, #0]
 80094ac:	f000 f9d2 	bl	8009854 <_printf_common>
 80094b0:	3001      	adds	r0, #1
 80094b2:	f040 808d 	bne.w	80095d0 <_printf_float+0x1d0>
 80094b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80094ba:	b00d      	add	sp, #52	@ 0x34
 80094bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094c0:	4642      	mov	r2, r8
 80094c2:	464b      	mov	r3, r9
 80094c4:	4640      	mov	r0, r8
 80094c6:	4649      	mov	r1, r9
 80094c8:	f7f7 fb34 	bl	8000b34 <__aeabi_dcmpun>
 80094cc:	b140      	cbz	r0, 80094e0 <_printf_float+0xe0>
 80094ce:	464b      	mov	r3, r9
 80094d0:	4a80      	ldr	r2, [pc, #512]	@ (80096d4 <_printf_float+0x2d4>)
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	bfbc      	itt	lt
 80094d6:	232d      	movlt	r3, #45	@ 0x2d
 80094d8:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80094dc:	4b7e      	ldr	r3, [pc, #504]	@ (80096d8 <_printf_float+0x2d8>)
 80094de:	e7d4      	b.n	800948a <_printf_float+0x8a>
 80094e0:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80094e4:	6863      	ldr	r3, [r4, #4]
 80094e6:	9206      	str	r2, [sp, #24]
 80094e8:	1c5a      	adds	r2, r3, #1
 80094ea:	d13b      	bne.n	8009564 <_printf_float+0x164>
 80094ec:	2306      	movs	r3, #6
 80094ee:	6063      	str	r3, [r4, #4]
 80094f0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80094f4:	2300      	movs	r3, #0
 80094f6:	4628      	mov	r0, r5
 80094f8:	6022      	str	r2, [r4, #0]
 80094fa:	9303      	str	r3, [sp, #12]
 80094fc:	ab0a      	add	r3, sp, #40	@ 0x28
 80094fe:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009502:	ab09      	add	r3, sp, #36	@ 0x24
 8009504:	ec49 8b10 	vmov	d0, r8, r9
 8009508:	9300      	str	r3, [sp, #0]
 800950a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800950e:	6861      	ldr	r1, [r4, #4]
 8009510:	f7ff fed8 	bl	80092c4 <__cvt>
 8009514:	9b06      	ldr	r3, [sp, #24]
 8009516:	4680      	mov	r8, r0
 8009518:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800951a:	2b47      	cmp	r3, #71	@ 0x47
 800951c:	d129      	bne.n	8009572 <_printf_float+0x172>
 800951e:	1cc8      	adds	r0, r1, #3
 8009520:	db02      	blt.n	8009528 <_printf_float+0x128>
 8009522:	6863      	ldr	r3, [r4, #4]
 8009524:	4299      	cmp	r1, r3
 8009526:	dd41      	ble.n	80095ac <_printf_float+0x1ac>
 8009528:	f1aa 0a02 	sub.w	sl, sl, #2
 800952c:	fa5f fa8a 	uxtb.w	sl, sl
 8009530:	3901      	subs	r1, #1
 8009532:	4652      	mov	r2, sl
 8009534:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009538:	9109      	str	r1, [sp, #36]	@ 0x24
 800953a:	f7ff ff28 	bl	800938e <__exponent>
 800953e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009540:	4681      	mov	r9, r0
 8009542:	1813      	adds	r3, r2, r0
 8009544:	2a01      	cmp	r2, #1
 8009546:	6123      	str	r3, [r4, #16]
 8009548:	dc02      	bgt.n	8009550 <_printf_float+0x150>
 800954a:	6822      	ldr	r2, [r4, #0]
 800954c:	07d2      	lsls	r2, r2, #31
 800954e:	d501      	bpl.n	8009554 <_printf_float+0x154>
 8009550:	3301      	adds	r3, #1
 8009552:	6123      	str	r3, [r4, #16]
 8009554:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009558:	2b00      	cmp	r3, #0
 800955a:	d0a2      	beq.n	80094a2 <_printf_float+0xa2>
 800955c:	232d      	movs	r3, #45	@ 0x2d
 800955e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009562:	e79e      	b.n	80094a2 <_printf_float+0xa2>
 8009564:	9a06      	ldr	r2, [sp, #24]
 8009566:	2a47      	cmp	r2, #71	@ 0x47
 8009568:	d1c2      	bne.n	80094f0 <_printf_float+0xf0>
 800956a:	2b00      	cmp	r3, #0
 800956c:	d1c0      	bne.n	80094f0 <_printf_float+0xf0>
 800956e:	2301      	movs	r3, #1
 8009570:	e7bd      	b.n	80094ee <_printf_float+0xee>
 8009572:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009576:	d9db      	bls.n	8009530 <_printf_float+0x130>
 8009578:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800957c:	d118      	bne.n	80095b0 <_printf_float+0x1b0>
 800957e:	2900      	cmp	r1, #0
 8009580:	6863      	ldr	r3, [r4, #4]
 8009582:	dd0b      	ble.n	800959c <_printf_float+0x19c>
 8009584:	6121      	str	r1, [r4, #16]
 8009586:	b913      	cbnz	r3, 800958e <_printf_float+0x18e>
 8009588:	6822      	ldr	r2, [r4, #0]
 800958a:	07d0      	lsls	r0, r2, #31
 800958c:	d502      	bpl.n	8009594 <_printf_float+0x194>
 800958e:	3301      	adds	r3, #1
 8009590:	440b      	add	r3, r1
 8009592:	6123      	str	r3, [r4, #16]
 8009594:	f04f 0900 	mov.w	r9, #0
 8009598:	65a1      	str	r1, [r4, #88]	@ 0x58
 800959a:	e7db      	b.n	8009554 <_printf_float+0x154>
 800959c:	b913      	cbnz	r3, 80095a4 <_printf_float+0x1a4>
 800959e:	6822      	ldr	r2, [r4, #0]
 80095a0:	07d2      	lsls	r2, r2, #31
 80095a2:	d501      	bpl.n	80095a8 <_printf_float+0x1a8>
 80095a4:	3302      	adds	r3, #2
 80095a6:	e7f4      	b.n	8009592 <_printf_float+0x192>
 80095a8:	2301      	movs	r3, #1
 80095aa:	e7f2      	b.n	8009592 <_printf_float+0x192>
 80095ac:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80095b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80095b2:	4299      	cmp	r1, r3
 80095b4:	db05      	blt.n	80095c2 <_printf_float+0x1c2>
 80095b6:	6823      	ldr	r3, [r4, #0]
 80095b8:	6121      	str	r1, [r4, #16]
 80095ba:	07d8      	lsls	r0, r3, #31
 80095bc:	d5ea      	bpl.n	8009594 <_printf_float+0x194>
 80095be:	1c4b      	adds	r3, r1, #1
 80095c0:	e7e7      	b.n	8009592 <_printf_float+0x192>
 80095c2:	2900      	cmp	r1, #0
 80095c4:	bfd4      	ite	le
 80095c6:	f1c1 0202 	rsble	r2, r1, #2
 80095ca:	2201      	movgt	r2, #1
 80095cc:	4413      	add	r3, r2
 80095ce:	e7e0      	b.n	8009592 <_printf_float+0x192>
 80095d0:	6823      	ldr	r3, [r4, #0]
 80095d2:	055a      	lsls	r2, r3, #21
 80095d4:	d407      	bmi.n	80095e6 <_printf_float+0x1e6>
 80095d6:	6923      	ldr	r3, [r4, #16]
 80095d8:	4642      	mov	r2, r8
 80095da:	4631      	mov	r1, r6
 80095dc:	4628      	mov	r0, r5
 80095de:	47b8      	blx	r7
 80095e0:	3001      	adds	r0, #1
 80095e2:	d12b      	bne.n	800963c <_printf_float+0x23c>
 80095e4:	e767      	b.n	80094b6 <_printf_float+0xb6>
 80095e6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80095ea:	f240 80dd 	bls.w	80097a8 <_printf_float+0x3a8>
 80095ee:	2200      	movs	r2, #0
 80095f0:	2300      	movs	r3, #0
 80095f2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80095f6:	f7f7 fa6b 	bl	8000ad0 <__aeabi_dcmpeq>
 80095fa:	2800      	cmp	r0, #0
 80095fc:	d033      	beq.n	8009666 <_printf_float+0x266>
 80095fe:	2301      	movs	r3, #1
 8009600:	4a36      	ldr	r2, [pc, #216]	@ (80096dc <_printf_float+0x2dc>)
 8009602:	4631      	mov	r1, r6
 8009604:	4628      	mov	r0, r5
 8009606:	47b8      	blx	r7
 8009608:	3001      	adds	r0, #1
 800960a:	f43f af54 	beq.w	80094b6 <_printf_float+0xb6>
 800960e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009612:	4543      	cmp	r3, r8
 8009614:	db02      	blt.n	800961c <_printf_float+0x21c>
 8009616:	6823      	ldr	r3, [r4, #0]
 8009618:	07d8      	lsls	r0, r3, #31
 800961a:	d50f      	bpl.n	800963c <_printf_float+0x23c>
 800961c:	4631      	mov	r1, r6
 800961e:	4628      	mov	r0, r5
 8009620:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009624:	47b8      	blx	r7
 8009626:	3001      	adds	r0, #1
 8009628:	f43f af45 	beq.w	80094b6 <_printf_float+0xb6>
 800962c:	f04f 0900 	mov.w	r9, #0
 8009630:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8009634:	f104 0a1a 	add.w	sl, r4, #26
 8009638:	45c8      	cmp	r8, r9
 800963a:	dc09      	bgt.n	8009650 <_printf_float+0x250>
 800963c:	6823      	ldr	r3, [r4, #0]
 800963e:	079b      	lsls	r3, r3, #30
 8009640:	f100 8103 	bmi.w	800984a <_printf_float+0x44a>
 8009644:	68e0      	ldr	r0, [r4, #12]
 8009646:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009648:	4298      	cmp	r0, r3
 800964a:	bfb8      	it	lt
 800964c:	4618      	movlt	r0, r3
 800964e:	e734      	b.n	80094ba <_printf_float+0xba>
 8009650:	2301      	movs	r3, #1
 8009652:	4652      	mov	r2, sl
 8009654:	4631      	mov	r1, r6
 8009656:	4628      	mov	r0, r5
 8009658:	47b8      	blx	r7
 800965a:	3001      	adds	r0, #1
 800965c:	f43f af2b 	beq.w	80094b6 <_printf_float+0xb6>
 8009660:	f109 0901 	add.w	r9, r9, #1
 8009664:	e7e8      	b.n	8009638 <_printf_float+0x238>
 8009666:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009668:	2b00      	cmp	r3, #0
 800966a:	dc39      	bgt.n	80096e0 <_printf_float+0x2e0>
 800966c:	2301      	movs	r3, #1
 800966e:	4a1b      	ldr	r2, [pc, #108]	@ (80096dc <_printf_float+0x2dc>)
 8009670:	4631      	mov	r1, r6
 8009672:	4628      	mov	r0, r5
 8009674:	47b8      	blx	r7
 8009676:	3001      	adds	r0, #1
 8009678:	f43f af1d 	beq.w	80094b6 <_printf_float+0xb6>
 800967c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009680:	ea59 0303 	orrs.w	r3, r9, r3
 8009684:	d102      	bne.n	800968c <_printf_float+0x28c>
 8009686:	6823      	ldr	r3, [r4, #0]
 8009688:	07d9      	lsls	r1, r3, #31
 800968a:	d5d7      	bpl.n	800963c <_printf_float+0x23c>
 800968c:	4631      	mov	r1, r6
 800968e:	4628      	mov	r0, r5
 8009690:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009694:	47b8      	blx	r7
 8009696:	3001      	adds	r0, #1
 8009698:	f43f af0d 	beq.w	80094b6 <_printf_float+0xb6>
 800969c:	f04f 0a00 	mov.w	sl, #0
 80096a0:	f104 0b1a 	add.w	fp, r4, #26
 80096a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096a6:	425b      	negs	r3, r3
 80096a8:	4553      	cmp	r3, sl
 80096aa:	dc01      	bgt.n	80096b0 <_printf_float+0x2b0>
 80096ac:	464b      	mov	r3, r9
 80096ae:	e793      	b.n	80095d8 <_printf_float+0x1d8>
 80096b0:	2301      	movs	r3, #1
 80096b2:	465a      	mov	r2, fp
 80096b4:	4631      	mov	r1, r6
 80096b6:	4628      	mov	r0, r5
 80096b8:	47b8      	blx	r7
 80096ba:	3001      	adds	r0, #1
 80096bc:	f43f aefb 	beq.w	80094b6 <_printf_float+0xb6>
 80096c0:	f10a 0a01 	add.w	sl, sl, #1
 80096c4:	e7ee      	b.n	80096a4 <_printf_float+0x2a4>
 80096c6:	bf00      	nop
 80096c8:	7fefffff 	.word	0x7fefffff
 80096cc:	08023254 	.word	0x08023254
 80096d0:	08023250 	.word	0x08023250
 80096d4:	0802325c 	.word	0x0802325c
 80096d8:	08023258 	.word	0x08023258
 80096dc:	08023260 	.word	0x08023260
 80096e0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80096e2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80096e6:	4553      	cmp	r3, sl
 80096e8:	bfa8      	it	ge
 80096ea:	4653      	movge	r3, sl
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	4699      	mov	r9, r3
 80096f0:	dc36      	bgt.n	8009760 <_printf_float+0x360>
 80096f2:	f04f 0b00 	mov.w	fp, #0
 80096f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80096fa:	f104 021a 	add.w	r2, r4, #26
 80096fe:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009700:	9306      	str	r3, [sp, #24]
 8009702:	eba3 0309 	sub.w	r3, r3, r9
 8009706:	455b      	cmp	r3, fp
 8009708:	dc31      	bgt.n	800976e <_printf_float+0x36e>
 800970a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800970c:	459a      	cmp	sl, r3
 800970e:	dc3a      	bgt.n	8009786 <_printf_float+0x386>
 8009710:	6823      	ldr	r3, [r4, #0]
 8009712:	07da      	lsls	r2, r3, #31
 8009714:	d437      	bmi.n	8009786 <_printf_float+0x386>
 8009716:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009718:	ebaa 0903 	sub.w	r9, sl, r3
 800971c:	9b06      	ldr	r3, [sp, #24]
 800971e:	ebaa 0303 	sub.w	r3, sl, r3
 8009722:	4599      	cmp	r9, r3
 8009724:	bfa8      	it	ge
 8009726:	4699      	movge	r9, r3
 8009728:	f1b9 0f00 	cmp.w	r9, #0
 800972c:	dc33      	bgt.n	8009796 <_printf_float+0x396>
 800972e:	f04f 0800 	mov.w	r8, #0
 8009732:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009736:	f104 0b1a 	add.w	fp, r4, #26
 800973a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800973c:	ebaa 0303 	sub.w	r3, sl, r3
 8009740:	eba3 0309 	sub.w	r3, r3, r9
 8009744:	4543      	cmp	r3, r8
 8009746:	f77f af79 	ble.w	800963c <_printf_float+0x23c>
 800974a:	2301      	movs	r3, #1
 800974c:	465a      	mov	r2, fp
 800974e:	4631      	mov	r1, r6
 8009750:	4628      	mov	r0, r5
 8009752:	47b8      	blx	r7
 8009754:	3001      	adds	r0, #1
 8009756:	f43f aeae 	beq.w	80094b6 <_printf_float+0xb6>
 800975a:	f108 0801 	add.w	r8, r8, #1
 800975e:	e7ec      	b.n	800973a <_printf_float+0x33a>
 8009760:	4642      	mov	r2, r8
 8009762:	4631      	mov	r1, r6
 8009764:	4628      	mov	r0, r5
 8009766:	47b8      	blx	r7
 8009768:	3001      	adds	r0, #1
 800976a:	d1c2      	bne.n	80096f2 <_printf_float+0x2f2>
 800976c:	e6a3      	b.n	80094b6 <_printf_float+0xb6>
 800976e:	2301      	movs	r3, #1
 8009770:	4631      	mov	r1, r6
 8009772:	4628      	mov	r0, r5
 8009774:	9206      	str	r2, [sp, #24]
 8009776:	47b8      	blx	r7
 8009778:	3001      	adds	r0, #1
 800977a:	f43f ae9c 	beq.w	80094b6 <_printf_float+0xb6>
 800977e:	f10b 0b01 	add.w	fp, fp, #1
 8009782:	9a06      	ldr	r2, [sp, #24]
 8009784:	e7bb      	b.n	80096fe <_printf_float+0x2fe>
 8009786:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800978a:	4631      	mov	r1, r6
 800978c:	4628      	mov	r0, r5
 800978e:	47b8      	blx	r7
 8009790:	3001      	adds	r0, #1
 8009792:	d1c0      	bne.n	8009716 <_printf_float+0x316>
 8009794:	e68f      	b.n	80094b6 <_printf_float+0xb6>
 8009796:	9a06      	ldr	r2, [sp, #24]
 8009798:	464b      	mov	r3, r9
 800979a:	4631      	mov	r1, r6
 800979c:	4628      	mov	r0, r5
 800979e:	4442      	add	r2, r8
 80097a0:	47b8      	blx	r7
 80097a2:	3001      	adds	r0, #1
 80097a4:	d1c3      	bne.n	800972e <_printf_float+0x32e>
 80097a6:	e686      	b.n	80094b6 <_printf_float+0xb6>
 80097a8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80097ac:	f1ba 0f01 	cmp.w	sl, #1
 80097b0:	dc01      	bgt.n	80097b6 <_printf_float+0x3b6>
 80097b2:	07db      	lsls	r3, r3, #31
 80097b4:	d536      	bpl.n	8009824 <_printf_float+0x424>
 80097b6:	2301      	movs	r3, #1
 80097b8:	4642      	mov	r2, r8
 80097ba:	4631      	mov	r1, r6
 80097bc:	4628      	mov	r0, r5
 80097be:	47b8      	blx	r7
 80097c0:	3001      	adds	r0, #1
 80097c2:	f43f ae78 	beq.w	80094b6 <_printf_float+0xb6>
 80097c6:	4631      	mov	r1, r6
 80097c8:	4628      	mov	r0, r5
 80097ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80097ce:	47b8      	blx	r7
 80097d0:	3001      	adds	r0, #1
 80097d2:	f43f ae70 	beq.w	80094b6 <_printf_float+0xb6>
 80097d6:	2200      	movs	r2, #0
 80097d8:	2300      	movs	r3, #0
 80097da:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80097de:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80097e2:	f7f7 f975 	bl	8000ad0 <__aeabi_dcmpeq>
 80097e6:	b9c0      	cbnz	r0, 800981a <_printf_float+0x41a>
 80097e8:	4653      	mov	r3, sl
 80097ea:	f108 0201 	add.w	r2, r8, #1
 80097ee:	4631      	mov	r1, r6
 80097f0:	4628      	mov	r0, r5
 80097f2:	47b8      	blx	r7
 80097f4:	3001      	adds	r0, #1
 80097f6:	d10c      	bne.n	8009812 <_printf_float+0x412>
 80097f8:	e65d      	b.n	80094b6 <_printf_float+0xb6>
 80097fa:	2301      	movs	r3, #1
 80097fc:	465a      	mov	r2, fp
 80097fe:	4631      	mov	r1, r6
 8009800:	4628      	mov	r0, r5
 8009802:	47b8      	blx	r7
 8009804:	3001      	adds	r0, #1
 8009806:	f43f ae56 	beq.w	80094b6 <_printf_float+0xb6>
 800980a:	f108 0801 	add.w	r8, r8, #1
 800980e:	45d0      	cmp	r8, sl
 8009810:	dbf3      	blt.n	80097fa <_printf_float+0x3fa>
 8009812:	464b      	mov	r3, r9
 8009814:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009818:	e6df      	b.n	80095da <_printf_float+0x1da>
 800981a:	f04f 0800 	mov.w	r8, #0
 800981e:	f104 0b1a 	add.w	fp, r4, #26
 8009822:	e7f4      	b.n	800980e <_printf_float+0x40e>
 8009824:	2301      	movs	r3, #1
 8009826:	4642      	mov	r2, r8
 8009828:	e7e1      	b.n	80097ee <_printf_float+0x3ee>
 800982a:	2301      	movs	r3, #1
 800982c:	464a      	mov	r2, r9
 800982e:	4631      	mov	r1, r6
 8009830:	4628      	mov	r0, r5
 8009832:	47b8      	blx	r7
 8009834:	3001      	adds	r0, #1
 8009836:	f43f ae3e 	beq.w	80094b6 <_printf_float+0xb6>
 800983a:	f108 0801 	add.w	r8, r8, #1
 800983e:	68e3      	ldr	r3, [r4, #12]
 8009840:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009842:	1a5b      	subs	r3, r3, r1
 8009844:	4543      	cmp	r3, r8
 8009846:	dcf0      	bgt.n	800982a <_printf_float+0x42a>
 8009848:	e6fc      	b.n	8009644 <_printf_float+0x244>
 800984a:	f04f 0800 	mov.w	r8, #0
 800984e:	f104 0919 	add.w	r9, r4, #25
 8009852:	e7f4      	b.n	800983e <_printf_float+0x43e>

08009854 <_printf_common>:
 8009854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009858:	4616      	mov	r6, r2
 800985a:	4698      	mov	r8, r3
 800985c:	688a      	ldr	r2, [r1, #8]
 800985e:	4607      	mov	r7, r0
 8009860:	690b      	ldr	r3, [r1, #16]
 8009862:	460c      	mov	r4, r1
 8009864:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009868:	4293      	cmp	r3, r2
 800986a:	bfb8      	it	lt
 800986c:	4613      	movlt	r3, r2
 800986e:	6033      	str	r3, [r6, #0]
 8009870:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009874:	b10a      	cbz	r2, 800987a <_printf_common+0x26>
 8009876:	3301      	adds	r3, #1
 8009878:	6033      	str	r3, [r6, #0]
 800987a:	6823      	ldr	r3, [r4, #0]
 800987c:	0699      	lsls	r1, r3, #26
 800987e:	bf42      	ittt	mi
 8009880:	6833      	ldrmi	r3, [r6, #0]
 8009882:	3302      	addmi	r3, #2
 8009884:	6033      	strmi	r3, [r6, #0]
 8009886:	6825      	ldr	r5, [r4, #0]
 8009888:	f015 0506 	ands.w	r5, r5, #6
 800988c:	d106      	bne.n	800989c <_printf_common+0x48>
 800988e:	f104 0a19 	add.w	sl, r4, #25
 8009892:	68e3      	ldr	r3, [r4, #12]
 8009894:	6832      	ldr	r2, [r6, #0]
 8009896:	1a9b      	subs	r3, r3, r2
 8009898:	42ab      	cmp	r3, r5
 800989a:	dc2b      	bgt.n	80098f4 <_printf_common+0xa0>
 800989c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80098a0:	6822      	ldr	r2, [r4, #0]
 80098a2:	3b00      	subs	r3, #0
 80098a4:	bf18      	it	ne
 80098a6:	2301      	movne	r3, #1
 80098a8:	0692      	lsls	r2, r2, #26
 80098aa:	d430      	bmi.n	800990e <_printf_common+0xba>
 80098ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80098b0:	4641      	mov	r1, r8
 80098b2:	4638      	mov	r0, r7
 80098b4:	47c8      	blx	r9
 80098b6:	3001      	adds	r0, #1
 80098b8:	d023      	beq.n	8009902 <_printf_common+0xae>
 80098ba:	6823      	ldr	r3, [r4, #0]
 80098bc:	341a      	adds	r4, #26
 80098be:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 80098c2:	f003 0306 	and.w	r3, r3, #6
 80098c6:	2b04      	cmp	r3, #4
 80098c8:	bf0a      	itet	eq
 80098ca:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 80098ce:	2500      	movne	r5, #0
 80098d0:	6833      	ldreq	r3, [r6, #0]
 80098d2:	f04f 0600 	mov.w	r6, #0
 80098d6:	bf08      	it	eq
 80098d8:	1aed      	subeq	r5, r5, r3
 80098da:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80098de:	bf08      	it	eq
 80098e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80098e4:	4293      	cmp	r3, r2
 80098e6:	bfc4      	itt	gt
 80098e8:	1a9b      	subgt	r3, r3, r2
 80098ea:	18ed      	addgt	r5, r5, r3
 80098ec:	42b5      	cmp	r5, r6
 80098ee:	d11a      	bne.n	8009926 <_printf_common+0xd2>
 80098f0:	2000      	movs	r0, #0
 80098f2:	e008      	b.n	8009906 <_printf_common+0xb2>
 80098f4:	2301      	movs	r3, #1
 80098f6:	4652      	mov	r2, sl
 80098f8:	4641      	mov	r1, r8
 80098fa:	4638      	mov	r0, r7
 80098fc:	47c8      	blx	r9
 80098fe:	3001      	adds	r0, #1
 8009900:	d103      	bne.n	800990a <_printf_common+0xb6>
 8009902:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800990a:	3501      	adds	r5, #1
 800990c:	e7c1      	b.n	8009892 <_printf_common+0x3e>
 800990e:	18e1      	adds	r1, r4, r3
 8009910:	1c5a      	adds	r2, r3, #1
 8009912:	2030      	movs	r0, #48	@ 0x30
 8009914:	3302      	adds	r3, #2
 8009916:	4422      	add	r2, r4
 8009918:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800991c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009920:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009924:	e7c2      	b.n	80098ac <_printf_common+0x58>
 8009926:	2301      	movs	r3, #1
 8009928:	4622      	mov	r2, r4
 800992a:	4641      	mov	r1, r8
 800992c:	4638      	mov	r0, r7
 800992e:	47c8      	blx	r9
 8009930:	3001      	adds	r0, #1
 8009932:	d0e6      	beq.n	8009902 <_printf_common+0xae>
 8009934:	3601      	adds	r6, #1
 8009936:	e7d9      	b.n	80098ec <_printf_common+0x98>

08009938 <_printf_i>:
 8009938:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800993c:	7e0f      	ldrb	r7, [r1, #24]
 800993e:	4691      	mov	r9, r2
 8009940:	4680      	mov	r8, r0
 8009942:	460c      	mov	r4, r1
 8009944:	2f78      	cmp	r7, #120	@ 0x78
 8009946:	469a      	mov	sl, r3
 8009948:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800994a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800994e:	d807      	bhi.n	8009960 <_printf_i+0x28>
 8009950:	2f62      	cmp	r7, #98	@ 0x62
 8009952:	d80a      	bhi.n	800996a <_printf_i+0x32>
 8009954:	2f00      	cmp	r7, #0
 8009956:	f000 80d1 	beq.w	8009afc <_printf_i+0x1c4>
 800995a:	2f58      	cmp	r7, #88	@ 0x58
 800995c:	f000 80b8 	beq.w	8009ad0 <_printf_i+0x198>
 8009960:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009964:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009968:	e03a      	b.n	80099e0 <_printf_i+0xa8>
 800996a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800996e:	2b15      	cmp	r3, #21
 8009970:	d8f6      	bhi.n	8009960 <_printf_i+0x28>
 8009972:	a101      	add	r1, pc, #4	@ (adr r1, 8009978 <_printf_i+0x40>)
 8009974:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009978:	080099d1 	.word	0x080099d1
 800997c:	080099e5 	.word	0x080099e5
 8009980:	08009961 	.word	0x08009961
 8009984:	08009961 	.word	0x08009961
 8009988:	08009961 	.word	0x08009961
 800998c:	08009961 	.word	0x08009961
 8009990:	080099e5 	.word	0x080099e5
 8009994:	08009961 	.word	0x08009961
 8009998:	08009961 	.word	0x08009961
 800999c:	08009961 	.word	0x08009961
 80099a0:	08009961 	.word	0x08009961
 80099a4:	08009ae3 	.word	0x08009ae3
 80099a8:	08009a0f 	.word	0x08009a0f
 80099ac:	08009a9d 	.word	0x08009a9d
 80099b0:	08009961 	.word	0x08009961
 80099b4:	08009961 	.word	0x08009961
 80099b8:	08009b05 	.word	0x08009b05
 80099bc:	08009961 	.word	0x08009961
 80099c0:	08009a0f 	.word	0x08009a0f
 80099c4:	08009961 	.word	0x08009961
 80099c8:	08009961 	.word	0x08009961
 80099cc:	08009aa5 	.word	0x08009aa5
 80099d0:	6833      	ldr	r3, [r6, #0]
 80099d2:	1d1a      	adds	r2, r3, #4
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	6032      	str	r2, [r6, #0]
 80099d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80099dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80099e0:	2301      	movs	r3, #1
 80099e2:	e09c      	b.n	8009b1e <_printf_i+0x1e6>
 80099e4:	6833      	ldr	r3, [r6, #0]
 80099e6:	6820      	ldr	r0, [r4, #0]
 80099e8:	1d19      	adds	r1, r3, #4
 80099ea:	6031      	str	r1, [r6, #0]
 80099ec:	0606      	lsls	r6, r0, #24
 80099ee:	d501      	bpl.n	80099f4 <_printf_i+0xbc>
 80099f0:	681d      	ldr	r5, [r3, #0]
 80099f2:	e003      	b.n	80099fc <_printf_i+0xc4>
 80099f4:	0645      	lsls	r5, r0, #25
 80099f6:	d5fb      	bpl.n	80099f0 <_printf_i+0xb8>
 80099f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80099fc:	2d00      	cmp	r5, #0
 80099fe:	da03      	bge.n	8009a08 <_printf_i+0xd0>
 8009a00:	232d      	movs	r3, #45	@ 0x2d
 8009a02:	426d      	negs	r5, r5
 8009a04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009a08:	4858      	ldr	r0, [pc, #352]	@ (8009b6c <_printf_i+0x234>)
 8009a0a:	230a      	movs	r3, #10
 8009a0c:	e011      	b.n	8009a32 <_printf_i+0xfa>
 8009a0e:	6821      	ldr	r1, [r4, #0]
 8009a10:	6833      	ldr	r3, [r6, #0]
 8009a12:	0608      	lsls	r0, r1, #24
 8009a14:	f853 5b04 	ldr.w	r5, [r3], #4
 8009a18:	d402      	bmi.n	8009a20 <_printf_i+0xe8>
 8009a1a:	0649      	lsls	r1, r1, #25
 8009a1c:	bf48      	it	mi
 8009a1e:	b2ad      	uxthmi	r5, r5
 8009a20:	2f6f      	cmp	r7, #111	@ 0x6f
 8009a22:	6033      	str	r3, [r6, #0]
 8009a24:	4851      	ldr	r0, [pc, #324]	@ (8009b6c <_printf_i+0x234>)
 8009a26:	bf14      	ite	ne
 8009a28:	230a      	movne	r3, #10
 8009a2a:	2308      	moveq	r3, #8
 8009a2c:	2100      	movs	r1, #0
 8009a2e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009a32:	6866      	ldr	r6, [r4, #4]
 8009a34:	2e00      	cmp	r6, #0
 8009a36:	60a6      	str	r6, [r4, #8]
 8009a38:	db05      	blt.n	8009a46 <_printf_i+0x10e>
 8009a3a:	6821      	ldr	r1, [r4, #0]
 8009a3c:	432e      	orrs	r6, r5
 8009a3e:	f021 0104 	bic.w	r1, r1, #4
 8009a42:	6021      	str	r1, [r4, #0]
 8009a44:	d04b      	beq.n	8009ade <_printf_i+0x1a6>
 8009a46:	4616      	mov	r6, r2
 8009a48:	fbb5 f1f3 	udiv	r1, r5, r3
 8009a4c:	fb03 5711 	mls	r7, r3, r1, r5
 8009a50:	5dc7      	ldrb	r7, [r0, r7]
 8009a52:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009a56:	462f      	mov	r7, r5
 8009a58:	460d      	mov	r5, r1
 8009a5a:	42bb      	cmp	r3, r7
 8009a5c:	d9f4      	bls.n	8009a48 <_printf_i+0x110>
 8009a5e:	2b08      	cmp	r3, #8
 8009a60:	d10b      	bne.n	8009a7a <_printf_i+0x142>
 8009a62:	6823      	ldr	r3, [r4, #0]
 8009a64:	07df      	lsls	r7, r3, #31
 8009a66:	d508      	bpl.n	8009a7a <_printf_i+0x142>
 8009a68:	6923      	ldr	r3, [r4, #16]
 8009a6a:	6861      	ldr	r1, [r4, #4]
 8009a6c:	4299      	cmp	r1, r3
 8009a6e:	bfde      	ittt	le
 8009a70:	2330      	movle	r3, #48	@ 0x30
 8009a72:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009a76:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8009a7a:	1b92      	subs	r2, r2, r6
 8009a7c:	6122      	str	r2, [r4, #16]
 8009a7e:	464b      	mov	r3, r9
 8009a80:	aa03      	add	r2, sp, #12
 8009a82:	4621      	mov	r1, r4
 8009a84:	4640      	mov	r0, r8
 8009a86:	f8cd a000 	str.w	sl, [sp]
 8009a8a:	f7ff fee3 	bl	8009854 <_printf_common>
 8009a8e:	3001      	adds	r0, #1
 8009a90:	d14a      	bne.n	8009b28 <_printf_i+0x1f0>
 8009a92:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009a96:	b004      	add	sp, #16
 8009a98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a9c:	6823      	ldr	r3, [r4, #0]
 8009a9e:	f043 0320 	orr.w	r3, r3, #32
 8009aa2:	6023      	str	r3, [r4, #0]
 8009aa4:	2778      	movs	r7, #120	@ 0x78
 8009aa6:	4832      	ldr	r0, [pc, #200]	@ (8009b70 <_printf_i+0x238>)
 8009aa8:	6823      	ldr	r3, [r4, #0]
 8009aaa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009aae:	061f      	lsls	r7, r3, #24
 8009ab0:	6831      	ldr	r1, [r6, #0]
 8009ab2:	f851 5b04 	ldr.w	r5, [r1], #4
 8009ab6:	d402      	bmi.n	8009abe <_printf_i+0x186>
 8009ab8:	065f      	lsls	r7, r3, #25
 8009aba:	bf48      	it	mi
 8009abc:	b2ad      	uxthmi	r5, r5
 8009abe:	6031      	str	r1, [r6, #0]
 8009ac0:	07d9      	lsls	r1, r3, #31
 8009ac2:	bf44      	itt	mi
 8009ac4:	f043 0320 	orrmi.w	r3, r3, #32
 8009ac8:	6023      	strmi	r3, [r4, #0]
 8009aca:	b11d      	cbz	r5, 8009ad4 <_printf_i+0x19c>
 8009acc:	2310      	movs	r3, #16
 8009ace:	e7ad      	b.n	8009a2c <_printf_i+0xf4>
 8009ad0:	4826      	ldr	r0, [pc, #152]	@ (8009b6c <_printf_i+0x234>)
 8009ad2:	e7e9      	b.n	8009aa8 <_printf_i+0x170>
 8009ad4:	6823      	ldr	r3, [r4, #0]
 8009ad6:	f023 0320 	bic.w	r3, r3, #32
 8009ada:	6023      	str	r3, [r4, #0]
 8009adc:	e7f6      	b.n	8009acc <_printf_i+0x194>
 8009ade:	4616      	mov	r6, r2
 8009ae0:	e7bd      	b.n	8009a5e <_printf_i+0x126>
 8009ae2:	6833      	ldr	r3, [r6, #0]
 8009ae4:	6825      	ldr	r5, [r4, #0]
 8009ae6:	1d18      	adds	r0, r3, #4
 8009ae8:	6961      	ldr	r1, [r4, #20]
 8009aea:	6030      	str	r0, [r6, #0]
 8009aec:	062e      	lsls	r6, r5, #24
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	d501      	bpl.n	8009af6 <_printf_i+0x1be>
 8009af2:	6019      	str	r1, [r3, #0]
 8009af4:	e002      	b.n	8009afc <_printf_i+0x1c4>
 8009af6:	0668      	lsls	r0, r5, #25
 8009af8:	d5fb      	bpl.n	8009af2 <_printf_i+0x1ba>
 8009afa:	8019      	strh	r1, [r3, #0]
 8009afc:	2300      	movs	r3, #0
 8009afe:	4616      	mov	r6, r2
 8009b00:	6123      	str	r3, [r4, #16]
 8009b02:	e7bc      	b.n	8009a7e <_printf_i+0x146>
 8009b04:	6833      	ldr	r3, [r6, #0]
 8009b06:	2100      	movs	r1, #0
 8009b08:	1d1a      	adds	r2, r3, #4
 8009b0a:	6032      	str	r2, [r6, #0]
 8009b0c:	681e      	ldr	r6, [r3, #0]
 8009b0e:	6862      	ldr	r2, [r4, #4]
 8009b10:	4630      	mov	r0, r6
 8009b12:	f000 f9d1 	bl	8009eb8 <memchr>
 8009b16:	b108      	cbz	r0, 8009b1c <_printf_i+0x1e4>
 8009b18:	1b80      	subs	r0, r0, r6
 8009b1a:	6060      	str	r0, [r4, #4]
 8009b1c:	6863      	ldr	r3, [r4, #4]
 8009b1e:	6123      	str	r3, [r4, #16]
 8009b20:	2300      	movs	r3, #0
 8009b22:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009b26:	e7aa      	b.n	8009a7e <_printf_i+0x146>
 8009b28:	6923      	ldr	r3, [r4, #16]
 8009b2a:	4632      	mov	r2, r6
 8009b2c:	4649      	mov	r1, r9
 8009b2e:	4640      	mov	r0, r8
 8009b30:	47d0      	blx	sl
 8009b32:	3001      	adds	r0, #1
 8009b34:	d0ad      	beq.n	8009a92 <_printf_i+0x15a>
 8009b36:	6823      	ldr	r3, [r4, #0]
 8009b38:	079b      	lsls	r3, r3, #30
 8009b3a:	d413      	bmi.n	8009b64 <_printf_i+0x22c>
 8009b3c:	68e0      	ldr	r0, [r4, #12]
 8009b3e:	9b03      	ldr	r3, [sp, #12]
 8009b40:	4298      	cmp	r0, r3
 8009b42:	bfb8      	it	lt
 8009b44:	4618      	movlt	r0, r3
 8009b46:	e7a6      	b.n	8009a96 <_printf_i+0x15e>
 8009b48:	2301      	movs	r3, #1
 8009b4a:	4632      	mov	r2, r6
 8009b4c:	4649      	mov	r1, r9
 8009b4e:	4640      	mov	r0, r8
 8009b50:	47d0      	blx	sl
 8009b52:	3001      	adds	r0, #1
 8009b54:	d09d      	beq.n	8009a92 <_printf_i+0x15a>
 8009b56:	3501      	adds	r5, #1
 8009b58:	68e3      	ldr	r3, [r4, #12]
 8009b5a:	9903      	ldr	r1, [sp, #12]
 8009b5c:	1a5b      	subs	r3, r3, r1
 8009b5e:	42ab      	cmp	r3, r5
 8009b60:	dcf2      	bgt.n	8009b48 <_printf_i+0x210>
 8009b62:	e7eb      	b.n	8009b3c <_printf_i+0x204>
 8009b64:	2500      	movs	r5, #0
 8009b66:	f104 0619 	add.w	r6, r4, #25
 8009b6a:	e7f5      	b.n	8009b58 <_printf_i+0x220>
 8009b6c:	08023262 	.word	0x08023262
 8009b70:	08023273 	.word	0x08023273

08009b74 <sniprintf>:
 8009b74:	b40c      	push	{r2, r3}
 8009b76:	4b19      	ldr	r3, [pc, #100]	@ (8009bdc <sniprintf+0x68>)
 8009b78:	b530      	push	{r4, r5, lr}
 8009b7a:	1e0c      	subs	r4, r1, #0
 8009b7c:	b09d      	sub	sp, #116	@ 0x74
 8009b7e:	681d      	ldr	r5, [r3, #0]
 8009b80:	da08      	bge.n	8009b94 <sniprintf+0x20>
 8009b82:	238b      	movs	r3, #139	@ 0x8b
 8009b84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009b88:	602b      	str	r3, [r5, #0]
 8009b8a:	b01d      	add	sp, #116	@ 0x74
 8009b8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009b90:	b002      	add	sp, #8
 8009b92:	4770      	bx	lr
 8009b94:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009b98:	9002      	str	r0, [sp, #8]
 8009b9a:	9006      	str	r0, [sp, #24]
 8009b9c:	a902      	add	r1, sp, #8
 8009b9e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009ba2:	f04f 0300 	mov.w	r3, #0
 8009ba6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009ba8:	4628      	mov	r0, r5
 8009baa:	931b      	str	r3, [sp, #108]	@ 0x6c
 8009bac:	bf14      	ite	ne
 8009bae:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8009bb2:	4623      	moveq	r3, r4
 8009bb4:	9304      	str	r3, [sp, #16]
 8009bb6:	9307      	str	r3, [sp, #28]
 8009bb8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009bbc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009bc0:	ab21      	add	r3, sp, #132	@ 0x84
 8009bc2:	9301      	str	r3, [sp, #4]
 8009bc4:	f001 f84e 	bl	800ac64 <_svfiprintf_r>
 8009bc8:	1c43      	adds	r3, r0, #1
 8009bca:	bfbc      	itt	lt
 8009bcc:	238b      	movlt	r3, #139	@ 0x8b
 8009bce:	602b      	strlt	r3, [r5, #0]
 8009bd0:	2c00      	cmp	r4, #0
 8009bd2:	d0da      	beq.n	8009b8a <sniprintf+0x16>
 8009bd4:	9b02      	ldr	r3, [sp, #8]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	701a      	strb	r2, [r3, #0]
 8009bda:	e7d6      	b.n	8009b8a <sniprintf+0x16>
 8009bdc:	2000002c 	.word	0x2000002c

08009be0 <std>:
 8009be0:	2300      	movs	r3, #0
 8009be2:	b510      	push	{r4, lr}
 8009be4:	4604      	mov	r4, r0
 8009be6:	6083      	str	r3, [r0, #8]
 8009be8:	8181      	strh	r1, [r0, #12]
 8009bea:	4619      	mov	r1, r3
 8009bec:	6643      	str	r3, [r0, #100]	@ 0x64
 8009bee:	81c2      	strh	r2, [r0, #14]
 8009bf0:	2208      	movs	r2, #8
 8009bf2:	6183      	str	r3, [r0, #24]
 8009bf4:	e9c0 3300 	strd	r3, r3, [r0]
 8009bf8:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009bfc:	305c      	adds	r0, #92	@ 0x5c
 8009bfe:	f000 f921 	bl	8009e44 <memset>
 8009c02:	4b0d      	ldr	r3, [pc, #52]	@ (8009c38 <std+0x58>)
 8009c04:	6224      	str	r4, [r4, #32]
 8009c06:	6263      	str	r3, [r4, #36]	@ 0x24
 8009c08:	4b0c      	ldr	r3, [pc, #48]	@ (8009c3c <std+0x5c>)
 8009c0a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009c0c:	4b0c      	ldr	r3, [pc, #48]	@ (8009c40 <std+0x60>)
 8009c0e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009c10:	4b0c      	ldr	r3, [pc, #48]	@ (8009c44 <std+0x64>)
 8009c12:	6323      	str	r3, [r4, #48]	@ 0x30
 8009c14:	4b0c      	ldr	r3, [pc, #48]	@ (8009c48 <std+0x68>)
 8009c16:	429c      	cmp	r4, r3
 8009c18:	d006      	beq.n	8009c28 <std+0x48>
 8009c1a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009c1e:	4294      	cmp	r4, r2
 8009c20:	d002      	beq.n	8009c28 <std+0x48>
 8009c22:	33d0      	adds	r3, #208	@ 0xd0
 8009c24:	429c      	cmp	r4, r3
 8009c26:	d105      	bne.n	8009c34 <std+0x54>
 8009c28:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009c2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c30:	f000 b93a 	b.w	8009ea8 <__retarget_lock_init_recursive>
 8009c34:	bd10      	pop	{r4, pc}
 8009c36:	bf00      	nop
 8009c38:	0800baa9 	.word	0x0800baa9
 8009c3c:	0800bacb 	.word	0x0800bacb
 8009c40:	0800bb03 	.word	0x0800bb03
 8009c44:	0800bb27 	.word	0x0800bb27
 8009c48:	20000674 	.word	0x20000674

08009c4c <stdio_exit_handler>:
 8009c4c:	4a02      	ldr	r2, [pc, #8]	@ (8009c58 <stdio_exit_handler+0xc>)
 8009c4e:	4903      	ldr	r1, [pc, #12]	@ (8009c5c <stdio_exit_handler+0x10>)
 8009c50:	4803      	ldr	r0, [pc, #12]	@ (8009c60 <stdio_exit_handler+0x14>)
 8009c52:	f000 b869 	b.w	8009d28 <_fwalk_sglue>
 8009c56:	bf00      	nop
 8009c58:	20000020 	.word	0x20000020
 8009c5c:	0800b33d 	.word	0x0800b33d
 8009c60:	20000030 	.word	0x20000030

08009c64 <cleanup_stdio>:
 8009c64:	6841      	ldr	r1, [r0, #4]
 8009c66:	4b0c      	ldr	r3, [pc, #48]	@ (8009c98 <cleanup_stdio+0x34>)
 8009c68:	4299      	cmp	r1, r3
 8009c6a:	b510      	push	{r4, lr}
 8009c6c:	4604      	mov	r4, r0
 8009c6e:	d001      	beq.n	8009c74 <cleanup_stdio+0x10>
 8009c70:	f001 fb64 	bl	800b33c <_fflush_r>
 8009c74:	68a1      	ldr	r1, [r4, #8]
 8009c76:	4b09      	ldr	r3, [pc, #36]	@ (8009c9c <cleanup_stdio+0x38>)
 8009c78:	4299      	cmp	r1, r3
 8009c7a:	d002      	beq.n	8009c82 <cleanup_stdio+0x1e>
 8009c7c:	4620      	mov	r0, r4
 8009c7e:	f001 fb5d 	bl	800b33c <_fflush_r>
 8009c82:	68e1      	ldr	r1, [r4, #12]
 8009c84:	4b06      	ldr	r3, [pc, #24]	@ (8009ca0 <cleanup_stdio+0x3c>)
 8009c86:	4299      	cmp	r1, r3
 8009c88:	d004      	beq.n	8009c94 <cleanup_stdio+0x30>
 8009c8a:	4620      	mov	r0, r4
 8009c8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c90:	f001 bb54 	b.w	800b33c <_fflush_r>
 8009c94:	bd10      	pop	{r4, pc}
 8009c96:	bf00      	nop
 8009c98:	20000674 	.word	0x20000674
 8009c9c:	200006dc 	.word	0x200006dc
 8009ca0:	20000744 	.word	0x20000744

08009ca4 <global_stdio_init.part.0>:
 8009ca4:	b510      	push	{r4, lr}
 8009ca6:	4b0b      	ldr	r3, [pc, #44]	@ (8009cd4 <global_stdio_init.part.0+0x30>)
 8009ca8:	2104      	movs	r1, #4
 8009caa:	4c0b      	ldr	r4, [pc, #44]	@ (8009cd8 <global_stdio_init.part.0+0x34>)
 8009cac:	4a0b      	ldr	r2, [pc, #44]	@ (8009cdc <global_stdio_init.part.0+0x38>)
 8009cae:	4620      	mov	r0, r4
 8009cb0:	601a      	str	r2, [r3, #0]
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	f7ff ff94 	bl	8009be0 <std>
 8009cb8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009cbc:	2201      	movs	r2, #1
 8009cbe:	2109      	movs	r1, #9
 8009cc0:	f7ff ff8e 	bl	8009be0 <std>
 8009cc4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009cc8:	2202      	movs	r2, #2
 8009cca:	2112      	movs	r1, #18
 8009ccc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009cd0:	f7ff bf86 	b.w	8009be0 <std>
 8009cd4:	200007ac 	.word	0x200007ac
 8009cd8:	20000674 	.word	0x20000674
 8009cdc:	08009c4d 	.word	0x08009c4d

08009ce0 <__sfp_lock_acquire>:
 8009ce0:	4801      	ldr	r0, [pc, #4]	@ (8009ce8 <__sfp_lock_acquire+0x8>)
 8009ce2:	f000 b8e2 	b.w	8009eaa <__retarget_lock_acquire_recursive>
 8009ce6:	bf00      	nop
 8009ce8:	200007b1 	.word	0x200007b1

08009cec <__sfp_lock_release>:
 8009cec:	4801      	ldr	r0, [pc, #4]	@ (8009cf4 <__sfp_lock_release+0x8>)
 8009cee:	f000 b8dd 	b.w	8009eac <__retarget_lock_release_recursive>
 8009cf2:	bf00      	nop
 8009cf4:	200007b1 	.word	0x200007b1

08009cf8 <__sinit>:
 8009cf8:	b510      	push	{r4, lr}
 8009cfa:	4604      	mov	r4, r0
 8009cfc:	f7ff fff0 	bl	8009ce0 <__sfp_lock_acquire>
 8009d00:	6a23      	ldr	r3, [r4, #32]
 8009d02:	b11b      	cbz	r3, 8009d0c <__sinit+0x14>
 8009d04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d08:	f7ff bff0 	b.w	8009cec <__sfp_lock_release>
 8009d0c:	4b04      	ldr	r3, [pc, #16]	@ (8009d20 <__sinit+0x28>)
 8009d0e:	6223      	str	r3, [r4, #32]
 8009d10:	4b04      	ldr	r3, [pc, #16]	@ (8009d24 <__sinit+0x2c>)
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d1f5      	bne.n	8009d04 <__sinit+0xc>
 8009d18:	f7ff ffc4 	bl	8009ca4 <global_stdio_init.part.0>
 8009d1c:	e7f2      	b.n	8009d04 <__sinit+0xc>
 8009d1e:	bf00      	nop
 8009d20:	08009c65 	.word	0x08009c65
 8009d24:	200007ac 	.word	0x200007ac

08009d28 <_fwalk_sglue>:
 8009d28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d2c:	4607      	mov	r7, r0
 8009d2e:	4688      	mov	r8, r1
 8009d30:	4614      	mov	r4, r2
 8009d32:	2600      	movs	r6, #0
 8009d34:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009d38:	f1b9 0901 	subs.w	r9, r9, #1
 8009d3c:	d505      	bpl.n	8009d4a <_fwalk_sglue+0x22>
 8009d3e:	6824      	ldr	r4, [r4, #0]
 8009d40:	2c00      	cmp	r4, #0
 8009d42:	d1f7      	bne.n	8009d34 <_fwalk_sglue+0xc>
 8009d44:	4630      	mov	r0, r6
 8009d46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d4a:	89ab      	ldrh	r3, [r5, #12]
 8009d4c:	2b01      	cmp	r3, #1
 8009d4e:	d907      	bls.n	8009d60 <_fwalk_sglue+0x38>
 8009d50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009d54:	3301      	adds	r3, #1
 8009d56:	d003      	beq.n	8009d60 <_fwalk_sglue+0x38>
 8009d58:	4629      	mov	r1, r5
 8009d5a:	4638      	mov	r0, r7
 8009d5c:	47c0      	blx	r8
 8009d5e:	4306      	orrs	r6, r0
 8009d60:	3568      	adds	r5, #104	@ 0x68
 8009d62:	e7e9      	b.n	8009d38 <_fwalk_sglue+0x10>

08009d64 <iprintf>:
 8009d64:	b40f      	push	{r0, r1, r2, r3}
 8009d66:	b507      	push	{r0, r1, r2, lr}
 8009d68:	4906      	ldr	r1, [pc, #24]	@ (8009d84 <iprintf+0x20>)
 8009d6a:	ab04      	add	r3, sp, #16
 8009d6c:	6808      	ldr	r0, [r1, #0]
 8009d6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d72:	6881      	ldr	r1, [r0, #8]
 8009d74:	9301      	str	r3, [sp, #4]
 8009d76:	f001 f89b 	bl	800aeb0 <_vfiprintf_r>
 8009d7a:	b003      	add	sp, #12
 8009d7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d80:	b004      	add	sp, #16
 8009d82:	4770      	bx	lr
 8009d84:	2000002c 	.word	0x2000002c

08009d88 <_puts_r>:
 8009d88:	6a03      	ldr	r3, [r0, #32]
 8009d8a:	b570      	push	{r4, r5, r6, lr}
 8009d8c:	4605      	mov	r5, r0
 8009d8e:	460e      	mov	r6, r1
 8009d90:	6884      	ldr	r4, [r0, #8]
 8009d92:	b90b      	cbnz	r3, 8009d98 <_puts_r+0x10>
 8009d94:	f7ff ffb0 	bl	8009cf8 <__sinit>
 8009d98:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009d9a:	07db      	lsls	r3, r3, #31
 8009d9c:	d405      	bmi.n	8009daa <_puts_r+0x22>
 8009d9e:	89a3      	ldrh	r3, [r4, #12]
 8009da0:	0598      	lsls	r0, r3, #22
 8009da2:	d402      	bmi.n	8009daa <_puts_r+0x22>
 8009da4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009da6:	f000 f880 	bl	8009eaa <__retarget_lock_acquire_recursive>
 8009daa:	89a3      	ldrh	r3, [r4, #12]
 8009dac:	0719      	lsls	r1, r3, #28
 8009dae:	d502      	bpl.n	8009db6 <_puts_r+0x2e>
 8009db0:	6923      	ldr	r3, [r4, #16]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d135      	bne.n	8009e22 <_puts_r+0x9a>
 8009db6:	4621      	mov	r1, r4
 8009db8:	4628      	mov	r0, r5
 8009dba:	f001 ff25 	bl	800bc08 <__swsetup_r>
 8009dbe:	b380      	cbz	r0, 8009e22 <_puts_r+0x9a>
 8009dc0:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8009dc4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009dc6:	07da      	lsls	r2, r3, #31
 8009dc8:	d405      	bmi.n	8009dd6 <_puts_r+0x4e>
 8009dca:	89a3      	ldrh	r3, [r4, #12]
 8009dcc:	059b      	lsls	r3, r3, #22
 8009dce:	d402      	bmi.n	8009dd6 <_puts_r+0x4e>
 8009dd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009dd2:	f000 f86b 	bl	8009eac <__retarget_lock_release_recursive>
 8009dd6:	4628      	mov	r0, r5
 8009dd8:	bd70      	pop	{r4, r5, r6, pc}
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	da04      	bge.n	8009de8 <_puts_r+0x60>
 8009dde:	69a2      	ldr	r2, [r4, #24]
 8009de0:	429a      	cmp	r2, r3
 8009de2:	dc17      	bgt.n	8009e14 <_puts_r+0x8c>
 8009de4:	290a      	cmp	r1, #10
 8009de6:	d015      	beq.n	8009e14 <_puts_r+0x8c>
 8009de8:	6823      	ldr	r3, [r4, #0]
 8009dea:	1c5a      	adds	r2, r3, #1
 8009dec:	6022      	str	r2, [r4, #0]
 8009dee:	7019      	strb	r1, [r3, #0]
 8009df0:	68a3      	ldr	r3, [r4, #8]
 8009df2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009df6:	3b01      	subs	r3, #1
 8009df8:	60a3      	str	r3, [r4, #8]
 8009dfa:	2900      	cmp	r1, #0
 8009dfc:	d1ed      	bne.n	8009dda <_puts_r+0x52>
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	da11      	bge.n	8009e26 <_puts_r+0x9e>
 8009e02:	4622      	mov	r2, r4
 8009e04:	210a      	movs	r1, #10
 8009e06:	4628      	mov	r0, r5
 8009e08:	f001 febf 	bl	800bb8a <__swbuf_r>
 8009e0c:	3001      	adds	r0, #1
 8009e0e:	d0d7      	beq.n	8009dc0 <_puts_r+0x38>
 8009e10:	250a      	movs	r5, #10
 8009e12:	e7d7      	b.n	8009dc4 <_puts_r+0x3c>
 8009e14:	4622      	mov	r2, r4
 8009e16:	4628      	mov	r0, r5
 8009e18:	f001 feb7 	bl	800bb8a <__swbuf_r>
 8009e1c:	3001      	adds	r0, #1
 8009e1e:	d1e7      	bne.n	8009df0 <_puts_r+0x68>
 8009e20:	e7ce      	b.n	8009dc0 <_puts_r+0x38>
 8009e22:	3e01      	subs	r6, #1
 8009e24:	e7e4      	b.n	8009df0 <_puts_r+0x68>
 8009e26:	6823      	ldr	r3, [r4, #0]
 8009e28:	1c5a      	adds	r2, r3, #1
 8009e2a:	6022      	str	r2, [r4, #0]
 8009e2c:	220a      	movs	r2, #10
 8009e2e:	701a      	strb	r2, [r3, #0]
 8009e30:	e7ee      	b.n	8009e10 <_puts_r+0x88>
	...

08009e34 <puts>:
 8009e34:	4b02      	ldr	r3, [pc, #8]	@ (8009e40 <puts+0xc>)
 8009e36:	4601      	mov	r1, r0
 8009e38:	6818      	ldr	r0, [r3, #0]
 8009e3a:	f7ff bfa5 	b.w	8009d88 <_puts_r>
 8009e3e:	bf00      	nop
 8009e40:	2000002c 	.word	0x2000002c

08009e44 <memset>:
 8009e44:	4402      	add	r2, r0
 8009e46:	4603      	mov	r3, r0
 8009e48:	4293      	cmp	r3, r2
 8009e4a:	d100      	bne.n	8009e4e <memset+0xa>
 8009e4c:	4770      	bx	lr
 8009e4e:	f803 1b01 	strb.w	r1, [r3], #1
 8009e52:	e7f9      	b.n	8009e48 <memset+0x4>

08009e54 <__errno>:
 8009e54:	4b01      	ldr	r3, [pc, #4]	@ (8009e5c <__errno+0x8>)
 8009e56:	6818      	ldr	r0, [r3, #0]
 8009e58:	4770      	bx	lr
 8009e5a:	bf00      	nop
 8009e5c:	2000002c 	.word	0x2000002c

08009e60 <__libc_init_array>:
 8009e60:	b570      	push	{r4, r5, r6, lr}
 8009e62:	4d0d      	ldr	r5, [pc, #52]	@ (8009e98 <__libc_init_array+0x38>)
 8009e64:	2600      	movs	r6, #0
 8009e66:	4c0d      	ldr	r4, [pc, #52]	@ (8009e9c <__libc_init_array+0x3c>)
 8009e68:	1b64      	subs	r4, r4, r5
 8009e6a:	10a4      	asrs	r4, r4, #2
 8009e6c:	42a6      	cmp	r6, r4
 8009e6e:	d109      	bne.n	8009e84 <__libc_init_array+0x24>
 8009e70:	4d0b      	ldr	r5, [pc, #44]	@ (8009ea0 <__libc_init_array+0x40>)
 8009e72:	2600      	movs	r6, #0
 8009e74:	4c0b      	ldr	r4, [pc, #44]	@ (8009ea4 <__libc_init_array+0x44>)
 8009e76:	f002 f911 	bl	800c09c <_init>
 8009e7a:	1b64      	subs	r4, r4, r5
 8009e7c:	10a4      	asrs	r4, r4, #2
 8009e7e:	42a6      	cmp	r6, r4
 8009e80:	d105      	bne.n	8009e8e <__libc_init_array+0x2e>
 8009e82:	bd70      	pop	{r4, r5, r6, pc}
 8009e84:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e88:	3601      	adds	r6, #1
 8009e8a:	4798      	blx	r3
 8009e8c:	e7ee      	b.n	8009e6c <__libc_init_array+0xc>
 8009e8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e92:	3601      	adds	r6, #1
 8009e94:	4798      	blx	r3
 8009e96:	e7f2      	b.n	8009e7e <__libc_init_array+0x1e>
 8009e98:	080235cc 	.word	0x080235cc
 8009e9c:	080235cc 	.word	0x080235cc
 8009ea0:	080235cc 	.word	0x080235cc
 8009ea4:	080235d0 	.word	0x080235d0

08009ea8 <__retarget_lock_init_recursive>:
 8009ea8:	4770      	bx	lr

08009eaa <__retarget_lock_acquire_recursive>:
 8009eaa:	4770      	bx	lr

08009eac <__retarget_lock_release_recursive>:
 8009eac:	4770      	bx	lr
	...

08009eb0 <_localeconv_r>:
 8009eb0:	4800      	ldr	r0, [pc, #0]	@ (8009eb4 <_localeconv_r+0x4>)
 8009eb2:	4770      	bx	lr
 8009eb4:	2000016c 	.word	0x2000016c

08009eb8 <memchr>:
 8009eb8:	b2c9      	uxtb	r1, r1
 8009eba:	4603      	mov	r3, r0
 8009ebc:	4402      	add	r2, r0
 8009ebe:	b510      	push	{r4, lr}
 8009ec0:	4293      	cmp	r3, r2
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	d101      	bne.n	8009eca <memchr+0x12>
 8009ec6:	2000      	movs	r0, #0
 8009ec8:	e003      	b.n	8009ed2 <memchr+0x1a>
 8009eca:	7804      	ldrb	r4, [r0, #0]
 8009ecc:	3301      	adds	r3, #1
 8009ece:	428c      	cmp	r4, r1
 8009ed0:	d1f6      	bne.n	8009ec0 <memchr+0x8>
 8009ed2:	bd10      	pop	{r4, pc}

08009ed4 <memcpy>:
 8009ed4:	440a      	add	r2, r1
 8009ed6:	1e43      	subs	r3, r0, #1
 8009ed8:	4291      	cmp	r1, r2
 8009eda:	d100      	bne.n	8009ede <memcpy+0xa>
 8009edc:	4770      	bx	lr
 8009ede:	b510      	push	{r4, lr}
 8009ee0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ee4:	4291      	cmp	r1, r2
 8009ee6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009eea:	d1f9      	bne.n	8009ee0 <memcpy+0xc>
 8009eec:	bd10      	pop	{r4, pc}

08009eee <quorem>:
 8009eee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ef2:	6903      	ldr	r3, [r0, #16]
 8009ef4:	4607      	mov	r7, r0
 8009ef6:	690c      	ldr	r4, [r1, #16]
 8009ef8:	42a3      	cmp	r3, r4
 8009efa:	f2c0 8083 	blt.w	800a004 <quorem+0x116>
 8009efe:	3c01      	subs	r4, #1
 8009f00:	f100 0514 	add.w	r5, r0, #20
 8009f04:	f101 0814 	add.w	r8, r1, #20
 8009f08:	00a3      	lsls	r3, r4, #2
 8009f0a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009f0e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009f12:	9300      	str	r3, [sp, #0]
 8009f14:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009f18:	9301      	str	r3, [sp, #4]
 8009f1a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009f1e:	3301      	adds	r3, #1
 8009f20:	429a      	cmp	r2, r3
 8009f22:	fbb2 f6f3 	udiv	r6, r2, r3
 8009f26:	d331      	bcc.n	8009f8c <quorem+0x9e>
 8009f28:	f04f 0a00 	mov.w	sl, #0
 8009f2c:	46c4      	mov	ip, r8
 8009f2e:	46ae      	mov	lr, r5
 8009f30:	46d3      	mov	fp, sl
 8009f32:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009f36:	b298      	uxth	r0, r3
 8009f38:	45e1      	cmp	r9, ip
 8009f3a:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8009f3e:	fb06 a000 	mla	r0, r6, r0, sl
 8009f42:	ea4f 4210 	mov.w	r2, r0, lsr #16
 8009f46:	b280      	uxth	r0, r0
 8009f48:	fb06 2303 	mla	r3, r6, r3, r2
 8009f4c:	f8de 2000 	ldr.w	r2, [lr]
 8009f50:	b292      	uxth	r2, r2
 8009f52:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009f56:	eba2 0200 	sub.w	r2, r2, r0
 8009f5a:	b29b      	uxth	r3, r3
 8009f5c:	f8de 0000 	ldr.w	r0, [lr]
 8009f60:	445a      	add	r2, fp
 8009f62:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009f66:	b292      	uxth	r2, r2
 8009f68:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009f6c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009f70:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009f74:	f84e 2b04 	str.w	r2, [lr], #4
 8009f78:	d2db      	bcs.n	8009f32 <quorem+0x44>
 8009f7a:	9b00      	ldr	r3, [sp, #0]
 8009f7c:	58eb      	ldr	r3, [r5, r3]
 8009f7e:	b92b      	cbnz	r3, 8009f8c <quorem+0x9e>
 8009f80:	9b01      	ldr	r3, [sp, #4]
 8009f82:	3b04      	subs	r3, #4
 8009f84:	429d      	cmp	r5, r3
 8009f86:	461a      	mov	r2, r3
 8009f88:	d330      	bcc.n	8009fec <quorem+0xfe>
 8009f8a:	613c      	str	r4, [r7, #16]
 8009f8c:	4638      	mov	r0, r7
 8009f8e:	f001 fc7f 	bl	800b890 <__mcmp>
 8009f92:	2800      	cmp	r0, #0
 8009f94:	db26      	blt.n	8009fe4 <quorem+0xf6>
 8009f96:	4629      	mov	r1, r5
 8009f98:	2000      	movs	r0, #0
 8009f9a:	f858 2b04 	ldr.w	r2, [r8], #4
 8009f9e:	f8d1 c000 	ldr.w	ip, [r1]
 8009fa2:	fa1f fe82 	uxth.w	lr, r2
 8009fa6:	45c1      	cmp	r9, r8
 8009fa8:	fa1f f38c 	uxth.w	r3, ip
 8009fac:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8009fb0:	eba3 030e 	sub.w	r3, r3, lr
 8009fb4:	4403      	add	r3, r0
 8009fb6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009fba:	b29b      	uxth	r3, r3
 8009fbc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009fc0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009fc4:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009fc8:	f841 3b04 	str.w	r3, [r1], #4
 8009fcc:	d2e5      	bcs.n	8009f9a <quorem+0xac>
 8009fce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009fd2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009fd6:	b922      	cbnz	r2, 8009fe2 <quorem+0xf4>
 8009fd8:	3b04      	subs	r3, #4
 8009fda:	429d      	cmp	r5, r3
 8009fdc:	461a      	mov	r2, r3
 8009fde:	d30b      	bcc.n	8009ff8 <quorem+0x10a>
 8009fe0:	613c      	str	r4, [r7, #16]
 8009fe2:	3601      	adds	r6, #1
 8009fe4:	4630      	mov	r0, r6
 8009fe6:	b003      	add	sp, #12
 8009fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fec:	6812      	ldr	r2, [r2, #0]
 8009fee:	3b04      	subs	r3, #4
 8009ff0:	2a00      	cmp	r2, #0
 8009ff2:	d1ca      	bne.n	8009f8a <quorem+0x9c>
 8009ff4:	3c01      	subs	r4, #1
 8009ff6:	e7c5      	b.n	8009f84 <quorem+0x96>
 8009ff8:	6812      	ldr	r2, [r2, #0]
 8009ffa:	3b04      	subs	r3, #4
 8009ffc:	2a00      	cmp	r2, #0
 8009ffe:	d1ef      	bne.n	8009fe0 <quorem+0xf2>
 800a000:	3c01      	subs	r4, #1
 800a002:	e7ea      	b.n	8009fda <quorem+0xec>
 800a004:	2000      	movs	r0, #0
 800a006:	e7ee      	b.n	8009fe6 <quorem+0xf8>

0800a008 <_dtoa_r>:
 800a008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a00c:	69c7      	ldr	r7, [r0, #28]
 800a00e:	b097      	sub	sp, #92	@ 0x5c
 800a010:	4681      	mov	r9, r0
 800a012:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800a014:	9107      	str	r1, [sp, #28]
 800a016:	920c      	str	r2, [sp, #48]	@ 0x30
 800a018:	9311      	str	r3, [sp, #68]	@ 0x44
 800a01a:	ec55 4b10 	vmov	r4, r5, d0
 800a01e:	ed8d 0b04 	vstr	d0, [sp, #16]
 800a022:	b97f      	cbnz	r7, 800a044 <_dtoa_r+0x3c>
 800a024:	2010      	movs	r0, #16
 800a026:	f001 f85b 	bl	800b0e0 <malloc>
 800a02a:	4602      	mov	r2, r0
 800a02c:	f8c9 001c 	str.w	r0, [r9, #28]
 800a030:	b920      	cbnz	r0, 800a03c <_dtoa_r+0x34>
 800a032:	4ba9      	ldr	r3, [pc, #676]	@ (800a2d8 <_dtoa_r+0x2d0>)
 800a034:	21ef      	movs	r1, #239	@ 0xef
 800a036:	48a9      	ldr	r0, [pc, #676]	@ (800a2dc <_dtoa_r+0x2d4>)
 800a038:	f001 ff30 	bl	800be9c <__assert_func>
 800a03c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a040:	6007      	str	r7, [r0, #0]
 800a042:	60c7      	str	r7, [r0, #12]
 800a044:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a048:	6819      	ldr	r1, [r3, #0]
 800a04a:	b159      	cbz	r1, 800a064 <_dtoa_r+0x5c>
 800a04c:	685a      	ldr	r2, [r3, #4]
 800a04e:	2301      	movs	r3, #1
 800a050:	4648      	mov	r0, r9
 800a052:	4093      	lsls	r3, r2
 800a054:	604a      	str	r2, [r1, #4]
 800a056:	608b      	str	r3, [r1, #8]
 800a058:	f001 f9e4 	bl	800b424 <_Bfree>
 800a05c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a060:	2200      	movs	r2, #0
 800a062:	601a      	str	r2, [r3, #0]
 800a064:	1e2b      	subs	r3, r5, #0
 800a066:	bfb7      	itett	lt
 800a068:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a06c:	2300      	movge	r3, #0
 800a06e:	2201      	movlt	r2, #1
 800a070:	9305      	strlt	r3, [sp, #20]
 800a072:	bfa8      	it	ge
 800a074:	6033      	strge	r3, [r6, #0]
 800a076:	9f05      	ldr	r7, [sp, #20]
 800a078:	4b99      	ldr	r3, [pc, #612]	@ (800a2e0 <_dtoa_r+0x2d8>)
 800a07a:	bfb8      	it	lt
 800a07c:	6032      	strlt	r2, [r6, #0]
 800a07e:	43bb      	bics	r3, r7
 800a080:	d112      	bne.n	800a0a8 <_dtoa_r+0xa0>
 800a082:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a086:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a088:	6013      	str	r3, [r2, #0]
 800a08a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a08e:	4323      	orrs	r3, r4
 800a090:	f000 855a 	beq.w	800ab48 <_dtoa_r+0xb40>
 800a094:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a096:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800a2f4 <_dtoa_r+0x2ec>
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	f000 855c 	beq.w	800ab58 <_dtoa_r+0xb50>
 800a0a0:	f10a 0303 	add.w	r3, sl, #3
 800a0a4:	f000 bd56 	b.w	800ab54 <_dtoa_r+0xb4c>
 800a0a8:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	ec51 0b17 	vmov	r0, r1, d7
 800a0b4:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800a0b8:	f7f6 fd0a 	bl	8000ad0 <__aeabi_dcmpeq>
 800a0bc:	4680      	mov	r8, r0
 800a0be:	b158      	cbz	r0, 800a0d8 <_dtoa_r+0xd0>
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a0c4:	6013      	str	r3, [r2, #0]
 800a0c6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a0c8:	b113      	cbz	r3, 800a0d0 <_dtoa_r+0xc8>
 800a0ca:	4b86      	ldr	r3, [pc, #536]	@ (800a2e4 <_dtoa_r+0x2dc>)
 800a0cc:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a0ce:	6013      	str	r3, [r2, #0]
 800a0d0:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800a2f8 <_dtoa_r+0x2f0>
 800a0d4:	f000 bd40 	b.w	800ab58 <_dtoa_r+0xb50>
 800a0d8:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a0dc:	aa14      	add	r2, sp, #80	@ 0x50
 800a0de:	a915      	add	r1, sp, #84	@ 0x54
 800a0e0:	4648      	mov	r0, r9
 800a0e2:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800a0e6:	f001 fc87 	bl	800b9f8 <__d2b>
 800a0ea:	9002      	str	r0, [sp, #8]
 800a0ec:	2e00      	cmp	r6, #0
 800a0ee:	d076      	beq.n	800a1de <_dtoa_r+0x1d6>
 800a0f0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a0f2:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a0f6:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800a0fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a0fe:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a102:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a106:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a10a:	4619      	mov	r1, r3
 800a10c:	2200      	movs	r2, #0
 800a10e:	4b76      	ldr	r3, [pc, #472]	@ (800a2e8 <_dtoa_r+0x2e0>)
 800a110:	f7f6 f8be 	bl	8000290 <__aeabi_dsub>
 800a114:	a36a      	add	r3, pc, #424	@ (adr r3, 800a2c0 <_dtoa_r+0x2b8>)
 800a116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a11a:	f7f6 fa71 	bl	8000600 <__aeabi_dmul>
 800a11e:	a36a      	add	r3, pc, #424	@ (adr r3, 800a2c8 <_dtoa_r+0x2c0>)
 800a120:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a124:	f7f6 f8b6 	bl	8000294 <__adddf3>
 800a128:	4604      	mov	r4, r0
 800a12a:	460d      	mov	r5, r1
 800a12c:	4630      	mov	r0, r6
 800a12e:	f7f6 f9fd 	bl	800052c <__aeabi_i2d>
 800a132:	a367      	add	r3, pc, #412	@ (adr r3, 800a2d0 <_dtoa_r+0x2c8>)
 800a134:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a138:	f7f6 fa62 	bl	8000600 <__aeabi_dmul>
 800a13c:	4602      	mov	r2, r0
 800a13e:	460b      	mov	r3, r1
 800a140:	4620      	mov	r0, r4
 800a142:	4629      	mov	r1, r5
 800a144:	f7f6 f8a6 	bl	8000294 <__adddf3>
 800a148:	4604      	mov	r4, r0
 800a14a:	460d      	mov	r5, r1
 800a14c:	f7f6 fd08 	bl	8000b60 <__aeabi_d2iz>
 800a150:	2200      	movs	r2, #0
 800a152:	4607      	mov	r7, r0
 800a154:	2300      	movs	r3, #0
 800a156:	4620      	mov	r0, r4
 800a158:	4629      	mov	r1, r5
 800a15a:	f7f6 fcc3 	bl	8000ae4 <__aeabi_dcmplt>
 800a15e:	b140      	cbz	r0, 800a172 <_dtoa_r+0x16a>
 800a160:	4638      	mov	r0, r7
 800a162:	f7f6 f9e3 	bl	800052c <__aeabi_i2d>
 800a166:	4622      	mov	r2, r4
 800a168:	462b      	mov	r3, r5
 800a16a:	f7f6 fcb1 	bl	8000ad0 <__aeabi_dcmpeq>
 800a16e:	b900      	cbnz	r0, 800a172 <_dtoa_r+0x16a>
 800a170:	3f01      	subs	r7, #1
 800a172:	2f16      	cmp	r7, #22
 800a174:	d852      	bhi.n	800a21c <_dtoa_r+0x214>
 800a176:	4b5d      	ldr	r3, [pc, #372]	@ (800a2ec <_dtoa_r+0x2e4>)
 800a178:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a17c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a180:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a184:	f7f6 fcae 	bl	8000ae4 <__aeabi_dcmplt>
 800a188:	2800      	cmp	r0, #0
 800a18a:	d049      	beq.n	800a220 <_dtoa_r+0x218>
 800a18c:	3f01      	subs	r7, #1
 800a18e:	2300      	movs	r3, #0
 800a190:	9310      	str	r3, [sp, #64]	@ 0x40
 800a192:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a194:	1b9b      	subs	r3, r3, r6
 800a196:	1e5a      	subs	r2, r3, #1
 800a198:	bf4c      	ite	mi
 800a19a:	f1c3 0301 	rsbmi	r3, r3, #1
 800a19e:	2300      	movpl	r3, #0
 800a1a0:	9206      	str	r2, [sp, #24]
 800a1a2:	bf45      	ittet	mi
 800a1a4:	9300      	strmi	r3, [sp, #0]
 800a1a6:	2300      	movmi	r3, #0
 800a1a8:	9300      	strpl	r3, [sp, #0]
 800a1aa:	9306      	strmi	r3, [sp, #24]
 800a1ac:	2f00      	cmp	r7, #0
 800a1ae:	db39      	blt.n	800a224 <_dtoa_r+0x21c>
 800a1b0:	9b06      	ldr	r3, [sp, #24]
 800a1b2:	970d      	str	r7, [sp, #52]	@ 0x34
 800a1b4:	443b      	add	r3, r7
 800a1b6:	9306      	str	r3, [sp, #24]
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	9308      	str	r3, [sp, #32]
 800a1bc:	9b07      	ldr	r3, [sp, #28]
 800a1be:	2b09      	cmp	r3, #9
 800a1c0:	d863      	bhi.n	800a28a <_dtoa_r+0x282>
 800a1c2:	2b05      	cmp	r3, #5
 800a1c4:	bfc5      	ittet	gt
 800a1c6:	3b04      	subgt	r3, #4
 800a1c8:	2400      	movgt	r4, #0
 800a1ca:	2401      	movle	r4, #1
 800a1cc:	9307      	strgt	r3, [sp, #28]
 800a1ce:	9b07      	ldr	r3, [sp, #28]
 800a1d0:	3b02      	subs	r3, #2
 800a1d2:	2b03      	cmp	r3, #3
 800a1d4:	d865      	bhi.n	800a2a2 <_dtoa_r+0x29a>
 800a1d6:	e8df f003 	tbb	[pc, r3]
 800a1da:	5654      	.short	0x5654
 800a1dc:	2d39      	.short	0x2d39
 800a1de:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800a1e2:	441e      	add	r6, r3
 800a1e4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a1e8:	2b20      	cmp	r3, #32
 800a1ea:	bfc9      	itett	gt
 800a1ec:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a1f0:	f1c3 0320 	rsble	r3, r3, #32
 800a1f4:	409f      	lslgt	r7, r3
 800a1f6:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a1fa:	bfd8      	it	le
 800a1fc:	fa04 f003 	lslle.w	r0, r4, r3
 800a200:	f106 36ff 	add.w	r6, r6, #4294967295	@ 0xffffffff
 800a204:	bfc4      	itt	gt
 800a206:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a20a:	ea47 0003 	orrgt.w	r0, r7, r3
 800a20e:	f7f6 f97d 	bl	800050c <__aeabi_ui2d>
 800a212:	2201      	movs	r2, #1
 800a214:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a218:	9212      	str	r2, [sp, #72]	@ 0x48
 800a21a:	e776      	b.n	800a10a <_dtoa_r+0x102>
 800a21c:	2301      	movs	r3, #1
 800a21e:	e7b7      	b.n	800a190 <_dtoa_r+0x188>
 800a220:	9010      	str	r0, [sp, #64]	@ 0x40
 800a222:	e7b6      	b.n	800a192 <_dtoa_r+0x18a>
 800a224:	9b00      	ldr	r3, [sp, #0]
 800a226:	1bdb      	subs	r3, r3, r7
 800a228:	9300      	str	r3, [sp, #0]
 800a22a:	427b      	negs	r3, r7
 800a22c:	9308      	str	r3, [sp, #32]
 800a22e:	2300      	movs	r3, #0
 800a230:	930d      	str	r3, [sp, #52]	@ 0x34
 800a232:	e7c3      	b.n	800a1bc <_dtoa_r+0x1b4>
 800a234:	2301      	movs	r3, #1
 800a236:	9309      	str	r3, [sp, #36]	@ 0x24
 800a238:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a23a:	eb07 0b03 	add.w	fp, r7, r3
 800a23e:	f10b 0301 	add.w	r3, fp, #1
 800a242:	2b01      	cmp	r3, #1
 800a244:	9303      	str	r3, [sp, #12]
 800a246:	bfb8      	it	lt
 800a248:	2301      	movlt	r3, #1
 800a24a:	e006      	b.n	800a25a <_dtoa_r+0x252>
 800a24c:	2301      	movs	r3, #1
 800a24e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a250:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a252:	2b00      	cmp	r3, #0
 800a254:	dd28      	ble.n	800a2a8 <_dtoa_r+0x2a0>
 800a256:	469b      	mov	fp, r3
 800a258:	9303      	str	r3, [sp, #12]
 800a25a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800a25e:	2100      	movs	r1, #0
 800a260:	2204      	movs	r2, #4
 800a262:	f102 0514 	add.w	r5, r2, #20
 800a266:	429d      	cmp	r5, r3
 800a268:	d926      	bls.n	800a2b8 <_dtoa_r+0x2b0>
 800a26a:	6041      	str	r1, [r0, #4]
 800a26c:	4648      	mov	r0, r9
 800a26e:	f001 f899 	bl	800b3a4 <_Balloc>
 800a272:	4682      	mov	sl, r0
 800a274:	2800      	cmp	r0, #0
 800a276:	d141      	bne.n	800a2fc <_dtoa_r+0x2f4>
 800a278:	4b1d      	ldr	r3, [pc, #116]	@ (800a2f0 <_dtoa_r+0x2e8>)
 800a27a:	4602      	mov	r2, r0
 800a27c:	f240 11af 	movw	r1, #431	@ 0x1af
 800a280:	e6d9      	b.n	800a036 <_dtoa_r+0x2e>
 800a282:	2300      	movs	r3, #0
 800a284:	e7e3      	b.n	800a24e <_dtoa_r+0x246>
 800a286:	2300      	movs	r3, #0
 800a288:	e7d5      	b.n	800a236 <_dtoa_r+0x22e>
 800a28a:	2401      	movs	r4, #1
 800a28c:	2300      	movs	r3, #0
 800a28e:	9409      	str	r4, [sp, #36]	@ 0x24
 800a290:	9307      	str	r3, [sp, #28]
 800a292:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800a296:	2200      	movs	r2, #0
 800a298:	2312      	movs	r3, #18
 800a29a:	f8cd b00c 	str.w	fp, [sp, #12]
 800a29e:	920c      	str	r2, [sp, #48]	@ 0x30
 800a2a0:	e7db      	b.n	800a25a <_dtoa_r+0x252>
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a2a6:	e7f4      	b.n	800a292 <_dtoa_r+0x28a>
 800a2a8:	f04f 0b01 	mov.w	fp, #1
 800a2ac:	465b      	mov	r3, fp
 800a2ae:	f8cd b00c 	str.w	fp, [sp, #12]
 800a2b2:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800a2b6:	e7d0      	b.n	800a25a <_dtoa_r+0x252>
 800a2b8:	3101      	adds	r1, #1
 800a2ba:	0052      	lsls	r2, r2, #1
 800a2bc:	e7d1      	b.n	800a262 <_dtoa_r+0x25a>
 800a2be:	bf00      	nop
 800a2c0:	636f4361 	.word	0x636f4361
 800a2c4:	3fd287a7 	.word	0x3fd287a7
 800a2c8:	8b60c8b3 	.word	0x8b60c8b3
 800a2cc:	3fc68a28 	.word	0x3fc68a28
 800a2d0:	509f79fb 	.word	0x509f79fb
 800a2d4:	3fd34413 	.word	0x3fd34413
 800a2d8:	08023291 	.word	0x08023291
 800a2dc:	080232a8 	.word	0x080232a8
 800a2e0:	7ff00000 	.word	0x7ff00000
 800a2e4:	08023261 	.word	0x08023261
 800a2e8:	3ff80000 	.word	0x3ff80000
 800a2ec:	080233f8 	.word	0x080233f8
 800a2f0:	08023300 	.word	0x08023300
 800a2f4:	0802328d 	.word	0x0802328d
 800a2f8:	08023260 	.word	0x08023260
 800a2fc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a300:	6018      	str	r0, [r3, #0]
 800a302:	9b03      	ldr	r3, [sp, #12]
 800a304:	2b0e      	cmp	r3, #14
 800a306:	f200 80a1 	bhi.w	800a44c <_dtoa_r+0x444>
 800a30a:	2c00      	cmp	r4, #0
 800a30c:	f000 809e 	beq.w	800a44c <_dtoa_r+0x444>
 800a310:	2f00      	cmp	r7, #0
 800a312:	dd33      	ble.n	800a37c <_dtoa_r+0x374>
 800a314:	f007 020f 	and.w	r2, r7, #15
 800a318:	4b9b      	ldr	r3, [pc, #620]	@ (800a588 <_dtoa_r+0x580>)
 800a31a:	05f8      	lsls	r0, r7, #23
 800a31c:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a320:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a324:	ed93 7b00 	vldr	d7, [r3]
 800a328:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800a32c:	d516      	bpl.n	800a35c <_dtoa_r+0x354>
 800a32e:	4b97      	ldr	r3, [pc, #604]	@ (800a58c <_dtoa_r+0x584>)
 800a330:	f004 040f 	and.w	r4, r4, #15
 800a334:	2603      	movs	r6, #3
 800a336:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a33a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a33e:	f7f6 fa89 	bl	8000854 <__aeabi_ddiv>
 800a342:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a346:	4d91      	ldr	r5, [pc, #580]	@ (800a58c <_dtoa_r+0x584>)
 800a348:	b954      	cbnz	r4, 800a360 <_dtoa_r+0x358>
 800a34a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a34e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a352:	f7f6 fa7f 	bl	8000854 <__aeabi_ddiv>
 800a356:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a35a:	e028      	b.n	800a3ae <_dtoa_r+0x3a6>
 800a35c:	2602      	movs	r6, #2
 800a35e:	e7f2      	b.n	800a346 <_dtoa_r+0x33e>
 800a360:	07e1      	lsls	r1, r4, #31
 800a362:	d508      	bpl.n	800a376 <_dtoa_r+0x36e>
 800a364:	3601      	adds	r6, #1
 800a366:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a36a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a36e:	f7f6 f947 	bl	8000600 <__aeabi_dmul>
 800a372:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a376:	1064      	asrs	r4, r4, #1
 800a378:	3508      	adds	r5, #8
 800a37a:	e7e5      	b.n	800a348 <_dtoa_r+0x340>
 800a37c:	f000 80af 	beq.w	800a4de <_dtoa_r+0x4d6>
 800a380:	427c      	negs	r4, r7
 800a382:	4b81      	ldr	r3, [pc, #516]	@ (800a588 <_dtoa_r+0x580>)
 800a384:	4d81      	ldr	r5, [pc, #516]	@ (800a58c <_dtoa_r+0x584>)
 800a386:	2602      	movs	r6, #2
 800a388:	f004 020f 	and.w	r2, r4, #15
 800a38c:	1124      	asrs	r4, r4, #4
 800a38e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a392:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a39a:	f7f6 f931 	bl	8000600 <__aeabi_dmul>
 800a39e:	2300      	movs	r3, #0
 800a3a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a3a4:	2c00      	cmp	r4, #0
 800a3a6:	f040 808f 	bne.w	800a4c8 <_dtoa_r+0x4c0>
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d1d3      	bne.n	800a356 <_dtoa_r+0x34e>
 800a3ae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a3b0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	f000 8094 	beq.w	800a4e2 <_dtoa_r+0x4da>
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	4b74      	ldr	r3, [pc, #464]	@ (800a590 <_dtoa_r+0x588>)
 800a3be:	4620      	mov	r0, r4
 800a3c0:	4629      	mov	r1, r5
 800a3c2:	f7f6 fb8f 	bl	8000ae4 <__aeabi_dcmplt>
 800a3c6:	2800      	cmp	r0, #0
 800a3c8:	f000 808b 	beq.w	800a4e2 <_dtoa_r+0x4da>
 800a3cc:	9b03      	ldr	r3, [sp, #12]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	f000 8087 	beq.w	800a4e2 <_dtoa_r+0x4da>
 800a3d4:	f1bb 0f00 	cmp.w	fp, #0
 800a3d8:	dd34      	ble.n	800a444 <_dtoa_r+0x43c>
 800a3da:	4620      	mov	r0, r4
 800a3dc:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800a3e0:	3601      	adds	r6, #1
 800a3e2:	465c      	mov	r4, fp
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	4b6b      	ldr	r3, [pc, #428]	@ (800a594 <_dtoa_r+0x58c>)
 800a3e8:	4629      	mov	r1, r5
 800a3ea:	f7f6 f909 	bl	8000600 <__aeabi_dmul>
 800a3ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a3f2:	4630      	mov	r0, r6
 800a3f4:	f7f6 f89a 	bl	800052c <__aeabi_i2d>
 800a3f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a3fc:	f7f6 f900 	bl	8000600 <__aeabi_dmul>
 800a400:	2200      	movs	r2, #0
 800a402:	4b65      	ldr	r3, [pc, #404]	@ (800a598 <_dtoa_r+0x590>)
 800a404:	f7f5 ff46 	bl	8000294 <__adddf3>
 800a408:	4605      	mov	r5, r0
 800a40a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a40e:	2c00      	cmp	r4, #0
 800a410:	d16a      	bne.n	800a4e8 <_dtoa_r+0x4e0>
 800a412:	2200      	movs	r2, #0
 800a414:	4b61      	ldr	r3, [pc, #388]	@ (800a59c <_dtoa_r+0x594>)
 800a416:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a41a:	f7f5 ff39 	bl	8000290 <__aeabi_dsub>
 800a41e:	4602      	mov	r2, r0
 800a420:	460b      	mov	r3, r1
 800a422:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a426:	462a      	mov	r2, r5
 800a428:	4633      	mov	r3, r6
 800a42a:	f7f6 fb79 	bl	8000b20 <__aeabi_dcmpgt>
 800a42e:	2800      	cmp	r0, #0
 800a430:	f040 8298 	bne.w	800a964 <_dtoa_r+0x95c>
 800a434:	462a      	mov	r2, r5
 800a436:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a43a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a43e:	f7f6 fb51 	bl	8000ae4 <__aeabi_dcmplt>
 800a442:	bb38      	cbnz	r0, 800a494 <_dtoa_r+0x48c>
 800a444:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800a448:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a44c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a44e:	2b00      	cmp	r3, #0
 800a450:	f2c0 8157 	blt.w	800a702 <_dtoa_r+0x6fa>
 800a454:	2f0e      	cmp	r7, #14
 800a456:	f300 8154 	bgt.w	800a702 <_dtoa_r+0x6fa>
 800a45a:	4b4b      	ldr	r3, [pc, #300]	@ (800a588 <_dtoa_r+0x580>)
 800a45c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a460:	ed93 7b00 	vldr	d7, [r3]
 800a464:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a466:	2b00      	cmp	r3, #0
 800a468:	ed8d 7b00 	vstr	d7, [sp]
 800a46c:	f280 80e5 	bge.w	800a63a <_dtoa_r+0x632>
 800a470:	9b03      	ldr	r3, [sp, #12]
 800a472:	2b00      	cmp	r3, #0
 800a474:	f300 80e1 	bgt.w	800a63a <_dtoa_r+0x632>
 800a478:	d10c      	bne.n	800a494 <_dtoa_r+0x48c>
 800a47a:	2200      	movs	r2, #0
 800a47c:	4b47      	ldr	r3, [pc, #284]	@ (800a59c <_dtoa_r+0x594>)
 800a47e:	ec51 0b17 	vmov	r0, r1, d7
 800a482:	f7f6 f8bd 	bl	8000600 <__aeabi_dmul>
 800a486:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a48a:	f7f6 fb3f 	bl	8000b0c <__aeabi_dcmpge>
 800a48e:	2800      	cmp	r0, #0
 800a490:	f000 8266 	beq.w	800a960 <_dtoa_r+0x958>
 800a494:	2400      	movs	r4, #0
 800a496:	4625      	mov	r5, r4
 800a498:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a49a:	4656      	mov	r6, sl
 800a49c:	ea6f 0803 	mvn.w	r8, r3
 800a4a0:	2700      	movs	r7, #0
 800a4a2:	4621      	mov	r1, r4
 800a4a4:	4648      	mov	r0, r9
 800a4a6:	f000 ffbd 	bl	800b424 <_Bfree>
 800a4aa:	2d00      	cmp	r5, #0
 800a4ac:	f000 80bd 	beq.w	800a62a <_dtoa_r+0x622>
 800a4b0:	b12f      	cbz	r7, 800a4be <_dtoa_r+0x4b6>
 800a4b2:	42af      	cmp	r7, r5
 800a4b4:	d003      	beq.n	800a4be <_dtoa_r+0x4b6>
 800a4b6:	4639      	mov	r1, r7
 800a4b8:	4648      	mov	r0, r9
 800a4ba:	f000 ffb3 	bl	800b424 <_Bfree>
 800a4be:	4629      	mov	r1, r5
 800a4c0:	4648      	mov	r0, r9
 800a4c2:	f000 ffaf 	bl	800b424 <_Bfree>
 800a4c6:	e0b0      	b.n	800a62a <_dtoa_r+0x622>
 800a4c8:	07e2      	lsls	r2, r4, #31
 800a4ca:	d505      	bpl.n	800a4d8 <_dtoa_r+0x4d0>
 800a4cc:	3601      	adds	r6, #1
 800a4ce:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a4d2:	f7f6 f895 	bl	8000600 <__aeabi_dmul>
 800a4d6:	2301      	movs	r3, #1
 800a4d8:	1064      	asrs	r4, r4, #1
 800a4da:	3508      	adds	r5, #8
 800a4dc:	e762      	b.n	800a3a4 <_dtoa_r+0x39c>
 800a4de:	2602      	movs	r6, #2
 800a4e0:	e765      	b.n	800a3ae <_dtoa_r+0x3a6>
 800a4e2:	46b8      	mov	r8, r7
 800a4e4:	9c03      	ldr	r4, [sp, #12]
 800a4e6:	e784      	b.n	800a3f2 <_dtoa_r+0x3ea>
 800a4e8:	4b27      	ldr	r3, [pc, #156]	@ (800a588 <_dtoa_r+0x580>)
 800a4ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a4ec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a4f0:	4454      	add	r4, sl
 800a4f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a4f6:	2900      	cmp	r1, #0
 800a4f8:	d054      	beq.n	800a5a4 <_dtoa_r+0x59c>
 800a4fa:	2000      	movs	r0, #0
 800a4fc:	4928      	ldr	r1, [pc, #160]	@ (800a5a0 <_dtoa_r+0x598>)
 800a4fe:	f7f6 f9a9 	bl	8000854 <__aeabi_ddiv>
 800a502:	4633      	mov	r3, r6
 800a504:	4656      	mov	r6, sl
 800a506:	462a      	mov	r2, r5
 800a508:	f7f5 fec2 	bl	8000290 <__aeabi_dsub>
 800a50c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a510:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a514:	f7f6 fb24 	bl	8000b60 <__aeabi_d2iz>
 800a518:	4605      	mov	r5, r0
 800a51a:	f7f6 f807 	bl	800052c <__aeabi_i2d>
 800a51e:	4602      	mov	r2, r0
 800a520:	460b      	mov	r3, r1
 800a522:	3530      	adds	r5, #48	@ 0x30
 800a524:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a528:	f7f5 feb2 	bl	8000290 <__aeabi_dsub>
 800a52c:	4602      	mov	r2, r0
 800a52e:	460b      	mov	r3, r1
 800a530:	f806 5b01 	strb.w	r5, [r6], #1
 800a534:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a538:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a53c:	f7f6 fad2 	bl	8000ae4 <__aeabi_dcmplt>
 800a540:	2800      	cmp	r0, #0
 800a542:	d172      	bne.n	800a62a <_dtoa_r+0x622>
 800a544:	2000      	movs	r0, #0
 800a546:	4912      	ldr	r1, [pc, #72]	@ (800a590 <_dtoa_r+0x588>)
 800a548:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a54c:	f7f5 fea0 	bl	8000290 <__aeabi_dsub>
 800a550:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a554:	f7f6 fac6 	bl	8000ae4 <__aeabi_dcmplt>
 800a558:	2800      	cmp	r0, #0
 800a55a:	f040 80b4 	bne.w	800a6c6 <_dtoa_r+0x6be>
 800a55e:	42a6      	cmp	r6, r4
 800a560:	f43f af70 	beq.w	800a444 <_dtoa_r+0x43c>
 800a564:	2200      	movs	r2, #0
 800a566:	4b0b      	ldr	r3, [pc, #44]	@ (800a594 <_dtoa_r+0x58c>)
 800a568:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a56c:	f7f6 f848 	bl	8000600 <__aeabi_dmul>
 800a570:	2200      	movs	r2, #0
 800a572:	4b08      	ldr	r3, [pc, #32]	@ (800a594 <_dtoa_r+0x58c>)
 800a574:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a578:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a57c:	f7f6 f840 	bl	8000600 <__aeabi_dmul>
 800a580:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a584:	e7c4      	b.n	800a510 <_dtoa_r+0x508>
 800a586:	bf00      	nop
 800a588:	080233f8 	.word	0x080233f8
 800a58c:	080233d0 	.word	0x080233d0
 800a590:	3ff00000 	.word	0x3ff00000
 800a594:	40240000 	.word	0x40240000
 800a598:	401c0000 	.word	0x401c0000
 800a59c:	40140000 	.word	0x40140000
 800a5a0:	3fe00000 	.word	0x3fe00000
 800a5a4:	4631      	mov	r1, r6
 800a5a6:	4656      	mov	r6, sl
 800a5a8:	4628      	mov	r0, r5
 800a5aa:	f7f6 f829 	bl	8000600 <__aeabi_dmul>
 800a5ae:	9413      	str	r4, [sp, #76]	@ 0x4c
 800a5b0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a5b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a5b8:	f7f6 fad2 	bl	8000b60 <__aeabi_d2iz>
 800a5bc:	4605      	mov	r5, r0
 800a5be:	f7f5 ffb5 	bl	800052c <__aeabi_i2d>
 800a5c2:	4602      	mov	r2, r0
 800a5c4:	3530      	adds	r5, #48	@ 0x30
 800a5c6:	460b      	mov	r3, r1
 800a5c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a5cc:	f7f5 fe60 	bl	8000290 <__aeabi_dsub>
 800a5d0:	f806 5b01 	strb.w	r5, [r6], #1
 800a5d4:	4602      	mov	r2, r0
 800a5d6:	460b      	mov	r3, r1
 800a5d8:	42a6      	cmp	r6, r4
 800a5da:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a5de:	f04f 0200 	mov.w	r2, #0
 800a5e2:	d124      	bne.n	800a62e <_dtoa_r+0x626>
 800a5e4:	4baf      	ldr	r3, [pc, #700]	@ (800a8a4 <_dtoa_r+0x89c>)
 800a5e6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a5ea:	f7f5 fe53 	bl	8000294 <__adddf3>
 800a5ee:	4602      	mov	r2, r0
 800a5f0:	460b      	mov	r3, r1
 800a5f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a5f6:	f7f6 fa93 	bl	8000b20 <__aeabi_dcmpgt>
 800a5fa:	2800      	cmp	r0, #0
 800a5fc:	d163      	bne.n	800a6c6 <_dtoa_r+0x6be>
 800a5fe:	2000      	movs	r0, #0
 800a600:	49a8      	ldr	r1, [pc, #672]	@ (800a8a4 <_dtoa_r+0x89c>)
 800a602:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a606:	f7f5 fe43 	bl	8000290 <__aeabi_dsub>
 800a60a:	4602      	mov	r2, r0
 800a60c:	460b      	mov	r3, r1
 800a60e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a612:	f7f6 fa67 	bl	8000ae4 <__aeabi_dcmplt>
 800a616:	2800      	cmp	r0, #0
 800a618:	f43f af14 	beq.w	800a444 <_dtoa_r+0x43c>
 800a61c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800a61e:	1e73      	subs	r3, r6, #1
 800a620:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a622:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a626:	2b30      	cmp	r3, #48	@ 0x30
 800a628:	d0f8      	beq.n	800a61c <_dtoa_r+0x614>
 800a62a:	4647      	mov	r7, r8
 800a62c:	e03b      	b.n	800a6a6 <_dtoa_r+0x69e>
 800a62e:	4b9e      	ldr	r3, [pc, #632]	@ (800a8a8 <_dtoa_r+0x8a0>)
 800a630:	f7f5 ffe6 	bl	8000600 <__aeabi_dmul>
 800a634:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a638:	e7bc      	b.n	800a5b4 <_dtoa_r+0x5ac>
 800a63a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800a63e:	4656      	mov	r6, sl
 800a640:	4620      	mov	r0, r4
 800a642:	4629      	mov	r1, r5
 800a644:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a648:	f7f6 f904 	bl	8000854 <__aeabi_ddiv>
 800a64c:	f7f6 fa88 	bl	8000b60 <__aeabi_d2iz>
 800a650:	4680      	mov	r8, r0
 800a652:	f7f5 ff6b 	bl	800052c <__aeabi_i2d>
 800a656:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a65a:	f7f5 ffd1 	bl	8000600 <__aeabi_dmul>
 800a65e:	4602      	mov	r2, r0
 800a660:	4620      	mov	r0, r4
 800a662:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a666:	460b      	mov	r3, r1
 800a668:	4629      	mov	r1, r5
 800a66a:	f7f5 fe11 	bl	8000290 <__aeabi_dsub>
 800a66e:	9d03      	ldr	r5, [sp, #12]
 800a670:	f806 4b01 	strb.w	r4, [r6], #1
 800a674:	eba6 040a 	sub.w	r4, r6, sl
 800a678:	4602      	mov	r2, r0
 800a67a:	460b      	mov	r3, r1
 800a67c:	42a5      	cmp	r5, r4
 800a67e:	d133      	bne.n	800a6e8 <_dtoa_r+0x6e0>
 800a680:	f7f5 fe08 	bl	8000294 <__adddf3>
 800a684:	4604      	mov	r4, r0
 800a686:	460d      	mov	r5, r1
 800a688:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a68c:	f7f6 fa48 	bl	8000b20 <__aeabi_dcmpgt>
 800a690:	b9c0      	cbnz	r0, 800a6c4 <_dtoa_r+0x6bc>
 800a692:	4620      	mov	r0, r4
 800a694:	4629      	mov	r1, r5
 800a696:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a69a:	f7f6 fa19 	bl	8000ad0 <__aeabi_dcmpeq>
 800a69e:	b110      	cbz	r0, 800a6a6 <_dtoa_r+0x69e>
 800a6a0:	f018 0f01 	tst.w	r8, #1
 800a6a4:	d10e      	bne.n	800a6c4 <_dtoa_r+0x6bc>
 800a6a6:	9902      	ldr	r1, [sp, #8]
 800a6a8:	4648      	mov	r0, r9
 800a6aa:	f000 febb 	bl	800b424 <_Bfree>
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	3701      	adds	r7, #1
 800a6b2:	7033      	strb	r3, [r6, #0]
 800a6b4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a6b6:	601f      	str	r7, [r3, #0]
 800a6b8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	f000 824c 	beq.w	800ab58 <_dtoa_r+0xb50>
 800a6c0:	601e      	str	r6, [r3, #0]
 800a6c2:	e249      	b.n	800ab58 <_dtoa_r+0xb50>
 800a6c4:	46b8      	mov	r8, r7
 800a6c6:	4633      	mov	r3, r6
 800a6c8:	461e      	mov	r6, r3
 800a6ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a6ce:	2a39      	cmp	r2, #57	@ 0x39
 800a6d0:	d106      	bne.n	800a6e0 <_dtoa_r+0x6d8>
 800a6d2:	459a      	cmp	sl, r3
 800a6d4:	d1f8      	bne.n	800a6c8 <_dtoa_r+0x6c0>
 800a6d6:	2230      	movs	r2, #48	@ 0x30
 800a6d8:	f108 0801 	add.w	r8, r8, #1
 800a6dc:	f88a 2000 	strb.w	r2, [sl]
 800a6e0:	781a      	ldrb	r2, [r3, #0]
 800a6e2:	3201      	adds	r2, #1
 800a6e4:	701a      	strb	r2, [r3, #0]
 800a6e6:	e7a0      	b.n	800a62a <_dtoa_r+0x622>
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	4b6f      	ldr	r3, [pc, #444]	@ (800a8a8 <_dtoa_r+0x8a0>)
 800a6ec:	f7f5 ff88 	bl	8000600 <__aeabi_dmul>
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	4604      	mov	r4, r0
 800a6f6:	460d      	mov	r5, r1
 800a6f8:	f7f6 f9ea 	bl	8000ad0 <__aeabi_dcmpeq>
 800a6fc:	2800      	cmp	r0, #0
 800a6fe:	d09f      	beq.n	800a640 <_dtoa_r+0x638>
 800a700:	e7d1      	b.n	800a6a6 <_dtoa_r+0x69e>
 800a702:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a704:	2a00      	cmp	r2, #0
 800a706:	f000 80ea 	beq.w	800a8de <_dtoa_r+0x8d6>
 800a70a:	9a07      	ldr	r2, [sp, #28]
 800a70c:	2a01      	cmp	r2, #1
 800a70e:	f300 80cd 	bgt.w	800a8ac <_dtoa_r+0x8a4>
 800a712:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a714:	2a00      	cmp	r2, #0
 800a716:	f000 80c1 	beq.w	800a89c <_dtoa_r+0x894>
 800a71a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a71e:	9c08      	ldr	r4, [sp, #32]
 800a720:	9e00      	ldr	r6, [sp, #0]
 800a722:	9a00      	ldr	r2, [sp, #0]
 800a724:	2101      	movs	r1, #1
 800a726:	4648      	mov	r0, r9
 800a728:	441a      	add	r2, r3
 800a72a:	9200      	str	r2, [sp, #0]
 800a72c:	9a06      	ldr	r2, [sp, #24]
 800a72e:	441a      	add	r2, r3
 800a730:	9206      	str	r2, [sp, #24]
 800a732:	f000 ff2d 	bl	800b590 <__i2b>
 800a736:	4605      	mov	r5, r0
 800a738:	b166      	cbz	r6, 800a754 <_dtoa_r+0x74c>
 800a73a:	9b06      	ldr	r3, [sp, #24]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	dd09      	ble.n	800a754 <_dtoa_r+0x74c>
 800a740:	42b3      	cmp	r3, r6
 800a742:	9a00      	ldr	r2, [sp, #0]
 800a744:	bfa8      	it	ge
 800a746:	4633      	movge	r3, r6
 800a748:	1ad2      	subs	r2, r2, r3
 800a74a:	1af6      	subs	r6, r6, r3
 800a74c:	9200      	str	r2, [sp, #0]
 800a74e:	9a06      	ldr	r2, [sp, #24]
 800a750:	1ad3      	subs	r3, r2, r3
 800a752:	9306      	str	r3, [sp, #24]
 800a754:	9b08      	ldr	r3, [sp, #32]
 800a756:	b30b      	cbz	r3, 800a79c <_dtoa_r+0x794>
 800a758:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	f000 80c6 	beq.w	800a8ec <_dtoa_r+0x8e4>
 800a760:	2c00      	cmp	r4, #0
 800a762:	f000 80c0 	beq.w	800a8e6 <_dtoa_r+0x8de>
 800a766:	4629      	mov	r1, r5
 800a768:	4622      	mov	r2, r4
 800a76a:	4648      	mov	r0, r9
 800a76c:	f000 ffca 	bl	800b704 <__pow5mult>
 800a770:	9a02      	ldr	r2, [sp, #8]
 800a772:	4601      	mov	r1, r0
 800a774:	4605      	mov	r5, r0
 800a776:	4648      	mov	r0, r9
 800a778:	f000 ff20 	bl	800b5bc <__multiply>
 800a77c:	9902      	ldr	r1, [sp, #8]
 800a77e:	4680      	mov	r8, r0
 800a780:	4648      	mov	r0, r9
 800a782:	f000 fe4f 	bl	800b424 <_Bfree>
 800a786:	9b08      	ldr	r3, [sp, #32]
 800a788:	1b1b      	subs	r3, r3, r4
 800a78a:	9308      	str	r3, [sp, #32]
 800a78c:	f000 80b1 	beq.w	800a8f2 <_dtoa_r+0x8ea>
 800a790:	9a08      	ldr	r2, [sp, #32]
 800a792:	4641      	mov	r1, r8
 800a794:	4648      	mov	r0, r9
 800a796:	f000 ffb5 	bl	800b704 <__pow5mult>
 800a79a:	9002      	str	r0, [sp, #8]
 800a79c:	2101      	movs	r1, #1
 800a79e:	4648      	mov	r0, r9
 800a7a0:	f000 fef6 	bl	800b590 <__i2b>
 800a7a4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a7a6:	4604      	mov	r4, r0
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	f000 81d9 	beq.w	800ab60 <_dtoa_r+0xb58>
 800a7ae:	461a      	mov	r2, r3
 800a7b0:	4601      	mov	r1, r0
 800a7b2:	4648      	mov	r0, r9
 800a7b4:	f000 ffa6 	bl	800b704 <__pow5mult>
 800a7b8:	9b07      	ldr	r3, [sp, #28]
 800a7ba:	4604      	mov	r4, r0
 800a7bc:	2b01      	cmp	r3, #1
 800a7be:	f300 809f 	bgt.w	800a900 <_dtoa_r+0x8f8>
 800a7c2:	9b04      	ldr	r3, [sp, #16]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	f040 8097 	bne.w	800a8f8 <_dtoa_r+0x8f0>
 800a7ca:	9b05      	ldr	r3, [sp, #20]
 800a7cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	f040 8093 	bne.w	800a8fc <_dtoa_r+0x8f4>
 800a7d6:	9b05      	ldr	r3, [sp, #20]
 800a7d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a7dc:	0d1b      	lsrs	r3, r3, #20
 800a7de:	051b      	lsls	r3, r3, #20
 800a7e0:	b133      	cbz	r3, 800a7f0 <_dtoa_r+0x7e8>
 800a7e2:	9b00      	ldr	r3, [sp, #0]
 800a7e4:	3301      	adds	r3, #1
 800a7e6:	9300      	str	r3, [sp, #0]
 800a7e8:	9b06      	ldr	r3, [sp, #24]
 800a7ea:	3301      	adds	r3, #1
 800a7ec:	9306      	str	r3, [sp, #24]
 800a7ee:	2301      	movs	r3, #1
 800a7f0:	9308      	str	r3, [sp, #32]
 800a7f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	f000 81b9 	beq.w	800ab6c <_dtoa_r+0xb64>
 800a7fa:	6923      	ldr	r3, [r4, #16]
 800a7fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a800:	6918      	ldr	r0, [r3, #16]
 800a802:	f000 fe79 	bl	800b4f8 <__hi0bits>
 800a806:	f1c0 0020 	rsb	r0, r0, #32
 800a80a:	9b06      	ldr	r3, [sp, #24]
 800a80c:	4418      	add	r0, r3
 800a80e:	f010 001f 	ands.w	r0, r0, #31
 800a812:	f000 8082 	beq.w	800a91a <_dtoa_r+0x912>
 800a816:	f1c0 0320 	rsb	r3, r0, #32
 800a81a:	2b04      	cmp	r3, #4
 800a81c:	dd73      	ble.n	800a906 <_dtoa_r+0x8fe>
 800a81e:	f1c0 001c 	rsb	r0, r0, #28
 800a822:	9b00      	ldr	r3, [sp, #0]
 800a824:	4403      	add	r3, r0
 800a826:	4406      	add	r6, r0
 800a828:	9300      	str	r3, [sp, #0]
 800a82a:	9b06      	ldr	r3, [sp, #24]
 800a82c:	4403      	add	r3, r0
 800a82e:	9306      	str	r3, [sp, #24]
 800a830:	9b00      	ldr	r3, [sp, #0]
 800a832:	2b00      	cmp	r3, #0
 800a834:	dd05      	ble.n	800a842 <_dtoa_r+0x83a>
 800a836:	461a      	mov	r2, r3
 800a838:	9902      	ldr	r1, [sp, #8]
 800a83a:	4648      	mov	r0, r9
 800a83c:	f000 ffbc 	bl	800b7b8 <__lshift>
 800a840:	9002      	str	r0, [sp, #8]
 800a842:	9b06      	ldr	r3, [sp, #24]
 800a844:	2b00      	cmp	r3, #0
 800a846:	dd05      	ble.n	800a854 <_dtoa_r+0x84c>
 800a848:	4621      	mov	r1, r4
 800a84a:	461a      	mov	r2, r3
 800a84c:	4648      	mov	r0, r9
 800a84e:	f000 ffb3 	bl	800b7b8 <__lshift>
 800a852:	4604      	mov	r4, r0
 800a854:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a856:	2b00      	cmp	r3, #0
 800a858:	d061      	beq.n	800a91e <_dtoa_r+0x916>
 800a85a:	4621      	mov	r1, r4
 800a85c:	9802      	ldr	r0, [sp, #8]
 800a85e:	f001 f817 	bl	800b890 <__mcmp>
 800a862:	2800      	cmp	r0, #0
 800a864:	da5b      	bge.n	800a91e <_dtoa_r+0x916>
 800a866:	2300      	movs	r3, #0
 800a868:	220a      	movs	r2, #10
 800a86a:	9902      	ldr	r1, [sp, #8]
 800a86c:	4648      	mov	r0, r9
 800a86e:	f000 fdfb 	bl	800b468 <__multadd>
 800a872:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a874:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800a878:	9002      	str	r0, [sp, #8]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	f000 8178 	beq.w	800ab70 <_dtoa_r+0xb68>
 800a880:	4629      	mov	r1, r5
 800a882:	2300      	movs	r3, #0
 800a884:	220a      	movs	r2, #10
 800a886:	4648      	mov	r0, r9
 800a888:	f000 fdee 	bl	800b468 <__multadd>
 800a88c:	f1bb 0f00 	cmp.w	fp, #0
 800a890:	4605      	mov	r5, r0
 800a892:	dc6f      	bgt.n	800a974 <_dtoa_r+0x96c>
 800a894:	9b07      	ldr	r3, [sp, #28]
 800a896:	2b02      	cmp	r3, #2
 800a898:	dc49      	bgt.n	800a92e <_dtoa_r+0x926>
 800a89a:	e06b      	b.n	800a974 <_dtoa_r+0x96c>
 800a89c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a89e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a8a2:	e73c      	b.n	800a71e <_dtoa_r+0x716>
 800a8a4:	3fe00000 	.word	0x3fe00000
 800a8a8:	40240000 	.word	0x40240000
 800a8ac:	9b03      	ldr	r3, [sp, #12]
 800a8ae:	1e5c      	subs	r4, r3, #1
 800a8b0:	9b08      	ldr	r3, [sp, #32]
 800a8b2:	42a3      	cmp	r3, r4
 800a8b4:	db09      	blt.n	800a8ca <_dtoa_r+0x8c2>
 800a8b6:	1b1c      	subs	r4, r3, r4
 800a8b8:	9b03      	ldr	r3, [sp, #12]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	f6bf af30 	bge.w	800a720 <_dtoa_r+0x718>
 800a8c0:	9b00      	ldr	r3, [sp, #0]
 800a8c2:	9a03      	ldr	r2, [sp, #12]
 800a8c4:	1a9e      	subs	r6, r3, r2
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	e72b      	b.n	800a722 <_dtoa_r+0x71a>
 800a8ca:	9b08      	ldr	r3, [sp, #32]
 800a8cc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a8ce:	1ae3      	subs	r3, r4, r3
 800a8d0:	9408      	str	r4, [sp, #32]
 800a8d2:	9e00      	ldr	r6, [sp, #0]
 800a8d4:	2400      	movs	r4, #0
 800a8d6:	441a      	add	r2, r3
 800a8d8:	9b03      	ldr	r3, [sp, #12]
 800a8da:	920d      	str	r2, [sp, #52]	@ 0x34
 800a8dc:	e721      	b.n	800a722 <_dtoa_r+0x71a>
 800a8de:	9c08      	ldr	r4, [sp, #32]
 800a8e0:	9e00      	ldr	r6, [sp, #0]
 800a8e2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800a8e4:	e728      	b.n	800a738 <_dtoa_r+0x730>
 800a8e6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800a8ea:	e751      	b.n	800a790 <_dtoa_r+0x788>
 800a8ec:	9a08      	ldr	r2, [sp, #32]
 800a8ee:	9902      	ldr	r1, [sp, #8]
 800a8f0:	e750      	b.n	800a794 <_dtoa_r+0x78c>
 800a8f2:	f8cd 8008 	str.w	r8, [sp, #8]
 800a8f6:	e751      	b.n	800a79c <_dtoa_r+0x794>
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	e779      	b.n	800a7f0 <_dtoa_r+0x7e8>
 800a8fc:	9b04      	ldr	r3, [sp, #16]
 800a8fe:	e777      	b.n	800a7f0 <_dtoa_r+0x7e8>
 800a900:	2300      	movs	r3, #0
 800a902:	9308      	str	r3, [sp, #32]
 800a904:	e779      	b.n	800a7fa <_dtoa_r+0x7f2>
 800a906:	d093      	beq.n	800a830 <_dtoa_r+0x828>
 800a908:	331c      	adds	r3, #28
 800a90a:	9a00      	ldr	r2, [sp, #0]
 800a90c:	441a      	add	r2, r3
 800a90e:	441e      	add	r6, r3
 800a910:	9200      	str	r2, [sp, #0]
 800a912:	9a06      	ldr	r2, [sp, #24]
 800a914:	441a      	add	r2, r3
 800a916:	9206      	str	r2, [sp, #24]
 800a918:	e78a      	b.n	800a830 <_dtoa_r+0x828>
 800a91a:	4603      	mov	r3, r0
 800a91c:	e7f4      	b.n	800a908 <_dtoa_r+0x900>
 800a91e:	9b03      	ldr	r3, [sp, #12]
 800a920:	46b8      	mov	r8, r7
 800a922:	2b00      	cmp	r3, #0
 800a924:	dc20      	bgt.n	800a968 <_dtoa_r+0x960>
 800a926:	469b      	mov	fp, r3
 800a928:	9b07      	ldr	r3, [sp, #28]
 800a92a:	2b02      	cmp	r3, #2
 800a92c:	dd1e      	ble.n	800a96c <_dtoa_r+0x964>
 800a92e:	f1bb 0f00 	cmp.w	fp, #0
 800a932:	f47f adb1 	bne.w	800a498 <_dtoa_r+0x490>
 800a936:	4621      	mov	r1, r4
 800a938:	465b      	mov	r3, fp
 800a93a:	2205      	movs	r2, #5
 800a93c:	4648      	mov	r0, r9
 800a93e:	f000 fd93 	bl	800b468 <__multadd>
 800a942:	4601      	mov	r1, r0
 800a944:	4604      	mov	r4, r0
 800a946:	9802      	ldr	r0, [sp, #8]
 800a948:	f000 ffa2 	bl	800b890 <__mcmp>
 800a94c:	2800      	cmp	r0, #0
 800a94e:	f77f ada3 	ble.w	800a498 <_dtoa_r+0x490>
 800a952:	4656      	mov	r6, sl
 800a954:	2331      	movs	r3, #49	@ 0x31
 800a956:	f108 0801 	add.w	r8, r8, #1
 800a95a:	f806 3b01 	strb.w	r3, [r6], #1
 800a95e:	e59f      	b.n	800a4a0 <_dtoa_r+0x498>
 800a960:	46b8      	mov	r8, r7
 800a962:	9c03      	ldr	r4, [sp, #12]
 800a964:	4625      	mov	r5, r4
 800a966:	e7f4      	b.n	800a952 <_dtoa_r+0x94a>
 800a968:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800a96c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a96e:	2b00      	cmp	r3, #0
 800a970:	f000 8102 	beq.w	800ab78 <_dtoa_r+0xb70>
 800a974:	2e00      	cmp	r6, #0
 800a976:	dd05      	ble.n	800a984 <_dtoa_r+0x97c>
 800a978:	4629      	mov	r1, r5
 800a97a:	4632      	mov	r2, r6
 800a97c:	4648      	mov	r0, r9
 800a97e:	f000 ff1b 	bl	800b7b8 <__lshift>
 800a982:	4605      	mov	r5, r0
 800a984:	9b08      	ldr	r3, [sp, #32]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d05c      	beq.n	800aa44 <_dtoa_r+0xa3c>
 800a98a:	6869      	ldr	r1, [r5, #4]
 800a98c:	4648      	mov	r0, r9
 800a98e:	f000 fd09 	bl	800b3a4 <_Balloc>
 800a992:	4606      	mov	r6, r0
 800a994:	b928      	cbnz	r0, 800a9a2 <_dtoa_r+0x99a>
 800a996:	4b83      	ldr	r3, [pc, #524]	@ (800aba4 <_dtoa_r+0xb9c>)
 800a998:	4602      	mov	r2, r0
 800a99a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a99e:	f7ff bb4a 	b.w	800a036 <_dtoa_r+0x2e>
 800a9a2:	692a      	ldr	r2, [r5, #16]
 800a9a4:	f105 010c 	add.w	r1, r5, #12
 800a9a8:	300c      	adds	r0, #12
 800a9aa:	3202      	adds	r2, #2
 800a9ac:	0092      	lsls	r2, r2, #2
 800a9ae:	f7ff fa91 	bl	8009ed4 <memcpy>
 800a9b2:	2201      	movs	r2, #1
 800a9b4:	4631      	mov	r1, r6
 800a9b6:	4648      	mov	r0, r9
 800a9b8:	f000 fefe 	bl	800b7b8 <__lshift>
 800a9bc:	f10a 0301 	add.w	r3, sl, #1
 800a9c0:	462f      	mov	r7, r5
 800a9c2:	4605      	mov	r5, r0
 800a9c4:	9300      	str	r3, [sp, #0]
 800a9c6:	eb0a 030b 	add.w	r3, sl, fp
 800a9ca:	9308      	str	r3, [sp, #32]
 800a9cc:	9b04      	ldr	r3, [sp, #16]
 800a9ce:	f003 0301 	and.w	r3, r3, #1
 800a9d2:	9306      	str	r3, [sp, #24]
 800a9d4:	9b00      	ldr	r3, [sp, #0]
 800a9d6:	4621      	mov	r1, r4
 800a9d8:	9802      	ldr	r0, [sp, #8]
 800a9da:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800a9de:	f7ff fa86 	bl	8009eee <quorem>
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	4639      	mov	r1, r7
 800a9e6:	9003      	str	r0, [sp, #12]
 800a9e8:	3330      	adds	r3, #48	@ 0x30
 800a9ea:	9802      	ldr	r0, [sp, #8]
 800a9ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9ee:	f000 ff4f 	bl	800b890 <__mcmp>
 800a9f2:	462a      	mov	r2, r5
 800a9f4:	9004      	str	r0, [sp, #16]
 800a9f6:	4621      	mov	r1, r4
 800a9f8:	4648      	mov	r0, r9
 800a9fa:	f000 ff65 	bl	800b8c8 <__mdiff>
 800a9fe:	68c2      	ldr	r2, [r0, #12]
 800aa00:	4606      	mov	r6, r0
 800aa02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa04:	bb02      	cbnz	r2, 800aa48 <_dtoa_r+0xa40>
 800aa06:	4601      	mov	r1, r0
 800aa08:	9802      	ldr	r0, [sp, #8]
 800aa0a:	f000 ff41 	bl	800b890 <__mcmp>
 800aa0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa10:	4602      	mov	r2, r0
 800aa12:	4631      	mov	r1, r6
 800aa14:	4648      	mov	r0, r9
 800aa16:	920c      	str	r2, [sp, #48]	@ 0x30
 800aa18:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa1a:	f000 fd03 	bl	800b424 <_Bfree>
 800aa1e:	9b07      	ldr	r3, [sp, #28]
 800aa20:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800aa22:	9e00      	ldr	r6, [sp, #0]
 800aa24:	ea42 0103 	orr.w	r1, r2, r3
 800aa28:	9b06      	ldr	r3, [sp, #24]
 800aa2a:	4319      	orrs	r1, r3
 800aa2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa2e:	d10d      	bne.n	800aa4c <_dtoa_r+0xa44>
 800aa30:	2b39      	cmp	r3, #57	@ 0x39
 800aa32:	d027      	beq.n	800aa84 <_dtoa_r+0xa7c>
 800aa34:	9a04      	ldr	r2, [sp, #16]
 800aa36:	2a00      	cmp	r2, #0
 800aa38:	dd01      	ble.n	800aa3e <_dtoa_r+0xa36>
 800aa3a:	9b03      	ldr	r3, [sp, #12]
 800aa3c:	3331      	adds	r3, #49	@ 0x31
 800aa3e:	f88b 3000 	strb.w	r3, [fp]
 800aa42:	e52e      	b.n	800a4a2 <_dtoa_r+0x49a>
 800aa44:	4628      	mov	r0, r5
 800aa46:	e7b9      	b.n	800a9bc <_dtoa_r+0x9b4>
 800aa48:	2201      	movs	r2, #1
 800aa4a:	e7e2      	b.n	800aa12 <_dtoa_r+0xa0a>
 800aa4c:	9904      	ldr	r1, [sp, #16]
 800aa4e:	2900      	cmp	r1, #0
 800aa50:	db04      	blt.n	800aa5c <_dtoa_r+0xa54>
 800aa52:	9807      	ldr	r0, [sp, #28]
 800aa54:	4301      	orrs	r1, r0
 800aa56:	9806      	ldr	r0, [sp, #24]
 800aa58:	4301      	orrs	r1, r0
 800aa5a:	d120      	bne.n	800aa9e <_dtoa_r+0xa96>
 800aa5c:	2a00      	cmp	r2, #0
 800aa5e:	ddee      	ble.n	800aa3e <_dtoa_r+0xa36>
 800aa60:	2201      	movs	r2, #1
 800aa62:	9902      	ldr	r1, [sp, #8]
 800aa64:	4648      	mov	r0, r9
 800aa66:	9300      	str	r3, [sp, #0]
 800aa68:	f000 fea6 	bl	800b7b8 <__lshift>
 800aa6c:	4621      	mov	r1, r4
 800aa6e:	9002      	str	r0, [sp, #8]
 800aa70:	f000 ff0e 	bl	800b890 <__mcmp>
 800aa74:	2800      	cmp	r0, #0
 800aa76:	9b00      	ldr	r3, [sp, #0]
 800aa78:	dc02      	bgt.n	800aa80 <_dtoa_r+0xa78>
 800aa7a:	d1e0      	bne.n	800aa3e <_dtoa_r+0xa36>
 800aa7c:	07da      	lsls	r2, r3, #31
 800aa7e:	d5de      	bpl.n	800aa3e <_dtoa_r+0xa36>
 800aa80:	2b39      	cmp	r3, #57	@ 0x39
 800aa82:	d1da      	bne.n	800aa3a <_dtoa_r+0xa32>
 800aa84:	2339      	movs	r3, #57	@ 0x39
 800aa86:	f88b 3000 	strb.w	r3, [fp]
 800aa8a:	4633      	mov	r3, r6
 800aa8c:	461e      	mov	r6, r3
 800aa8e:	3b01      	subs	r3, #1
 800aa90:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800aa94:	2a39      	cmp	r2, #57	@ 0x39
 800aa96:	d04f      	beq.n	800ab38 <_dtoa_r+0xb30>
 800aa98:	3201      	adds	r2, #1
 800aa9a:	701a      	strb	r2, [r3, #0]
 800aa9c:	e501      	b.n	800a4a2 <_dtoa_r+0x49a>
 800aa9e:	2a00      	cmp	r2, #0
 800aaa0:	dd03      	ble.n	800aaaa <_dtoa_r+0xaa2>
 800aaa2:	2b39      	cmp	r3, #57	@ 0x39
 800aaa4:	d0ee      	beq.n	800aa84 <_dtoa_r+0xa7c>
 800aaa6:	3301      	adds	r3, #1
 800aaa8:	e7c9      	b.n	800aa3e <_dtoa_r+0xa36>
 800aaaa:	9a00      	ldr	r2, [sp, #0]
 800aaac:	9908      	ldr	r1, [sp, #32]
 800aaae:	f802 3c01 	strb.w	r3, [r2, #-1]
 800aab2:	428a      	cmp	r2, r1
 800aab4:	d029      	beq.n	800ab0a <_dtoa_r+0xb02>
 800aab6:	2300      	movs	r3, #0
 800aab8:	220a      	movs	r2, #10
 800aaba:	9902      	ldr	r1, [sp, #8]
 800aabc:	4648      	mov	r0, r9
 800aabe:	f000 fcd3 	bl	800b468 <__multadd>
 800aac2:	42af      	cmp	r7, r5
 800aac4:	9002      	str	r0, [sp, #8]
 800aac6:	f04f 0300 	mov.w	r3, #0
 800aaca:	f04f 020a 	mov.w	r2, #10
 800aace:	4639      	mov	r1, r7
 800aad0:	4648      	mov	r0, r9
 800aad2:	d107      	bne.n	800aae4 <_dtoa_r+0xadc>
 800aad4:	f000 fcc8 	bl	800b468 <__multadd>
 800aad8:	4607      	mov	r7, r0
 800aada:	4605      	mov	r5, r0
 800aadc:	9b00      	ldr	r3, [sp, #0]
 800aade:	3301      	adds	r3, #1
 800aae0:	9300      	str	r3, [sp, #0]
 800aae2:	e777      	b.n	800a9d4 <_dtoa_r+0x9cc>
 800aae4:	f000 fcc0 	bl	800b468 <__multadd>
 800aae8:	4629      	mov	r1, r5
 800aaea:	4607      	mov	r7, r0
 800aaec:	2300      	movs	r3, #0
 800aaee:	220a      	movs	r2, #10
 800aaf0:	4648      	mov	r0, r9
 800aaf2:	f000 fcb9 	bl	800b468 <__multadd>
 800aaf6:	4605      	mov	r5, r0
 800aaf8:	e7f0      	b.n	800aadc <_dtoa_r+0xad4>
 800aafa:	f1bb 0f00 	cmp.w	fp, #0
 800aafe:	f04f 0700 	mov.w	r7, #0
 800ab02:	bfcc      	ite	gt
 800ab04:	465e      	movgt	r6, fp
 800ab06:	2601      	movle	r6, #1
 800ab08:	4456      	add	r6, sl
 800ab0a:	2201      	movs	r2, #1
 800ab0c:	9902      	ldr	r1, [sp, #8]
 800ab0e:	4648      	mov	r0, r9
 800ab10:	9300      	str	r3, [sp, #0]
 800ab12:	f000 fe51 	bl	800b7b8 <__lshift>
 800ab16:	4621      	mov	r1, r4
 800ab18:	9002      	str	r0, [sp, #8]
 800ab1a:	f000 feb9 	bl	800b890 <__mcmp>
 800ab1e:	2800      	cmp	r0, #0
 800ab20:	dcb3      	bgt.n	800aa8a <_dtoa_r+0xa82>
 800ab22:	d102      	bne.n	800ab2a <_dtoa_r+0xb22>
 800ab24:	9b00      	ldr	r3, [sp, #0]
 800ab26:	07db      	lsls	r3, r3, #31
 800ab28:	d4af      	bmi.n	800aa8a <_dtoa_r+0xa82>
 800ab2a:	4633      	mov	r3, r6
 800ab2c:	461e      	mov	r6, r3
 800ab2e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ab32:	2a30      	cmp	r2, #48	@ 0x30
 800ab34:	d0fa      	beq.n	800ab2c <_dtoa_r+0xb24>
 800ab36:	e4b4      	b.n	800a4a2 <_dtoa_r+0x49a>
 800ab38:	459a      	cmp	sl, r3
 800ab3a:	d1a7      	bne.n	800aa8c <_dtoa_r+0xa84>
 800ab3c:	2331      	movs	r3, #49	@ 0x31
 800ab3e:	f108 0801 	add.w	r8, r8, #1
 800ab42:	f88a 3000 	strb.w	r3, [sl]
 800ab46:	e4ac      	b.n	800a4a2 <_dtoa_r+0x49a>
 800ab48:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ab4a:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800aba8 <_dtoa_r+0xba0>
 800ab4e:	b11b      	cbz	r3, 800ab58 <_dtoa_r+0xb50>
 800ab50:	f10a 0308 	add.w	r3, sl, #8
 800ab54:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800ab56:	6013      	str	r3, [r2, #0]
 800ab58:	4650      	mov	r0, sl
 800ab5a:	b017      	add	sp, #92	@ 0x5c
 800ab5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab60:	9b07      	ldr	r3, [sp, #28]
 800ab62:	2b01      	cmp	r3, #1
 800ab64:	f77f ae2d 	ble.w	800a7c2 <_dtoa_r+0x7ba>
 800ab68:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ab6a:	9308      	str	r3, [sp, #32]
 800ab6c:	2001      	movs	r0, #1
 800ab6e:	e64c      	b.n	800a80a <_dtoa_r+0x802>
 800ab70:	f1bb 0f00 	cmp.w	fp, #0
 800ab74:	f77f aed8 	ble.w	800a928 <_dtoa_r+0x920>
 800ab78:	4656      	mov	r6, sl
 800ab7a:	4621      	mov	r1, r4
 800ab7c:	9802      	ldr	r0, [sp, #8]
 800ab7e:	f7ff f9b6 	bl	8009eee <quorem>
 800ab82:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800ab86:	f806 3b01 	strb.w	r3, [r6], #1
 800ab8a:	eba6 020a 	sub.w	r2, r6, sl
 800ab8e:	4593      	cmp	fp, r2
 800ab90:	ddb3      	ble.n	800aafa <_dtoa_r+0xaf2>
 800ab92:	2300      	movs	r3, #0
 800ab94:	220a      	movs	r2, #10
 800ab96:	9902      	ldr	r1, [sp, #8]
 800ab98:	4648      	mov	r0, r9
 800ab9a:	f000 fc65 	bl	800b468 <__multadd>
 800ab9e:	9002      	str	r0, [sp, #8]
 800aba0:	e7eb      	b.n	800ab7a <_dtoa_r+0xb72>
 800aba2:	bf00      	nop
 800aba4:	08023300 	.word	0x08023300
 800aba8:	08023284 	.word	0x08023284

0800abac <__ssputs_r>:
 800abac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abb0:	461f      	mov	r7, r3
 800abb2:	688e      	ldr	r6, [r1, #8]
 800abb4:	4682      	mov	sl, r0
 800abb6:	460c      	mov	r4, r1
 800abb8:	42be      	cmp	r6, r7
 800abba:	4690      	mov	r8, r2
 800abbc:	680b      	ldr	r3, [r1, #0]
 800abbe:	d82d      	bhi.n	800ac1c <__ssputs_r+0x70>
 800abc0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800abc4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800abc8:	d026      	beq.n	800ac18 <__ssputs_r+0x6c>
 800abca:	6965      	ldr	r5, [r4, #20]
 800abcc:	6909      	ldr	r1, [r1, #16]
 800abce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800abd2:	eba3 0901 	sub.w	r9, r3, r1
 800abd6:	1c7b      	adds	r3, r7, #1
 800abd8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800abdc:	444b      	add	r3, r9
 800abde:	106d      	asrs	r5, r5, #1
 800abe0:	429d      	cmp	r5, r3
 800abe2:	bf38      	it	cc
 800abe4:	461d      	movcc	r5, r3
 800abe6:	0553      	lsls	r3, r2, #21
 800abe8:	d527      	bpl.n	800ac3a <__ssputs_r+0x8e>
 800abea:	4629      	mov	r1, r5
 800abec:	f000 faa2 	bl	800b134 <_malloc_r>
 800abf0:	4606      	mov	r6, r0
 800abf2:	b360      	cbz	r0, 800ac4e <__ssputs_r+0xa2>
 800abf4:	464a      	mov	r2, r9
 800abf6:	6921      	ldr	r1, [r4, #16]
 800abf8:	f7ff f96c 	bl	8009ed4 <memcpy>
 800abfc:	89a3      	ldrh	r3, [r4, #12]
 800abfe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ac02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac06:	81a3      	strh	r3, [r4, #12]
 800ac08:	6126      	str	r6, [r4, #16]
 800ac0a:	444e      	add	r6, r9
 800ac0c:	6165      	str	r5, [r4, #20]
 800ac0e:	eba5 0509 	sub.w	r5, r5, r9
 800ac12:	6026      	str	r6, [r4, #0]
 800ac14:	463e      	mov	r6, r7
 800ac16:	60a5      	str	r5, [r4, #8]
 800ac18:	42be      	cmp	r6, r7
 800ac1a:	d900      	bls.n	800ac1e <__ssputs_r+0x72>
 800ac1c:	463e      	mov	r6, r7
 800ac1e:	4632      	mov	r2, r6
 800ac20:	4641      	mov	r1, r8
 800ac22:	6820      	ldr	r0, [r4, #0]
 800ac24:	f001 f8a7 	bl	800bd76 <memmove>
 800ac28:	68a3      	ldr	r3, [r4, #8]
 800ac2a:	2000      	movs	r0, #0
 800ac2c:	1b9b      	subs	r3, r3, r6
 800ac2e:	60a3      	str	r3, [r4, #8]
 800ac30:	6823      	ldr	r3, [r4, #0]
 800ac32:	4433      	add	r3, r6
 800ac34:	6023      	str	r3, [r4, #0]
 800ac36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac3a:	462a      	mov	r2, r5
 800ac3c:	f000 ff77 	bl	800bb2e <_realloc_r>
 800ac40:	4606      	mov	r6, r0
 800ac42:	2800      	cmp	r0, #0
 800ac44:	d1e0      	bne.n	800ac08 <__ssputs_r+0x5c>
 800ac46:	6921      	ldr	r1, [r4, #16]
 800ac48:	4650      	mov	r0, sl
 800ac4a:	f001 f959 	bl	800bf00 <_free_r>
 800ac4e:	230c      	movs	r3, #12
 800ac50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ac54:	f8ca 3000 	str.w	r3, [sl]
 800ac58:	89a3      	ldrh	r3, [r4, #12]
 800ac5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac5e:	81a3      	strh	r3, [r4, #12]
 800ac60:	e7e9      	b.n	800ac36 <__ssputs_r+0x8a>
	...

0800ac64 <_svfiprintf_r>:
 800ac64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac68:	4698      	mov	r8, r3
 800ac6a:	898b      	ldrh	r3, [r1, #12]
 800ac6c:	b09d      	sub	sp, #116	@ 0x74
 800ac6e:	4607      	mov	r7, r0
 800ac70:	061b      	lsls	r3, r3, #24
 800ac72:	460d      	mov	r5, r1
 800ac74:	4614      	mov	r4, r2
 800ac76:	d510      	bpl.n	800ac9a <_svfiprintf_r+0x36>
 800ac78:	690b      	ldr	r3, [r1, #16]
 800ac7a:	b973      	cbnz	r3, 800ac9a <_svfiprintf_r+0x36>
 800ac7c:	2140      	movs	r1, #64	@ 0x40
 800ac7e:	f000 fa59 	bl	800b134 <_malloc_r>
 800ac82:	6028      	str	r0, [r5, #0]
 800ac84:	6128      	str	r0, [r5, #16]
 800ac86:	b930      	cbnz	r0, 800ac96 <_svfiprintf_r+0x32>
 800ac88:	230c      	movs	r3, #12
 800ac8a:	603b      	str	r3, [r7, #0]
 800ac8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ac90:	b01d      	add	sp, #116	@ 0x74
 800ac92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac96:	2340      	movs	r3, #64	@ 0x40
 800ac98:	616b      	str	r3, [r5, #20]
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	f8cd 800c 	str.w	r8, [sp, #12]
 800aca0:	f04f 0901 	mov.w	r9, #1
 800aca4:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800ae48 <_svfiprintf_r+0x1e4>
 800aca8:	9309      	str	r3, [sp, #36]	@ 0x24
 800acaa:	2320      	movs	r3, #32
 800acac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800acb0:	2330      	movs	r3, #48	@ 0x30
 800acb2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800acb6:	4623      	mov	r3, r4
 800acb8:	469a      	mov	sl, r3
 800acba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800acbe:	b10a      	cbz	r2, 800acc4 <_svfiprintf_r+0x60>
 800acc0:	2a25      	cmp	r2, #37	@ 0x25
 800acc2:	d1f9      	bne.n	800acb8 <_svfiprintf_r+0x54>
 800acc4:	ebba 0b04 	subs.w	fp, sl, r4
 800acc8:	d00b      	beq.n	800ace2 <_svfiprintf_r+0x7e>
 800acca:	465b      	mov	r3, fp
 800accc:	4622      	mov	r2, r4
 800acce:	4629      	mov	r1, r5
 800acd0:	4638      	mov	r0, r7
 800acd2:	f7ff ff6b 	bl	800abac <__ssputs_r>
 800acd6:	3001      	adds	r0, #1
 800acd8:	f000 80a7 	beq.w	800ae2a <_svfiprintf_r+0x1c6>
 800acdc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800acde:	445a      	add	r2, fp
 800ace0:	9209      	str	r2, [sp, #36]	@ 0x24
 800ace2:	f89a 3000 	ldrb.w	r3, [sl]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	f000 809f 	beq.w	800ae2a <_svfiprintf_r+0x1c6>
 800acec:	2300      	movs	r3, #0
 800acee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800acf2:	f10a 0a01 	add.w	sl, sl, #1
 800acf6:	9304      	str	r3, [sp, #16]
 800acf8:	9307      	str	r3, [sp, #28]
 800acfa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800acfe:	931a      	str	r3, [sp, #104]	@ 0x68
 800ad00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad04:	4654      	mov	r4, sl
 800ad06:	2205      	movs	r2, #5
 800ad08:	484f      	ldr	r0, [pc, #316]	@ (800ae48 <_svfiprintf_r+0x1e4>)
 800ad0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad0e:	f7ff f8d3 	bl	8009eb8 <memchr>
 800ad12:	9a04      	ldr	r2, [sp, #16]
 800ad14:	b9d8      	cbnz	r0, 800ad4e <_svfiprintf_r+0xea>
 800ad16:	06d0      	lsls	r0, r2, #27
 800ad18:	bf44      	itt	mi
 800ad1a:	2320      	movmi	r3, #32
 800ad1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ad20:	0711      	lsls	r1, r2, #28
 800ad22:	bf44      	itt	mi
 800ad24:	232b      	movmi	r3, #43	@ 0x2b
 800ad26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ad2a:	f89a 3000 	ldrb.w	r3, [sl]
 800ad2e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ad30:	d015      	beq.n	800ad5e <_svfiprintf_r+0xfa>
 800ad32:	9a07      	ldr	r2, [sp, #28]
 800ad34:	4654      	mov	r4, sl
 800ad36:	2000      	movs	r0, #0
 800ad38:	f04f 0c0a 	mov.w	ip, #10
 800ad3c:	4621      	mov	r1, r4
 800ad3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad42:	3b30      	subs	r3, #48	@ 0x30
 800ad44:	2b09      	cmp	r3, #9
 800ad46:	d94b      	bls.n	800ade0 <_svfiprintf_r+0x17c>
 800ad48:	b1b0      	cbz	r0, 800ad78 <_svfiprintf_r+0x114>
 800ad4a:	9207      	str	r2, [sp, #28]
 800ad4c:	e014      	b.n	800ad78 <_svfiprintf_r+0x114>
 800ad4e:	eba0 0308 	sub.w	r3, r0, r8
 800ad52:	46a2      	mov	sl, r4
 800ad54:	fa09 f303 	lsl.w	r3, r9, r3
 800ad58:	4313      	orrs	r3, r2
 800ad5a:	9304      	str	r3, [sp, #16]
 800ad5c:	e7d2      	b.n	800ad04 <_svfiprintf_r+0xa0>
 800ad5e:	9b03      	ldr	r3, [sp, #12]
 800ad60:	1d19      	adds	r1, r3, #4
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	9103      	str	r1, [sp, #12]
 800ad68:	bfbb      	ittet	lt
 800ad6a:	425b      	neglt	r3, r3
 800ad6c:	f042 0202 	orrlt.w	r2, r2, #2
 800ad70:	9307      	strge	r3, [sp, #28]
 800ad72:	9307      	strlt	r3, [sp, #28]
 800ad74:	bfb8      	it	lt
 800ad76:	9204      	strlt	r2, [sp, #16]
 800ad78:	7823      	ldrb	r3, [r4, #0]
 800ad7a:	2b2e      	cmp	r3, #46	@ 0x2e
 800ad7c:	d10a      	bne.n	800ad94 <_svfiprintf_r+0x130>
 800ad7e:	7863      	ldrb	r3, [r4, #1]
 800ad80:	2b2a      	cmp	r3, #42	@ 0x2a
 800ad82:	d132      	bne.n	800adea <_svfiprintf_r+0x186>
 800ad84:	9b03      	ldr	r3, [sp, #12]
 800ad86:	3402      	adds	r4, #2
 800ad88:	1d1a      	adds	r2, r3, #4
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ad90:	9203      	str	r2, [sp, #12]
 800ad92:	9305      	str	r3, [sp, #20]
 800ad94:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ae58 <_svfiprintf_r+0x1f4>
 800ad98:	2203      	movs	r2, #3
 800ad9a:	7821      	ldrb	r1, [r4, #0]
 800ad9c:	4650      	mov	r0, sl
 800ad9e:	f7ff f88b 	bl	8009eb8 <memchr>
 800ada2:	b138      	cbz	r0, 800adb4 <_svfiprintf_r+0x150>
 800ada4:	eba0 000a 	sub.w	r0, r0, sl
 800ada8:	2240      	movs	r2, #64	@ 0x40
 800adaa:	9b04      	ldr	r3, [sp, #16]
 800adac:	3401      	adds	r4, #1
 800adae:	4082      	lsls	r2, r0
 800adb0:	4313      	orrs	r3, r2
 800adb2:	9304      	str	r3, [sp, #16]
 800adb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adb8:	2206      	movs	r2, #6
 800adba:	4824      	ldr	r0, [pc, #144]	@ (800ae4c <_svfiprintf_r+0x1e8>)
 800adbc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800adc0:	f7ff f87a 	bl	8009eb8 <memchr>
 800adc4:	2800      	cmp	r0, #0
 800adc6:	d036      	beq.n	800ae36 <_svfiprintf_r+0x1d2>
 800adc8:	4b21      	ldr	r3, [pc, #132]	@ (800ae50 <_svfiprintf_r+0x1ec>)
 800adca:	bb1b      	cbnz	r3, 800ae14 <_svfiprintf_r+0x1b0>
 800adcc:	9b03      	ldr	r3, [sp, #12]
 800adce:	3307      	adds	r3, #7
 800add0:	f023 0307 	bic.w	r3, r3, #7
 800add4:	3308      	adds	r3, #8
 800add6:	9303      	str	r3, [sp, #12]
 800add8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800adda:	4433      	add	r3, r6
 800addc:	9309      	str	r3, [sp, #36]	@ 0x24
 800adde:	e76a      	b.n	800acb6 <_svfiprintf_r+0x52>
 800ade0:	fb0c 3202 	mla	r2, ip, r2, r3
 800ade4:	460c      	mov	r4, r1
 800ade6:	2001      	movs	r0, #1
 800ade8:	e7a8      	b.n	800ad3c <_svfiprintf_r+0xd8>
 800adea:	2300      	movs	r3, #0
 800adec:	3401      	adds	r4, #1
 800adee:	f04f 0c0a 	mov.w	ip, #10
 800adf2:	4619      	mov	r1, r3
 800adf4:	9305      	str	r3, [sp, #20]
 800adf6:	4620      	mov	r0, r4
 800adf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800adfc:	3a30      	subs	r2, #48	@ 0x30
 800adfe:	2a09      	cmp	r2, #9
 800ae00:	d903      	bls.n	800ae0a <_svfiprintf_r+0x1a6>
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d0c6      	beq.n	800ad94 <_svfiprintf_r+0x130>
 800ae06:	9105      	str	r1, [sp, #20]
 800ae08:	e7c4      	b.n	800ad94 <_svfiprintf_r+0x130>
 800ae0a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae0e:	4604      	mov	r4, r0
 800ae10:	2301      	movs	r3, #1
 800ae12:	e7f0      	b.n	800adf6 <_svfiprintf_r+0x192>
 800ae14:	ab03      	add	r3, sp, #12
 800ae16:	462a      	mov	r2, r5
 800ae18:	a904      	add	r1, sp, #16
 800ae1a:	4638      	mov	r0, r7
 800ae1c:	9300      	str	r3, [sp, #0]
 800ae1e:	4b0d      	ldr	r3, [pc, #52]	@ (800ae54 <_svfiprintf_r+0x1f0>)
 800ae20:	f7fe faee 	bl	8009400 <_printf_float>
 800ae24:	1c42      	adds	r2, r0, #1
 800ae26:	4606      	mov	r6, r0
 800ae28:	d1d6      	bne.n	800add8 <_svfiprintf_r+0x174>
 800ae2a:	89ab      	ldrh	r3, [r5, #12]
 800ae2c:	065b      	lsls	r3, r3, #25
 800ae2e:	f53f af2d 	bmi.w	800ac8c <_svfiprintf_r+0x28>
 800ae32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ae34:	e72c      	b.n	800ac90 <_svfiprintf_r+0x2c>
 800ae36:	ab03      	add	r3, sp, #12
 800ae38:	462a      	mov	r2, r5
 800ae3a:	a904      	add	r1, sp, #16
 800ae3c:	4638      	mov	r0, r7
 800ae3e:	9300      	str	r3, [sp, #0]
 800ae40:	4b04      	ldr	r3, [pc, #16]	@ (800ae54 <_svfiprintf_r+0x1f0>)
 800ae42:	f7fe fd79 	bl	8009938 <_printf_i>
 800ae46:	e7ed      	b.n	800ae24 <_svfiprintf_r+0x1c0>
 800ae48:	08023311 	.word	0x08023311
 800ae4c:	0802331b 	.word	0x0802331b
 800ae50:	08009401 	.word	0x08009401
 800ae54:	0800abad 	.word	0x0800abad
 800ae58:	08023317 	.word	0x08023317

0800ae5c <__sfputc_r>:
 800ae5c:	6893      	ldr	r3, [r2, #8]
 800ae5e:	3b01      	subs	r3, #1
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	b410      	push	{r4}
 800ae64:	6093      	str	r3, [r2, #8]
 800ae66:	da08      	bge.n	800ae7a <__sfputc_r+0x1e>
 800ae68:	6994      	ldr	r4, [r2, #24]
 800ae6a:	42a3      	cmp	r3, r4
 800ae6c:	db01      	blt.n	800ae72 <__sfputc_r+0x16>
 800ae6e:	290a      	cmp	r1, #10
 800ae70:	d103      	bne.n	800ae7a <__sfputc_r+0x1e>
 800ae72:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae76:	f000 be88 	b.w	800bb8a <__swbuf_r>
 800ae7a:	6813      	ldr	r3, [r2, #0]
 800ae7c:	1c58      	adds	r0, r3, #1
 800ae7e:	6010      	str	r0, [r2, #0]
 800ae80:	4608      	mov	r0, r1
 800ae82:	7019      	strb	r1, [r3, #0]
 800ae84:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae88:	4770      	bx	lr

0800ae8a <__sfputs_r>:
 800ae8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae8c:	4606      	mov	r6, r0
 800ae8e:	460f      	mov	r7, r1
 800ae90:	4614      	mov	r4, r2
 800ae92:	18d5      	adds	r5, r2, r3
 800ae94:	42ac      	cmp	r4, r5
 800ae96:	d101      	bne.n	800ae9c <__sfputs_r+0x12>
 800ae98:	2000      	movs	r0, #0
 800ae9a:	e007      	b.n	800aeac <__sfputs_r+0x22>
 800ae9c:	463a      	mov	r2, r7
 800ae9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aea2:	4630      	mov	r0, r6
 800aea4:	f7ff ffda 	bl	800ae5c <__sfputc_r>
 800aea8:	1c43      	adds	r3, r0, #1
 800aeaa:	d1f3      	bne.n	800ae94 <__sfputs_r+0xa>
 800aeac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800aeb0 <_vfiprintf_r>:
 800aeb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aeb4:	460d      	mov	r5, r1
 800aeb6:	b09d      	sub	sp, #116	@ 0x74
 800aeb8:	4614      	mov	r4, r2
 800aeba:	4698      	mov	r8, r3
 800aebc:	4606      	mov	r6, r0
 800aebe:	b118      	cbz	r0, 800aec8 <_vfiprintf_r+0x18>
 800aec0:	6a03      	ldr	r3, [r0, #32]
 800aec2:	b90b      	cbnz	r3, 800aec8 <_vfiprintf_r+0x18>
 800aec4:	f7fe ff18 	bl	8009cf8 <__sinit>
 800aec8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aeca:	07d9      	lsls	r1, r3, #31
 800aecc:	d405      	bmi.n	800aeda <_vfiprintf_r+0x2a>
 800aece:	89ab      	ldrh	r3, [r5, #12]
 800aed0:	059a      	lsls	r2, r3, #22
 800aed2:	d402      	bmi.n	800aeda <_vfiprintf_r+0x2a>
 800aed4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aed6:	f7fe ffe8 	bl	8009eaa <__retarget_lock_acquire_recursive>
 800aeda:	89ab      	ldrh	r3, [r5, #12]
 800aedc:	071b      	lsls	r3, r3, #28
 800aede:	d501      	bpl.n	800aee4 <_vfiprintf_r+0x34>
 800aee0:	692b      	ldr	r3, [r5, #16]
 800aee2:	b99b      	cbnz	r3, 800af0c <_vfiprintf_r+0x5c>
 800aee4:	4629      	mov	r1, r5
 800aee6:	4630      	mov	r0, r6
 800aee8:	f000 fe8e 	bl	800bc08 <__swsetup_r>
 800aeec:	b170      	cbz	r0, 800af0c <_vfiprintf_r+0x5c>
 800aeee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aef0:	07dc      	lsls	r4, r3, #31
 800aef2:	d504      	bpl.n	800aefe <_vfiprintf_r+0x4e>
 800aef4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aef8:	b01d      	add	sp, #116	@ 0x74
 800aefa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aefe:	89ab      	ldrh	r3, [r5, #12]
 800af00:	0598      	lsls	r0, r3, #22
 800af02:	d4f7      	bmi.n	800aef4 <_vfiprintf_r+0x44>
 800af04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800af06:	f7fe ffd1 	bl	8009eac <__retarget_lock_release_recursive>
 800af0a:	e7f3      	b.n	800aef4 <_vfiprintf_r+0x44>
 800af0c:	2300      	movs	r3, #0
 800af0e:	f8cd 800c 	str.w	r8, [sp, #12]
 800af12:	f04f 0901 	mov.w	r9, #1
 800af16:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800b0cc <_vfiprintf_r+0x21c>
 800af1a:	9309      	str	r3, [sp, #36]	@ 0x24
 800af1c:	2320      	movs	r3, #32
 800af1e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800af22:	2330      	movs	r3, #48	@ 0x30
 800af24:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800af28:	4623      	mov	r3, r4
 800af2a:	469a      	mov	sl, r3
 800af2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af30:	b10a      	cbz	r2, 800af36 <_vfiprintf_r+0x86>
 800af32:	2a25      	cmp	r2, #37	@ 0x25
 800af34:	d1f9      	bne.n	800af2a <_vfiprintf_r+0x7a>
 800af36:	ebba 0b04 	subs.w	fp, sl, r4
 800af3a:	d00b      	beq.n	800af54 <_vfiprintf_r+0xa4>
 800af3c:	465b      	mov	r3, fp
 800af3e:	4622      	mov	r2, r4
 800af40:	4629      	mov	r1, r5
 800af42:	4630      	mov	r0, r6
 800af44:	f7ff ffa1 	bl	800ae8a <__sfputs_r>
 800af48:	3001      	adds	r0, #1
 800af4a:	f000 80a7 	beq.w	800b09c <_vfiprintf_r+0x1ec>
 800af4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af50:	445a      	add	r2, fp
 800af52:	9209      	str	r2, [sp, #36]	@ 0x24
 800af54:	f89a 3000 	ldrb.w	r3, [sl]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	f000 809f 	beq.w	800b09c <_vfiprintf_r+0x1ec>
 800af5e:	2300      	movs	r3, #0
 800af60:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800af64:	f10a 0a01 	add.w	sl, sl, #1
 800af68:	9304      	str	r3, [sp, #16]
 800af6a:	9307      	str	r3, [sp, #28]
 800af6c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800af70:	931a      	str	r3, [sp, #104]	@ 0x68
 800af72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af76:	4654      	mov	r4, sl
 800af78:	2205      	movs	r2, #5
 800af7a:	4854      	ldr	r0, [pc, #336]	@ (800b0cc <_vfiprintf_r+0x21c>)
 800af7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af80:	f7fe ff9a 	bl	8009eb8 <memchr>
 800af84:	9a04      	ldr	r2, [sp, #16]
 800af86:	b9d8      	cbnz	r0, 800afc0 <_vfiprintf_r+0x110>
 800af88:	06d1      	lsls	r1, r2, #27
 800af8a:	bf44      	itt	mi
 800af8c:	2320      	movmi	r3, #32
 800af8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800af92:	0713      	lsls	r3, r2, #28
 800af94:	bf44      	itt	mi
 800af96:	232b      	movmi	r3, #43	@ 0x2b
 800af98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800af9c:	f89a 3000 	ldrb.w	r3, [sl]
 800afa0:	2b2a      	cmp	r3, #42	@ 0x2a
 800afa2:	d015      	beq.n	800afd0 <_vfiprintf_r+0x120>
 800afa4:	9a07      	ldr	r2, [sp, #28]
 800afa6:	4654      	mov	r4, sl
 800afa8:	2000      	movs	r0, #0
 800afaa:	f04f 0c0a 	mov.w	ip, #10
 800afae:	4621      	mov	r1, r4
 800afb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800afb4:	3b30      	subs	r3, #48	@ 0x30
 800afb6:	2b09      	cmp	r3, #9
 800afb8:	d94b      	bls.n	800b052 <_vfiprintf_r+0x1a2>
 800afba:	b1b0      	cbz	r0, 800afea <_vfiprintf_r+0x13a>
 800afbc:	9207      	str	r2, [sp, #28]
 800afbe:	e014      	b.n	800afea <_vfiprintf_r+0x13a>
 800afc0:	eba0 0308 	sub.w	r3, r0, r8
 800afc4:	46a2      	mov	sl, r4
 800afc6:	fa09 f303 	lsl.w	r3, r9, r3
 800afca:	4313      	orrs	r3, r2
 800afcc:	9304      	str	r3, [sp, #16]
 800afce:	e7d2      	b.n	800af76 <_vfiprintf_r+0xc6>
 800afd0:	9b03      	ldr	r3, [sp, #12]
 800afd2:	1d19      	adds	r1, r3, #4
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	9103      	str	r1, [sp, #12]
 800afda:	bfbb      	ittet	lt
 800afdc:	425b      	neglt	r3, r3
 800afde:	f042 0202 	orrlt.w	r2, r2, #2
 800afe2:	9307      	strge	r3, [sp, #28]
 800afe4:	9307      	strlt	r3, [sp, #28]
 800afe6:	bfb8      	it	lt
 800afe8:	9204      	strlt	r2, [sp, #16]
 800afea:	7823      	ldrb	r3, [r4, #0]
 800afec:	2b2e      	cmp	r3, #46	@ 0x2e
 800afee:	d10a      	bne.n	800b006 <_vfiprintf_r+0x156>
 800aff0:	7863      	ldrb	r3, [r4, #1]
 800aff2:	2b2a      	cmp	r3, #42	@ 0x2a
 800aff4:	d132      	bne.n	800b05c <_vfiprintf_r+0x1ac>
 800aff6:	9b03      	ldr	r3, [sp, #12]
 800aff8:	3402      	adds	r4, #2
 800affa:	1d1a      	adds	r2, r3, #4
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b002:	9203      	str	r2, [sp, #12]
 800b004:	9305      	str	r3, [sp, #20]
 800b006:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b0dc <_vfiprintf_r+0x22c>
 800b00a:	2203      	movs	r2, #3
 800b00c:	7821      	ldrb	r1, [r4, #0]
 800b00e:	4650      	mov	r0, sl
 800b010:	f7fe ff52 	bl	8009eb8 <memchr>
 800b014:	b138      	cbz	r0, 800b026 <_vfiprintf_r+0x176>
 800b016:	eba0 000a 	sub.w	r0, r0, sl
 800b01a:	2240      	movs	r2, #64	@ 0x40
 800b01c:	9b04      	ldr	r3, [sp, #16]
 800b01e:	3401      	adds	r4, #1
 800b020:	4082      	lsls	r2, r0
 800b022:	4313      	orrs	r3, r2
 800b024:	9304      	str	r3, [sp, #16]
 800b026:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b02a:	2206      	movs	r2, #6
 800b02c:	4828      	ldr	r0, [pc, #160]	@ (800b0d0 <_vfiprintf_r+0x220>)
 800b02e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b032:	f7fe ff41 	bl	8009eb8 <memchr>
 800b036:	2800      	cmp	r0, #0
 800b038:	d03f      	beq.n	800b0ba <_vfiprintf_r+0x20a>
 800b03a:	4b26      	ldr	r3, [pc, #152]	@ (800b0d4 <_vfiprintf_r+0x224>)
 800b03c:	bb1b      	cbnz	r3, 800b086 <_vfiprintf_r+0x1d6>
 800b03e:	9b03      	ldr	r3, [sp, #12]
 800b040:	3307      	adds	r3, #7
 800b042:	f023 0307 	bic.w	r3, r3, #7
 800b046:	3308      	adds	r3, #8
 800b048:	9303      	str	r3, [sp, #12]
 800b04a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b04c:	443b      	add	r3, r7
 800b04e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b050:	e76a      	b.n	800af28 <_vfiprintf_r+0x78>
 800b052:	fb0c 3202 	mla	r2, ip, r2, r3
 800b056:	460c      	mov	r4, r1
 800b058:	2001      	movs	r0, #1
 800b05a:	e7a8      	b.n	800afae <_vfiprintf_r+0xfe>
 800b05c:	2300      	movs	r3, #0
 800b05e:	3401      	adds	r4, #1
 800b060:	f04f 0c0a 	mov.w	ip, #10
 800b064:	4619      	mov	r1, r3
 800b066:	9305      	str	r3, [sp, #20]
 800b068:	4620      	mov	r0, r4
 800b06a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b06e:	3a30      	subs	r2, #48	@ 0x30
 800b070:	2a09      	cmp	r2, #9
 800b072:	d903      	bls.n	800b07c <_vfiprintf_r+0x1cc>
 800b074:	2b00      	cmp	r3, #0
 800b076:	d0c6      	beq.n	800b006 <_vfiprintf_r+0x156>
 800b078:	9105      	str	r1, [sp, #20]
 800b07a:	e7c4      	b.n	800b006 <_vfiprintf_r+0x156>
 800b07c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b080:	4604      	mov	r4, r0
 800b082:	2301      	movs	r3, #1
 800b084:	e7f0      	b.n	800b068 <_vfiprintf_r+0x1b8>
 800b086:	ab03      	add	r3, sp, #12
 800b088:	462a      	mov	r2, r5
 800b08a:	a904      	add	r1, sp, #16
 800b08c:	4630      	mov	r0, r6
 800b08e:	9300      	str	r3, [sp, #0]
 800b090:	4b11      	ldr	r3, [pc, #68]	@ (800b0d8 <_vfiprintf_r+0x228>)
 800b092:	f7fe f9b5 	bl	8009400 <_printf_float>
 800b096:	4607      	mov	r7, r0
 800b098:	1c78      	adds	r0, r7, #1
 800b09a:	d1d6      	bne.n	800b04a <_vfiprintf_r+0x19a>
 800b09c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b09e:	07d9      	lsls	r1, r3, #31
 800b0a0:	d405      	bmi.n	800b0ae <_vfiprintf_r+0x1fe>
 800b0a2:	89ab      	ldrh	r3, [r5, #12]
 800b0a4:	059a      	lsls	r2, r3, #22
 800b0a6:	d402      	bmi.n	800b0ae <_vfiprintf_r+0x1fe>
 800b0a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b0aa:	f7fe feff 	bl	8009eac <__retarget_lock_release_recursive>
 800b0ae:	89ab      	ldrh	r3, [r5, #12]
 800b0b0:	065b      	lsls	r3, r3, #25
 800b0b2:	f53f af1f 	bmi.w	800aef4 <_vfiprintf_r+0x44>
 800b0b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b0b8:	e71e      	b.n	800aef8 <_vfiprintf_r+0x48>
 800b0ba:	ab03      	add	r3, sp, #12
 800b0bc:	462a      	mov	r2, r5
 800b0be:	a904      	add	r1, sp, #16
 800b0c0:	4630      	mov	r0, r6
 800b0c2:	9300      	str	r3, [sp, #0]
 800b0c4:	4b04      	ldr	r3, [pc, #16]	@ (800b0d8 <_vfiprintf_r+0x228>)
 800b0c6:	f7fe fc37 	bl	8009938 <_printf_i>
 800b0ca:	e7e4      	b.n	800b096 <_vfiprintf_r+0x1e6>
 800b0cc:	08023311 	.word	0x08023311
 800b0d0:	0802331b 	.word	0x0802331b
 800b0d4:	08009401 	.word	0x08009401
 800b0d8:	0800ae8b 	.word	0x0800ae8b
 800b0dc:	08023317 	.word	0x08023317

0800b0e0 <malloc>:
 800b0e0:	4b02      	ldr	r3, [pc, #8]	@ (800b0ec <malloc+0xc>)
 800b0e2:	4601      	mov	r1, r0
 800b0e4:	6818      	ldr	r0, [r3, #0]
 800b0e6:	f000 b825 	b.w	800b134 <_malloc_r>
 800b0ea:	bf00      	nop
 800b0ec:	2000002c 	.word	0x2000002c

0800b0f0 <sbrk_aligned>:
 800b0f0:	b570      	push	{r4, r5, r6, lr}
 800b0f2:	4e0f      	ldr	r6, [pc, #60]	@ (800b130 <sbrk_aligned+0x40>)
 800b0f4:	460c      	mov	r4, r1
 800b0f6:	4605      	mov	r5, r0
 800b0f8:	6831      	ldr	r1, [r6, #0]
 800b0fa:	b911      	cbnz	r1, 800b102 <sbrk_aligned+0x12>
 800b0fc:	f000 fe8a 	bl	800be14 <_sbrk_r>
 800b100:	6030      	str	r0, [r6, #0]
 800b102:	4621      	mov	r1, r4
 800b104:	4628      	mov	r0, r5
 800b106:	f000 fe85 	bl	800be14 <_sbrk_r>
 800b10a:	1c43      	adds	r3, r0, #1
 800b10c:	d103      	bne.n	800b116 <sbrk_aligned+0x26>
 800b10e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800b112:	4620      	mov	r0, r4
 800b114:	bd70      	pop	{r4, r5, r6, pc}
 800b116:	1cc4      	adds	r4, r0, #3
 800b118:	f024 0403 	bic.w	r4, r4, #3
 800b11c:	42a0      	cmp	r0, r4
 800b11e:	d0f8      	beq.n	800b112 <sbrk_aligned+0x22>
 800b120:	1a21      	subs	r1, r4, r0
 800b122:	4628      	mov	r0, r5
 800b124:	f000 fe76 	bl	800be14 <_sbrk_r>
 800b128:	3001      	adds	r0, #1
 800b12a:	d1f2      	bne.n	800b112 <sbrk_aligned+0x22>
 800b12c:	e7ef      	b.n	800b10e <sbrk_aligned+0x1e>
 800b12e:	bf00      	nop
 800b130:	200007b4 	.word	0x200007b4

0800b134 <_malloc_r>:
 800b134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b138:	1ccd      	adds	r5, r1, #3
 800b13a:	4606      	mov	r6, r0
 800b13c:	f025 0503 	bic.w	r5, r5, #3
 800b140:	3508      	adds	r5, #8
 800b142:	2d0c      	cmp	r5, #12
 800b144:	bf38      	it	cc
 800b146:	250c      	movcc	r5, #12
 800b148:	2d00      	cmp	r5, #0
 800b14a:	db01      	blt.n	800b150 <_malloc_r+0x1c>
 800b14c:	42a9      	cmp	r1, r5
 800b14e:	d904      	bls.n	800b15a <_malloc_r+0x26>
 800b150:	230c      	movs	r3, #12
 800b152:	6033      	str	r3, [r6, #0]
 800b154:	2000      	movs	r0, #0
 800b156:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b15a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b230 <_malloc_r+0xfc>
 800b15e:	f000 f915 	bl	800b38c <__malloc_lock>
 800b162:	f8d8 3000 	ldr.w	r3, [r8]
 800b166:	461c      	mov	r4, r3
 800b168:	bb44      	cbnz	r4, 800b1bc <_malloc_r+0x88>
 800b16a:	4629      	mov	r1, r5
 800b16c:	4630      	mov	r0, r6
 800b16e:	f7ff ffbf 	bl	800b0f0 <sbrk_aligned>
 800b172:	1c43      	adds	r3, r0, #1
 800b174:	4604      	mov	r4, r0
 800b176:	d158      	bne.n	800b22a <_malloc_r+0xf6>
 800b178:	f8d8 4000 	ldr.w	r4, [r8]
 800b17c:	4627      	mov	r7, r4
 800b17e:	2f00      	cmp	r7, #0
 800b180:	d143      	bne.n	800b20a <_malloc_r+0xd6>
 800b182:	2c00      	cmp	r4, #0
 800b184:	d04b      	beq.n	800b21e <_malloc_r+0xea>
 800b186:	6823      	ldr	r3, [r4, #0]
 800b188:	4639      	mov	r1, r7
 800b18a:	4630      	mov	r0, r6
 800b18c:	eb04 0903 	add.w	r9, r4, r3
 800b190:	f000 fe40 	bl	800be14 <_sbrk_r>
 800b194:	4581      	cmp	r9, r0
 800b196:	d142      	bne.n	800b21e <_malloc_r+0xea>
 800b198:	6821      	ldr	r1, [r4, #0]
 800b19a:	4630      	mov	r0, r6
 800b19c:	1a6d      	subs	r5, r5, r1
 800b19e:	4629      	mov	r1, r5
 800b1a0:	f7ff ffa6 	bl	800b0f0 <sbrk_aligned>
 800b1a4:	3001      	adds	r0, #1
 800b1a6:	d03a      	beq.n	800b21e <_malloc_r+0xea>
 800b1a8:	6823      	ldr	r3, [r4, #0]
 800b1aa:	442b      	add	r3, r5
 800b1ac:	6023      	str	r3, [r4, #0]
 800b1ae:	f8d8 3000 	ldr.w	r3, [r8]
 800b1b2:	685a      	ldr	r2, [r3, #4]
 800b1b4:	bb62      	cbnz	r2, 800b210 <_malloc_r+0xdc>
 800b1b6:	f8c8 7000 	str.w	r7, [r8]
 800b1ba:	e00f      	b.n	800b1dc <_malloc_r+0xa8>
 800b1bc:	6822      	ldr	r2, [r4, #0]
 800b1be:	1b52      	subs	r2, r2, r5
 800b1c0:	d420      	bmi.n	800b204 <_malloc_r+0xd0>
 800b1c2:	2a0b      	cmp	r2, #11
 800b1c4:	d917      	bls.n	800b1f6 <_malloc_r+0xc2>
 800b1c6:	1961      	adds	r1, r4, r5
 800b1c8:	42a3      	cmp	r3, r4
 800b1ca:	6025      	str	r5, [r4, #0]
 800b1cc:	bf18      	it	ne
 800b1ce:	6059      	strne	r1, [r3, #4]
 800b1d0:	6863      	ldr	r3, [r4, #4]
 800b1d2:	bf08      	it	eq
 800b1d4:	f8c8 1000 	streq.w	r1, [r8]
 800b1d8:	5162      	str	r2, [r4, r5]
 800b1da:	604b      	str	r3, [r1, #4]
 800b1dc:	4630      	mov	r0, r6
 800b1de:	f000 f8db 	bl	800b398 <__malloc_unlock>
 800b1e2:	f104 000b 	add.w	r0, r4, #11
 800b1e6:	1d23      	adds	r3, r4, #4
 800b1e8:	f020 0007 	bic.w	r0, r0, #7
 800b1ec:	1ac2      	subs	r2, r0, r3
 800b1ee:	bf1c      	itt	ne
 800b1f0:	1a1b      	subne	r3, r3, r0
 800b1f2:	50a3      	strne	r3, [r4, r2]
 800b1f4:	e7af      	b.n	800b156 <_malloc_r+0x22>
 800b1f6:	6862      	ldr	r2, [r4, #4]
 800b1f8:	42a3      	cmp	r3, r4
 800b1fa:	bf0c      	ite	eq
 800b1fc:	f8c8 2000 	streq.w	r2, [r8]
 800b200:	605a      	strne	r2, [r3, #4]
 800b202:	e7eb      	b.n	800b1dc <_malloc_r+0xa8>
 800b204:	4623      	mov	r3, r4
 800b206:	6864      	ldr	r4, [r4, #4]
 800b208:	e7ae      	b.n	800b168 <_malloc_r+0x34>
 800b20a:	463c      	mov	r4, r7
 800b20c:	687f      	ldr	r7, [r7, #4]
 800b20e:	e7b6      	b.n	800b17e <_malloc_r+0x4a>
 800b210:	461a      	mov	r2, r3
 800b212:	685b      	ldr	r3, [r3, #4]
 800b214:	42a3      	cmp	r3, r4
 800b216:	d1fb      	bne.n	800b210 <_malloc_r+0xdc>
 800b218:	2300      	movs	r3, #0
 800b21a:	6053      	str	r3, [r2, #4]
 800b21c:	e7de      	b.n	800b1dc <_malloc_r+0xa8>
 800b21e:	230c      	movs	r3, #12
 800b220:	4630      	mov	r0, r6
 800b222:	6033      	str	r3, [r6, #0]
 800b224:	f000 f8b8 	bl	800b398 <__malloc_unlock>
 800b228:	e794      	b.n	800b154 <_malloc_r+0x20>
 800b22a:	6005      	str	r5, [r0, #0]
 800b22c:	e7d6      	b.n	800b1dc <_malloc_r+0xa8>
 800b22e:	bf00      	nop
 800b230:	200007b8 	.word	0x200007b8

0800b234 <__sflush_r>:
 800b234:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b23c:	0716      	lsls	r6, r2, #28
 800b23e:	4605      	mov	r5, r0
 800b240:	460c      	mov	r4, r1
 800b242:	d454      	bmi.n	800b2ee <__sflush_r+0xba>
 800b244:	684b      	ldr	r3, [r1, #4]
 800b246:	2b00      	cmp	r3, #0
 800b248:	dc02      	bgt.n	800b250 <__sflush_r+0x1c>
 800b24a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	dd48      	ble.n	800b2e2 <__sflush_r+0xae>
 800b250:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b252:	2e00      	cmp	r6, #0
 800b254:	d045      	beq.n	800b2e2 <__sflush_r+0xae>
 800b256:	2300      	movs	r3, #0
 800b258:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b25c:	682f      	ldr	r7, [r5, #0]
 800b25e:	6a21      	ldr	r1, [r4, #32]
 800b260:	602b      	str	r3, [r5, #0]
 800b262:	d030      	beq.n	800b2c6 <__sflush_r+0x92>
 800b264:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b266:	89a3      	ldrh	r3, [r4, #12]
 800b268:	0759      	lsls	r1, r3, #29
 800b26a:	d505      	bpl.n	800b278 <__sflush_r+0x44>
 800b26c:	6863      	ldr	r3, [r4, #4]
 800b26e:	1ad2      	subs	r2, r2, r3
 800b270:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b272:	b10b      	cbz	r3, 800b278 <__sflush_r+0x44>
 800b274:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b276:	1ad2      	subs	r2, r2, r3
 800b278:	2300      	movs	r3, #0
 800b27a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b27c:	6a21      	ldr	r1, [r4, #32]
 800b27e:	4628      	mov	r0, r5
 800b280:	47b0      	blx	r6
 800b282:	1c43      	adds	r3, r0, #1
 800b284:	89a3      	ldrh	r3, [r4, #12]
 800b286:	d106      	bne.n	800b296 <__sflush_r+0x62>
 800b288:	6829      	ldr	r1, [r5, #0]
 800b28a:	291d      	cmp	r1, #29
 800b28c:	d82b      	bhi.n	800b2e6 <__sflush_r+0xb2>
 800b28e:	4a2a      	ldr	r2, [pc, #168]	@ (800b338 <__sflush_r+0x104>)
 800b290:	40ca      	lsrs	r2, r1
 800b292:	07d6      	lsls	r6, r2, #31
 800b294:	d527      	bpl.n	800b2e6 <__sflush_r+0xb2>
 800b296:	2200      	movs	r2, #0
 800b298:	04d9      	lsls	r1, r3, #19
 800b29a:	6062      	str	r2, [r4, #4]
 800b29c:	6922      	ldr	r2, [r4, #16]
 800b29e:	6022      	str	r2, [r4, #0]
 800b2a0:	d504      	bpl.n	800b2ac <__sflush_r+0x78>
 800b2a2:	1c42      	adds	r2, r0, #1
 800b2a4:	d101      	bne.n	800b2aa <__sflush_r+0x76>
 800b2a6:	682b      	ldr	r3, [r5, #0]
 800b2a8:	b903      	cbnz	r3, 800b2ac <__sflush_r+0x78>
 800b2aa:	6560      	str	r0, [r4, #84]	@ 0x54
 800b2ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b2ae:	602f      	str	r7, [r5, #0]
 800b2b0:	b1b9      	cbz	r1, 800b2e2 <__sflush_r+0xae>
 800b2b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b2b6:	4299      	cmp	r1, r3
 800b2b8:	d002      	beq.n	800b2c0 <__sflush_r+0x8c>
 800b2ba:	4628      	mov	r0, r5
 800b2bc:	f000 fe20 	bl	800bf00 <_free_r>
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	6363      	str	r3, [r4, #52]	@ 0x34
 800b2c4:	e00d      	b.n	800b2e2 <__sflush_r+0xae>
 800b2c6:	2301      	movs	r3, #1
 800b2c8:	4628      	mov	r0, r5
 800b2ca:	47b0      	blx	r6
 800b2cc:	4602      	mov	r2, r0
 800b2ce:	1c50      	adds	r0, r2, #1
 800b2d0:	d1c9      	bne.n	800b266 <__sflush_r+0x32>
 800b2d2:	682b      	ldr	r3, [r5, #0]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d0c6      	beq.n	800b266 <__sflush_r+0x32>
 800b2d8:	2b1d      	cmp	r3, #29
 800b2da:	d001      	beq.n	800b2e0 <__sflush_r+0xac>
 800b2dc:	2b16      	cmp	r3, #22
 800b2de:	d11d      	bne.n	800b31c <__sflush_r+0xe8>
 800b2e0:	602f      	str	r7, [r5, #0]
 800b2e2:	2000      	movs	r0, #0
 800b2e4:	e021      	b.n	800b32a <__sflush_r+0xf6>
 800b2e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b2ea:	b21b      	sxth	r3, r3
 800b2ec:	e01a      	b.n	800b324 <__sflush_r+0xf0>
 800b2ee:	690f      	ldr	r7, [r1, #16]
 800b2f0:	2f00      	cmp	r7, #0
 800b2f2:	d0f6      	beq.n	800b2e2 <__sflush_r+0xae>
 800b2f4:	0793      	lsls	r3, r2, #30
 800b2f6:	680e      	ldr	r6, [r1, #0]
 800b2f8:	600f      	str	r7, [r1, #0]
 800b2fa:	bf0c      	ite	eq
 800b2fc:	694b      	ldreq	r3, [r1, #20]
 800b2fe:	2300      	movne	r3, #0
 800b300:	eba6 0807 	sub.w	r8, r6, r7
 800b304:	608b      	str	r3, [r1, #8]
 800b306:	f1b8 0f00 	cmp.w	r8, #0
 800b30a:	ddea      	ble.n	800b2e2 <__sflush_r+0xae>
 800b30c:	4643      	mov	r3, r8
 800b30e:	463a      	mov	r2, r7
 800b310:	6a21      	ldr	r1, [r4, #32]
 800b312:	4628      	mov	r0, r5
 800b314:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b316:	47b0      	blx	r6
 800b318:	2800      	cmp	r0, #0
 800b31a:	dc08      	bgt.n	800b32e <__sflush_r+0xfa>
 800b31c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b320:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b324:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b328:	81a3      	strh	r3, [r4, #12]
 800b32a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b32e:	4407      	add	r7, r0
 800b330:	eba8 0800 	sub.w	r8, r8, r0
 800b334:	e7e7      	b.n	800b306 <__sflush_r+0xd2>
 800b336:	bf00      	nop
 800b338:	20400001 	.word	0x20400001

0800b33c <_fflush_r>:
 800b33c:	b538      	push	{r3, r4, r5, lr}
 800b33e:	690b      	ldr	r3, [r1, #16]
 800b340:	4605      	mov	r5, r0
 800b342:	460c      	mov	r4, r1
 800b344:	b913      	cbnz	r3, 800b34c <_fflush_r+0x10>
 800b346:	2500      	movs	r5, #0
 800b348:	4628      	mov	r0, r5
 800b34a:	bd38      	pop	{r3, r4, r5, pc}
 800b34c:	b118      	cbz	r0, 800b356 <_fflush_r+0x1a>
 800b34e:	6a03      	ldr	r3, [r0, #32]
 800b350:	b90b      	cbnz	r3, 800b356 <_fflush_r+0x1a>
 800b352:	f7fe fcd1 	bl	8009cf8 <__sinit>
 800b356:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d0f3      	beq.n	800b346 <_fflush_r+0xa>
 800b35e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b360:	07d0      	lsls	r0, r2, #31
 800b362:	d404      	bmi.n	800b36e <_fflush_r+0x32>
 800b364:	0599      	lsls	r1, r3, #22
 800b366:	d402      	bmi.n	800b36e <_fflush_r+0x32>
 800b368:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b36a:	f7fe fd9e 	bl	8009eaa <__retarget_lock_acquire_recursive>
 800b36e:	4628      	mov	r0, r5
 800b370:	4621      	mov	r1, r4
 800b372:	f7ff ff5f 	bl	800b234 <__sflush_r>
 800b376:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b378:	4605      	mov	r5, r0
 800b37a:	07da      	lsls	r2, r3, #31
 800b37c:	d4e4      	bmi.n	800b348 <_fflush_r+0xc>
 800b37e:	89a3      	ldrh	r3, [r4, #12]
 800b380:	059b      	lsls	r3, r3, #22
 800b382:	d4e1      	bmi.n	800b348 <_fflush_r+0xc>
 800b384:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b386:	f7fe fd91 	bl	8009eac <__retarget_lock_release_recursive>
 800b38a:	e7dd      	b.n	800b348 <_fflush_r+0xc>

0800b38c <__malloc_lock>:
 800b38c:	4801      	ldr	r0, [pc, #4]	@ (800b394 <__malloc_lock+0x8>)
 800b38e:	f7fe bd8c 	b.w	8009eaa <__retarget_lock_acquire_recursive>
 800b392:	bf00      	nop
 800b394:	200007b0 	.word	0x200007b0

0800b398 <__malloc_unlock>:
 800b398:	4801      	ldr	r0, [pc, #4]	@ (800b3a0 <__malloc_unlock+0x8>)
 800b39a:	f7fe bd87 	b.w	8009eac <__retarget_lock_release_recursive>
 800b39e:	bf00      	nop
 800b3a0:	200007b0 	.word	0x200007b0

0800b3a4 <_Balloc>:
 800b3a4:	b570      	push	{r4, r5, r6, lr}
 800b3a6:	69c6      	ldr	r6, [r0, #28]
 800b3a8:	4604      	mov	r4, r0
 800b3aa:	460d      	mov	r5, r1
 800b3ac:	b976      	cbnz	r6, 800b3cc <_Balloc+0x28>
 800b3ae:	2010      	movs	r0, #16
 800b3b0:	f7ff fe96 	bl	800b0e0 <malloc>
 800b3b4:	4602      	mov	r2, r0
 800b3b6:	61e0      	str	r0, [r4, #28]
 800b3b8:	b920      	cbnz	r0, 800b3c4 <_Balloc+0x20>
 800b3ba:	4b18      	ldr	r3, [pc, #96]	@ (800b41c <_Balloc+0x78>)
 800b3bc:	216b      	movs	r1, #107	@ 0x6b
 800b3be:	4818      	ldr	r0, [pc, #96]	@ (800b420 <_Balloc+0x7c>)
 800b3c0:	f000 fd6c 	bl	800be9c <__assert_func>
 800b3c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b3c8:	6006      	str	r6, [r0, #0]
 800b3ca:	60c6      	str	r6, [r0, #12]
 800b3cc:	69e6      	ldr	r6, [r4, #28]
 800b3ce:	68f3      	ldr	r3, [r6, #12]
 800b3d0:	b183      	cbz	r3, 800b3f4 <_Balloc+0x50>
 800b3d2:	69e3      	ldr	r3, [r4, #28]
 800b3d4:	68db      	ldr	r3, [r3, #12]
 800b3d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b3da:	b9b8      	cbnz	r0, 800b40c <_Balloc+0x68>
 800b3dc:	2101      	movs	r1, #1
 800b3de:	4620      	mov	r0, r4
 800b3e0:	fa01 f605 	lsl.w	r6, r1, r5
 800b3e4:	1d72      	adds	r2, r6, #5
 800b3e6:	0092      	lsls	r2, r2, #2
 800b3e8:	f000 fd76 	bl	800bed8 <_calloc_r>
 800b3ec:	b160      	cbz	r0, 800b408 <_Balloc+0x64>
 800b3ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b3f2:	e00e      	b.n	800b412 <_Balloc+0x6e>
 800b3f4:	2221      	movs	r2, #33	@ 0x21
 800b3f6:	2104      	movs	r1, #4
 800b3f8:	4620      	mov	r0, r4
 800b3fa:	f000 fd6d 	bl	800bed8 <_calloc_r>
 800b3fe:	69e3      	ldr	r3, [r4, #28]
 800b400:	60f0      	str	r0, [r6, #12]
 800b402:	68db      	ldr	r3, [r3, #12]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d1e4      	bne.n	800b3d2 <_Balloc+0x2e>
 800b408:	2000      	movs	r0, #0
 800b40a:	bd70      	pop	{r4, r5, r6, pc}
 800b40c:	6802      	ldr	r2, [r0, #0]
 800b40e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b412:	2300      	movs	r3, #0
 800b414:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b418:	e7f7      	b.n	800b40a <_Balloc+0x66>
 800b41a:	bf00      	nop
 800b41c:	08023291 	.word	0x08023291
 800b420:	08023322 	.word	0x08023322

0800b424 <_Bfree>:
 800b424:	b570      	push	{r4, r5, r6, lr}
 800b426:	69c6      	ldr	r6, [r0, #28]
 800b428:	4605      	mov	r5, r0
 800b42a:	460c      	mov	r4, r1
 800b42c:	b976      	cbnz	r6, 800b44c <_Bfree+0x28>
 800b42e:	2010      	movs	r0, #16
 800b430:	f7ff fe56 	bl	800b0e0 <malloc>
 800b434:	4602      	mov	r2, r0
 800b436:	61e8      	str	r0, [r5, #28]
 800b438:	b920      	cbnz	r0, 800b444 <_Bfree+0x20>
 800b43a:	4b09      	ldr	r3, [pc, #36]	@ (800b460 <_Bfree+0x3c>)
 800b43c:	218f      	movs	r1, #143	@ 0x8f
 800b43e:	4809      	ldr	r0, [pc, #36]	@ (800b464 <_Bfree+0x40>)
 800b440:	f000 fd2c 	bl	800be9c <__assert_func>
 800b444:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b448:	6006      	str	r6, [r0, #0]
 800b44a:	60c6      	str	r6, [r0, #12]
 800b44c:	b13c      	cbz	r4, 800b45e <_Bfree+0x3a>
 800b44e:	69eb      	ldr	r3, [r5, #28]
 800b450:	6862      	ldr	r2, [r4, #4]
 800b452:	68db      	ldr	r3, [r3, #12]
 800b454:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b458:	6021      	str	r1, [r4, #0]
 800b45a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b45e:	bd70      	pop	{r4, r5, r6, pc}
 800b460:	08023291 	.word	0x08023291
 800b464:	08023322 	.word	0x08023322

0800b468 <__multadd>:
 800b468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b46c:	f101 0c14 	add.w	ip, r1, #20
 800b470:	4607      	mov	r7, r0
 800b472:	460c      	mov	r4, r1
 800b474:	461e      	mov	r6, r3
 800b476:	690d      	ldr	r5, [r1, #16]
 800b478:	2000      	movs	r0, #0
 800b47a:	f8dc 3000 	ldr.w	r3, [ip]
 800b47e:	3001      	adds	r0, #1
 800b480:	b299      	uxth	r1, r3
 800b482:	4285      	cmp	r5, r0
 800b484:	fb02 6101 	mla	r1, r2, r1, r6
 800b488:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b48c:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800b490:	b289      	uxth	r1, r1
 800b492:	fb02 3306 	mla	r3, r2, r6, r3
 800b496:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b49a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b49e:	f84c 1b04 	str.w	r1, [ip], #4
 800b4a2:	dcea      	bgt.n	800b47a <__multadd+0x12>
 800b4a4:	b30e      	cbz	r6, 800b4ea <__multadd+0x82>
 800b4a6:	68a3      	ldr	r3, [r4, #8]
 800b4a8:	42ab      	cmp	r3, r5
 800b4aa:	dc19      	bgt.n	800b4e0 <__multadd+0x78>
 800b4ac:	6861      	ldr	r1, [r4, #4]
 800b4ae:	4638      	mov	r0, r7
 800b4b0:	3101      	adds	r1, #1
 800b4b2:	f7ff ff77 	bl	800b3a4 <_Balloc>
 800b4b6:	4680      	mov	r8, r0
 800b4b8:	b928      	cbnz	r0, 800b4c6 <__multadd+0x5e>
 800b4ba:	4602      	mov	r2, r0
 800b4bc:	4b0c      	ldr	r3, [pc, #48]	@ (800b4f0 <__multadd+0x88>)
 800b4be:	21ba      	movs	r1, #186	@ 0xba
 800b4c0:	480c      	ldr	r0, [pc, #48]	@ (800b4f4 <__multadd+0x8c>)
 800b4c2:	f000 fceb 	bl	800be9c <__assert_func>
 800b4c6:	6922      	ldr	r2, [r4, #16]
 800b4c8:	f104 010c 	add.w	r1, r4, #12
 800b4cc:	300c      	adds	r0, #12
 800b4ce:	3202      	adds	r2, #2
 800b4d0:	0092      	lsls	r2, r2, #2
 800b4d2:	f7fe fcff 	bl	8009ed4 <memcpy>
 800b4d6:	4621      	mov	r1, r4
 800b4d8:	4644      	mov	r4, r8
 800b4da:	4638      	mov	r0, r7
 800b4dc:	f7ff ffa2 	bl	800b424 <_Bfree>
 800b4e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b4e4:	3501      	adds	r5, #1
 800b4e6:	615e      	str	r6, [r3, #20]
 800b4e8:	6125      	str	r5, [r4, #16]
 800b4ea:	4620      	mov	r0, r4
 800b4ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4f0:	08023300 	.word	0x08023300
 800b4f4:	08023322 	.word	0x08023322

0800b4f8 <__hi0bits>:
 800b4f8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b4fc:	4603      	mov	r3, r0
 800b4fe:	bf36      	itet	cc
 800b500:	0403      	lslcc	r3, r0, #16
 800b502:	2000      	movcs	r0, #0
 800b504:	2010      	movcc	r0, #16
 800b506:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b50a:	bf3c      	itt	cc
 800b50c:	021b      	lslcc	r3, r3, #8
 800b50e:	3008      	addcc	r0, #8
 800b510:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b514:	bf3c      	itt	cc
 800b516:	011b      	lslcc	r3, r3, #4
 800b518:	3004      	addcc	r0, #4
 800b51a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b51e:	bf3c      	itt	cc
 800b520:	009b      	lslcc	r3, r3, #2
 800b522:	3002      	addcc	r0, #2
 800b524:	2b00      	cmp	r3, #0
 800b526:	db05      	blt.n	800b534 <__hi0bits+0x3c>
 800b528:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b52c:	f100 0001 	add.w	r0, r0, #1
 800b530:	bf08      	it	eq
 800b532:	2020      	moveq	r0, #32
 800b534:	4770      	bx	lr

0800b536 <__lo0bits>:
 800b536:	6803      	ldr	r3, [r0, #0]
 800b538:	4602      	mov	r2, r0
 800b53a:	f013 0007 	ands.w	r0, r3, #7
 800b53e:	d00b      	beq.n	800b558 <__lo0bits+0x22>
 800b540:	07d9      	lsls	r1, r3, #31
 800b542:	d421      	bmi.n	800b588 <__lo0bits+0x52>
 800b544:	0798      	lsls	r0, r3, #30
 800b546:	bf47      	ittee	mi
 800b548:	085b      	lsrmi	r3, r3, #1
 800b54a:	2001      	movmi	r0, #1
 800b54c:	089b      	lsrpl	r3, r3, #2
 800b54e:	2002      	movpl	r0, #2
 800b550:	bf4c      	ite	mi
 800b552:	6013      	strmi	r3, [r2, #0]
 800b554:	6013      	strpl	r3, [r2, #0]
 800b556:	4770      	bx	lr
 800b558:	b299      	uxth	r1, r3
 800b55a:	b909      	cbnz	r1, 800b560 <__lo0bits+0x2a>
 800b55c:	0c1b      	lsrs	r3, r3, #16
 800b55e:	2010      	movs	r0, #16
 800b560:	b2d9      	uxtb	r1, r3
 800b562:	b909      	cbnz	r1, 800b568 <__lo0bits+0x32>
 800b564:	3008      	adds	r0, #8
 800b566:	0a1b      	lsrs	r3, r3, #8
 800b568:	0719      	lsls	r1, r3, #28
 800b56a:	bf04      	itt	eq
 800b56c:	091b      	lsreq	r3, r3, #4
 800b56e:	3004      	addeq	r0, #4
 800b570:	0799      	lsls	r1, r3, #30
 800b572:	bf04      	itt	eq
 800b574:	089b      	lsreq	r3, r3, #2
 800b576:	3002      	addeq	r0, #2
 800b578:	07d9      	lsls	r1, r3, #31
 800b57a:	d403      	bmi.n	800b584 <__lo0bits+0x4e>
 800b57c:	085b      	lsrs	r3, r3, #1
 800b57e:	f100 0001 	add.w	r0, r0, #1
 800b582:	d003      	beq.n	800b58c <__lo0bits+0x56>
 800b584:	6013      	str	r3, [r2, #0]
 800b586:	4770      	bx	lr
 800b588:	2000      	movs	r0, #0
 800b58a:	4770      	bx	lr
 800b58c:	2020      	movs	r0, #32
 800b58e:	4770      	bx	lr

0800b590 <__i2b>:
 800b590:	b510      	push	{r4, lr}
 800b592:	460c      	mov	r4, r1
 800b594:	2101      	movs	r1, #1
 800b596:	f7ff ff05 	bl	800b3a4 <_Balloc>
 800b59a:	4602      	mov	r2, r0
 800b59c:	b928      	cbnz	r0, 800b5aa <__i2b+0x1a>
 800b59e:	4b05      	ldr	r3, [pc, #20]	@ (800b5b4 <__i2b+0x24>)
 800b5a0:	f240 1145 	movw	r1, #325	@ 0x145
 800b5a4:	4804      	ldr	r0, [pc, #16]	@ (800b5b8 <__i2b+0x28>)
 800b5a6:	f000 fc79 	bl	800be9c <__assert_func>
 800b5aa:	2301      	movs	r3, #1
 800b5ac:	6144      	str	r4, [r0, #20]
 800b5ae:	6103      	str	r3, [r0, #16]
 800b5b0:	bd10      	pop	{r4, pc}
 800b5b2:	bf00      	nop
 800b5b4:	08023300 	.word	0x08023300
 800b5b8:	08023322 	.word	0x08023322

0800b5bc <__multiply>:
 800b5bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5c0:	4617      	mov	r7, r2
 800b5c2:	690a      	ldr	r2, [r1, #16]
 800b5c4:	4689      	mov	r9, r1
 800b5c6:	b085      	sub	sp, #20
 800b5c8:	693b      	ldr	r3, [r7, #16]
 800b5ca:	429a      	cmp	r2, r3
 800b5cc:	bfa2      	ittt	ge
 800b5ce:	463b      	movge	r3, r7
 800b5d0:	460f      	movge	r7, r1
 800b5d2:	4699      	movge	r9, r3
 800b5d4:	693d      	ldr	r5, [r7, #16]
 800b5d6:	68bb      	ldr	r3, [r7, #8]
 800b5d8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b5dc:	6879      	ldr	r1, [r7, #4]
 800b5de:	eb05 060a 	add.w	r6, r5, sl
 800b5e2:	42b3      	cmp	r3, r6
 800b5e4:	bfb8      	it	lt
 800b5e6:	3101      	addlt	r1, #1
 800b5e8:	f7ff fedc 	bl	800b3a4 <_Balloc>
 800b5ec:	b930      	cbnz	r0, 800b5fc <__multiply+0x40>
 800b5ee:	4602      	mov	r2, r0
 800b5f0:	4b42      	ldr	r3, [pc, #264]	@ (800b6fc <__multiply+0x140>)
 800b5f2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b5f6:	4842      	ldr	r0, [pc, #264]	@ (800b700 <__multiply+0x144>)
 800b5f8:	f000 fc50 	bl	800be9c <__assert_func>
 800b5fc:	f100 0414 	add.w	r4, r0, #20
 800b600:	2200      	movs	r2, #0
 800b602:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800b606:	4623      	mov	r3, r4
 800b608:	4573      	cmp	r3, lr
 800b60a:	d320      	bcc.n	800b64e <__multiply+0x92>
 800b60c:	f107 0814 	add.w	r8, r7, #20
 800b610:	f109 0114 	add.w	r1, r9, #20
 800b614:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800b618:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800b61c:	9302      	str	r3, [sp, #8]
 800b61e:	1beb      	subs	r3, r5, r7
 800b620:	3715      	adds	r7, #21
 800b622:	3b15      	subs	r3, #21
 800b624:	f023 0303 	bic.w	r3, r3, #3
 800b628:	3304      	adds	r3, #4
 800b62a:	42bd      	cmp	r5, r7
 800b62c:	bf38      	it	cc
 800b62e:	2304      	movcc	r3, #4
 800b630:	9301      	str	r3, [sp, #4]
 800b632:	9b02      	ldr	r3, [sp, #8]
 800b634:	9103      	str	r1, [sp, #12]
 800b636:	428b      	cmp	r3, r1
 800b638:	d80c      	bhi.n	800b654 <__multiply+0x98>
 800b63a:	2e00      	cmp	r6, #0
 800b63c:	dd03      	ble.n	800b646 <__multiply+0x8a>
 800b63e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b642:	2b00      	cmp	r3, #0
 800b644:	d057      	beq.n	800b6f6 <__multiply+0x13a>
 800b646:	6106      	str	r6, [r0, #16]
 800b648:	b005      	add	sp, #20
 800b64a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b64e:	f843 2b04 	str.w	r2, [r3], #4
 800b652:	e7d9      	b.n	800b608 <__multiply+0x4c>
 800b654:	f8b1 a000 	ldrh.w	sl, [r1]
 800b658:	f1ba 0f00 	cmp.w	sl, #0
 800b65c:	d021      	beq.n	800b6a2 <__multiply+0xe6>
 800b65e:	46c4      	mov	ip, r8
 800b660:	46a1      	mov	r9, r4
 800b662:	2700      	movs	r7, #0
 800b664:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b668:	f8d9 3000 	ldr.w	r3, [r9]
 800b66c:	fa1f fb82 	uxth.w	fp, r2
 800b670:	4565      	cmp	r5, ip
 800b672:	b29b      	uxth	r3, r3
 800b674:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800b678:	fb0a 330b 	mla	r3, sl, fp, r3
 800b67c:	443b      	add	r3, r7
 800b67e:	f8d9 7000 	ldr.w	r7, [r9]
 800b682:	ea4f 4717 	mov.w	r7, r7, lsr #16
 800b686:	fb0a 7202 	mla	r2, sl, r2, r7
 800b68a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800b68e:	b29b      	uxth	r3, r3
 800b690:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800b694:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b698:	f849 3b04 	str.w	r3, [r9], #4
 800b69c:	d8e2      	bhi.n	800b664 <__multiply+0xa8>
 800b69e:	9b01      	ldr	r3, [sp, #4]
 800b6a0:	50e7      	str	r7, [r4, r3]
 800b6a2:	9b03      	ldr	r3, [sp, #12]
 800b6a4:	3104      	adds	r1, #4
 800b6a6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b6aa:	f1b9 0f00 	cmp.w	r9, #0
 800b6ae:	d020      	beq.n	800b6f2 <__multiply+0x136>
 800b6b0:	6823      	ldr	r3, [r4, #0]
 800b6b2:	4647      	mov	r7, r8
 800b6b4:	46a4      	mov	ip, r4
 800b6b6:	f04f 0a00 	mov.w	sl, #0
 800b6ba:	f8b7 b000 	ldrh.w	fp, [r7]
 800b6be:	b29b      	uxth	r3, r3
 800b6c0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800b6c4:	fb09 220b 	mla	r2, r9, fp, r2
 800b6c8:	4452      	add	r2, sl
 800b6ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b6ce:	f84c 3b04 	str.w	r3, [ip], #4
 800b6d2:	f857 3b04 	ldr.w	r3, [r7], #4
 800b6d6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b6da:	f8bc 3000 	ldrh.w	r3, [ip]
 800b6de:	42bd      	cmp	r5, r7
 800b6e0:	fb09 330a 	mla	r3, r9, sl, r3
 800b6e4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800b6e8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b6ec:	d8e5      	bhi.n	800b6ba <__multiply+0xfe>
 800b6ee:	9a01      	ldr	r2, [sp, #4]
 800b6f0:	50a3      	str	r3, [r4, r2]
 800b6f2:	3404      	adds	r4, #4
 800b6f4:	e79d      	b.n	800b632 <__multiply+0x76>
 800b6f6:	3e01      	subs	r6, #1
 800b6f8:	e79f      	b.n	800b63a <__multiply+0x7e>
 800b6fa:	bf00      	nop
 800b6fc:	08023300 	.word	0x08023300
 800b700:	08023322 	.word	0x08023322

0800b704 <__pow5mult>:
 800b704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b708:	4615      	mov	r5, r2
 800b70a:	f012 0203 	ands.w	r2, r2, #3
 800b70e:	4607      	mov	r7, r0
 800b710:	460e      	mov	r6, r1
 800b712:	d007      	beq.n	800b724 <__pow5mult+0x20>
 800b714:	3a01      	subs	r2, #1
 800b716:	4c25      	ldr	r4, [pc, #148]	@ (800b7ac <__pow5mult+0xa8>)
 800b718:	2300      	movs	r3, #0
 800b71a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b71e:	f7ff fea3 	bl	800b468 <__multadd>
 800b722:	4606      	mov	r6, r0
 800b724:	10ad      	asrs	r5, r5, #2
 800b726:	d03d      	beq.n	800b7a4 <__pow5mult+0xa0>
 800b728:	69fc      	ldr	r4, [r7, #28]
 800b72a:	b97c      	cbnz	r4, 800b74c <__pow5mult+0x48>
 800b72c:	2010      	movs	r0, #16
 800b72e:	f7ff fcd7 	bl	800b0e0 <malloc>
 800b732:	4602      	mov	r2, r0
 800b734:	61f8      	str	r0, [r7, #28]
 800b736:	b928      	cbnz	r0, 800b744 <__pow5mult+0x40>
 800b738:	4b1d      	ldr	r3, [pc, #116]	@ (800b7b0 <__pow5mult+0xac>)
 800b73a:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b73e:	481d      	ldr	r0, [pc, #116]	@ (800b7b4 <__pow5mult+0xb0>)
 800b740:	f000 fbac 	bl	800be9c <__assert_func>
 800b744:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b748:	6004      	str	r4, [r0, #0]
 800b74a:	60c4      	str	r4, [r0, #12]
 800b74c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b750:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b754:	b94c      	cbnz	r4, 800b76a <__pow5mult+0x66>
 800b756:	f240 2171 	movw	r1, #625	@ 0x271
 800b75a:	4638      	mov	r0, r7
 800b75c:	f7ff ff18 	bl	800b590 <__i2b>
 800b760:	2300      	movs	r3, #0
 800b762:	4604      	mov	r4, r0
 800b764:	f8c8 0008 	str.w	r0, [r8, #8]
 800b768:	6003      	str	r3, [r0, #0]
 800b76a:	f04f 0900 	mov.w	r9, #0
 800b76e:	07eb      	lsls	r3, r5, #31
 800b770:	d50a      	bpl.n	800b788 <__pow5mult+0x84>
 800b772:	4631      	mov	r1, r6
 800b774:	4622      	mov	r2, r4
 800b776:	4638      	mov	r0, r7
 800b778:	f7ff ff20 	bl	800b5bc <__multiply>
 800b77c:	4680      	mov	r8, r0
 800b77e:	4631      	mov	r1, r6
 800b780:	4638      	mov	r0, r7
 800b782:	4646      	mov	r6, r8
 800b784:	f7ff fe4e 	bl	800b424 <_Bfree>
 800b788:	106d      	asrs	r5, r5, #1
 800b78a:	d00b      	beq.n	800b7a4 <__pow5mult+0xa0>
 800b78c:	6820      	ldr	r0, [r4, #0]
 800b78e:	b938      	cbnz	r0, 800b7a0 <__pow5mult+0x9c>
 800b790:	4622      	mov	r2, r4
 800b792:	4621      	mov	r1, r4
 800b794:	4638      	mov	r0, r7
 800b796:	f7ff ff11 	bl	800b5bc <__multiply>
 800b79a:	6020      	str	r0, [r4, #0]
 800b79c:	f8c0 9000 	str.w	r9, [r0]
 800b7a0:	4604      	mov	r4, r0
 800b7a2:	e7e4      	b.n	800b76e <__pow5mult+0x6a>
 800b7a4:	4630      	mov	r0, r6
 800b7a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7aa:	bf00      	nop
 800b7ac:	080233c4 	.word	0x080233c4
 800b7b0:	08023291 	.word	0x08023291
 800b7b4:	08023322 	.word	0x08023322

0800b7b8 <__lshift>:
 800b7b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7bc:	460c      	mov	r4, r1
 800b7be:	4607      	mov	r7, r0
 800b7c0:	4691      	mov	r9, r2
 800b7c2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b7c6:	6923      	ldr	r3, [r4, #16]
 800b7c8:	6849      	ldr	r1, [r1, #4]
 800b7ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b7ce:	68a3      	ldr	r3, [r4, #8]
 800b7d0:	f108 0601 	add.w	r6, r8, #1
 800b7d4:	42b3      	cmp	r3, r6
 800b7d6:	db0b      	blt.n	800b7f0 <__lshift+0x38>
 800b7d8:	4638      	mov	r0, r7
 800b7da:	f7ff fde3 	bl	800b3a4 <_Balloc>
 800b7de:	4605      	mov	r5, r0
 800b7e0:	b948      	cbnz	r0, 800b7f6 <__lshift+0x3e>
 800b7e2:	4602      	mov	r2, r0
 800b7e4:	4b28      	ldr	r3, [pc, #160]	@ (800b888 <__lshift+0xd0>)
 800b7e6:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b7ea:	4828      	ldr	r0, [pc, #160]	@ (800b88c <__lshift+0xd4>)
 800b7ec:	f000 fb56 	bl	800be9c <__assert_func>
 800b7f0:	3101      	adds	r1, #1
 800b7f2:	005b      	lsls	r3, r3, #1
 800b7f4:	e7ee      	b.n	800b7d4 <__lshift+0x1c>
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	f100 0114 	add.w	r1, r0, #20
 800b7fc:	f100 0210 	add.w	r2, r0, #16
 800b800:	4618      	mov	r0, r3
 800b802:	4553      	cmp	r3, sl
 800b804:	db33      	blt.n	800b86e <__lshift+0xb6>
 800b806:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b80a:	f104 0314 	add.w	r3, r4, #20
 800b80e:	6920      	ldr	r0, [r4, #16]
 800b810:	f019 091f 	ands.w	r9, r9, #31
 800b814:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b818:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b81c:	d02b      	beq.n	800b876 <__lshift+0xbe>
 800b81e:	f1c9 0e20 	rsb	lr, r9, #32
 800b822:	468a      	mov	sl, r1
 800b824:	2200      	movs	r2, #0
 800b826:	6818      	ldr	r0, [r3, #0]
 800b828:	fa00 f009 	lsl.w	r0, r0, r9
 800b82c:	4310      	orrs	r0, r2
 800b82e:	f84a 0b04 	str.w	r0, [sl], #4
 800b832:	f853 2b04 	ldr.w	r2, [r3], #4
 800b836:	459c      	cmp	ip, r3
 800b838:	fa22 f20e 	lsr.w	r2, r2, lr
 800b83c:	d8f3      	bhi.n	800b826 <__lshift+0x6e>
 800b83e:	ebac 0304 	sub.w	r3, ip, r4
 800b842:	f104 0015 	add.w	r0, r4, #21
 800b846:	3b15      	subs	r3, #21
 800b848:	f023 0303 	bic.w	r3, r3, #3
 800b84c:	3304      	adds	r3, #4
 800b84e:	4560      	cmp	r0, ip
 800b850:	bf88      	it	hi
 800b852:	2304      	movhi	r3, #4
 800b854:	50ca      	str	r2, [r1, r3]
 800b856:	b10a      	cbz	r2, 800b85c <__lshift+0xa4>
 800b858:	f108 0602 	add.w	r6, r8, #2
 800b85c:	3e01      	subs	r6, #1
 800b85e:	4638      	mov	r0, r7
 800b860:	4621      	mov	r1, r4
 800b862:	612e      	str	r6, [r5, #16]
 800b864:	f7ff fdde 	bl	800b424 <_Bfree>
 800b868:	4628      	mov	r0, r5
 800b86a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b86e:	3301      	adds	r3, #1
 800b870:	f842 0f04 	str.w	r0, [r2, #4]!
 800b874:	e7c5      	b.n	800b802 <__lshift+0x4a>
 800b876:	3904      	subs	r1, #4
 800b878:	f853 2b04 	ldr.w	r2, [r3], #4
 800b87c:	459c      	cmp	ip, r3
 800b87e:	f841 2f04 	str.w	r2, [r1, #4]!
 800b882:	d8f9      	bhi.n	800b878 <__lshift+0xc0>
 800b884:	e7ea      	b.n	800b85c <__lshift+0xa4>
 800b886:	bf00      	nop
 800b888:	08023300 	.word	0x08023300
 800b88c:	08023322 	.word	0x08023322

0800b890 <__mcmp>:
 800b890:	4603      	mov	r3, r0
 800b892:	690a      	ldr	r2, [r1, #16]
 800b894:	6900      	ldr	r0, [r0, #16]
 800b896:	1a80      	subs	r0, r0, r2
 800b898:	b530      	push	{r4, r5, lr}
 800b89a:	d10e      	bne.n	800b8ba <__mcmp+0x2a>
 800b89c:	3314      	adds	r3, #20
 800b89e:	3114      	adds	r1, #20
 800b8a0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b8a4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b8a8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b8ac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b8b0:	4295      	cmp	r5, r2
 800b8b2:	d003      	beq.n	800b8bc <__mcmp+0x2c>
 800b8b4:	d205      	bcs.n	800b8c2 <__mcmp+0x32>
 800b8b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b8ba:	bd30      	pop	{r4, r5, pc}
 800b8bc:	42a3      	cmp	r3, r4
 800b8be:	d3f3      	bcc.n	800b8a8 <__mcmp+0x18>
 800b8c0:	e7fb      	b.n	800b8ba <__mcmp+0x2a>
 800b8c2:	2001      	movs	r0, #1
 800b8c4:	e7f9      	b.n	800b8ba <__mcmp+0x2a>
	...

0800b8c8 <__mdiff>:
 800b8c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8cc:	4689      	mov	r9, r1
 800b8ce:	4606      	mov	r6, r0
 800b8d0:	4611      	mov	r1, r2
 800b8d2:	4614      	mov	r4, r2
 800b8d4:	4648      	mov	r0, r9
 800b8d6:	f7ff ffdb 	bl	800b890 <__mcmp>
 800b8da:	1e05      	subs	r5, r0, #0
 800b8dc:	d112      	bne.n	800b904 <__mdiff+0x3c>
 800b8de:	4629      	mov	r1, r5
 800b8e0:	4630      	mov	r0, r6
 800b8e2:	f7ff fd5f 	bl	800b3a4 <_Balloc>
 800b8e6:	4602      	mov	r2, r0
 800b8e8:	b928      	cbnz	r0, 800b8f6 <__mdiff+0x2e>
 800b8ea:	4b41      	ldr	r3, [pc, #260]	@ (800b9f0 <__mdiff+0x128>)
 800b8ec:	f240 2137 	movw	r1, #567	@ 0x237
 800b8f0:	4840      	ldr	r0, [pc, #256]	@ (800b9f4 <__mdiff+0x12c>)
 800b8f2:	f000 fad3 	bl	800be9c <__assert_func>
 800b8f6:	2301      	movs	r3, #1
 800b8f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b8fc:	4610      	mov	r0, r2
 800b8fe:	b003      	add	sp, #12
 800b900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b904:	bfbc      	itt	lt
 800b906:	464b      	movlt	r3, r9
 800b908:	46a1      	movlt	r9, r4
 800b90a:	4630      	mov	r0, r6
 800b90c:	bfb8      	it	lt
 800b90e:	2501      	movlt	r5, #1
 800b910:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b914:	bfb4      	ite	lt
 800b916:	461c      	movlt	r4, r3
 800b918:	2500      	movge	r5, #0
 800b91a:	f7ff fd43 	bl	800b3a4 <_Balloc>
 800b91e:	4602      	mov	r2, r0
 800b920:	b918      	cbnz	r0, 800b92a <__mdiff+0x62>
 800b922:	4b33      	ldr	r3, [pc, #204]	@ (800b9f0 <__mdiff+0x128>)
 800b924:	f240 2145 	movw	r1, #581	@ 0x245
 800b928:	e7e2      	b.n	800b8f0 <__mdiff+0x28>
 800b92a:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b92e:	f104 0e14 	add.w	lr, r4, #20
 800b932:	6926      	ldr	r6, [r4, #16]
 800b934:	f100 0b14 	add.w	fp, r0, #20
 800b938:	60c5      	str	r5, [r0, #12]
 800b93a:	f109 0514 	add.w	r5, r9, #20
 800b93e:	f109 0310 	add.w	r3, r9, #16
 800b942:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b946:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b94a:	46d9      	mov	r9, fp
 800b94c:	f04f 0c00 	mov.w	ip, #0
 800b950:	9301      	str	r3, [sp, #4]
 800b952:	9b01      	ldr	r3, [sp, #4]
 800b954:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b958:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b95c:	4576      	cmp	r6, lr
 800b95e:	9301      	str	r3, [sp, #4]
 800b960:	fa1f f38a 	uxth.w	r3, sl
 800b964:	4619      	mov	r1, r3
 800b966:	b283      	uxth	r3, r0
 800b968:	ea4f 4010 	mov.w	r0, r0, lsr #16
 800b96c:	eba1 0303 	sub.w	r3, r1, r3
 800b970:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b974:	4463      	add	r3, ip
 800b976:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b97a:	b29b      	uxth	r3, r3
 800b97c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b980:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b984:	f849 3b04 	str.w	r3, [r9], #4
 800b988:	d8e3      	bhi.n	800b952 <__mdiff+0x8a>
 800b98a:	1b33      	subs	r3, r6, r4
 800b98c:	3415      	adds	r4, #21
 800b98e:	3b15      	subs	r3, #21
 800b990:	f023 0303 	bic.w	r3, r3, #3
 800b994:	3304      	adds	r3, #4
 800b996:	42a6      	cmp	r6, r4
 800b998:	bf38      	it	cc
 800b99a:	2304      	movcc	r3, #4
 800b99c:	441d      	add	r5, r3
 800b99e:	445b      	add	r3, fp
 800b9a0:	462c      	mov	r4, r5
 800b9a2:	461e      	mov	r6, r3
 800b9a4:	4544      	cmp	r4, r8
 800b9a6:	d30e      	bcc.n	800b9c6 <__mdiff+0xfe>
 800b9a8:	f108 0103 	add.w	r1, r8, #3
 800b9ac:	1b49      	subs	r1, r1, r5
 800b9ae:	3d03      	subs	r5, #3
 800b9b0:	f021 0103 	bic.w	r1, r1, #3
 800b9b4:	45a8      	cmp	r8, r5
 800b9b6:	bf38      	it	cc
 800b9b8:	2100      	movcc	r1, #0
 800b9ba:	440b      	add	r3, r1
 800b9bc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b9c0:	b199      	cbz	r1, 800b9ea <__mdiff+0x122>
 800b9c2:	6117      	str	r7, [r2, #16]
 800b9c4:	e79a      	b.n	800b8fc <__mdiff+0x34>
 800b9c6:	f854 1b04 	ldr.w	r1, [r4], #4
 800b9ca:	46e6      	mov	lr, ip
 800b9cc:	fa1f fc81 	uxth.w	ip, r1
 800b9d0:	0c08      	lsrs	r0, r1, #16
 800b9d2:	4471      	add	r1, lr
 800b9d4:	44f4      	add	ip, lr
 800b9d6:	b289      	uxth	r1, r1
 800b9d8:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b9dc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b9e0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b9e4:	f846 1b04 	str.w	r1, [r6], #4
 800b9e8:	e7dc      	b.n	800b9a4 <__mdiff+0xdc>
 800b9ea:	3f01      	subs	r7, #1
 800b9ec:	e7e6      	b.n	800b9bc <__mdiff+0xf4>
 800b9ee:	bf00      	nop
 800b9f0:	08023300 	.word	0x08023300
 800b9f4:	08023322 	.word	0x08023322

0800b9f8 <__d2b>:
 800b9f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b9fc:	460f      	mov	r7, r1
 800b9fe:	2101      	movs	r1, #1
 800ba00:	4616      	mov	r6, r2
 800ba02:	ec59 8b10 	vmov	r8, r9, d0
 800ba06:	f7ff fccd 	bl	800b3a4 <_Balloc>
 800ba0a:	4604      	mov	r4, r0
 800ba0c:	b930      	cbnz	r0, 800ba1c <__d2b+0x24>
 800ba0e:	4602      	mov	r2, r0
 800ba10:	4b23      	ldr	r3, [pc, #140]	@ (800baa0 <__d2b+0xa8>)
 800ba12:	f240 310f 	movw	r1, #783	@ 0x30f
 800ba16:	4823      	ldr	r0, [pc, #140]	@ (800baa4 <__d2b+0xac>)
 800ba18:	f000 fa40 	bl	800be9c <__assert_func>
 800ba1c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ba20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ba24:	b10d      	cbz	r5, 800ba2a <__d2b+0x32>
 800ba26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ba2a:	9301      	str	r3, [sp, #4]
 800ba2c:	f1b8 0300 	subs.w	r3, r8, #0
 800ba30:	d023      	beq.n	800ba7a <__d2b+0x82>
 800ba32:	4668      	mov	r0, sp
 800ba34:	9300      	str	r3, [sp, #0]
 800ba36:	f7ff fd7e 	bl	800b536 <__lo0bits>
 800ba3a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ba3e:	b1d0      	cbz	r0, 800ba76 <__d2b+0x7e>
 800ba40:	f1c0 0320 	rsb	r3, r0, #32
 800ba44:	fa02 f303 	lsl.w	r3, r2, r3
 800ba48:	40c2      	lsrs	r2, r0
 800ba4a:	430b      	orrs	r3, r1
 800ba4c:	9201      	str	r2, [sp, #4]
 800ba4e:	6163      	str	r3, [r4, #20]
 800ba50:	9b01      	ldr	r3, [sp, #4]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	61a3      	str	r3, [r4, #24]
 800ba56:	bf0c      	ite	eq
 800ba58:	2201      	moveq	r2, #1
 800ba5a:	2202      	movne	r2, #2
 800ba5c:	6122      	str	r2, [r4, #16]
 800ba5e:	b1a5      	cbz	r5, 800ba8a <__d2b+0x92>
 800ba60:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ba64:	4405      	add	r5, r0
 800ba66:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ba6a:	603d      	str	r5, [r7, #0]
 800ba6c:	6030      	str	r0, [r6, #0]
 800ba6e:	4620      	mov	r0, r4
 800ba70:	b003      	add	sp, #12
 800ba72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba76:	6161      	str	r1, [r4, #20]
 800ba78:	e7ea      	b.n	800ba50 <__d2b+0x58>
 800ba7a:	a801      	add	r0, sp, #4
 800ba7c:	f7ff fd5b 	bl	800b536 <__lo0bits>
 800ba80:	9b01      	ldr	r3, [sp, #4]
 800ba82:	3020      	adds	r0, #32
 800ba84:	2201      	movs	r2, #1
 800ba86:	6163      	str	r3, [r4, #20]
 800ba88:	e7e8      	b.n	800ba5c <__d2b+0x64>
 800ba8a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ba8e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ba92:	6038      	str	r0, [r7, #0]
 800ba94:	6918      	ldr	r0, [r3, #16]
 800ba96:	f7ff fd2f 	bl	800b4f8 <__hi0bits>
 800ba9a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ba9e:	e7e5      	b.n	800ba6c <__d2b+0x74>
 800baa0:	08023300 	.word	0x08023300
 800baa4:	08023322 	.word	0x08023322

0800baa8 <__sread>:
 800baa8:	b510      	push	{r4, lr}
 800baaa:	460c      	mov	r4, r1
 800baac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bab0:	f000 f99e 	bl	800bdf0 <_read_r>
 800bab4:	2800      	cmp	r0, #0
 800bab6:	bfab      	itete	ge
 800bab8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800baba:	89a3      	ldrhlt	r3, [r4, #12]
 800babc:	181b      	addge	r3, r3, r0
 800babe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bac2:	bfac      	ite	ge
 800bac4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bac6:	81a3      	strhlt	r3, [r4, #12]
 800bac8:	bd10      	pop	{r4, pc}

0800baca <__swrite>:
 800baca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bace:	461f      	mov	r7, r3
 800bad0:	898b      	ldrh	r3, [r1, #12]
 800bad2:	4605      	mov	r5, r0
 800bad4:	460c      	mov	r4, r1
 800bad6:	05db      	lsls	r3, r3, #23
 800bad8:	4616      	mov	r6, r2
 800bada:	d505      	bpl.n	800bae8 <__swrite+0x1e>
 800badc:	2302      	movs	r3, #2
 800bade:	2200      	movs	r2, #0
 800bae0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bae4:	f000 f972 	bl	800bdcc <_lseek_r>
 800bae8:	89a3      	ldrh	r3, [r4, #12]
 800baea:	4632      	mov	r2, r6
 800baec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800baf0:	4628      	mov	r0, r5
 800baf2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800baf6:	81a3      	strh	r3, [r4, #12]
 800baf8:	463b      	mov	r3, r7
 800bafa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bafe:	f000 b999 	b.w	800be34 <_write_r>

0800bb02 <__sseek>:
 800bb02:	b510      	push	{r4, lr}
 800bb04:	460c      	mov	r4, r1
 800bb06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb0a:	f000 f95f 	bl	800bdcc <_lseek_r>
 800bb0e:	1c43      	adds	r3, r0, #1
 800bb10:	89a3      	ldrh	r3, [r4, #12]
 800bb12:	bf15      	itete	ne
 800bb14:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bb16:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bb1a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bb1e:	81a3      	strheq	r3, [r4, #12]
 800bb20:	bf18      	it	ne
 800bb22:	81a3      	strhne	r3, [r4, #12]
 800bb24:	bd10      	pop	{r4, pc}

0800bb26 <__sclose>:
 800bb26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb2a:	f000 b995 	b.w	800be58 <_close_r>

0800bb2e <_realloc_r>:
 800bb2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb32:	4607      	mov	r7, r0
 800bb34:	4614      	mov	r4, r2
 800bb36:	460d      	mov	r5, r1
 800bb38:	b921      	cbnz	r1, 800bb44 <_realloc_r+0x16>
 800bb3a:	4611      	mov	r1, r2
 800bb3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb40:	f7ff baf8 	b.w	800b134 <_malloc_r>
 800bb44:	b92a      	cbnz	r2, 800bb52 <_realloc_r+0x24>
 800bb46:	4625      	mov	r5, r4
 800bb48:	f000 f9da 	bl	800bf00 <_free_r>
 800bb4c:	4628      	mov	r0, r5
 800bb4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb52:	f000 fa31 	bl	800bfb8 <_malloc_usable_size_r>
 800bb56:	4284      	cmp	r4, r0
 800bb58:	4606      	mov	r6, r0
 800bb5a:	d802      	bhi.n	800bb62 <_realloc_r+0x34>
 800bb5c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bb60:	d8f4      	bhi.n	800bb4c <_realloc_r+0x1e>
 800bb62:	4621      	mov	r1, r4
 800bb64:	4638      	mov	r0, r7
 800bb66:	f7ff fae5 	bl	800b134 <_malloc_r>
 800bb6a:	4680      	mov	r8, r0
 800bb6c:	b908      	cbnz	r0, 800bb72 <_realloc_r+0x44>
 800bb6e:	4645      	mov	r5, r8
 800bb70:	e7ec      	b.n	800bb4c <_realloc_r+0x1e>
 800bb72:	42b4      	cmp	r4, r6
 800bb74:	4622      	mov	r2, r4
 800bb76:	4629      	mov	r1, r5
 800bb78:	bf28      	it	cs
 800bb7a:	4632      	movcs	r2, r6
 800bb7c:	f7fe f9aa 	bl	8009ed4 <memcpy>
 800bb80:	4629      	mov	r1, r5
 800bb82:	4638      	mov	r0, r7
 800bb84:	f000 f9bc 	bl	800bf00 <_free_r>
 800bb88:	e7f1      	b.n	800bb6e <_realloc_r+0x40>

0800bb8a <__swbuf_r>:
 800bb8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb8c:	460e      	mov	r6, r1
 800bb8e:	4614      	mov	r4, r2
 800bb90:	4605      	mov	r5, r0
 800bb92:	b118      	cbz	r0, 800bb9c <__swbuf_r+0x12>
 800bb94:	6a03      	ldr	r3, [r0, #32]
 800bb96:	b90b      	cbnz	r3, 800bb9c <__swbuf_r+0x12>
 800bb98:	f7fe f8ae 	bl	8009cf8 <__sinit>
 800bb9c:	69a3      	ldr	r3, [r4, #24]
 800bb9e:	60a3      	str	r3, [r4, #8]
 800bba0:	89a3      	ldrh	r3, [r4, #12]
 800bba2:	071a      	lsls	r2, r3, #28
 800bba4:	d501      	bpl.n	800bbaa <__swbuf_r+0x20>
 800bba6:	6923      	ldr	r3, [r4, #16]
 800bba8:	b943      	cbnz	r3, 800bbbc <__swbuf_r+0x32>
 800bbaa:	4621      	mov	r1, r4
 800bbac:	4628      	mov	r0, r5
 800bbae:	f000 f82b 	bl	800bc08 <__swsetup_r>
 800bbb2:	b118      	cbz	r0, 800bbbc <__swbuf_r+0x32>
 800bbb4:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800bbb8:	4638      	mov	r0, r7
 800bbba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bbbc:	6823      	ldr	r3, [r4, #0]
 800bbbe:	b2f6      	uxtb	r6, r6
 800bbc0:	6922      	ldr	r2, [r4, #16]
 800bbc2:	4637      	mov	r7, r6
 800bbc4:	1a98      	subs	r0, r3, r2
 800bbc6:	6963      	ldr	r3, [r4, #20]
 800bbc8:	4283      	cmp	r3, r0
 800bbca:	dc05      	bgt.n	800bbd8 <__swbuf_r+0x4e>
 800bbcc:	4621      	mov	r1, r4
 800bbce:	4628      	mov	r0, r5
 800bbd0:	f7ff fbb4 	bl	800b33c <_fflush_r>
 800bbd4:	2800      	cmp	r0, #0
 800bbd6:	d1ed      	bne.n	800bbb4 <__swbuf_r+0x2a>
 800bbd8:	68a3      	ldr	r3, [r4, #8]
 800bbda:	3b01      	subs	r3, #1
 800bbdc:	60a3      	str	r3, [r4, #8]
 800bbde:	6823      	ldr	r3, [r4, #0]
 800bbe0:	1c5a      	adds	r2, r3, #1
 800bbe2:	6022      	str	r2, [r4, #0]
 800bbe4:	701e      	strb	r6, [r3, #0]
 800bbe6:	1c43      	adds	r3, r0, #1
 800bbe8:	6962      	ldr	r2, [r4, #20]
 800bbea:	429a      	cmp	r2, r3
 800bbec:	d004      	beq.n	800bbf8 <__swbuf_r+0x6e>
 800bbee:	89a3      	ldrh	r3, [r4, #12]
 800bbf0:	07db      	lsls	r3, r3, #31
 800bbf2:	d5e1      	bpl.n	800bbb8 <__swbuf_r+0x2e>
 800bbf4:	2e0a      	cmp	r6, #10
 800bbf6:	d1df      	bne.n	800bbb8 <__swbuf_r+0x2e>
 800bbf8:	4621      	mov	r1, r4
 800bbfa:	4628      	mov	r0, r5
 800bbfc:	f7ff fb9e 	bl	800b33c <_fflush_r>
 800bc00:	2800      	cmp	r0, #0
 800bc02:	d0d9      	beq.n	800bbb8 <__swbuf_r+0x2e>
 800bc04:	e7d6      	b.n	800bbb4 <__swbuf_r+0x2a>
	...

0800bc08 <__swsetup_r>:
 800bc08:	b538      	push	{r3, r4, r5, lr}
 800bc0a:	4b29      	ldr	r3, [pc, #164]	@ (800bcb0 <__swsetup_r+0xa8>)
 800bc0c:	4605      	mov	r5, r0
 800bc0e:	460c      	mov	r4, r1
 800bc10:	6818      	ldr	r0, [r3, #0]
 800bc12:	b118      	cbz	r0, 800bc1c <__swsetup_r+0x14>
 800bc14:	6a03      	ldr	r3, [r0, #32]
 800bc16:	b90b      	cbnz	r3, 800bc1c <__swsetup_r+0x14>
 800bc18:	f7fe f86e 	bl	8009cf8 <__sinit>
 800bc1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc20:	0719      	lsls	r1, r3, #28
 800bc22:	d422      	bmi.n	800bc6a <__swsetup_r+0x62>
 800bc24:	06da      	lsls	r2, r3, #27
 800bc26:	d407      	bmi.n	800bc38 <__swsetup_r+0x30>
 800bc28:	2209      	movs	r2, #9
 800bc2a:	602a      	str	r2, [r5, #0]
 800bc2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bc30:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bc34:	81a3      	strh	r3, [r4, #12]
 800bc36:	e033      	b.n	800bca0 <__swsetup_r+0x98>
 800bc38:	0758      	lsls	r0, r3, #29
 800bc3a:	d512      	bpl.n	800bc62 <__swsetup_r+0x5a>
 800bc3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bc3e:	b141      	cbz	r1, 800bc52 <__swsetup_r+0x4a>
 800bc40:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bc44:	4299      	cmp	r1, r3
 800bc46:	d002      	beq.n	800bc4e <__swsetup_r+0x46>
 800bc48:	4628      	mov	r0, r5
 800bc4a:	f000 f959 	bl	800bf00 <_free_r>
 800bc4e:	2300      	movs	r3, #0
 800bc50:	6363      	str	r3, [r4, #52]	@ 0x34
 800bc52:	89a3      	ldrh	r3, [r4, #12]
 800bc54:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bc58:	81a3      	strh	r3, [r4, #12]
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	6063      	str	r3, [r4, #4]
 800bc5e:	6923      	ldr	r3, [r4, #16]
 800bc60:	6023      	str	r3, [r4, #0]
 800bc62:	89a3      	ldrh	r3, [r4, #12]
 800bc64:	f043 0308 	orr.w	r3, r3, #8
 800bc68:	81a3      	strh	r3, [r4, #12]
 800bc6a:	6923      	ldr	r3, [r4, #16]
 800bc6c:	b94b      	cbnz	r3, 800bc82 <__swsetup_r+0x7a>
 800bc6e:	89a3      	ldrh	r3, [r4, #12]
 800bc70:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bc74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bc78:	d003      	beq.n	800bc82 <__swsetup_r+0x7a>
 800bc7a:	4621      	mov	r1, r4
 800bc7c:	4628      	mov	r0, r5
 800bc7e:	f000 f83e 	bl	800bcfe <__smakebuf_r>
 800bc82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc86:	f013 0201 	ands.w	r2, r3, #1
 800bc8a:	d00a      	beq.n	800bca2 <__swsetup_r+0x9a>
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	60a2      	str	r2, [r4, #8]
 800bc90:	6962      	ldr	r2, [r4, #20]
 800bc92:	4252      	negs	r2, r2
 800bc94:	61a2      	str	r2, [r4, #24]
 800bc96:	6922      	ldr	r2, [r4, #16]
 800bc98:	b942      	cbnz	r2, 800bcac <__swsetup_r+0xa4>
 800bc9a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bc9e:	d1c5      	bne.n	800bc2c <__swsetup_r+0x24>
 800bca0:	bd38      	pop	{r3, r4, r5, pc}
 800bca2:	0799      	lsls	r1, r3, #30
 800bca4:	bf58      	it	pl
 800bca6:	6962      	ldrpl	r2, [r4, #20]
 800bca8:	60a2      	str	r2, [r4, #8]
 800bcaa:	e7f4      	b.n	800bc96 <__swsetup_r+0x8e>
 800bcac:	2000      	movs	r0, #0
 800bcae:	e7f7      	b.n	800bca0 <__swsetup_r+0x98>
 800bcb0:	2000002c 	.word	0x2000002c

0800bcb4 <__swhatbuf_r>:
 800bcb4:	b570      	push	{r4, r5, r6, lr}
 800bcb6:	460c      	mov	r4, r1
 800bcb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcbc:	b096      	sub	sp, #88	@ 0x58
 800bcbe:	4615      	mov	r5, r2
 800bcc0:	2900      	cmp	r1, #0
 800bcc2:	461e      	mov	r6, r3
 800bcc4:	da0c      	bge.n	800bce0 <__swhatbuf_r+0x2c>
 800bcc6:	89a3      	ldrh	r3, [r4, #12]
 800bcc8:	2100      	movs	r1, #0
 800bcca:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bcce:	bf14      	ite	ne
 800bcd0:	2340      	movne	r3, #64	@ 0x40
 800bcd2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bcd6:	2000      	movs	r0, #0
 800bcd8:	6031      	str	r1, [r6, #0]
 800bcda:	602b      	str	r3, [r5, #0]
 800bcdc:	b016      	add	sp, #88	@ 0x58
 800bcde:	bd70      	pop	{r4, r5, r6, pc}
 800bce0:	466a      	mov	r2, sp
 800bce2:	f000 f8c9 	bl	800be78 <_fstat_r>
 800bce6:	2800      	cmp	r0, #0
 800bce8:	dbed      	blt.n	800bcc6 <__swhatbuf_r+0x12>
 800bcea:	9901      	ldr	r1, [sp, #4]
 800bcec:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bcf0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bcf4:	4259      	negs	r1, r3
 800bcf6:	4159      	adcs	r1, r3
 800bcf8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bcfc:	e7eb      	b.n	800bcd6 <__swhatbuf_r+0x22>

0800bcfe <__smakebuf_r>:
 800bcfe:	898b      	ldrh	r3, [r1, #12]
 800bd00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bd02:	079d      	lsls	r5, r3, #30
 800bd04:	4606      	mov	r6, r0
 800bd06:	460c      	mov	r4, r1
 800bd08:	d507      	bpl.n	800bd1a <__smakebuf_r+0x1c>
 800bd0a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bd0e:	6023      	str	r3, [r4, #0]
 800bd10:	6123      	str	r3, [r4, #16]
 800bd12:	2301      	movs	r3, #1
 800bd14:	6163      	str	r3, [r4, #20]
 800bd16:	b003      	add	sp, #12
 800bd18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd1a:	ab01      	add	r3, sp, #4
 800bd1c:	466a      	mov	r2, sp
 800bd1e:	f7ff ffc9 	bl	800bcb4 <__swhatbuf_r>
 800bd22:	9f00      	ldr	r7, [sp, #0]
 800bd24:	4605      	mov	r5, r0
 800bd26:	4630      	mov	r0, r6
 800bd28:	4639      	mov	r1, r7
 800bd2a:	f7ff fa03 	bl	800b134 <_malloc_r>
 800bd2e:	b948      	cbnz	r0, 800bd44 <__smakebuf_r+0x46>
 800bd30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd34:	059a      	lsls	r2, r3, #22
 800bd36:	d4ee      	bmi.n	800bd16 <__smakebuf_r+0x18>
 800bd38:	f023 0303 	bic.w	r3, r3, #3
 800bd3c:	f043 0302 	orr.w	r3, r3, #2
 800bd40:	81a3      	strh	r3, [r4, #12]
 800bd42:	e7e2      	b.n	800bd0a <__smakebuf_r+0xc>
 800bd44:	89a3      	ldrh	r3, [r4, #12]
 800bd46:	6020      	str	r0, [r4, #0]
 800bd48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bd4c:	81a3      	strh	r3, [r4, #12]
 800bd4e:	9b01      	ldr	r3, [sp, #4]
 800bd50:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bd54:	b15b      	cbz	r3, 800bd6e <__smakebuf_r+0x70>
 800bd56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd5a:	4630      	mov	r0, r6
 800bd5c:	f000 f826 	bl	800bdac <_isatty_r>
 800bd60:	b128      	cbz	r0, 800bd6e <__smakebuf_r+0x70>
 800bd62:	89a3      	ldrh	r3, [r4, #12]
 800bd64:	f023 0303 	bic.w	r3, r3, #3
 800bd68:	f043 0301 	orr.w	r3, r3, #1
 800bd6c:	81a3      	strh	r3, [r4, #12]
 800bd6e:	89a3      	ldrh	r3, [r4, #12]
 800bd70:	431d      	orrs	r5, r3
 800bd72:	81a5      	strh	r5, [r4, #12]
 800bd74:	e7cf      	b.n	800bd16 <__smakebuf_r+0x18>

0800bd76 <memmove>:
 800bd76:	4288      	cmp	r0, r1
 800bd78:	b510      	push	{r4, lr}
 800bd7a:	eb01 0402 	add.w	r4, r1, r2
 800bd7e:	d902      	bls.n	800bd86 <memmove+0x10>
 800bd80:	4284      	cmp	r4, r0
 800bd82:	4623      	mov	r3, r4
 800bd84:	d807      	bhi.n	800bd96 <memmove+0x20>
 800bd86:	1e43      	subs	r3, r0, #1
 800bd88:	42a1      	cmp	r1, r4
 800bd8a:	d008      	beq.n	800bd9e <memmove+0x28>
 800bd8c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bd90:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bd94:	e7f8      	b.n	800bd88 <memmove+0x12>
 800bd96:	4402      	add	r2, r0
 800bd98:	4601      	mov	r1, r0
 800bd9a:	428a      	cmp	r2, r1
 800bd9c:	d100      	bne.n	800bda0 <memmove+0x2a>
 800bd9e:	bd10      	pop	{r4, pc}
 800bda0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bda4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bda8:	e7f7      	b.n	800bd9a <memmove+0x24>
	...

0800bdac <_isatty_r>:
 800bdac:	b538      	push	{r3, r4, r5, lr}
 800bdae:	2300      	movs	r3, #0
 800bdb0:	4d05      	ldr	r5, [pc, #20]	@ (800bdc8 <_isatty_r+0x1c>)
 800bdb2:	4604      	mov	r4, r0
 800bdb4:	4608      	mov	r0, r1
 800bdb6:	602b      	str	r3, [r5, #0]
 800bdb8:	f7f6 ffba 	bl	8002d30 <_isatty>
 800bdbc:	1c43      	adds	r3, r0, #1
 800bdbe:	d102      	bne.n	800bdc6 <_isatty_r+0x1a>
 800bdc0:	682b      	ldr	r3, [r5, #0]
 800bdc2:	b103      	cbz	r3, 800bdc6 <_isatty_r+0x1a>
 800bdc4:	6023      	str	r3, [r4, #0]
 800bdc6:	bd38      	pop	{r3, r4, r5, pc}
 800bdc8:	200007bc 	.word	0x200007bc

0800bdcc <_lseek_r>:
 800bdcc:	b538      	push	{r3, r4, r5, lr}
 800bdce:	4604      	mov	r4, r0
 800bdd0:	4d06      	ldr	r5, [pc, #24]	@ (800bdec <_lseek_r+0x20>)
 800bdd2:	4608      	mov	r0, r1
 800bdd4:	4611      	mov	r1, r2
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	602a      	str	r2, [r5, #0]
 800bdda:	461a      	mov	r2, r3
 800bddc:	f7f6 ffb3 	bl	8002d46 <_lseek>
 800bde0:	1c43      	adds	r3, r0, #1
 800bde2:	d102      	bne.n	800bdea <_lseek_r+0x1e>
 800bde4:	682b      	ldr	r3, [r5, #0]
 800bde6:	b103      	cbz	r3, 800bdea <_lseek_r+0x1e>
 800bde8:	6023      	str	r3, [r4, #0]
 800bdea:	bd38      	pop	{r3, r4, r5, pc}
 800bdec:	200007bc 	.word	0x200007bc

0800bdf0 <_read_r>:
 800bdf0:	b538      	push	{r3, r4, r5, lr}
 800bdf2:	4604      	mov	r4, r0
 800bdf4:	4d06      	ldr	r5, [pc, #24]	@ (800be10 <_read_r+0x20>)
 800bdf6:	4608      	mov	r0, r1
 800bdf8:	4611      	mov	r1, r2
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	602a      	str	r2, [r5, #0]
 800bdfe:	461a      	mov	r2, r3
 800be00:	f7f6 ff41 	bl	8002c86 <_read>
 800be04:	1c43      	adds	r3, r0, #1
 800be06:	d102      	bne.n	800be0e <_read_r+0x1e>
 800be08:	682b      	ldr	r3, [r5, #0]
 800be0a:	b103      	cbz	r3, 800be0e <_read_r+0x1e>
 800be0c:	6023      	str	r3, [r4, #0]
 800be0e:	bd38      	pop	{r3, r4, r5, pc}
 800be10:	200007bc 	.word	0x200007bc

0800be14 <_sbrk_r>:
 800be14:	b538      	push	{r3, r4, r5, lr}
 800be16:	2300      	movs	r3, #0
 800be18:	4d05      	ldr	r5, [pc, #20]	@ (800be30 <_sbrk_r+0x1c>)
 800be1a:	4604      	mov	r4, r0
 800be1c:	4608      	mov	r0, r1
 800be1e:	602b      	str	r3, [r5, #0]
 800be20:	f7f6 ff9e 	bl	8002d60 <_sbrk>
 800be24:	1c43      	adds	r3, r0, #1
 800be26:	d102      	bne.n	800be2e <_sbrk_r+0x1a>
 800be28:	682b      	ldr	r3, [r5, #0]
 800be2a:	b103      	cbz	r3, 800be2e <_sbrk_r+0x1a>
 800be2c:	6023      	str	r3, [r4, #0]
 800be2e:	bd38      	pop	{r3, r4, r5, pc}
 800be30:	200007bc 	.word	0x200007bc

0800be34 <_write_r>:
 800be34:	b538      	push	{r3, r4, r5, lr}
 800be36:	4604      	mov	r4, r0
 800be38:	4d06      	ldr	r5, [pc, #24]	@ (800be54 <_write_r+0x20>)
 800be3a:	4608      	mov	r0, r1
 800be3c:	4611      	mov	r1, r2
 800be3e:	2200      	movs	r2, #0
 800be40:	602a      	str	r2, [r5, #0]
 800be42:	461a      	mov	r2, r3
 800be44:	f7f6 ff3c 	bl	8002cc0 <_write>
 800be48:	1c43      	adds	r3, r0, #1
 800be4a:	d102      	bne.n	800be52 <_write_r+0x1e>
 800be4c:	682b      	ldr	r3, [r5, #0]
 800be4e:	b103      	cbz	r3, 800be52 <_write_r+0x1e>
 800be50:	6023      	str	r3, [r4, #0]
 800be52:	bd38      	pop	{r3, r4, r5, pc}
 800be54:	200007bc 	.word	0x200007bc

0800be58 <_close_r>:
 800be58:	b538      	push	{r3, r4, r5, lr}
 800be5a:	2300      	movs	r3, #0
 800be5c:	4d05      	ldr	r5, [pc, #20]	@ (800be74 <_close_r+0x1c>)
 800be5e:	4604      	mov	r4, r0
 800be60:	4608      	mov	r0, r1
 800be62:	602b      	str	r3, [r5, #0]
 800be64:	f7f6 ff48 	bl	8002cf8 <_close>
 800be68:	1c43      	adds	r3, r0, #1
 800be6a:	d102      	bne.n	800be72 <_close_r+0x1a>
 800be6c:	682b      	ldr	r3, [r5, #0]
 800be6e:	b103      	cbz	r3, 800be72 <_close_r+0x1a>
 800be70:	6023      	str	r3, [r4, #0]
 800be72:	bd38      	pop	{r3, r4, r5, pc}
 800be74:	200007bc 	.word	0x200007bc

0800be78 <_fstat_r>:
 800be78:	b538      	push	{r3, r4, r5, lr}
 800be7a:	2300      	movs	r3, #0
 800be7c:	4d06      	ldr	r5, [pc, #24]	@ (800be98 <_fstat_r+0x20>)
 800be7e:	4604      	mov	r4, r0
 800be80:	4608      	mov	r0, r1
 800be82:	4611      	mov	r1, r2
 800be84:	602b      	str	r3, [r5, #0]
 800be86:	f7f6 ff43 	bl	8002d10 <_fstat>
 800be8a:	1c43      	adds	r3, r0, #1
 800be8c:	d102      	bne.n	800be94 <_fstat_r+0x1c>
 800be8e:	682b      	ldr	r3, [r5, #0]
 800be90:	b103      	cbz	r3, 800be94 <_fstat_r+0x1c>
 800be92:	6023      	str	r3, [r4, #0]
 800be94:	bd38      	pop	{r3, r4, r5, pc}
 800be96:	bf00      	nop
 800be98:	200007bc 	.word	0x200007bc

0800be9c <__assert_func>:
 800be9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800be9e:	4614      	mov	r4, r2
 800bea0:	461a      	mov	r2, r3
 800bea2:	4b09      	ldr	r3, [pc, #36]	@ (800bec8 <__assert_func+0x2c>)
 800bea4:	4605      	mov	r5, r0
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	68d8      	ldr	r0, [r3, #12]
 800beaa:	b14c      	cbz	r4, 800bec0 <__assert_func+0x24>
 800beac:	4b07      	ldr	r3, [pc, #28]	@ (800becc <__assert_func+0x30>)
 800beae:	9100      	str	r1, [sp, #0]
 800beb0:	4907      	ldr	r1, [pc, #28]	@ (800bed0 <__assert_func+0x34>)
 800beb2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800beb6:	462b      	mov	r3, r5
 800beb8:	f000 f886 	bl	800bfc8 <fiprintf>
 800bebc:	f000 f8a3 	bl	800c006 <abort>
 800bec0:	4b04      	ldr	r3, [pc, #16]	@ (800bed4 <__assert_func+0x38>)
 800bec2:	461c      	mov	r4, r3
 800bec4:	e7f3      	b.n	800beae <__assert_func+0x12>
 800bec6:	bf00      	nop
 800bec8:	2000002c 	.word	0x2000002c
 800becc:	08023385 	.word	0x08023385
 800bed0:	08023392 	.word	0x08023392
 800bed4:	080233c0 	.word	0x080233c0

0800bed8 <_calloc_r>:
 800bed8:	b570      	push	{r4, r5, r6, lr}
 800beda:	fba1 5402 	umull	r5, r4, r1, r2
 800bede:	b934      	cbnz	r4, 800beee <_calloc_r+0x16>
 800bee0:	4629      	mov	r1, r5
 800bee2:	f7ff f927 	bl	800b134 <_malloc_r>
 800bee6:	4606      	mov	r6, r0
 800bee8:	b928      	cbnz	r0, 800bef6 <_calloc_r+0x1e>
 800beea:	4630      	mov	r0, r6
 800beec:	bd70      	pop	{r4, r5, r6, pc}
 800beee:	220c      	movs	r2, #12
 800bef0:	2600      	movs	r6, #0
 800bef2:	6002      	str	r2, [r0, #0]
 800bef4:	e7f9      	b.n	800beea <_calloc_r+0x12>
 800bef6:	462a      	mov	r2, r5
 800bef8:	4621      	mov	r1, r4
 800befa:	f7fd ffa3 	bl	8009e44 <memset>
 800befe:	e7f4      	b.n	800beea <_calloc_r+0x12>

0800bf00 <_free_r>:
 800bf00:	b538      	push	{r3, r4, r5, lr}
 800bf02:	4605      	mov	r5, r0
 800bf04:	2900      	cmp	r1, #0
 800bf06:	d041      	beq.n	800bf8c <_free_r+0x8c>
 800bf08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf0c:	1f0c      	subs	r4, r1, #4
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	bfb8      	it	lt
 800bf12:	18e4      	addlt	r4, r4, r3
 800bf14:	f7ff fa3a 	bl	800b38c <__malloc_lock>
 800bf18:	4a1d      	ldr	r2, [pc, #116]	@ (800bf90 <_free_r+0x90>)
 800bf1a:	6813      	ldr	r3, [r2, #0]
 800bf1c:	b933      	cbnz	r3, 800bf2c <_free_r+0x2c>
 800bf1e:	6063      	str	r3, [r4, #4]
 800bf20:	6014      	str	r4, [r2, #0]
 800bf22:	4628      	mov	r0, r5
 800bf24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf28:	f7ff ba36 	b.w	800b398 <__malloc_unlock>
 800bf2c:	42a3      	cmp	r3, r4
 800bf2e:	d908      	bls.n	800bf42 <_free_r+0x42>
 800bf30:	6820      	ldr	r0, [r4, #0]
 800bf32:	1821      	adds	r1, r4, r0
 800bf34:	428b      	cmp	r3, r1
 800bf36:	bf01      	itttt	eq
 800bf38:	6819      	ldreq	r1, [r3, #0]
 800bf3a:	685b      	ldreq	r3, [r3, #4]
 800bf3c:	1809      	addeq	r1, r1, r0
 800bf3e:	6021      	streq	r1, [r4, #0]
 800bf40:	e7ed      	b.n	800bf1e <_free_r+0x1e>
 800bf42:	461a      	mov	r2, r3
 800bf44:	685b      	ldr	r3, [r3, #4]
 800bf46:	b10b      	cbz	r3, 800bf4c <_free_r+0x4c>
 800bf48:	42a3      	cmp	r3, r4
 800bf4a:	d9fa      	bls.n	800bf42 <_free_r+0x42>
 800bf4c:	6811      	ldr	r1, [r2, #0]
 800bf4e:	1850      	adds	r0, r2, r1
 800bf50:	42a0      	cmp	r0, r4
 800bf52:	d10b      	bne.n	800bf6c <_free_r+0x6c>
 800bf54:	6820      	ldr	r0, [r4, #0]
 800bf56:	4401      	add	r1, r0
 800bf58:	1850      	adds	r0, r2, r1
 800bf5a:	6011      	str	r1, [r2, #0]
 800bf5c:	4283      	cmp	r3, r0
 800bf5e:	d1e0      	bne.n	800bf22 <_free_r+0x22>
 800bf60:	6818      	ldr	r0, [r3, #0]
 800bf62:	685b      	ldr	r3, [r3, #4]
 800bf64:	4408      	add	r0, r1
 800bf66:	6053      	str	r3, [r2, #4]
 800bf68:	6010      	str	r0, [r2, #0]
 800bf6a:	e7da      	b.n	800bf22 <_free_r+0x22>
 800bf6c:	d902      	bls.n	800bf74 <_free_r+0x74>
 800bf6e:	230c      	movs	r3, #12
 800bf70:	602b      	str	r3, [r5, #0]
 800bf72:	e7d6      	b.n	800bf22 <_free_r+0x22>
 800bf74:	6820      	ldr	r0, [r4, #0]
 800bf76:	1821      	adds	r1, r4, r0
 800bf78:	428b      	cmp	r3, r1
 800bf7a:	bf02      	ittt	eq
 800bf7c:	6819      	ldreq	r1, [r3, #0]
 800bf7e:	685b      	ldreq	r3, [r3, #4]
 800bf80:	1809      	addeq	r1, r1, r0
 800bf82:	6063      	str	r3, [r4, #4]
 800bf84:	bf08      	it	eq
 800bf86:	6021      	streq	r1, [r4, #0]
 800bf88:	6054      	str	r4, [r2, #4]
 800bf8a:	e7ca      	b.n	800bf22 <_free_r+0x22>
 800bf8c:	bd38      	pop	{r3, r4, r5, pc}
 800bf8e:	bf00      	nop
 800bf90:	200007b8 	.word	0x200007b8

0800bf94 <__ascii_mbtowc>:
 800bf94:	b082      	sub	sp, #8
 800bf96:	b901      	cbnz	r1, 800bf9a <__ascii_mbtowc+0x6>
 800bf98:	a901      	add	r1, sp, #4
 800bf9a:	b142      	cbz	r2, 800bfae <__ascii_mbtowc+0x1a>
 800bf9c:	b14b      	cbz	r3, 800bfb2 <__ascii_mbtowc+0x1e>
 800bf9e:	7813      	ldrb	r3, [r2, #0]
 800bfa0:	600b      	str	r3, [r1, #0]
 800bfa2:	7812      	ldrb	r2, [r2, #0]
 800bfa4:	1e10      	subs	r0, r2, #0
 800bfa6:	bf18      	it	ne
 800bfa8:	2001      	movne	r0, #1
 800bfaa:	b002      	add	sp, #8
 800bfac:	4770      	bx	lr
 800bfae:	4610      	mov	r0, r2
 800bfb0:	e7fb      	b.n	800bfaa <__ascii_mbtowc+0x16>
 800bfb2:	f06f 0001 	mvn.w	r0, #1
 800bfb6:	e7f8      	b.n	800bfaa <__ascii_mbtowc+0x16>

0800bfb8 <_malloc_usable_size_r>:
 800bfb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bfbc:	1f18      	subs	r0, r3, #4
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	bfbc      	itt	lt
 800bfc2:	580b      	ldrlt	r3, [r1, r0]
 800bfc4:	18c0      	addlt	r0, r0, r3
 800bfc6:	4770      	bx	lr

0800bfc8 <fiprintf>:
 800bfc8:	b40e      	push	{r1, r2, r3}
 800bfca:	b503      	push	{r0, r1, lr}
 800bfcc:	ab03      	add	r3, sp, #12
 800bfce:	4601      	mov	r1, r0
 800bfd0:	4805      	ldr	r0, [pc, #20]	@ (800bfe8 <fiprintf+0x20>)
 800bfd2:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfd6:	6800      	ldr	r0, [r0, #0]
 800bfd8:	9301      	str	r3, [sp, #4]
 800bfda:	f7fe ff69 	bl	800aeb0 <_vfiprintf_r>
 800bfde:	b002      	add	sp, #8
 800bfe0:	f85d eb04 	ldr.w	lr, [sp], #4
 800bfe4:	b003      	add	sp, #12
 800bfe6:	4770      	bx	lr
 800bfe8:	2000002c 	.word	0x2000002c

0800bfec <__ascii_wctomb>:
 800bfec:	4603      	mov	r3, r0
 800bfee:	4608      	mov	r0, r1
 800bff0:	b141      	cbz	r1, 800c004 <__ascii_wctomb+0x18>
 800bff2:	2aff      	cmp	r2, #255	@ 0xff
 800bff4:	d904      	bls.n	800c000 <__ascii_wctomb+0x14>
 800bff6:	228a      	movs	r2, #138	@ 0x8a
 800bff8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bffc:	601a      	str	r2, [r3, #0]
 800bffe:	4770      	bx	lr
 800c000:	2001      	movs	r0, #1
 800c002:	700a      	strb	r2, [r1, #0]
 800c004:	4770      	bx	lr

0800c006 <abort>:
 800c006:	2006      	movs	r0, #6
 800c008:	b508      	push	{r3, lr}
 800c00a:	f000 f82b 	bl	800c064 <raise>
 800c00e:	2001      	movs	r0, #1
 800c010:	f7f6 fe2e 	bl	8002c70 <_exit>

0800c014 <_raise_r>:
 800c014:	291f      	cmp	r1, #31
 800c016:	b538      	push	{r3, r4, r5, lr}
 800c018:	4605      	mov	r5, r0
 800c01a:	460c      	mov	r4, r1
 800c01c:	d904      	bls.n	800c028 <_raise_r+0x14>
 800c01e:	2316      	movs	r3, #22
 800c020:	6003      	str	r3, [r0, #0]
 800c022:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c026:	bd38      	pop	{r3, r4, r5, pc}
 800c028:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c02a:	b112      	cbz	r2, 800c032 <_raise_r+0x1e>
 800c02c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c030:	b94b      	cbnz	r3, 800c046 <_raise_r+0x32>
 800c032:	4628      	mov	r0, r5
 800c034:	f000 f830 	bl	800c098 <_getpid_r>
 800c038:	4622      	mov	r2, r4
 800c03a:	4601      	mov	r1, r0
 800c03c:	4628      	mov	r0, r5
 800c03e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c042:	f000 b817 	b.w	800c074 <_kill_r>
 800c046:	2b01      	cmp	r3, #1
 800c048:	d00a      	beq.n	800c060 <_raise_r+0x4c>
 800c04a:	1c59      	adds	r1, r3, #1
 800c04c:	d103      	bne.n	800c056 <_raise_r+0x42>
 800c04e:	2316      	movs	r3, #22
 800c050:	6003      	str	r3, [r0, #0]
 800c052:	2001      	movs	r0, #1
 800c054:	e7e7      	b.n	800c026 <_raise_r+0x12>
 800c056:	2100      	movs	r1, #0
 800c058:	4620      	mov	r0, r4
 800c05a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c05e:	4798      	blx	r3
 800c060:	2000      	movs	r0, #0
 800c062:	e7e0      	b.n	800c026 <_raise_r+0x12>

0800c064 <raise>:
 800c064:	4b02      	ldr	r3, [pc, #8]	@ (800c070 <raise+0xc>)
 800c066:	4601      	mov	r1, r0
 800c068:	6818      	ldr	r0, [r3, #0]
 800c06a:	f7ff bfd3 	b.w	800c014 <_raise_r>
 800c06e:	bf00      	nop
 800c070:	2000002c 	.word	0x2000002c

0800c074 <_kill_r>:
 800c074:	b538      	push	{r3, r4, r5, lr}
 800c076:	2300      	movs	r3, #0
 800c078:	4d06      	ldr	r5, [pc, #24]	@ (800c094 <_kill_r+0x20>)
 800c07a:	4604      	mov	r4, r0
 800c07c:	4608      	mov	r0, r1
 800c07e:	4611      	mov	r1, r2
 800c080:	602b      	str	r3, [r5, #0]
 800c082:	f7f6 fde5 	bl	8002c50 <_kill>
 800c086:	1c43      	adds	r3, r0, #1
 800c088:	d102      	bne.n	800c090 <_kill_r+0x1c>
 800c08a:	682b      	ldr	r3, [r5, #0]
 800c08c:	b103      	cbz	r3, 800c090 <_kill_r+0x1c>
 800c08e:	6023      	str	r3, [r4, #0]
 800c090:	bd38      	pop	{r3, r4, r5, pc}
 800c092:	bf00      	nop
 800c094:	200007bc 	.word	0x200007bc

0800c098 <_getpid_r>:
 800c098:	f7f6 bdd2 	b.w	8002c40 <_getpid>

0800c09c <_init>:
 800c09c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c09e:	bf00      	nop
 800c0a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0a2:	bc08      	pop	{r3}
 800c0a4:	469e      	mov	lr, r3
 800c0a6:	4770      	bx	lr

0800c0a8 <_fini>:
 800c0a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0aa:	bf00      	nop
 800c0ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0ae:	bc08      	pop	{r3}
 800c0b0:	469e      	mov	lr, r3
 800c0b2:	4770      	bx	lr
